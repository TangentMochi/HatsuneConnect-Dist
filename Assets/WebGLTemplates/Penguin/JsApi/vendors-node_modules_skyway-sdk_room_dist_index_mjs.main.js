"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkpack_system"] = self["webpackChunkpack_system"] || []).push([["vendors-node_modules_skyway-sdk_room_dist_index_mjs"],{

/***/ "./node_modules/@skyway-sdk/room/dist/index.mjs":
/*!******************************************************!*\
  !*** ./node_modules/@skyway-sdk/room/dist/index.mjs ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AppActions: () => (/* binding */ AppActions),\n/* harmony export */   BackOff: () => (/* binding */ BackOff),\n/* harmony export */   ChannelActions: () => (/* binding */ ChannelActions),\n/* harmony export */   ContextConfig: () => (/* binding */ ContextConfig),\n/* harmony export */   Event: () => (/* binding */ Event),\n/* harmony export */   EventDisposer: () => (/* binding */ EventDisposer),\n/* harmony export */   Events: () => (/* binding */ Events),\n/* harmony export */   ForwardingActions: () => (/* binding */ ForwardingActions),\n/* harmony export */   HttpClient: () => (/* binding */ HttpClient),\n/* harmony export */   LocalAudioStream: () => (/* binding */ LocalAudioStream),\n/* harmony export */   LocalDataStream: () => (/* binding */ LocalDataStream),\n/* harmony export */   LocalMediaStreamBase: () => (/* binding */ LocalMediaStreamBase),\n/* harmony export */   LocalP2PRoomMemberImpl: () => (/* binding */ LocalP2PRoomMemberImpl),\n/* harmony export */   LocalRoomMemberImpl: () => (/* binding */ LocalRoomMemberImpl),\n/* harmony export */   LocalSFURoomMemberImpl: () => (/* binding */ LocalSFURoomMemberImpl),\n/* harmony export */   LocalStreamBase: () => (/* binding */ LocalStreamBase),\n/* harmony export */   LocalVideoStream: () => (/* binding */ LocalVideoStream),\n/* harmony export */   Logger: () => (/* binding */ Logger),\n/* harmony export */   MediaDevice: () => (/* binding */ MediaDevice),\n/* harmony export */   MemberActions: () => (/* binding */ MemberActions),\n/* harmony export */   P2PRoomImpl: () => (/* binding */ P2PRoomImpl),\n/* harmony export */   PACKAGE_VERSION: () => (/* binding */ PACKAGE_VERSION4),\n/* harmony export */   PromiseQueue: () => (/* binding */ PromiseQueue),\n/* harmony export */   PublicationActions: () => (/* binding */ PublicationActions),\n/* harmony export */   RemoteAudioStream: () => (/* binding */ RemoteAudioStream),\n/* harmony export */   RemoteDataStream: () => (/* binding */ RemoteDataStream),\n/* harmony export */   RemoteMediaStreamBase: () => (/* binding */ RemoteMediaStreamBase),\n/* harmony export */   RemoteRoomMemberImpl: () => (/* binding */ RemoteRoomMemberImpl),\n/* harmony export */   RemoteStreamBase: () => (/* binding */ RemoteStreamBase),\n/* harmony export */   RemoteVideoStream: () => (/* binding */ RemoteVideoStream),\n/* harmony export */   RoomImpl: () => (/* binding */ RoomImpl),\n/* harmony export */   RoomMemberImpl: () => (/* binding */ RoomMemberImpl),\n/* harmony export */   RoomPublicationImpl: () => (/* binding */ RoomPublicationImpl),\n/* harmony export */   RoomSubscriptionImpl: () => (/* binding */ RoomSubscriptionImpl),\n/* harmony export */   SfuBotActions: () => (/* binding */ SfuBotActions),\n/* harmony export */   SfuRoomImpl: () => (/* binding */ SfuRoomImpl),\n/* harmony export */   SfuSubscriptionActions: () => (/* binding */ SfuSubscriptionActions),\n/* harmony export */   SkyWayAuthToken: () => (/* binding */ SkyWayAuthToken),\n/* harmony export */   SkyWayContext: () => (/* binding */ SkyWayContext),\n/* harmony export */   SkyWayError: () => (/* binding */ SkyWayError),\n/* harmony export */   SkyWayRoom: () => (/* binding */ SkyWayRoom),\n/* harmony export */   SkyWayStreamFactory: () => (/* binding */ SkyWayStreamFactory),\n/* harmony export */   StreamFactory: () => (/* binding */ StreamFactory),\n/* harmony export */   SubscriptionActions: () => (/* binding */ SubscriptionActions),\n/* harmony export */   createTestVideoTrack: () => (/* binding */ createTestVideoTrack),\n/* harmony export */   deepCopy: () => (/* binding */ deepCopy),\n/* harmony export */   errors: () => (/* binding */ errors4),\n/* harmony export */   getBitrateFromPeerConnection: () => (/* binding */ getBitrateFromPeerConnection),\n/* harmony export */   logLevelTypes: () => (/* binding */ logLevelTypes),\n/* harmony export */   nowInSec: () => (/* binding */ nowInSec),\n/* harmony export */   roomTypes: () => (/* binding */ roomTypes),\n/* harmony export */   tokenErrors: () => (/* binding */ tokenErrors),\n/* harmony export */   uuidV4: () => (/* binding */ uuidV4)\n/* harmony export */ });\nvar __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __pow = Math.pow;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {}))\n    if (__hasOwnProp.call(b, prop))\n      __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(b)) {\n      if (__propIsEnum.call(b, prop))\n        __defNormalProp(a, prop, b[prop]);\n    }\n  return a;\n};\nvar __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));\nvar __esm = (fn, res) => function __init() {\n  return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;\n};\nvar __commonJS = (cb, mod) => function __require() {\n  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(\n  isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", { value: mod, enumerable: true }) : target,\n  mod\n));\nvar __async = (__this, __arguments, generator) => {\n  return new Promise((resolve, reject) => {\n    var fulfilled = (value) => {\n      try {\n        step(generator.next(value));\n      } catch (e2) {\n        reject(e2);\n      }\n    };\n    var rejected = (value) => {\n      try {\n        step(generator.throw(value));\n      } catch (e2) {\n        reject(e2);\n      }\n    };\n    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);\n    step((generator = generator.apply(__this, __arguments)).next());\n  });\n};\n\n// shims/process.js\nvar process;\nvar init_process = __esm({\n  \"shims/process.js\"() {\n    \"use strict\";\n    process = void 0;\n  }\n});\n\n// ../common/node_modules/axios/lib/helpers/bind.js\nvar require_bind = __commonJS({\n  \"../common/node_modules/axios/lib/helpers/bind.js\"(exports, module) {\n    \"use strict\";\n    init_process();\n    module.exports = function bind(fn, thisArg) {\n      return function wrap() {\n        var args = new Array(arguments.length);\n        for (var i = 0; i < args.length; i++) {\n          args[i] = arguments[i];\n        }\n        return fn.apply(thisArg, args);\n      };\n    };\n  }\n});\n\n// ../common/node_modules/axios/lib/utils.js\nvar require_utils = __commonJS({\n  \"../common/node_modules/axios/lib/utils.js\"(exports, module) {\n    \"use strict\";\n    init_process();\n    var bind = require_bind();\n    var toString = Object.prototype.toString;\n    function isArray(val) {\n      return toString.call(val) === \"[object Array]\";\n    }\n    function isUndefined(val) {\n      return typeof val === \"undefined\";\n    }\n    function isBuffer(val) {\n      return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor) && typeof val.constructor.isBuffer === \"function\" && val.constructor.isBuffer(val);\n    }\n    function isArrayBuffer(val) {\n      return toString.call(val) === \"[object ArrayBuffer]\";\n    }\n    function isFormData(val) {\n      return typeof FormData !== \"undefined\" && val instanceof FormData;\n    }\n    function isArrayBufferView(val) {\n      var result2;\n      if (typeof ArrayBuffer !== \"undefined\" && ArrayBuffer.isView) {\n        result2 = ArrayBuffer.isView(val);\n      } else {\n        result2 = val && val.buffer && val.buffer instanceof ArrayBuffer;\n      }\n      return result2;\n    }\n    function isString(val) {\n      return typeof val === \"string\";\n    }\n    function isNumber(val) {\n      return typeof val === \"number\";\n    }\n    function isObject(val) {\n      return val !== null && typeof val === \"object\";\n    }\n    function isPlainObject(val) {\n      if (toString.call(val) !== \"[object Object]\") {\n        return false;\n      }\n      var prototype = Object.getPrototypeOf(val);\n      return prototype === null || prototype === Object.prototype;\n    }\n    function isDate(val) {\n      return toString.call(val) === \"[object Date]\";\n    }\n    function isFile(val) {\n      return toString.call(val) === \"[object File]\";\n    }\n    function isBlob(val) {\n      return toString.call(val) === \"[object Blob]\";\n    }\n    function isFunction(val) {\n      return toString.call(val) === \"[object Function]\";\n    }\n    function isStream(val) {\n      return isObject(val) && isFunction(val.pipe);\n    }\n    function isURLSearchParams(val) {\n      return typeof URLSearchParams !== \"undefined\" && val instanceof URLSearchParams;\n    }\n    function trim(str) {\n      return str.trim ? str.trim() : str.replace(/^\\s+|\\s+$/g, \"\");\n    }\n    function isStandardBrowserEnv() {\n      if (typeof navigator !== \"undefined\" && (navigator.product === \"ReactNative\" || navigator.product === \"NativeScript\" || navigator.product === \"NS\")) {\n        return false;\n      }\n      return typeof window !== \"undefined\" && typeof document !== \"undefined\";\n    }\n    function forEach(obj, fn) {\n      if (obj === null || typeof obj === \"undefined\") {\n        return;\n      }\n      if (typeof obj !== \"object\") {\n        obj = [obj];\n      }\n      if (isArray(obj)) {\n        for (var i = 0, l = obj.length; i < l; i++) {\n          fn.call(null, obj[i], i, obj);\n        }\n      } else {\n        for (var key in obj) {\n          if (Object.prototype.hasOwnProperty.call(obj, key)) {\n            fn.call(null, obj[key], key, obj);\n          }\n        }\n      }\n    }\n    function merge() {\n      var result2 = {};\n      function assignValue(val, key) {\n        if (isPlainObject(result2[key]) && isPlainObject(val)) {\n          result2[key] = merge(result2[key], val);\n        } else if (isPlainObject(val)) {\n          result2[key] = merge({}, val);\n        } else if (isArray(val)) {\n          result2[key] = val.slice();\n        } else {\n          result2[key] = val;\n        }\n      }\n      for (var i = 0, l = arguments.length; i < l; i++) {\n        forEach(arguments[i], assignValue);\n      }\n      return result2;\n    }\n    function extend(a, b, thisArg) {\n      forEach(b, function assignValue(val, key) {\n        if (thisArg && typeof val === \"function\") {\n          a[key] = bind(val, thisArg);\n        } else {\n          a[key] = val;\n        }\n      });\n      return a;\n    }\n    function stripBOM(content) {\n      if (content.charCodeAt(0) === 65279) {\n        content = content.slice(1);\n      }\n      return content;\n    }\n    module.exports = {\n      isArray,\n      isArrayBuffer,\n      isBuffer,\n      isFormData,\n      isArrayBufferView,\n      isString,\n      isNumber,\n      isObject,\n      isPlainObject,\n      isUndefined,\n      isDate,\n      isFile,\n      isBlob,\n      isFunction,\n      isStream,\n      isURLSearchParams,\n      isStandardBrowserEnv,\n      forEach,\n      merge,\n      extend,\n      trim,\n      stripBOM\n    };\n  }\n});\n\n// ../common/node_modules/axios/lib/helpers/buildURL.js\nvar require_buildURL = __commonJS({\n  \"../common/node_modules/axios/lib/helpers/buildURL.js\"(exports, module) {\n    \"use strict\";\n    init_process();\n    var utils = require_utils();\n    function encode(val) {\n      return encodeURIComponent(val).replace(/%3A/gi, \":\").replace(/%24/g, \"$\").replace(/%2C/gi, \",\").replace(/%20/g, \"+\").replace(/%5B/gi, \"[\").replace(/%5D/gi, \"]\");\n    }\n    module.exports = function buildURL(url, params, paramsSerializer) {\n      if (!params) {\n        return url;\n      }\n      var serializedParams;\n      if (paramsSerializer) {\n        serializedParams = paramsSerializer(params);\n      } else if (utils.isURLSearchParams(params)) {\n        serializedParams = params.toString();\n      } else {\n        var parts = [];\n        utils.forEach(params, function serialize(val, key) {\n          if (val === null || typeof val === \"undefined\") {\n            return;\n          }\n          if (utils.isArray(val)) {\n            key = key + \"[]\";\n          } else {\n            val = [val];\n          }\n          utils.forEach(val, function parseValue(v) {\n            if (utils.isDate(v)) {\n              v = v.toISOString();\n            } else if (utils.isObject(v)) {\n              v = JSON.stringify(v);\n            }\n            parts.push(encode(key) + \"=\" + encode(v));\n          });\n        });\n        serializedParams = parts.join(\"&\");\n      }\n      if (serializedParams) {\n        var hashmarkIndex = url.indexOf(\"#\");\n        if (hashmarkIndex !== -1) {\n          url = url.slice(0, hashmarkIndex);\n        }\n        url += (url.indexOf(\"?\") === -1 ? \"?\" : \"&\") + serializedParams;\n      }\n      return url;\n    };\n  }\n});\n\n// ../common/node_modules/axios/lib/core/InterceptorManager.js\nvar require_InterceptorManager = __commonJS({\n  \"../common/node_modules/axios/lib/core/InterceptorManager.js\"(exports, module) {\n    \"use strict\";\n    init_process();\n    var utils = require_utils();\n    function InterceptorManager() {\n      this.handlers = [];\n    }\n    InterceptorManager.prototype.use = function use(fulfilled, rejected, options) {\n      this.handlers.push({\n        fulfilled,\n        rejected,\n        synchronous: options ? options.synchronous : false,\n        runWhen: options ? options.runWhen : null\n      });\n      return this.handlers.length - 1;\n    };\n    InterceptorManager.prototype.eject = function eject(id) {\n      if (this.handlers[id]) {\n        this.handlers[id] = null;\n      }\n    };\n    InterceptorManager.prototype.forEach = function forEach(fn) {\n      utils.forEach(this.handlers, function forEachHandler(h) {\n        if (h !== null) {\n          fn(h);\n        }\n      });\n    };\n    module.exports = InterceptorManager;\n  }\n});\n\n// ../common/node_modules/axios/lib/helpers/normalizeHeaderName.js\nvar require_normalizeHeaderName = __commonJS({\n  \"../common/node_modules/axios/lib/helpers/normalizeHeaderName.js\"(exports, module) {\n    \"use strict\";\n    init_process();\n    var utils = require_utils();\n    module.exports = function normalizeHeaderName(headers, normalizedName) {\n      utils.forEach(headers, function processHeader(value, name) {\n        if (name !== normalizedName && name.toUpperCase() === normalizedName.toUpperCase()) {\n          headers[normalizedName] = value;\n          delete headers[name];\n        }\n      });\n    };\n  }\n});\n\n// ../common/node_modules/axios/lib/core/enhanceError.js\nvar require_enhanceError = __commonJS({\n  \"../common/node_modules/axios/lib/core/enhanceError.js\"(exports, module) {\n    \"use strict\";\n    init_process();\n    module.exports = function enhanceError(error, config, code, request, response) {\n      error.config = config;\n      if (code) {\n        error.code = code;\n      }\n      error.request = request;\n      error.response = response;\n      error.isAxiosError = true;\n      error.toJSON = function toJSON() {\n        return {\n          message: this.message,\n          name: this.name,\n          description: this.description,\n          number: this.number,\n          fileName: this.fileName,\n          lineNumber: this.lineNumber,\n          columnNumber: this.columnNumber,\n          stack: this.stack,\n          config: this.config,\n          code: this.code,\n          status: this.response && this.response.status ? this.response.status : null\n        };\n      };\n      return error;\n    };\n  }\n});\n\n// ../common/node_modules/axios/lib/core/createError.js\nvar require_createError = __commonJS({\n  \"../common/node_modules/axios/lib/core/createError.js\"(exports, module) {\n    \"use strict\";\n    init_process();\n    var enhanceError = require_enhanceError();\n    module.exports = function createError6(message, config, code, request, response) {\n      var error = new Error(message);\n      return enhanceError(error, config, code, request, response);\n    };\n  }\n});\n\n// ../common/node_modules/axios/lib/core/settle.js\nvar require_settle = __commonJS({\n  \"../common/node_modules/axios/lib/core/settle.js\"(exports, module) {\n    \"use strict\";\n    init_process();\n    var createError6 = require_createError();\n    module.exports = function settle(resolve, reject, response) {\n      var validateStatus = response.config.validateStatus;\n      if (!response.status || !validateStatus || validateStatus(response.status)) {\n        resolve(response);\n      } else {\n        reject(createError6(\n          \"Request failed with status code \" + response.status,\n          response.config,\n          null,\n          response.request,\n          response\n        ));\n      }\n    };\n  }\n});\n\n// ../common/node_modules/axios/lib/helpers/cookies.js\nvar require_cookies = __commonJS({\n  \"../common/node_modules/axios/lib/helpers/cookies.js\"(exports, module) {\n    \"use strict\";\n    init_process();\n    var utils = require_utils();\n    module.exports = utils.isStandardBrowserEnv() ? function standardBrowserEnv() {\n      return {\n        write: function write3(name, value, expires, path2, domain, secure) {\n          var cookie = [];\n          cookie.push(name + \"=\" + encodeURIComponent(value));\n          if (utils.isNumber(expires)) {\n            cookie.push(\"expires=\" + new Date(expires).toGMTString());\n          }\n          if (utils.isString(path2)) {\n            cookie.push(\"path=\" + path2);\n          }\n          if (utils.isString(domain)) {\n            cookie.push(\"domain=\" + domain);\n          }\n          if (secure === true) {\n            cookie.push(\"secure\");\n          }\n          document.cookie = cookie.join(\"; \");\n        },\n        read: function read(name) {\n          var match = document.cookie.match(new RegExp(\"(^|;\\\\s*)(\" + name + \")=([^;]*)\"));\n          return match ? decodeURIComponent(match[3]) : null;\n        },\n        remove: function remove(name) {\n          this.write(name, \"\", Date.now() - 864e5);\n        }\n      };\n    }() : function nonStandardBrowserEnv() {\n      return {\n        write: function write3() {\n        },\n        read: function read() {\n          return null;\n        },\n        remove: function remove() {\n        }\n      };\n    }();\n  }\n});\n\n// ../common/node_modules/axios/lib/helpers/isAbsoluteURL.js\nvar require_isAbsoluteURL = __commonJS({\n  \"../common/node_modules/axios/lib/helpers/isAbsoluteURL.js\"(exports, module) {\n    \"use strict\";\n    init_process();\n    module.exports = function isAbsoluteURL(url) {\n      return /^([a-z][a-z\\d\\+\\-\\.]*:)?\\/\\//i.test(url);\n    };\n  }\n});\n\n// ../common/node_modules/axios/lib/helpers/combineURLs.js\nvar require_combineURLs = __commonJS({\n  \"../common/node_modules/axios/lib/helpers/combineURLs.js\"(exports, module) {\n    \"use strict\";\n    init_process();\n    module.exports = function combineURLs(baseURL, relativeURL) {\n      return relativeURL ? baseURL.replace(/\\/+$/, \"\") + \"/\" + relativeURL.replace(/^\\/+/, \"\") : baseURL;\n    };\n  }\n});\n\n// ../common/node_modules/axios/lib/core/buildFullPath.js\nvar require_buildFullPath = __commonJS({\n  \"../common/node_modules/axios/lib/core/buildFullPath.js\"(exports, module) {\n    \"use strict\";\n    init_process();\n    var isAbsoluteURL = require_isAbsoluteURL();\n    var combineURLs = require_combineURLs();\n    module.exports = function buildFullPath(baseURL, requestedURL) {\n      if (baseURL && !isAbsoluteURL(requestedURL)) {\n        return combineURLs(baseURL, requestedURL);\n      }\n      return requestedURL;\n    };\n  }\n});\n\n// ../common/node_modules/axios/lib/helpers/parseHeaders.js\nvar require_parseHeaders = __commonJS({\n  \"../common/node_modules/axios/lib/helpers/parseHeaders.js\"(exports, module) {\n    \"use strict\";\n    init_process();\n    var utils = require_utils();\n    var ignoreDuplicateOf = [\n      \"age\",\n      \"authorization\",\n      \"content-length\",\n      \"content-type\",\n      \"etag\",\n      \"expires\",\n      \"from\",\n      \"host\",\n      \"if-modified-since\",\n      \"if-unmodified-since\",\n      \"last-modified\",\n      \"location\",\n      \"max-forwards\",\n      \"proxy-authorization\",\n      \"referer\",\n      \"retry-after\",\n      \"user-agent\"\n    ];\n    module.exports = function parseHeaders(headers) {\n      var parsed = {};\n      var key;\n      var val;\n      var i;\n      if (!headers) {\n        return parsed;\n      }\n      utils.forEach(headers.split(\"\\n\"), function parser(line) {\n        i = line.indexOf(\":\");\n        key = utils.trim(line.substr(0, i)).toLowerCase();\n        val = utils.trim(line.substr(i + 1));\n        if (key) {\n          if (parsed[key] && ignoreDuplicateOf.indexOf(key) >= 0) {\n            return;\n          }\n          if (key === \"set-cookie\") {\n            parsed[key] = (parsed[key] ? parsed[key] : []).concat([val]);\n          } else {\n            parsed[key] = parsed[key] ? parsed[key] + \", \" + val : val;\n          }\n        }\n      });\n      return parsed;\n    };\n  }\n});\n\n// ../common/node_modules/axios/lib/helpers/isURLSameOrigin.js\nvar require_isURLSameOrigin = __commonJS({\n  \"../common/node_modules/axios/lib/helpers/isURLSameOrigin.js\"(exports, module) {\n    \"use strict\";\n    init_process();\n    var utils = require_utils();\n    module.exports = utils.isStandardBrowserEnv() ? function standardBrowserEnv() {\n      var msie = /(msie|trident)/i.test(navigator.userAgent);\n      var urlParsingNode = document.createElement(\"a\");\n      var originURL;\n      function resolveURL(url) {\n        var href = url;\n        if (msie) {\n          urlParsingNode.setAttribute(\"href\", href);\n          href = urlParsingNode.href;\n        }\n        urlParsingNode.setAttribute(\"href\", href);\n        return {\n          href: urlParsingNode.href,\n          protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, \"\") : \"\",\n          host: urlParsingNode.host,\n          search: urlParsingNode.search ? urlParsingNode.search.replace(/^\\?/, \"\") : \"\",\n          hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, \"\") : \"\",\n          hostname: urlParsingNode.hostname,\n          port: urlParsingNode.port,\n          pathname: urlParsingNode.pathname.charAt(0) === \"/\" ? urlParsingNode.pathname : \"/\" + urlParsingNode.pathname\n        };\n      }\n      originURL = resolveURL(window.location.href);\n      return function isURLSameOrigin(requestURL) {\n        var parsed = utils.isString(requestURL) ? resolveURL(requestURL) : requestURL;\n        return parsed.protocol === originURL.protocol && parsed.host === originURL.host;\n      };\n    }() : function nonStandardBrowserEnv() {\n      return function isURLSameOrigin() {\n        return true;\n      };\n    }();\n  }\n});\n\n// ../common/node_modules/axios/lib/cancel/Cancel.js\nvar require_Cancel = __commonJS({\n  \"../common/node_modules/axios/lib/cancel/Cancel.js\"(exports, module) {\n    \"use strict\";\n    init_process();\n    function Cancel(message) {\n      this.message = message;\n    }\n    Cancel.prototype.toString = function toString() {\n      return \"Cancel\" + (this.message ? \": \" + this.message : \"\");\n    };\n    Cancel.prototype.__CANCEL__ = true;\n    module.exports = Cancel;\n  }\n});\n\n// ../common/node_modules/axios/lib/adapters/xhr.js\nvar require_xhr = __commonJS({\n  \"../common/node_modules/axios/lib/adapters/xhr.js\"(exports, module) {\n    \"use strict\";\n    init_process();\n    var utils = require_utils();\n    var settle = require_settle();\n    var cookies = require_cookies();\n    var buildURL = require_buildURL();\n    var buildFullPath = require_buildFullPath();\n    var parseHeaders = require_parseHeaders();\n    var isURLSameOrigin = require_isURLSameOrigin();\n    var createError6 = require_createError();\n    var defaults = require_defaults();\n    var Cancel = require_Cancel();\n    module.exports = function xhrAdapter(config) {\n      return new Promise(function dispatchXhrRequest(resolve, reject) {\n        var requestData = config.data;\n        var requestHeaders = config.headers;\n        var responseType = config.responseType;\n        var onCanceled;\n        function done() {\n          if (config.cancelToken) {\n            config.cancelToken.unsubscribe(onCanceled);\n          }\n          if (config.signal) {\n            config.signal.removeEventListener(\"abort\", onCanceled);\n          }\n        }\n        if (utils.isFormData(requestData)) {\n          delete requestHeaders[\"Content-Type\"];\n        }\n        var request = new XMLHttpRequest();\n        if (config.auth) {\n          var username = config.auth.username || \"\";\n          var password = config.auth.password ? unescape(encodeURIComponent(config.auth.password)) : \"\";\n          requestHeaders.Authorization = \"Basic \" + btoa(username + \":\" + password);\n        }\n        var fullPath = buildFullPath(config.baseURL, config.url);\n        request.open(config.method.toUpperCase(), buildURL(fullPath, config.params, config.paramsSerializer), true);\n        request.timeout = config.timeout;\n        function onloadend() {\n          if (!request) {\n            return;\n          }\n          var responseHeaders = \"getAllResponseHeaders\" in request ? parseHeaders(request.getAllResponseHeaders()) : null;\n          var responseData = !responseType || responseType === \"text\" || responseType === \"json\" ? request.responseText : request.response;\n          var response = {\n            data: responseData,\n            status: request.status,\n            statusText: request.statusText,\n            headers: responseHeaders,\n            config,\n            request\n          };\n          settle(function _resolve(value) {\n            resolve(value);\n            done();\n          }, function _reject(err) {\n            reject(err);\n            done();\n          }, response);\n          request = null;\n        }\n        if (\"onloadend\" in request) {\n          request.onloadend = onloadend;\n        } else {\n          request.onreadystatechange = function handleLoad() {\n            if (!request || request.readyState !== 4) {\n              return;\n            }\n            if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf(\"file:\") === 0)) {\n              return;\n            }\n            setTimeout(onloadend);\n          };\n        }\n        request.onabort = function handleAbort() {\n          if (!request) {\n            return;\n          }\n          reject(createError6(\"Request aborted\", config, \"ECONNABORTED\", request));\n          request = null;\n        };\n        request.onerror = function handleError() {\n          reject(createError6(\"Network Error\", config, null, request));\n          request = null;\n        };\n        request.ontimeout = function handleTimeout() {\n          var timeoutErrorMessage = config.timeout ? \"timeout of \" + config.timeout + \"ms exceeded\" : \"timeout exceeded\";\n          var transitional = config.transitional || defaults.transitional;\n          if (config.timeoutErrorMessage) {\n            timeoutErrorMessage = config.timeoutErrorMessage;\n          }\n          reject(createError6(\n            timeoutErrorMessage,\n            config,\n            transitional.clarifyTimeoutError ? \"ETIMEDOUT\" : \"ECONNABORTED\",\n            request\n          ));\n          request = null;\n        };\n        if (utils.isStandardBrowserEnv()) {\n          var xsrfValue = (config.withCredentials || isURLSameOrigin(fullPath)) && config.xsrfCookieName ? cookies.read(config.xsrfCookieName) : void 0;\n          if (xsrfValue) {\n            requestHeaders[config.xsrfHeaderName] = xsrfValue;\n          }\n        }\n        if (\"setRequestHeader\" in request) {\n          utils.forEach(requestHeaders, function setRequestHeader(val, key) {\n            if (typeof requestData === \"undefined\" && key.toLowerCase() === \"content-type\") {\n              delete requestHeaders[key];\n            } else {\n              request.setRequestHeader(key, val);\n            }\n          });\n        }\n        if (!utils.isUndefined(config.withCredentials)) {\n          request.withCredentials = !!config.withCredentials;\n        }\n        if (responseType && responseType !== \"json\") {\n          request.responseType = config.responseType;\n        }\n        if (typeof config.onDownloadProgress === \"function\") {\n          request.addEventListener(\"progress\", config.onDownloadProgress);\n        }\n        if (typeof config.onUploadProgress === \"function\" && request.upload) {\n          request.upload.addEventListener(\"progress\", config.onUploadProgress);\n        }\n        if (config.cancelToken || config.signal) {\n          onCanceled = function(cancel) {\n            if (!request) {\n              return;\n            }\n            reject(!cancel || cancel && cancel.type ? new Cancel(\"canceled\") : cancel);\n            request.abort();\n            request = null;\n          };\n          config.cancelToken && config.cancelToken.subscribe(onCanceled);\n          if (config.signal) {\n            config.signal.aborted ? onCanceled() : config.signal.addEventListener(\"abort\", onCanceled);\n          }\n        }\n        if (!requestData) {\n          requestData = null;\n        }\n        request.send(requestData);\n      });\n    };\n  }\n});\n\n// ../common/node_modules/axios/lib/defaults.js\nvar require_defaults = __commonJS({\n  \"../common/node_modules/axios/lib/defaults.js\"(exports, module) {\n    \"use strict\";\n    init_process();\n    var utils = require_utils();\n    var normalizeHeaderName = require_normalizeHeaderName();\n    var enhanceError = require_enhanceError();\n    var DEFAULT_CONTENT_TYPE = {\n      \"Content-Type\": \"application/x-www-form-urlencoded\"\n    };\n    function setContentTypeIfUnset(headers, value) {\n      if (!utils.isUndefined(headers) && utils.isUndefined(headers[\"Content-Type\"])) {\n        headers[\"Content-Type\"] = value;\n      }\n    }\n    function getDefaultAdapter() {\n      var adapter;\n      if (typeof XMLHttpRequest !== \"undefined\") {\n        adapter = require_xhr();\n      } else if (typeof process !== \"undefined\" && Object.prototype.toString.call(process) === \"[object process]\") {\n        adapter = require_xhr();\n      }\n      return adapter;\n    }\n    function stringifySafely(rawValue, parser, encoder) {\n      if (utils.isString(rawValue)) {\n        try {\n          (parser || JSON.parse)(rawValue);\n          return utils.trim(rawValue);\n        } catch (e2) {\n          if (e2.name !== \"SyntaxError\") {\n            throw e2;\n          }\n        }\n      }\n      return (encoder || JSON.stringify)(rawValue);\n    }\n    var defaults = {\n      transitional: {\n        silentJSONParsing: true,\n        forcedJSONParsing: true,\n        clarifyTimeoutError: false\n      },\n      adapter: getDefaultAdapter(),\n      transformRequest: [function transformRequest(data, headers) {\n        normalizeHeaderName(headers, \"Accept\");\n        normalizeHeaderName(headers, \"Content-Type\");\n        if (utils.isFormData(data) || utils.isArrayBuffer(data) || utils.isBuffer(data) || utils.isStream(data) || utils.isFile(data) || utils.isBlob(data)) {\n          return data;\n        }\n        if (utils.isArrayBufferView(data)) {\n          return data.buffer;\n        }\n        if (utils.isURLSearchParams(data)) {\n          setContentTypeIfUnset(headers, \"application/x-www-form-urlencoded;charset=utf-8\");\n          return data.toString();\n        }\n        if (utils.isObject(data) || headers && headers[\"Content-Type\"] === \"application/json\") {\n          setContentTypeIfUnset(headers, \"application/json\");\n          return stringifySafely(data);\n        }\n        return data;\n      }],\n      transformResponse: [function transformResponse(data) {\n        var transitional = this.transitional || defaults.transitional;\n        var silentJSONParsing = transitional && transitional.silentJSONParsing;\n        var forcedJSONParsing = transitional && transitional.forcedJSONParsing;\n        var strictJSONParsing = !silentJSONParsing && this.responseType === \"json\";\n        if (strictJSONParsing || forcedJSONParsing && utils.isString(data) && data.length) {\n          try {\n            return JSON.parse(data);\n          } catch (e2) {\n            if (strictJSONParsing) {\n              if (e2.name === \"SyntaxError\") {\n                throw enhanceError(e2, this, \"E_JSON_PARSE\");\n              }\n              throw e2;\n            }\n          }\n        }\n        return data;\n      }],\n      timeout: 0,\n      xsrfCookieName: \"XSRF-TOKEN\",\n      xsrfHeaderName: \"X-XSRF-TOKEN\",\n      maxContentLength: -1,\n      maxBodyLength: -1,\n      validateStatus: function validateStatus(status) {\n        return status >= 200 && status < 300;\n      },\n      headers: {\n        common: {\n          \"Accept\": \"application/json, text/plain, */*\"\n        }\n      }\n    };\n    utils.forEach([\"delete\", \"get\", \"head\"], function forEachMethodNoData(method) {\n      defaults.headers[method] = {};\n    });\n    utils.forEach([\"post\", \"put\", \"patch\"], function forEachMethodWithData(method) {\n      defaults.headers[method] = utils.merge(DEFAULT_CONTENT_TYPE);\n    });\n    module.exports = defaults;\n  }\n});\n\n// ../common/node_modules/axios/lib/core/transformData.js\nvar require_transformData = __commonJS({\n  \"../common/node_modules/axios/lib/core/transformData.js\"(exports, module) {\n    \"use strict\";\n    init_process();\n    var utils = require_utils();\n    var defaults = require_defaults();\n    module.exports = function transformData(data, headers, fns) {\n      var context = this || defaults;\n      utils.forEach(fns, function transform(fn) {\n        data = fn.call(context, data, headers);\n      });\n      return data;\n    };\n  }\n});\n\n// ../common/node_modules/axios/lib/cancel/isCancel.js\nvar require_isCancel = __commonJS({\n  \"../common/node_modules/axios/lib/cancel/isCancel.js\"(exports, module) {\n    \"use strict\";\n    init_process();\n    module.exports = function isCancel(value) {\n      return !!(value && value.__CANCEL__);\n    };\n  }\n});\n\n// ../common/node_modules/axios/lib/core/dispatchRequest.js\nvar require_dispatchRequest = __commonJS({\n  \"../common/node_modules/axios/lib/core/dispatchRequest.js\"(exports, module) {\n    \"use strict\";\n    init_process();\n    var utils = require_utils();\n    var transformData = require_transformData();\n    var isCancel = require_isCancel();\n    var defaults = require_defaults();\n    var Cancel = require_Cancel();\n    function throwIfCancellationRequested(config) {\n      if (config.cancelToken) {\n        config.cancelToken.throwIfRequested();\n      }\n      if (config.signal && config.signal.aborted) {\n        throw new Cancel(\"canceled\");\n      }\n    }\n    module.exports = function dispatchRequest(config) {\n      throwIfCancellationRequested(config);\n      config.headers = config.headers || {};\n      config.data = transformData.call(\n        config,\n        config.data,\n        config.headers,\n        config.transformRequest\n      );\n      config.headers = utils.merge(\n        config.headers.common || {},\n        config.headers[config.method] || {},\n        config.headers\n      );\n      utils.forEach(\n        [\"delete\", \"get\", \"head\", \"post\", \"put\", \"patch\", \"common\"],\n        function cleanHeaderConfig(method) {\n          delete config.headers[method];\n        }\n      );\n      var adapter = config.adapter || defaults.adapter;\n      return adapter(config).then(function onAdapterResolution(response) {\n        throwIfCancellationRequested(config);\n        response.data = transformData.call(\n          config,\n          response.data,\n          response.headers,\n          config.transformResponse\n        );\n        return response;\n      }, function onAdapterRejection(reason) {\n        if (!isCancel(reason)) {\n          throwIfCancellationRequested(config);\n          if (reason && reason.response) {\n            reason.response.data = transformData.call(\n              config,\n              reason.response.data,\n              reason.response.headers,\n              config.transformResponse\n            );\n          }\n        }\n        return Promise.reject(reason);\n      });\n    };\n  }\n});\n\n// ../common/node_modules/axios/lib/core/mergeConfig.js\nvar require_mergeConfig = __commonJS({\n  \"../common/node_modules/axios/lib/core/mergeConfig.js\"(exports, module) {\n    \"use strict\";\n    init_process();\n    var utils = require_utils();\n    module.exports = function mergeConfig(config1, config2) {\n      config2 = config2 || {};\n      var config = {};\n      function getMergedValue(target, source) {\n        if (utils.isPlainObject(target) && utils.isPlainObject(source)) {\n          return utils.merge(target, source);\n        } else if (utils.isPlainObject(source)) {\n          return utils.merge({}, source);\n        } else if (utils.isArray(source)) {\n          return source.slice();\n        }\n        return source;\n      }\n      function mergeDeepProperties(prop) {\n        if (!utils.isUndefined(config2[prop])) {\n          return getMergedValue(config1[prop], config2[prop]);\n        } else if (!utils.isUndefined(config1[prop])) {\n          return getMergedValue(void 0, config1[prop]);\n        }\n      }\n      function valueFromConfig2(prop) {\n        if (!utils.isUndefined(config2[prop])) {\n          return getMergedValue(void 0, config2[prop]);\n        }\n      }\n      function defaultToConfig2(prop) {\n        if (!utils.isUndefined(config2[prop])) {\n          return getMergedValue(void 0, config2[prop]);\n        } else if (!utils.isUndefined(config1[prop])) {\n          return getMergedValue(void 0, config1[prop]);\n        }\n      }\n      function mergeDirectKeys(prop) {\n        if (prop in config2) {\n          return getMergedValue(config1[prop], config2[prop]);\n        } else if (prop in config1) {\n          return getMergedValue(void 0, config1[prop]);\n        }\n      }\n      var mergeMap = {\n        \"url\": valueFromConfig2,\n        \"method\": valueFromConfig2,\n        \"data\": valueFromConfig2,\n        \"baseURL\": defaultToConfig2,\n        \"transformRequest\": defaultToConfig2,\n        \"transformResponse\": defaultToConfig2,\n        \"paramsSerializer\": defaultToConfig2,\n        \"timeout\": defaultToConfig2,\n        \"timeoutMessage\": defaultToConfig2,\n        \"withCredentials\": defaultToConfig2,\n        \"adapter\": defaultToConfig2,\n        \"responseType\": defaultToConfig2,\n        \"xsrfCookieName\": defaultToConfig2,\n        \"xsrfHeaderName\": defaultToConfig2,\n        \"onUploadProgress\": defaultToConfig2,\n        \"onDownloadProgress\": defaultToConfig2,\n        \"decompress\": defaultToConfig2,\n        \"maxContentLength\": defaultToConfig2,\n        \"maxBodyLength\": defaultToConfig2,\n        \"transport\": defaultToConfig2,\n        \"httpAgent\": defaultToConfig2,\n        \"httpsAgent\": defaultToConfig2,\n        \"cancelToken\": defaultToConfig2,\n        \"socketPath\": defaultToConfig2,\n        \"responseEncoding\": defaultToConfig2,\n        \"validateStatus\": mergeDirectKeys\n      };\n      utils.forEach(Object.keys(config1).concat(Object.keys(config2)), function computeConfigValue(prop) {\n        var merge = mergeMap[prop] || mergeDeepProperties;\n        var configValue = merge(prop);\n        utils.isUndefined(configValue) && merge !== mergeDirectKeys || (config[prop] = configValue);\n      });\n      return config;\n    };\n  }\n});\n\n// ../common/node_modules/axios/lib/env/data.js\nvar require_data = __commonJS({\n  \"../common/node_modules/axios/lib/env/data.js\"(exports, module) {\n    init_process();\n    module.exports = {\n      \"version\": \"0.23.0\"\n    };\n  }\n});\n\n// ../common/node_modules/axios/lib/helpers/validator.js\nvar require_validator = __commonJS({\n  \"../common/node_modules/axios/lib/helpers/validator.js\"(exports, module) {\n    \"use strict\";\n    init_process();\n    var VERSION = require_data().version;\n    var validators = {};\n    [\"object\", \"boolean\", \"number\", \"function\", \"string\", \"symbol\"].forEach(function(type, i) {\n      validators[type] = function validator(thing) {\n        return typeof thing === type || \"a\" + (i < 1 ? \"n \" : \" \") + type;\n      };\n    });\n    var deprecatedWarnings = {};\n    validators.transitional = function transitional(validator, version, message) {\n      function formatMessage(opt, desc) {\n        return \"[Axios v\" + VERSION + \"] Transitional option '\" + opt + \"'\" + desc + (message ? \". \" + message : \"\");\n      }\n      return function(value, opt, opts) {\n        if (validator === false) {\n          throw new Error(formatMessage(opt, \" has been removed\" + (version ? \" in \" + version : \"\")));\n        }\n        if (version && !deprecatedWarnings[opt]) {\n          deprecatedWarnings[opt] = true;\n          console.warn(\n            formatMessage(\n              opt,\n              \" has been deprecated since v\" + version + \" and will be removed in the near future\"\n            )\n          );\n        }\n        return validator ? validator(value, opt, opts) : true;\n      };\n    };\n    function assertOptions(options, schema, allowUnknown) {\n      if (typeof options !== \"object\") {\n        throw new TypeError(\"options must be an object\");\n      }\n      var keys = Object.keys(options);\n      var i = keys.length;\n      while (i-- > 0) {\n        var opt = keys[i];\n        var validator = schema[opt];\n        if (validator) {\n          var value = options[opt];\n          var result2 = value === void 0 || validator(value, opt, options);\n          if (result2 !== true) {\n            throw new TypeError(\"option \" + opt + \" must be \" + result2);\n          }\n          continue;\n        }\n        if (allowUnknown !== true) {\n          throw Error(\"Unknown option \" + opt);\n        }\n      }\n    }\n    module.exports = {\n      assertOptions,\n      validators\n    };\n  }\n});\n\n// ../common/node_modules/axios/lib/core/Axios.js\nvar require_Axios = __commonJS({\n  \"../common/node_modules/axios/lib/core/Axios.js\"(exports, module) {\n    \"use strict\";\n    init_process();\n    var utils = require_utils();\n    var buildURL = require_buildURL();\n    var InterceptorManager = require_InterceptorManager();\n    var dispatchRequest = require_dispatchRequest();\n    var mergeConfig = require_mergeConfig();\n    var validator = require_validator();\n    var validators = validator.validators;\n    function Axios(instanceConfig) {\n      this.defaults = instanceConfig;\n      this.interceptors = {\n        request: new InterceptorManager(),\n        response: new InterceptorManager()\n      };\n    }\n    Axios.prototype.request = function request(config) {\n      if (typeof config === \"string\") {\n        config = arguments[1] || {};\n        config.url = arguments[0];\n      } else {\n        config = config || {};\n      }\n      config = mergeConfig(this.defaults, config);\n      if (config.method) {\n        config.method = config.method.toLowerCase();\n      } else if (this.defaults.method) {\n        config.method = this.defaults.method.toLowerCase();\n      } else {\n        config.method = \"get\";\n      }\n      var transitional = config.transitional;\n      if (transitional !== void 0) {\n        validator.assertOptions(transitional, {\n          silentJSONParsing: validators.transitional(validators.boolean),\n          forcedJSONParsing: validators.transitional(validators.boolean),\n          clarifyTimeoutError: validators.transitional(validators.boolean)\n        }, false);\n      }\n      var requestInterceptorChain = [];\n      var synchronousRequestInterceptors = true;\n      this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {\n        if (typeof interceptor.runWhen === \"function\" && interceptor.runWhen(config) === false) {\n          return;\n        }\n        synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;\n        requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);\n      });\n      var responseInterceptorChain = [];\n      this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {\n        responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);\n      });\n      var promise;\n      if (!synchronousRequestInterceptors) {\n        var chain = [dispatchRequest, void 0];\n        Array.prototype.unshift.apply(chain, requestInterceptorChain);\n        chain = chain.concat(responseInterceptorChain);\n        promise = Promise.resolve(config);\n        while (chain.length) {\n          promise = promise.then(chain.shift(), chain.shift());\n        }\n        return promise;\n      }\n      var newConfig = config;\n      while (requestInterceptorChain.length) {\n        var onFulfilled = requestInterceptorChain.shift();\n        var onRejected = requestInterceptorChain.shift();\n        try {\n          newConfig = onFulfilled(newConfig);\n        } catch (error) {\n          onRejected(error);\n          break;\n        }\n      }\n      try {\n        promise = dispatchRequest(newConfig);\n      } catch (error) {\n        return Promise.reject(error);\n      }\n      while (responseInterceptorChain.length) {\n        promise = promise.then(responseInterceptorChain.shift(), responseInterceptorChain.shift());\n      }\n      return promise;\n    };\n    Axios.prototype.getUri = function getUri(config) {\n      config = mergeConfig(this.defaults, config);\n      return buildURL(config.url, config.params, config.paramsSerializer).replace(/^\\?/, \"\");\n    };\n    utils.forEach([\"delete\", \"get\", \"head\", \"options\"], function forEachMethodNoData(method) {\n      Axios.prototype[method] = function(url, config) {\n        return this.request(mergeConfig(config || {}, {\n          method,\n          url,\n          data: (config || {}).data\n        }));\n      };\n    });\n    utils.forEach([\"post\", \"put\", \"patch\"], function forEachMethodWithData(method) {\n      Axios.prototype[method] = function(url, data, config) {\n        return this.request(mergeConfig(config || {}, {\n          method,\n          url,\n          data\n        }));\n      };\n    });\n    module.exports = Axios;\n  }\n});\n\n// ../common/node_modules/axios/lib/cancel/CancelToken.js\nvar require_CancelToken = __commonJS({\n  \"../common/node_modules/axios/lib/cancel/CancelToken.js\"(exports, module) {\n    \"use strict\";\n    init_process();\n    var Cancel = require_Cancel();\n    function CancelToken(executor) {\n      if (typeof executor !== \"function\") {\n        throw new TypeError(\"executor must be a function.\");\n      }\n      var resolvePromise;\n      this.promise = new Promise(function promiseExecutor(resolve) {\n        resolvePromise = resolve;\n      });\n      var token = this;\n      this.promise.then(function(cancel) {\n        if (!token._listeners)\n          return;\n        var i;\n        var l = token._listeners.length;\n        for (i = 0; i < l; i++) {\n          token._listeners[i](cancel);\n        }\n        token._listeners = null;\n      });\n      this.promise.then = function(onfulfilled) {\n        var _resolve;\n        var promise = new Promise(function(resolve) {\n          token.subscribe(resolve);\n          _resolve = resolve;\n        }).then(onfulfilled);\n        promise.cancel = function reject() {\n          token.unsubscribe(_resolve);\n        };\n        return promise;\n      };\n      executor(function cancel(message) {\n        if (token.reason) {\n          return;\n        }\n        token.reason = new Cancel(message);\n        resolvePromise(token.reason);\n      });\n    }\n    CancelToken.prototype.throwIfRequested = function throwIfRequested() {\n      if (this.reason) {\n        throw this.reason;\n      }\n    };\n    CancelToken.prototype.subscribe = function subscribe(listener) {\n      if (this.reason) {\n        listener(this.reason);\n        return;\n      }\n      if (this._listeners) {\n        this._listeners.push(listener);\n      } else {\n        this._listeners = [listener];\n      }\n    };\n    CancelToken.prototype.unsubscribe = function unsubscribe(listener) {\n      if (!this._listeners) {\n        return;\n      }\n      var index = this._listeners.indexOf(listener);\n      if (index !== -1) {\n        this._listeners.splice(index, 1);\n      }\n    };\n    CancelToken.source = function source() {\n      var cancel;\n      var token = new CancelToken(function executor(c) {\n        cancel = c;\n      });\n      return {\n        token,\n        cancel\n      };\n    };\n    module.exports = CancelToken;\n  }\n});\n\n// ../common/node_modules/axios/lib/helpers/spread.js\nvar require_spread = __commonJS({\n  \"../common/node_modules/axios/lib/helpers/spread.js\"(exports, module) {\n    \"use strict\";\n    init_process();\n    module.exports = function spread(callback) {\n      return function wrap(arr) {\n        return callback.apply(null, arr);\n      };\n    };\n  }\n});\n\n// ../common/node_modules/axios/lib/helpers/isAxiosError.js\nvar require_isAxiosError = __commonJS({\n  \"../common/node_modules/axios/lib/helpers/isAxiosError.js\"(exports, module) {\n    \"use strict\";\n    init_process();\n    module.exports = function isAxiosError(payload) {\n      return typeof payload === \"object\" && payload.isAxiosError === true;\n    };\n  }\n});\n\n// ../common/node_modules/axios/lib/axios.js\nvar require_axios = __commonJS({\n  \"../common/node_modules/axios/lib/axios.js\"(exports, module) {\n    \"use strict\";\n    init_process();\n    var utils = require_utils();\n    var bind = require_bind();\n    var Axios = require_Axios();\n    var mergeConfig = require_mergeConfig();\n    var defaults = require_defaults();\n    function createInstance(defaultConfig) {\n      var context = new Axios(defaultConfig);\n      var instance = bind(Axios.prototype.request, context);\n      utils.extend(instance, Axios.prototype, context);\n      utils.extend(instance, context);\n      instance.create = function create(instanceConfig) {\n        return createInstance(mergeConfig(defaultConfig, instanceConfig));\n      };\n      return instance;\n    }\n    var axios2 = createInstance(defaults);\n    axios2.Axios = Axios;\n    axios2.Cancel = require_Cancel();\n    axios2.CancelToken = require_CancelToken();\n    axios2.isCancel = require_isCancel();\n    axios2.VERSION = require_data().version;\n    axios2.all = function all(promises) {\n      return Promise.all(promises);\n    };\n    axios2.spread = require_spread();\n    axios2.isAxiosError = require_isAxiosError();\n    module.exports = axios2;\n    module.exports.default = axios2;\n  }\n});\n\n// ../common/node_modules/axios/index.js\nvar require_axios2 = __commonJS({\n  \"../common/node_modules/axios/index.js\"(exports, module) {\n    init_process();\n    module.exports = require_axios();\n  }\n});\n\n// ../../node_modules/bowser/es5.js\nvar require_es5 = __commonJS({\n  \"../../node_modules/bowser/es5.js\"(exports, module) {\n    init_process();\n    !function(e2, t2) {\n      \"object\" == typeof exports && \"object\" == typeof module ? module.exports = t2() : \"function\" == typeof define && define.amd ? define([], t2) : \"object\" == typeof exports ? exports.bowser = t2() : e2.bowser = t2();\n    }(exports, function() {\n      return function(e2) {\n        var t2 = {};\n        function r2(n2) {\n          if (t2[n2])\n            return t2[n2].exports;\n          var i = t2[n2] = { i: n2, l: false, exports: {} };\n          return e2[n2].call(i.exports, i, i.exports, r2), i.l = true, i.exports;\n        }\n        return r2.m = e2, r2.c = t2, r2.d = function(e3, t3, n2) {\n          r2.o(e3, t3) || Object.defineProperty(e3, t3, { enumerable: true, get: n2 });\n        }, r2.r = function(e3) {\n          \"undefined\" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(e3, Symbol.toStringTag, { value: \"Module\" }), Object.defineProperty(e3, \"__esModule\", { value: true });\n        }, r2.t = function(e3, t3) {\n          if (1 & t3 && (e3 = r2(e3)), 8 & t3)\n            return e3;\n          if (4 & t3 && \"object\" == typeof e3 && e3 && e3.__esModule)\n            return e3;\n          var n2 = /* @__PURE__ */ Object.create(null);\n          if (r2.r(n2), Object.defineProperty(n2, \"default\", { enumerable: true, value: e3 }), 2 & t3 && \"string\" != typeof e3)\n            for (var i in e3)\n              r2.d(n2, i, function(t4) {\n                return e3[t4];\n              }.bind(null, i));\n          return n2;\n        }, r2.n = function(e3) {\n          var t3 = e3 && e3.__esModule ? function() {\n            return e3.default;\n          } : function() {\n            return e3;\n          };\n          return r2.d(t3, \"a\", t3), t3;\n        }, r2.o = function(e3, t3) {\n          return Object.prototype.hasOwnProperty.call(e3, t3);\n        }, r2.p = \"\", r2(r2.s = 90);\n      }({ 17: function(e2, t2, r2) {\n        \"use strict\";\n        t2.__esModule = true, t2.default = void 0;\n        var n2 = r2(18), i = function() {\n          function e3() {\n          }\n          return e3.getFirstMatch = function(e4, t3) {\n            var r3 = t3.match(e4);\n            return r3 && r3.length > 0 && r3[1] || \"\";\n          }, e3.getSecondMatch = function(e4, t3) {\n            var r3 = t3.match(e4);\n            return r3 && r3.length > 1 && r3[2] || \"\";\n          }, e3.matchAndReturnConst = function(e4, t3, r3) {\n            if (e4.test(t3))\n              return r3;\n          }, e3.getWindowsVersionName = function(e4) {\n            switch (e4) {\n              case \"NT\":\n                return \"NT\";\n              case \"XP\":\n                return \"XP\";\n              case \"NT 5.0\":\n                return \"2000\";\n              case \"NT 5.1\":\n                return \"XP\";\n              case \"NT 5.2\":\n                return \"2003\";\n              case \"NT 6.0\":\n                return \"Vista\";\n              case \"NT 6.1\":\n                return \"7\";\n              case \"NT 6.2\":\n                return \"8\";\n              case \"NT 6.3\":\n                return \"8.1\";\n              case \"NT 10.0\":\n                return \"10\";\n              default:\n                return;\n            }\n          }, e3.getMacOSVersionName = function(e4) {\n            var t3 = e4.split(\".\").splice(0, 2).map(function(e5) {\n              return parseInt(e5, 10) || 0;\n            });\n            if (t3.push(0), 10 === t3[0])\n              switch (t3[1]) {\n                case 5:\n                  return \"Leopard\";\n                case 6:\n                  return \"Snow Leopard\";\n                case 7:\n                  return \"Lion\";\n                case 8:\n                  return \"Mountain Lion\";\n                case 9:\n                  return \"Mavericks\";\n                case 10:\n                  return \"Yosemite\";\n                case 11:\n                  return \"El Capitan\";\n                case 12:\n                  return \"Sierra\";\n                case 13:\n                  return \"High Sierra\";\n                case 14:\n                  return \"Mojave\";\n                case 15:\n                  return \"Catalina\";\n                default:\n                  return;\n              }\n          }, e3.getAndroidVersionName = function(e4) {\n            var t3 = e4.split(\".\").splice(0, 2).map(function(e5) {\n              return parseInt(e5, 10) || 0;\n            });\n            if (t3.push(0), !(1 === t3[0] && t3[1] < 5))\n              return 1 === t3[0] && t3[1] < 6 ? \"Cupcake\" : 1 === t3[0] && t3[1] >= 6 ? \"Donut\" : 2 === t3[0] && t3[1] < 2 ? \"Eclair\" : 2 === t3[0] && 2 === t3[1] ? \"Froyo\" : 2 === t3[0] && t3[1] > 2 ? \"Gingerbread\" : 3 === t3[0] ? \"Honeycomb\" : 4 === t3[0] && t3[1] < 1 ? \"Ice Cream Sandwich\" : 4 === t3[0] && t3[1] < 4 ? \"Jelly Bean\" : 4 === t3[0] && t3[1] >= 4 ? \"KitKat\" : 5 === t3[0] ? \"Lollipop\" : 6 === t3[0] ? \"Marshmallow\" : 7 === t3[0] ? \"Nougat\" : 8 === t3[0] ? \"Oreo\" : 9 === t3[0] ? \"Pie\" : void 0;\n          }, e3.getVersionPrecision = function(e4) {\n            return e4.split(\".\").length;\n          }, e3.compareVersions = function(t3, r3, n3) {\n            void 0 === n3 && (n3 = false);\n            var i2 = e3.getVersionPrecision(t3), s = e3.getVersionPrecision(r3), a = Math.max(i2, s), o2 = 0, u = e3.map([t3, r3], function(t4) {\n              var r4 = a - e3.getVersionPrecision(t4), n4 = t4 + new Array(r4 + 1).join(\".0\");\n              return e3.map(n4.split(\".\"), function(e4) {\n                return new Array(20 - e4.length).join(\"0\") + e4;\n              }).reverse();\n            });\n            for (n3 && (o2 = a - Math.min(i2, s)), a -= 1; a >= o2; ) {\n              if (u[0][a] > u[1][a])\n                return 1;\n              if (u[0][a] === u[1][a]) {\n                if (a === o2)\n                  return 0;\n                a -= 1;\n              } else if (u[0][a] < u[1][a])\n                return -1;\n            }\n          }, e3.map = function(e4, t3) {\n            var r3, n3 = [];\n            if (Array.prototype.map)\n              return Array.prototype.map.call(e4, t3);\n            for (r3 = 0; r3 < e4.length; r3 += 1)\n              n3.push(t3(e4[r3]));\n            return n3;\n          }, e3.find = function(e4, t3) {\n            var r3, n3;\n            if (Array.prototype.find)\n              return Array.prototype.find.call(e4, t3);\n            for (r3 = 0, n3 = e4.length; r3 < n3; r3 += 1) {\n              var i2 = e4[r3];\n              if (t3(i2, r3))\n                return i2;\n            }\n          }, e3.assign = function(e4) {\n            for (var t3, r3, n3 = e4, i2 = arguments.length, s = new Array(i2 > 1 ? i2 - 1 : 0), a = 1; a < i2; a++)\n              s[a - 1] = arguments[a];\n            if (Object.assign)\n              return Object.assign.apply(Object, [e4].concat(s));\n            var o2 = function() {\n              var e5 = s[t3];\n              \"object\" == typeof e5 && null !== e5 && Object.keys(e5).forEach(function(t4) {\n                n3[t4] = e5[t4];\n              });\n            };\n            for (t3 = 0, r3 = s.length; t3 < r3; t3 += 1)\n              o2();\n            return e4;\n          }, e3.getBrowserAlias = function(e4) {\n            return n2.BROWSER_ALIASES_MAP[e4];\n          }, e3.getBrowserTypeByAlias = function(e4) {\n            return n2.BROWSER_MAP[e4] || \"\";\n          }, e3;\n        }();\n        t2.default = i, e2.exports = t2.default;\n      }, 18: function(e2, t2, r2) {\n        \"use strict\";\n        t2.__esModule = true, t2.ENGINE_MAP = t2.OS_MAP = t2.PLATFORMS_MAP = t2.BROWSER_MAP = t2.BROWSER_ALIASES_MAP = void 0;\n        t2.BROWSER_ALIASES_MAP = { \"Amazon Silk\": \"amazon_silk\", \"Android Browser\": \"android\", Bada: \"bada\", BlackBerry: \"blackberry\", Chrome: \"chrome\", Chromium: \"chromium\", Electron: \"electron\", Epiphany: \"epiphany\", Firefox: \"firefox\", Focus: \"focus\", Generic: \"generic\", \"Google Search\": \"google_search\", Googlebot: \"googlebot\", \"Internet Explorer\": \"ie\", \"K-Meleon\": \"k_meleon\", Maxthon: \"maxthon\", \"Microsoft Edge\": \"edge\", \"MZ Browser\": \"mz\", \"NAVER Whale Browser\": \"naver\", Opera: \"opera\", \"Opera Coast\": \"opera_coast\", PhantomJS: \"phantomjs\", Puffin: \"puffin\", QupZilla: \"qupzilla\", QQ: \"qq\", QQLite: \"qqlite\", Safari: \"safari\", Sailfish: \"sailfish\", \"Samsung Internet for Android\": \"samsung_internet\", SeaMonkey: \"seamonkey\", Sleipnir: \"sleipnir\", Swing: \"swing\", Tizen: \"tizen\", \"UC Browser\": \"uc\", Vivaldi: \"vivaldi\", \"WebOS Browser\": \"webos\", WeChat: \"wechat\", \"Yandex Browser\": \"yandex\", Roku: \"roku\" };\n        t2.BROWSER_MAP = { amazon_silk: \"Amazon Silk\", android: \"Android Browser\", bada: \"Bada\", blackberry: \"BlackBerry\", chrome: \"Chrome\", chromium: \"Chromium\", electron: \"Electron\", epiphany: \"Epiphany\", firefox: \"Firefox\", focus: \"Focus\", generic: \"Generic\", googlebot: \"Googlebot\", google_search: \"Google Search\", ie: \"Internet Explorer\", k_meleon: \"K-Meleon\", maxthon: \"Maxthon\", edge: \"Microsoft Edge\", mz: \"MZ Browser\", naver: \"NAVER Whale Browser\", opera: \"Opera\", opera_coast: \"Opera Coast\", phantomjs: \"PhantomJS\", puffin: \"Puffin\", qupzilla: \"QupZilla\", qq: \"QQ Browser\", qqlite: \"QQ Browser Lite\", safari: \"Safari\", sailfish: \"Sailfish\", samsung_internet: \"Samsung Internet for Android\", seamonkey: \"SeaMonkey\", sleipnir: \"Sleipnir\", swing: \"Swing\", tizen: \"Tizen\", uc: \"UC Browser\", vivaldi: \"Vivaldi\", webos: \"WebOS Browser\", wechat: \"WeChat\", yandex: \"Yandex Browser\" };\n        t2.PLATFORMS_MAP = { tablet: \"tablet\", mobile: \"mobile\", desktop: \"desktop\", tv: \"tv\" };\n        t2.OS_MAP = { WindowsPhone: \"Windows Phone\", Windows: \"Windows\", MacOS: \"macOS\", iOS: \"iOS\", Android: \"Android\", WebOS: \"WebOS\", BlackBerry: \"BlackBerry\", Bada: \"Bada\", Tizen: \"Tizen\", Linux: \"Linux\", ChromeOS: \"Chrome OS\", PlayStation4: \"PlayStation 4\", Roku: \"Roku\" };\n        t2.ENGINE_MAP = { EdgeHTML: \"EdgeHTML\", Blink: \"Blink\", Trident: \"Trident\", Presto: \"Presto\", Gecko: \"Gecko\", WebKit: \"WebKit\" };\n      }, 90: function(e2, t2, r2) {\n        \"use strict\";\n        t2.__esModule = true, t2.default = void 0;\n        var n2, i = (n2 = r2(91)) && n2.__esModule ? n2 : { default: n2 }, s = r2(18);\n        function a(e3, t3) {\n          for (var r3 = 0; r3 < t3.length; r3++) {\n            var n3 = t3[r3];\n            n3.enumerable = n3.enumerable || false, n3.configurable = true, \"value\" in n3 && (n3.writable = true), Object.defineProperty(e3, n3.key, n3);\n          }\n        }\n        var o2 = function() {\n          function e3() {\n          }\n          var t3, r3, n3;\n          return e3.getParser = function(e4, t4) {\n            if (void 0 === t4 && (t4 = false), \"string\" != typeof e4)\n              throw new Error(\"UserAgent should be a string\");\n            return new i.default(e4, t4);\n          }, e3.parse = function(e4) {\n            return new i.default(e4).getResult();\n          }, t3 = e3, n3 = [{ key: \"BROWSER_MAP\", get: function() {\n            return s.BROWSER_MAP;\n          } }, { key: \"ENGINE_MAP\", get: function() {\n            return s.ENGINE_MAP;\n          } }, { key: \"OS_MAP\", get: function() {\n            return s.OS_MAP;\n          } }, { key: \"PLATFORMS_MAP\", get: function() {\n            return s.PLATFORMS_MAP;\n          } }], (r3 = null) && a(t3.prototype, r3), n3 && a(t3, n3), e3;\n        }();\n        t2.default = o2, e2.exports = t2.default;\n      }, 91: function(e2, t2, r2) {\n        \"use strict\";\n        t2.__esModule = true, t2.default = void 0;\n        var n2 = u(r2(92)), i = u(r2(93)), s = u(r2(94)), a = u(r2(95)), o2 = u(r2(17));\n        function u(e3) {\n          return e3 && e3.__esModule ? e3 : { default: e3 };\n        }\n        var d = function() {\n          function e3(e4, t4) {\n            if (void 0 === t4 && (t4 = false), null == e4 || \"\" === e4)\n              throw new Error(\"UserAgent parameter can't be empty\");\n            this._ua = e4, this.parsedResult = {}, true !== t4 && this.parse();\n          }\n          var t3 = e3.prototype;\n          return t3.getUA = function() {\n            return this._ua;\n          }, t3.test = function(e4) {\n            return e4.test(this._ua);\n          }, t3.parseBrowser = function() {\n            var e4 = this;\n            this.parsedResult.browser = {};\n            var t4 = o2.default.find(n2.default, function(t5) {\n              if (\"function\" == typeof t5.test)\n                return t5.test(e4);\n              if (t5.test instanceof Array)\n                return t5.test.some(function(t6) {\n                  return e4.test(t6);\n                });\n              throw new Error(\"Browser's test function is not valid\");\n            });\n            return t4 && (this.parsedResult.browser = t4.describe(this.getUA())), this.parsedResult.browser;\n          }, t3.getBrowser = function() {\n            return this.parsedResult.browser ? this.parsedResult.browser : this.parseBrowser();\n          }, t3.getBrowserName = function(e4) {\n            return e4 ? String(this.getBrowser().name).toLowerCase() || \"\" : this.getBrowser().name || \"\";\n          }, t3.getBrowserVersion = function() {\n            return this.getBrowser().version;\n          }, t3.getOS = function() {\n            return this.parsedResult.os ? this.parsedResult.os : this.parseOS();\n          }, t3.parseOS = function() {\n            var e4 = this;\n            this.parsedResult.os = {};\n            var t4 = o2.default.find(i.default, function(t5) {\n              if (\"function\" == typeof t5.test)\n                return t5.test(e4);\n              if (t5.test instanceof Array)\n                return t5.test.some(function(t6) {\n                  return e4.test(t6);\n                });\n              throw new Error(\"Browser's test function is not valid\");\n            });\n            return t4 && (this.parsedResult.os = t4.describe(this.getUA())), this.parsedResult.os;\n          }, t3.getOSName = function(e4) {\n            var t4 = this.getOS().name;\n            return e4 ? String(t4).toLowerCase() || \"\" : t4 || \"\";\n          }, t3.getOSVersion = function() {\n            return this.getOS().version;\n          }, t3.getPlatform = function() {\n            return this.parsedResult.platform ? this.parsedResult.platform : this.parsePlatform();\n          }, t3.getPlatformType = function(e4) {\n            void 0 === e4 && (e4 = false);\n            var t4 = this.getPlatform().type;\n            return e4 ? String(t4).toLowerCase() || \"\" : t4 || \"\";\n          }, t3.parsePlatform = function() {\n            var e4 = this;\n            this.parsedResult.platform = {};\n            var t4 = o2.default.find(s.default, function(t5) {\n              if (\"function\" == typeof t5.test)\n                return t5.test(e4);\n              if (t5.test instanceof Array)\n                return t5.test.some(function(t6) {\n                  return e4.test(t6);\n                });\n              throw new Error(\"Browser's test function is not valid\");\n            });\n            return t4 && (this.parsedResult.platform = t4.describe(this.getUA())), this.parsedResult.platform;\n          }, t3.getEngine = function() {\n            return this.parsedResult.engine ? this.parsedResult.engine : this.parseEngine();\n          }, t3.getEngineName = function(e4) {\n            return e4 ? String(this.getEngine().name).toLowerCase() || \"\" : this.getEngine().name || \"\";\n          }, t3.parseEngine = function() {\n            var e4 = this;\n            this.parsedResult.engine = {};\n            var t4 = o2.default.find(a.default, function(t5) {\n              if (\"function\" == typeof t5.test)\n                return t5.test(e4);\n              if (t5.test instanceof Array)\n                return t5.test.some(function(t6) {\n                  return e4.test(t6);\n                });\n              throw new Error(\"Browser's test function is not valid\");\n            });\n            return t4 && (this.parsedResult.engine = t4.describe(this.getUA())), this.parsedResult.engine;\n          }, t3.parse = function() {\n            return this.parseBrowser(), this.parseOS(), this.parsePlatform(), this.parseEngine(), this;\n          }, t3.getResult = function() {\n            return o2.default.assign({}, this.parsedResult);\n          }, t3.satisfies = function(e4) {\n            var t4 = this, r3 = {}, n3 = 0, i2 = {}, s2 = 0;\n            if (Object.keys(e4).forEach(function(t5) {\n              var a3 = e4[t5];\n              \"string\" == typeof a3 ? (i2[t5] = a3, s2 += 1) : \"object\" == typeof a3 && (r3[t5] = a3, n3 += 1);\n            }), n3 > 0) {\n              var a2 = Object.keys(r3), u2 = o2.default.find(a2, function(e5) {\n                return t4.isOS(e5);\n              });\n              if (u2) {\n                var d2 = this.satisfies(r3[u2]);\n                if (void 0 !== d2)\n                  return d2;\n              }\n              var c = o2.default.find(a2, function(e5) {\n                return t4.isPlatform(e5);\n              });\n              if (c) {\n                var f = this.satisfies(r3[c]);\n                if (void 0 !== f)\n                  return f;\n              }\n            }\n            if (s2 > 0) {\n              var l = Object.keys(i2), h = o2.default.find(l, function(e5) {\n                return t4.isBrowser(e5, true);\n              });\n              if (void 0 !== h)\n                return this.compareVersion(i2[h]);\n            }\n          }, t3.isBrowser = function(e4, t4) {\n            void 0 === t4 && (t4 = false);\n            var r3 = this.getBrowserName().toLowerCase(), n3 = e4.toLowerCase(), i2 = o2.default.getBrowserTypeByAlias(n3);\n            return t4 && i2 && (n3 = i2.toLowerCase()), n3 === r3;\n          }, t3.compareVersion = function(e4) {\n            var t4 = [0], r3 = e4, n3 = false, i2 = this.getBrowserVersion();\n            if (\"string\" == typeof i2)\n              return \">\" === e4[0] || \"<\" === e4[0] ? (r3 = e4.substr(1), \"=\" === e4[1] ? (n3 = true, r3 = e4.substr(2)) : t4 = [], \">\" === e4[0] ? t4.push(1) : t4.push(-1)) : \"=\" === e4[0] ? r3 = e4.substr(1) : \"~\" === e4[0] && (n3 = true, r3 = e4.substr(1)), t4.indexOf(o2.default.compareVersions(i2, r3, n3)) > -1;\n          }, t3.isOS = function(e4) {\n            return this.getOSName(true) === String(e4).toLowerCase();\n          }, t3.isPlatform = function(e4) {\n            return this.getPlatformType(true) === String(e4).toLowerCase();\n          }, t3.isEngine = function(e4) {\n            return this.getEngineName(true) === String(e4).toLowerCase();\n          }, t3.is = function(e4, t4) {\n            return void 0 === t4 && (t4 = false), this.isBrowser(e4, t4) || this.isOS(e4) || this.isPlatform(e4);\n          }, t3.some = function(e4) {\n            var t4 = this;\n            return void 0 === e4 && (e4 = []), e4.some(function(e5) {\n              return t4.is(e5);\n            });\n          }, e3;\n        }();\n        t2.default = d, e2.exports = t2.default;\n      }, 92: function(e2, t2, r2) {\n        \"use strict\";\n        t2.__esModule = true, t2.default = void 0;\n        var n2, i = (n2 = r2(17)) && n2.__esModule ? n2 : { default: n2 };\n        var s = /version\\/(\\d+(\\.?_?\\d+)+)/i, a = [{ test: [/googlebot/i], describe: function(e3) {\n          var t3 = { name: \"Googlebot\" }, r3 = i.default.getFirstMatch(/googlebot\\/(\\d+(\\.\\d+))/i, e3) || i.default.getFirstMatch(s, e3);\n          return r3 && (t3.version = r3), t3;\n        } }, { test: [/opera/i], describe: function(e3) {\n          var t3 = { name: \"Opera\" }, r3 = i.default.getFirstMatch(s, e3) || i.default.getFirstMatch(/(?:opera)[\\s/](\\d+(\\.?_?\\d+)+)/i, e3);\n          return r3 && (t3.version = r3), t3;\n        } }, { test: [/opr\\/|opios/i], describe: function(e3) {\n          var t3 = { name: \"Opera\" }, r3 = i.default.getFirstMatch(/(?:opr|opios)[\\s/](\\S+)/i, e3) || i.default.getFirstMatch(s, e3);\n          return r3 && (t3.version = r3), t3;\n        } }, { test: [/SamsungBrowser/i], describe: function(e3) {\n          var t3 = { name: \"Samsung Internet for Android\" }, r3 = i.default.getFirstMatch(s, e3) || i.default.getFirstMatch(/(?:SamsungBrowser)[\\s/](\\d+(\\.?_?\\d+)+)/i, e3);\n          return r3 && (t3.version = r3), t3;\n        } }, { test: [/Whale/i], describe: function(e3) {\n          var t3 = { name: \"NAVER Whale Browser\" }, r3 = i.default.getFirstMatch(s, e3) || i.default.getFirstMatch(/(?:whale)[\\s/](\\d+(?:\\.\\d+)+)/i, e3);\n          return r3 && (t3.version = r3), t3;\n        } }, { test: [/MZBrowser/i], describe: function(e3) {\n          var t3 = { name: \"MZ Browser\" }, r3 = i.default.getFirstMatch(/(?:MZBrowser)[\\s/](\\d+(?:\\.\\d+)+)/i, e3) || i.default.getFirstMatch(s, e3);\n          return r3 && (t3.version = r3), t3;\n        } }, { test: [/focus/i], describe: function(e3) {\n          var t3 = { name: \"Focus\" }, r3 = i.default.getFirstMatch(/(?:focus)[\\s/](\\d+(?:\\.\\d+)+)/i, e3) || i.default.getFirstMatch(s, e3);\n          return r3 && (t3.version = r3), t3;\n        } }, { test: [/swing/i], describe: function(e3) {\n          var t3 = { name: \"Swing\" }, r3 = i.default.getFirstMatch(/(?:swing)[\\s/](\\d+(?:\\.\\d+)+)/i, e3) || i.default.getFirstMatch(s, e3);\n          return r3 && (t3.version = r3), t3;\n        } }, { test: [/coast/i], describe: function(e3) {\n          var t3 = { name: \"Opera Coast\" }, r3 = i.default.getFirstMatch(s, e3) || i.default.getFirstMatch(/(?:coast)[\\s/](\\d+(\\.?_?\\d+)+)/i, e3);\n          return r3 && (t3.version = r3), t3;\n        } }, { test: [/opt\\/\\d+(?:.?_?\\d+)+/i], describe: function(e3) {\n          var t3 = { name: \"Opera Touch\" }, r3 = i.default.getFirstMatch(/(?:opt)[\\s/](\\d+(\\.?_?\\d+)+)/i, e3) || i.default.getFirstMatch(s, e3);\n          return r3 && (t3.version = r3), t3;\n        } }, { test: [/yabrowser/i], describe: function(e3) {\n          var t3 = { name: \"Yandex Browser\" }, r3 = i.default.getFirstMatch(/(?:yabrowser)[\\s/](\\d+(\\.?_?\\d+)+)/i, e3) || i.default.getFirstMatch(s, e3);\n          return r3 && (t3.version = r3), t3;\n        } }, { test: [/ucbrowser/i], describe: function(e3) {\n          var t3 = { name: \"UC Browser\" }, r3 = i.default.getFirstMatch(s, e3) || i.default.getFirstMatch(/(?:ucbrowser)[\\s/](\\d+(\\.?_?\\d+)+)/i, e3);\n          return r3 && (t3.version = r3), t3;\n        } }, { test: [/Maxthon|mxios/i], describe: function(e3) {\n          var t3 = { name: \"Maxthon\" }, r3 = i.default.getFirstMatch(s, e3) || i.default.getFirstMatch(/(?:Maxthon|mxios)[\\s/](\\d+(\\.?_?\\d+)+)/i, e3);\n          return r3 && (t3.version = r3), t3;\n        } }, { test: [/epiphany/i], describe: function(e3) {\n          var t3 = { name: \"Epiphany\" }, r3 = i.default.getFirstMatch(s, e3) || i.default.getFirstMatch(/(?:epiphany)[\\s/](\\d+(\\.?_?\\d+)+)/i, e3);\n          return r3 && (t3.version = r3), t3;\n        } }, { test: [/puffin/i], describe: function(e3) {\n          var t3 = { name: \"Puffin\" }, r3 = i.default.getFirstMatch(s, e3) || i.default.getFirstMatch(/(?:puffin)[\\s/](\\d+(\\.?_?\\d+)+)/i, e3);\n          return r3 && (t3.version = r3), t3;\n        } }, { test: [/sleipnir/i], describe: function(e3) {\n          var t3 = { name: \"Sleipnir\" }, r3 = i.default.getFirstMatch(s, e3) || i.default.getFirstMatch(/(?:sleipnir)[\\s/](\\d+(\\.?_?\\d+)+)/i, e3);\n          return r3 && (t3.version = r3), t3;\n        } }, { test: [/k-meleon/i], describe: function(e3) {\n          var t3 = { name: \"K-Meleon\" }, r3 = i.default.getFirstMatch(s, e3) || i.default.getFirstMatch(/(?:k-meleon)[\\s/](\\d+(\\.?_?\\d+)+)/i, e3);\n          return r3 && (t3.version = r3), t3;\n        } }, { test: [/micromessenger/i], describe: function(e3) {\n          var t3 = { name: \"WeChat\" }, r3 = i.default.getFirstMatch(/(?:micromessenger)[\\s/](\\d+(\\.?_?\\d+)+)/i, e3) || i.default.getFirstMatch(s, e3);\n          return r3 && (t3.version = r3), t3;\n        } }, { test: [/qqbrowser/i], describe: function(e3) {\n          var t3 = { name: /qqbrowserlite/i.test(e3) ? \"QQ Browser Lite\" : \"QQ Browser\" }, r3 = i.default.getFirstMatch(/(?:qqbrowserlite|qqbrowser)[/](\\d+(\\.?_?\\d+)+)/i, e3) || i.default.getFirstMatch(s, e3);\n          return r3 && (t3.version = r3), t3;\n        } }, { test: [/msie|trident/i], describe: function(e3) {\n          var t3 = { name: \"Internet Explorer\" }, r3 = i.default.getFirstMatch(/(?:msie |rv:)(\\d+(\\.?_?\\d+)+)/i, e3);\n          return r3 && (t3.version = r3), t3;\n        } }, { test: [/\\sedg\\//i], describe: function(e3) {\n          var t3 = { name: \"Microsoft Edge\" }, r3 = i.default.getFirstMatch(/\\sedg\\/(\\d+(\\.?_?\\d+)+)/i, e3);\n          return r3 && (t3.version = r3), t3;\n        } }, { test: [/edg([ea]|ios)/i], describe: function(e3) {\n          var t3 = { name: \"Microsoft Edge\" }, r3 = i.default.getSecondMatch(/edg([ea]|ios)\\/(\\d+(\\.?_?\\d+)+)/i, e3);\n          return r3 && (t3.version = r3), t3;\n        } }, { test: [/vivaldi/i], describe: function(e3) {\n          var t3 = { name: \"Vivaldi\" }, r3 = i.default.getFirstMatch(/vivaldi\\/(\\d+(\\.?_?\\d+)+)/i, e3);\n          return r3 && (t3.version = r3), t3;\n        } }, { test: [/seamonkey/i], describe: function(e3) {\n          var t3 = { name: \"SeaMonkey\" }, r3 = i.default.getFirstMatch(/seamonkey\\/(\\d+(\\.?_?\\d+)+)/i, e3);\n          return r3 && (t3.version = r3), t3;\n        } }, { test: [/sailfish/i], describe: function(e3) {\n          var t3 = { name: \"Sailfish\" }, r3 = i.default.getFirstMatch(/sailfish\\s?browser\\/(\\d+(\\.\\d+)?)/i, e3);\n          return r3 && (t3.version = r3), t3;\n        } }, { test: [/silk/i], describe: function(e3) {\n          var t3 = { name: \"Amazon Silk\" }, r3 = i.default.getFirstMatch(/silk\\/(\\d+(\\.?_?\\d+)+)/i, e3);\n          return r3 && (t3.version = r3), t3;\n        } }, { test: [/phantom/i], describe: function(e3) {\n          var t3 = { name: \"PhantomJS\" }, r3 = i.default.getFirstMatch(/phantomjs\\/(\\d+(\\.?_?\\d+)+)/i, e3);\n          return r3 && (t3.version = r3), t3;\n        } }, { test: [/slimerjs/i], describe: function(e3) {\n          var t3 = { name: \"SlimerJS\" }, r3 = i.default.getFirstMatch(/slimerjs\\/(\\d+(\\.?_?\\d+)+)/i, e3);\n          return r3 && (t3.version = r3), t3;\n        } }, { test: [/blackberry|\\bbb\\d+/i, /rim\\stablet/i], describe: function(e3) {\n          var t3 = { name: \"BlackBerry\" }, r3 = i.default.getFirstMatch(s, e3) || i.default.getFirstMatch(/blackberry[\\d]+\\/(\\d+(\\.?_?\\d+)+)/i, e3);\n          return r3 && (t3.version = r3), t3;\n        } }, { test: [/(web|hpw)[o0]s/i], describe: function(e3) {\n          var t3 = { name: \"WebOS Browser\" }, r3 = i.default.getFirstMatch(s, e3) || i.default.getFirstMatch(/w(?:eb)?[o0]sbrowser\\/(\\d+(\\.?_?\\d+)+)/i, e3);\n          return r3 && (t3.version = r3), t3;\n        } }, { test: [/bada/i], describe: function(e3) {\n          var t3 = { name: \"Bada\" }, r3 = i.default.getFirstMatch(/dolfin\\/(\\d+(\\.?_?\\d+)+)/i, e3);\n          return r3 && (t3.version = r3), t3;\n        } }, { test: [/tizen/i], describe: function(e3) {\n          var t3 = { name: \"Tizen\" }, r3 = i.default.getFirstMatch(/(?:tizen\\s?)?browser\\/(\\d+(\\.?_?\\d+)+)/i, e3) || i.default.getFirstMatch(s, e3);\n          return r3 && (t3.version = r3), t3;\n        } }, { test: [/qupzilla/i], describe: function(e3) {\n          var t3 = { name: \"QupZilla\" }, r3 = i.default.getFirstMatch(/(?:qupzilla)[\\s/](\\d+(\\.?_?\\d+)+)/i, e3) || i.default.getFirstMatch(s, e3);\n          return r3 && (t3.version = r3), t3;\n        } }, { test: [/firefox|iceweasel|fxios/i], describe: function(e3) {\n          var t3 = { name: \"Firefox\" }, r3 = i.default.getFirstMatch(/(?:firefox|iceweasel|fxios)[\\s/](\\d+(\\.?_?\\d+)+)/i, e3);\n          return r3 && (t3.version = r3), t3;\n        } }, { test: [/electron/i], describe: function(e3) {\n          var t3 = { name: \"Electron\" }, r3 = i.default.getFirstMatch(/(?:electron)\\/(\\d+(\\.?_?\\d+)+)/i, e3);\n          return r3 && (t3.version = r3), t3;\n        } }, { test: [/MiuiBrowser/i], describe: function(e3) {\n          var t3 = { name: \"Miui\" }, r3 = i.default.getFirstMatch(/(?:MiuiBrowser)[\\s/](\\d+(\\.?_?\\d+)+)/i, e3);\n          return r3 && (t3.version = r3), t3;\n        } }, { test: [/chromium/i], describe: function(e3) {\n          var t3 = { name: \"Chromium\" }, r3 = i.default.getFirstMatch(/(?:chromium)[\\s/](\\d+(\\.?_?\\d+)+)/i, e3) || i.default.getFirstMatch(s, e3);\n          return r3 && (t3.version = r3), t3;\n        } }, { test: [/chrome|crios|crmo/i], describe: function(e3) {\n          var t3 = { name: \"Chrome\" }, r3 = i.default.getFirstMatch(/(?:chrome|crios|crmo)\\/(\\d+(\\.?_?\\d+)+)/i, e3);\n          return r3 && (t3.version = r3), t3;\n        } }, { test: [/GSA/i], describe: function(e3) {\n          var t3 = { name: \"Google Search\" }, r3 = i.default.getFirstMatch(/(?:GSA)\\/(\\d+(\\.?_?\\d+)+)/i, e3);\n          return r3 && (t3.version = r3), t3;\n        } }, { test: function(e3) {\n          var t3 = !e3.test(/like android/i), r3 = e3.test(/android/i);\n          return t3 && r3;\n        }, describe: function(e3) {\n          var t3 = { name: \"Android Browser\" }, r3 = i.default.getFirstMatch(s, e3);\n          return r3 && (t3.version = r3), t3;\n        } }, { test: [/playstation 4/i], describe: function(e3) {\n          var t3 = { name: \"PlayStation 4\" }, r3 = i.default.getFirstMatch(s, e3);\n          return r3 && (t3.version = r3), t3;\n        } }, { test: [/safari|applewebkit/i], describe: function(e3) {\n          var t3 = { name: \"Safari\" }, r3 = i.default.getFirstMatch(s, e3);\n          return r3 && (t3.version = r3), t3;\n        } }, { test: [/.*/i], describe: function(e3) {\n          var t3 = -1 !== e3.search(\"\\\\(\") ? /^(.*)\\/(.*)[ \\t]\\((.*)/ : /^(.*)\\/(.*) /;\n          return { name: i.default.getFirstMatch(t3, e3), version: i.default.getSecondMatch(t3, e3) };\n        } }];\n        t2.default = a, e2.exports = t2.default;\n      }, 93: function(e2, t2, r2) {\n        \"use strict\";\n        t2.__esModule = true, t2.default = void 0;\n        var n2, i = (n2 = r2(17)) && n2.__esModule ? n2 : { default: n2 }, s = r2(18);\n        var a = [{ test: [/Roku\\/DVP/], describe: function(e3) {\n          var t3 = i.default.getFirstMatch(/Roku\\/DVP-(\\d+\\.\\d+)/i, e3);\n          return { name: s.OS_MAP.Roku, version: t3 };\n        } }, { test: [/windows phone/i], describe: function(e3) {\n          var t3 = i.default.getFirstMatch(/windows phone (?:os)?\\s?(\\d+(\\.\\d+)*)/i, e3);\n          return { name: s.OS_MAP.WindowsPhone, version: t3 };\n        } }, { test: [/windows /i], describe: function(e3) {\n          var t3 = i.default.getFirstMatch(/Windows ((NT|XP)( \\d\\d?.\\d)?)/i, e3), r3 = i.default.getWindowsVersionName(t3);\n          return { name: s.OS_MAP.Windows, version: t3, versionName: r3 };\n        } }, { test: [/Macintosh(.*?) FxiOS(.*?)\\//], describe: function(e3) {\n          var t3 = { name: s.OS_MAP.iOS }, r3 = i.default.getSecondMatch(/(Version\\/)(\\d[\\d.]+)/, e3);\n          return r3 && (t3.version = r3), t3;\n        } }, { test: [/macintosh/i], describe: function(e3) {\n          var t3 = i.default.getFirstMatch(/mac os x (\\d+(\\.?_?\\d+)+)/i, e3).replace(/[_\\s]/g, \".\"), r3 = i.default.getMacOSVersionName(t3), n3 = { name: s.OS_MAP.MacOS, version: t3 };\n          return r3 && (n3.versionName = r3), n3;\n        } }, { test: [/(ipod|iphone|ipad)/i], describe: function(e3) {\n          var t3 = i.default.getFirstMatch(/os (\\d+([_\\s]\\d+)*) like mac os x/i, e3).replace(/[_\\s]/g, \".\");\n          return { name: s.OS_MAP.iOS, version: t3 };\n        } }, { test: function(e3) {\n          var t3 = !e3.test(/like android/i), r3 = e3.test(/android/i);\n          return t3 && r3;\n        }, describe: function(e3) {\n          var t3 = i.default.getFirstMatch(/android[\\s/-](\\d+(\\.\\d+)*)/i, e3), r3 = i.default.getAndroidVersionName(t3), n3 = { name: s.OS_MAP.Android, version: t3 };\n          return r3 && (n3.versionName = r3), n3;\n        } }, { test: [/(web|hpw)[o0]s/i], describe: function(e3) {\n          var t3 = i.default.getFirstMatch(/(?:web|hpw)[o0]s\\/(\\d+(\\.\\d+)*)/i, e3), r3 = { name: s.OS_MAP.WebOS };\n          return t3 && t3.length && (r3.version = t3), r3;\n        } }, { test: [/blackberry|\\bbb\\d+/i, /rim\\stablet/i], describe: function(e3) {\n          var t3 = i.default.getFirstMatch(/rim\\stablet\\sos\\s(\\d+(\\.\\d+)*)/i, e3) || i.default.getFirstMatch(/blackberry\\d+\\/(\\d+([_\\s]\\d+)*)/i, e3) || i.default.getFirstMatch(/\\bbb(\\d+)/i, e3);\n          return { name: s.OS_MAP.BlackBerry, version: t3 };\n        } }, { test: [/bada/i], describe: function(e3) {\n          var t3 = i.default.getFirstMatch(/bada\\/(\\d+(\\.\\d+)*)/i, e3);\n          return { name: s.OS_MAP.Bada, version: t3 };\n        } }, { test: [/tizen/i], describe: function(e3) {\n          var t3 = i.default.getFirstMatch(/tizen[/\\s](\\d+(\\.\\d+)*)/i, e3);\n          return { name: s.OS_MAP.Tizen, version: t3 };\n        } }, { test: [/linux/i], describe: function() {\n          return { name: s.OS_MAP.Linux };\n        } }, { test: [/CrOS/], describe: function() {\n          return { name: s.OS_MAP.ChromeOS };\n        } }, { test: [/PlayStation 4/], describe: function(e3) {\n          var t3 = i.default.getFirstMatch(/PlayStation 4[/\\s](\\d+(\\.\\d+)*)/i, e3);\n          return { name: s.OS_MAP.PlayStation4, version: t3 };\n        } }];\n        t2.default = a, e2.exports = t2.default;\n      }, 94: function(e2, t2, r2) {\n        \"use strict\";\n        t2.__esModule = true, t2.default = void 0;\n        var n2, i = (n2 = r2(17)) && n2.__esModule ? n2 : { default: n2 }, s = r2(18);\n        var a = [{ test: [/googlebot/i], describe: function() {\n          return { type: \"bot\", vendor: \"Google\" };\n        } }, { test: [/huawei/i], describe: function(e3) {\n          var t3 = i.default.getFirstMatch(/(can-l01)/i, e3) && \"Nova\", r3 = { type: s.PLATFORMS_MAP.mobile, vendor: \"Huawei\" };\n          return t3 && (r3.model = t3), r3;\n        } }, { test: [/nexus\\s*(?:7|8|9|10).*/i], describe: function() {\n          return { type: s.PLATFORMS_MAP.tablet, vendor: \"Nexus\" };\n        } }, { test: [/ipad/i], describe: function() {\n          return { type: s.PLATFORMS_MAP.tablet, vendor: \"Apple\", model: \"iPad\" };\n        } }, { test: [/Macintosh(.*?) FxiOS(.*?)\\//], describe: function() {\n          return { type: s.PLATFORMS_MAP.tablet, vendor: \"Apple\", model: \"iPad\" };\n        } }, { test: [/kftt build/i], describe: function() {\n          return { type: s.PLATFORMS_MAP.tablet, vendor: \"Amazon\", model: \"Kindle Fire HD 7\" };\n        } }, { test: [/silk/i], describe: function() {\n          return { type: s.PLATFORMS_MAP.tablet, vendor: \"Amazon\" };\n        } }, { test: [/tablet(?! pc)/i], describe: function() {\n          return { type: s.PLATFORMS_MAP.tablet };\n        } }, { test: function(e3) {\n          var t3 = e3.test(/ipod|iphone/i), r3 = e3.test(/like (ipod|iphone)/i);\n          return t3 && !r3;\n        }, describe: function(e3) {\n          var t3 = i.default.getFirstMatch(/(ipod|iphone)/i, e3);\n          return { type: s.PLATFORMS_MAP.mobile, vendor: \"Apple\", model: t3 };\n        } }, { test: [/nexus\\s*[0-6].*/i, /galaxy nexus/i], describe: function() {\n          return { type: s.PLATFORMS_MAP.mobile, vendor: \"Nexus\" };\n        } }, { test: [/[^-]mobi/i], describe: function() {\n          return { type: s.PLATFORMS_MAP.mobile };\n        } }, { test: function(e3) {\n          return \"blackberry\" === e3.getBrowserName(true);\n        }, describe: function() {\n          return { type: s.PLATFORMS_MAP.mobile, vendor: \"BlackBerry\" };\n        } }, { test: function(e3) {\n          return \"bada\" === e3.getBrowserName(true);\n        }, describe: function() {\n          return { type: s.PLATFORMS_MAP.mobile };\n        } }, { test: function(e3) {\n          return \"windows phone\" === e3.getBrowserName();\n        }, describe: function() {\n          return { type: s.PLATFORMS_MAP.mobile, vendor: \"Microsoft\" };\n        } }, { test: function(e3) {\n          var t3 = Number(String(e3.getOSVersion()).split(\".\")[0]);\n          return \"android\" === e3.getOSName(true) && t3 >= 3;\n        }, describe: function() {\n          return { type: s.PLATFORMS_MAP.tablet };\n        } }, { test: function(e3) {\n          return \"android\" === e3.getOSName(true);\n        }, describe: function() {\n          return { type: s.PLATFORMS_MAP.mobile };\n        } }, { test: function(e3) {\n          return \"macos\" === e3.getOSName(true);\n        }, describe: function() {\n          return { type: s.PLATFORMS_MAP.desktop, vendor: \"Apple\" };\n        } }, { test: function(e3) {\n          return \"windows\" === e3.getOSName(true);\n        }, describe: function() {\n          return { type: s.PLATFORMS_MAP.desktop };\n        } }, { test: function(e3) {\n          return \"linux\" === e3.getOSName(true);\n        }, describe: function() {\n          return { type: s.PLATFORMS_MAP.desktop };\n        } }, { test: function(e3) {\n          return \"playstation 4\" === e3.getOSName(true);\n        }, describe: function() {\n          return { type: s.PLATFORMS_MAP.tv };\n        } }, { test: function(e3) {\n          return \"roku\" === e3.getOSName(true);\n        }, describe: function() {\n          return { type: s.PLATFORMS_MAP.tv };\n        } }];\n        t2.default = a, e2.exports = t2.default;\n      }, 95: function(e2, t2, r2) {\n        \"use strict\";\n        t2.__esModule = true, t2.default = void 0;\n        var n2, i = (n2 = r2(17)) && n2.__esModule ? n2 : { default: n2 }, s = r2(18);\n        var a = [{ test: function(e3) {\n          return \"microsoft edge\" === e3.getBrowserName(true);\n        }, describe: function(e3) {\n          if (/\\sedg\\//i.test(e3))\n            return { name: s.ENGINE_MAP.Blink };\n          var t3 = i.default.getFirstMatch(/edge\\/(\\d+(\\.?_?\\d+)+)/i, e3);\n          return { name: s.ENGINE_MAP.EdgeHTML, version: t3 };\n        } }, { test: [/trident/i], describe: function(e3) {\n          var t3 = { name: s.ENGINE_MAP.Trident }, r3 = i.default.getFirstMatch(/trident\\/(\\d+(\\.?_?\\d+)+)/i, e3);\n          return r3 && (t3.version = r3), t3;\n        } }, { test: function(e3) {\n          return e3.test(/presto/i);\n        }, describe: function(e3) {\n          var t3 = { name: s.ENGINE_MAP.Presto }, r3 = i.default.getFirstMatch(/presto\\/(\\d+(\\.?_?\\d+)+)/i, e3);\n          return r3 && (t3.version = r3), t3;\n        } }, { test: function(e3) {\n          var t3 = e3.test(/gecko/i), r3 = e3.test(/like gecko/i);\n          return t3 && !r3;\n        }, describe: function(e3) {\n          var t3 = { name: s.ENGINE_MAP.Gecko }, r3 = i.default.getFirstMatch(/gecko\\/(\\d+(\\.?_?\\d+)+)/i, e3);\n          return r3 && (t3.version = r3), t3;\n        } }, { test: [/(apple)?webkit\\/537\\.36/i], describe: function() {\n          return { name: s.ENGINE_MAP.Blink };\n        } }, { test: [/(apple)?webkit/i], describe: function(e3) {\n          var t3 = { name: s.ENGINE_MAP.WebKit }, r3 = i.default.getFirstMatch(/webkit\\/(\\d+(\\.?_?\\d+)+)/i, e3);\n          return r3 && (t3.version = r3), t3;\n        } }];\n        t2.default = a, e2.exports = t2.default;\n      } });\n    });\n  }\n});\n\n// ../../node_modules/sdp-transform/lib/grammar.js\nvar require_grammar = __commonJS({\n  \"../../node_modules/sdp-transform/lib/grammar.js\"(exports, module) {\n    init_process();\n    var grammar = module.exports = {\n      v: [{\n        name: \"version\",\n        reg: /^(\\d*)$/\n      }],\n      o: [{\n        name: \"origin\",\n        reg: /^(\\S*) (\\d*) (\\d*) (\\S*) IP(\\d) (\\S*)/,\n        names: [\"username\", \"sessionId\", \"sessionVersion\", \"netType\", \"ipVer\", \"address\"],\n        format: \"%s %s %d %s IP%d %s\"\n      }],\n      s: [{ name: \"name\" }],\n      i: [{ name: \"description\" }],\n      u: [{ name: \"uri\" }],\n      e: [{ name: \"email\" }],\n      p: [{ name: \"phone\" }],\n      z: [{ name: \"timezones\" }],\n      r: [{ name: \"repeats\" }],\n      t: [{\n        name: \"timing\",\n        reg: /^(\\d*) (\\d*)/,\n        names: [\"start\", \"stop\"],\n        format: \"%d %d\"\n      }],\n      c: [{\n        name: \"connection\",\n        reg: /^IN IP(\\d) (\\S*)/,\n        names: [\"version\", \"ip\"],\n        format: \"IN IP%d %s\"\n      }],\n      b: [{\n        push: \"bandwidth\",\n        reg: /^(TIAS|AS|CT|RR|RS):(\\d*)/,\n        names: [\"type\", \"limit\"],\n        format: \"%s:%s\"\n      }],\n      m: [{\n        reg: /^(\\w*) (\\d*) ([\\w/]*)(?: (.*))?/,\n        names: [\"type\", \"port\", \"protocol\", \"payloads\"],\n        format: \"%s %d %s %s\"\n      }],\n      a: [\n        {\n          push: \"rtp\",\n          reg: /^rtpmap:(\\d*) ([\\w\\-.]*)(?:\\s*\\/(\\d*)(?:\\s*\\/(\\S*))?)?/,\n          names: [\"payload\", \"codec\", \"rate\", \"encoding\"],\n          format: function(o2) {\n            return o2.encoding ? \"rtpmap:%d %s/%s/%s\" : o2.rate ? \"rtpmap:%d %s/%s\" : \"rtpmap:%d %s\";\n          }\n        },\n        {\n          push: \"fmtp\",\n          reg: /^fmtp:(\\d*) ([\\S| ]*)/,\n          names: [\"payload\", \"config\"],\n          format: \"fmtp:%d %s\"\n        },\n        {\n          name: \"control\",\n          reg: /^control:(.*)/,\n          format: \"control:%s\"\n        },\n        {\n          name: \"rtcp\",\n          reg: /^rtcp:(\\d*)(?: (\\S*) IP(\\d) (\\S*))?/,\n          names: [\"port\", \"netType\", \"ipVer\", \"address\"],\n          format: function(o2) {\n            return o2.address != null ? \"rtcp:%d %s IP%d %s\" : \"rtcp:%d\";\n          }\n        },\n        {\n          push: \"rtcpFbTrrInt\",\n          reg: /^rtcp-fb:(\\*|\\d*) trr-int (\\d*)/,\n          names: [\"payload\", \"value\"],\n          format: \"rtcp-fb:%s trr-int %d\"\n        },\n        {\n          push: \"rtcpFb\",\n          reg: /^rtcp-fb:(\\*|\\d*) ([\\w-_]*)(?: ([\\w-_]*))?/,\n          names: [\"payload\", \"type\", \"subtype\"],\n          format: function(o2) {\n            return o2.subtype != null ? \"rtcp-fb:%s %s %s\" : \"rtcp-fb:%s %s\";\n          }\n        },\n        {\n          push: \"ext\",\n          reg: /^extmap:(\\d+)(?:\\/(\\w+))?(?: (urn:ietf:params:rtp-hdrext:encrypt))? (\\S*)(?: (\\S*))?/,\n          names: [\"value\", \"direction\", \"encrypt-uri\", \"uri\", \"config\"],\n          format: function(o2) {\n            return \"extmap:%d\" + (o2.direction ? \"/%s\" : \"%v\") + (o2[\"encrypt-uri\"] ? \" %s\" : \"%v\") + \" %s\" + (o2.config ? \" %s\" : \"\");\n          }\n        },\n        {\n          name: \"extmapAllowMixed\",\n          reg: /^(extmap-allow-mixed)/\n        },\n        {\n          push: \"crypto\",\n          reg: /^crypto:(\\d*) ([\\w_]*) (\\S*)(?: (\\S*))?/,\n          names: [\"id\", \"suite\", \"config\", \"sessionConfig\"],\n          format: function(o2) {\n            return o2.sessionConfig != null ? \"crypto:%d %s %s %s\" : \"crypto:%d %s %s\";\n          }\n        },\n        {\n          name: \"setup\",\n          reg: /^setup:(\\w*)/,\n          format: \"setup:%s\"\n        },\n        {\n          name: \"connectionType\",\n          reg: /^connection:(new|existing)/,\n          format: \"connection:%s\"\n        },\n        {\n          name: \"mid\",\n          reg: /^mid:([^\\s]*)/,\n          format: \"mid:%s\"\n        },\n        {\n          name: \"msid\",\n          reg: /^msid:(.*)/,\n          format: \"msid:%s\"\n        },\n        {\n          name: \"ptime\",\n          reg: /^ptime:(\\d*(?:\\.\\d*)*)/,\n          format: \"ptime:%d\"\n        },\n        {\n          name: \"maxptime\",\n          reg: /^maxptime:(\\d*(?:\\.\\d*)*)/,\n          format: \"maxptime:%d\"\n        },\n        {\n          name: \"direction\",\n          reg: /^(sendrecv|recvonly|sendonly|inactive)/\n        },\n        {\n          name: \"icelite\",\n          reg: /^(ice-lite)/\n        },\n        {\n          name: \"iceUfrag\",\n          reg: /^ice-ufrag:(\\S*)/,\n          format: \"ice-ufrag:%s\"\n        },\n        {\n          name: \"icePwd\",\n          reg: /^ice-pwd:(\\S*)/,\n          format: \"ice-pwd:%s\"\n        },\n        {\n          name: \"fingerprint\",\n          reg: /^fingerprint:(\\S*) (\\S*)/,\n          names: [\"type\", \"hash\"],\n          format: \"fingerprint:%s %s\"\n        },\n        {\n          push: \"candidates\",\n          reg: /^candidate:(\\S*) (\\d*) (\\S*) (\\d*) (\\S*) (\\d*) typ (\\S*)(?: raddr (\\S*) rport (\\d*))?(?: tcptype (\\S*))?(?: generation (\\d*))?(?: network-id (\\d*))?(?: network-cost (\\d*))?/,\n          names: [\"foundation\", \"component\", \"transport\", \"priority\", \"ip\", \"port\", \"type\", \"raddr\", \"rport\", \"tcptype\", \"generation\", \"network-id\", \"network-cost\"],\n          format: function(o2) {\n            var str = \"candidate:%s %d %s %d %s %d typ %s\";\n            str += o2.raddr != null ? \" raddr %s rport %d\" : \"%v%v\";\n            str += o2.tcptype != null ? \" tcptype %s\" : \"%v\";\n            if (o2.generation != null) {\n              str += \" generation %d\";\n            }\n            str += o2[\"network-id\"] != null ? \" network-id %d\" : \"%v\";\n            str += o2[\"network-cost\"] != null ? \" network-cost %d\" : \"%v\";\n            return str;\n          }\n        },\n        {\n          name: \"endOfCandidates\",\n          reg: /^(end-of-candidates)/\n        },\n        {\n          name: \"remoteCandidates\",\n          reg: /^remote-candidates:(.*)/,\n          format: \"remote-candidates:%s\"\n        },\n        {\n          name: \"iceOptions\",\n          reg: /^ice-options:(\\S*)/,\n          format: \"ice-options:%s\"\n        },\n        {\n          push: \"ssrcs\",\n          reg: /^ssrc:(\\d*) ([\\w_-]*)(?::(.*))?/,\n          names: [\"id\", \"attribute\", \"value\"],\n          format: function(o2) {\n            var str = \"ssrc:%d\";\n            if (o2.attribute != null) {\n              str += \" %s\";\n              if (o2.value != null) {\n                str += \":%s\";\n              }\n            }\n            return str;\n          }\n        },\n        {\n          push: \"ssrcGroups\",\n          reg: /^ssrc-group:([\\x21\\x23\\x24\\x25\\x26\\x27\\x2A\\x2B\\x2D\\x2E\\w]*) (.*)/,\n          names: [\"semantics\", \"ssrcs\"],\n          format: \"ssrc-group:%s %s\"\n        },\n        {\n          name: \"msidSemantic\",\n          reg: /^msid-semantic:\\s?(\\w*) (\\S*)/,\n          names: [\"semantic\", \"token\"],\n          format: \"msid-semantic: %s %s\"\n        },\n        {\n          push: \"groups\",\n          reg: /^group:(\\w*) (.*)/,\n          names: [\"type\", \"mids\"],\n          format: \"group:%s %s\"\n        },\n        {\n          name: \"rtcpMux\",\n          reg: /^(rtcp-mux)/\n        },\n        {\n          name: \"rtcpRsize\",\n          reg: /^(rtcp-rsize)/\n        },\n        {\n          name: \"sctpmap\",\n          reg: /^sctpmap:([\\w_/]*) (\\S*)(?: (\\S*))?/,\n          names: [\"sctpmapNumber\", \"app\", \"maxMessageSize\"],\n          format: function(o2) {\n            return o2.maxMessageSize != null ? \"sctpmap:%s %s %s\" : \"sctpmap:%s %s\";\n          }\n        },\n        {\n          name: \"xGoogleFlag\",\n          reg: /^x-google-flag:([^\\s]*)/,\n          format: \"x-google-flag:%s\"\n        },\n        {\n          push: \"rids\",\n          reg: /^rid:([\\d\\w]+) (\\w+)(?: ([\\S| ]*))?/,\n          names: [\"id\", \"direction\", \"params\"],\n          format: function(o2) {\n            return o2.params ? \"rid:%s %s %s\" : \"rid:%s %s\";\n          }\n        },\n        {\n          push: \"imageattrs\",\n          reg: new RegExp(\n            \"^imageattr:(\\\\d+|\\\\*)[\\\\s\\\\t]+(send|recv)[\\\\s\\\\t]+(\\\\*|\\\\[\\\\S+\\\\](?:[\\\\s\\\\t]+\\\\[\\\\S+\\\\])*)(?:[\\\\s\\\\t]+(recv|send)[\\\\s\\\\t]+(\\\\*|\\\\[\\\\S+\\\\](?:[\\\\s\\\\t]+\\\\[\\\\S+\\\\])*))?\"\n          ),\n          names: [\"pt\", \"dir1\", \"attrs1\", \"dir2\", \"attrs2\"],\n          format: function(o2) {\n            return \"imageattr:%s %s %s\" + (o2.dir2 ? \" %s %s\" : \"\");\n          }\n        },\n        {\n          name: \"simulcast\",\n          reg: new RegExp(\n            \"^simulcast:(send|recv) ([a-zA-Z0-9\\\\-_~;,]+)(?:\\\\s?(send|recv) ([a-zA-Z0-9\\\\-_~;,]+))?$\"\n          ),\n          names: [\"dir1\", \"list1\", \"dir2\", \"list2\"],\n          format: function(o2) {\n            return \"simulcast:%s %s\" + (o2.dir2 ? \" %s %s\" : \"\");\n          }\n        },\n        {\n          name: \"simulcast_03\",\n          reg: /^simulcast:[\\s\\t]+([\\S+\\s\\t]+)$/,\n          names: [\"value\"],\n          format: \"simulcast: %s\"\n        },\n        {\n          name: \"framerate\",\n          reg: /^framerate:(\\d+(?:$|\\.\\d+))/,\n          format: \"framerate:%s\"\n        },\n        {\n          name: \"sourceFilter\",\n          reg: /^source-filter: *(excl|incl) (\\S*) (IP4|IP6|\\*) (\\S*) (.*)/,\n          names: [\"filterMode\", \"netType\", \"addressTypes\", \"destAddress\", \"srcList\"],\n          format: \"source-filter: %s %s %s %s %s\"\n        },\n        {\n          name: \"bundleOnly\",\n          reg: /^(bundle-only)/\n        },\n        {\n          name: \"label\",\n          reg: /^label:(.+)/,\n          format: \"label:%s\"\n        },\n        {\n          name: \"sctpPort\",\n          reg: /^sctp-port:(\\d+)$/,\n          format: \"sctp-port:%s\"\n        },\n        {\n          name: \"maxMessageSize\",\n          reg: /^max-message-size:(\\d+)$/,\n          format: \"max-message-size:%s\"\n        },\n        {\n          push: \"tsRefClocks\",\n          reg: /^ts-refclk:([^\\s=]*)(?:=(\\S*))?/,\n          names: [\"clksrc\", \"clksrcExt\"],\n          format: function(o2) {\n            return \"ts-refclk:%s\" + (o2.clksrcExt != null ? \"=%s\" : \"\");\n          }\n        },\n        {\n          name: \"mediaClk\",\n          reg: /^mediaclk:(?:id=(\\S*))? *([^\\s=]*)(?:=(\\S*))?(?: *rate=(\\d+)\\/(\\d+))?/,\n          names: [\"id\", \"mediaClockName\", \"mediaClockValue\", \"rateNumerator\", \"rateDenominator\"],\n          format: function(o2) {\n            var str = \"mediaclk:\";\n            str += o2.id != null ? \"id=%s %s\" : \"%v%s\";\n            str += o2.mediaClockValue != null ? \"=%s\" : \"\";\n            str += o2.rateNumerator != null ? \" rate=%s\" : \"\";\n            str += o2.rateDenominator != null ? \"/%s\" : \"\";\n            return str;\n          }\n        },\n        {\n          name: \"keywords\",\n          reg: /^keywds:(.+)$/,\n          format: \"keywds:%s\"\n        },\n        {\n          name: \"content\",\n          reg: /^content:(.+)/,\n          format: \"content:%s\"\n        },\n        {\n          name: \"bfcpFloorCtrl\",\n          reg: /^floorctrl:(c-only|s-only|c-s)/,\n          format: \"floorctrl:%s\"\n        },\n        {\n          name: \"bfcpConfId\",\n          reg: /^confid:(\\d+)/,\n          format: \"confid:%s\"\n        },\n        {\n          name: \"bfcpUserId\",\n          reg: /^userid:(\\d+)/,\n          format: \"userid:%s\"\n        },\n        {\n          name: \"bfcpFloorId\",\n          reg: /^floorid:(.+) (?:m-stream|mstrm):(.+)/,\n          names: [\"id\", \"mStream\"],\n          format: \"floorid:%s mstrm:%s\"\n        },\n        {\n          push: \"invalid\",\n          names: [\"value\"]\n        }\n      ]\n    };\n    Object.keys(grammar).forEach(function(key) {\n      var objs = grammar[key];\n      objs.forEach(function(obj) {\n        if (!obj.reg) {\n          obj.reg = /(.*)/;\n        }\n        if (!obj.format) {\n          obj.format = \"%s\";\n        }\n      });\n    });\n  }\n});\n\n// ../../node_modules/sdp-transform/lib/parser.js\nvar require_parser = __commonJS({\n  \"../../node_modules/sdp-transform/lib/parser.js\"(exports) {\n    init_process();\n    var toIntIfInt = function(v) {\n      return String(Number(v)) === v ? Number(v) : v;\n    };\n    var attachProperties = function(match, location, names, rawName) {\n      if (rawName && !names) {\n        location[rawName] = toIntIfInt(match[1]);\n      } else {\n        for (var i = 0; i < names.length; i += 1) {\n          if (match[i + 1] != null) {\n            location[names[i]] = toIntIfInt(match[i + 1]);\n          }\n        }\n      }\n    };\n    var parseReg = function(obj, location, content) {\n      var needsBlank = obj.name && obj.names;\n      if (obj.push && !location[obj.push]) {\n        location[obj.push] = [];\n      } else if (needsBlank && !location[obj.name]) {\n        location[obj.name] = {};\n      }\n      var keyLocation = obj.push ? {} : needsBlank ? location[obj.name] : location;\n      attachProperties(content.match(obj.reg), keyLocation, obj.names, obj.name);\n      if (obj.push) {\n        location[obj.push].push(keyLocation);\n      }\n    };\n    var grammar = require_grammar();\n    var validLine = RegExp.prototype.test.bind(/^([a-z])=(.*)/);\n    exports.parse = function(sdp) {\n      var session = {}, media = [], location = session;\n      sdp.split(/(\\r\\n|\\r|\\n)/).filter(validLine).forEach(function(l) {\n        var type = l[0];\n        var content = l.slice(2);\n        if (type === \"m\") {\n          media.push({ rtp: [], fmtp: [] });\n          location = media[media.length - 1];\n        }\n        for (var j = 0; j < (grammar[type] || []).length; j += 1) {\n          var obj = grammar[type][j];\n          if (obj.reg.test(content)) {\n            return parseReg(obj, location, content);\n          }\n        }\n      });\n      session.media = media;\n      return session;\n    };\n    var paramReducer = function(acc, expr) {\n      var s = expr.split(/=(.+)/, 2);\n      if (s.length === 2) {\n        acc[s[0]] = toIntIfInt(s[1]);\n      } else if (s.length === 1 && expr.length > 1) {\n        acc[s[0]] = void 0;\n      }\n      return acc;\n    };\n    exports.parseParams = function(str) {\n      return str.split(/;\\s?/).reduce(paramReducer, {});\n    };\n    exports.parseFmtpConfig = exports.parseParams;\n    exports.parsePayloads = function(str) {\n      return str.toString().split(\" \").map(Number);\n    };\n    exports.parseRemoteCandidates = function(str) {\n      var candidates = [];\n      var parts = str.split(\" \").map(toIntIfInt);\n      for (var i = 0; i < parts.length; i += 3) {\n        candidates.push({\n          component: parts[i],\n          ip: parts[i + 1],\n          port: parts[i + 2]\n        });\n      }\n      return candidates;\n    };\n    exports.parseImageAttributes = function(str) {\n      return str.split(\" \").map(function(item) {\n        return item.substring(1, item.length - 1).split(\",\").reduce(paramReducer, {});\n      });\n    };\n    exports.parseSimulcastStreamList = function(str) {\n      return str.split(\";\").map(function(stream) {\n        return stream.split(\",\").map(function(format) {\n          var scid, paused = false;\n          if (format[0] !== \"~\") {\n            scid = toIntIfInt(format);\n          } else {\n            scid = toIntIfInt(format.substring(1, format.length));\n            paused = true;\n          }\n          return {\n            scid,\n            paused\n          };\n        });\n      });\n    };\n  }\n});\n\n// ../../node_modules/sdp-transform/lib/writer.js\nvar require_writer = __commonJS({\n  \"../../node_modules/sdp-transform/lib/writer.js\"(exports, module) {\n    init_process();\n    var grammar = require_grammar();\n    var formatRegExp = /%[sdv%]/g;\n    var format = function(formatStr) {\n      var i = 1;\n      var args = arguments;\n      var len = args.length;\n      return formatStr.replace(formatRegExp, function(x) {\n        if (i >= len) {\n          return x;\n        }\n        var arg = args[i];\n        i += 1;\n        switch (x) {\n          case \"%%\":\n            return \"%\";\n          case \"%s\":\n            return String(arg);\n          case \"%d\":\n            return Number(arg);\n          case \"%v\":\n            return \"\";\n        }\n      });\n    };\n    var makeLine = function(type, obj, location) {\n      var str = obj.format instanceof Function ? obj.format(obj.push ? location : location[obj.name]) : obj.format;\n      var args = [type + \"=\" + str];\n      if (obj.names) {\n        for (var i = 0; i < obj.names.length; i += 1) {\n          var n2 = obj.names[i];\n          if (obj.name) {\n            args.push(location[obj.name][n2]);\n          } else {\n            args.push(location[obj.names[i]]);\n          }\n        }\n      } else {\n        args.push(location[obj.name]);\n      }\n      return format.apply(null, args);\n    };\n    var defaultOuterOrder = [\n      \"v\",\n      \"o\",\n      \"s\",\n      \"i\",\n      \"u\",\n      \"e\",\n      \"p\",\n      \"c\",\n      \"b\",\n      \"t\",\n      \"r\",\n      \"z\",\n      \"a\"\n    ];\n    var defaultInnerOrder = [\"i\", \"c\", \"b\", \"a\"];\n    module.exports = function(session, opts) {\n      opts = opts || {};\n      if (session.version == null) {\n        session.version = 0;\n      }\n      if (session.name == null) {\n        session.name = \" \";\n      }\n      session.media.forEach(function(mLine) {\n        if (mLine.payloads == null) {\n          mLine.payloads = \"\";\n        }\n      });\n      var outerOrder = opts.outerOrder || defaultOuterOrder;\n      var innerOrder = opts.innerOrder || defaultInnerOrder;\n      var sdp = [];\n      outerOrder.forEach(function(type) {\n        grammar[type].forEach(function(obj) {\n          if (obj.name in session && session[obj.name] != null) {\n            sdp.push(makeLine(type, obj, session));\n          } else if (obj.push in session && session[obj.push] != null) {\n            session[obj.push].forEach(function(el) {\n              sdp.push(makeLine(type, obj, el));\n            });\n          }\n        });\n      });\n      session.media.forEach(function(mLine) {\n        sdp.push(makeLine(\"m\", grammar.m[0], mLine));\n        innerOrder.forEach(function(type) {\n          grammar[type].forEach(function(obj) {\n            if (obj.name in mLine && mLine[obj.name] != null) {\n              sdp.push(makeLine(type, obj, mLine));\n            } else if (obj.push in mLine && mLine[obj.push] != null) {\n              mLine[obj.push].forEach(function(el) {\n                sdp.push(makeLine(type, obj, el));\n              });\n            }\n          });\n        });\n      });\n      return sdp.join(\"\\r\\n\") + \"\\r\\n\";\n    };\n  }\n});\n\n// ../../node_modules/sdp-transform/lib/index.js\nvar require_lib = __commonJS({\n  \"../../node_modules/sdp-transform/lib/index.js\"(exports) {\n    init_process();\n    var parser = require_parser();\n    var writer = require_writer();\n    exports.write = writer;\n    exports.parse = parser.parse;\n    exports.parseParams = parser.parseParams;\n    exports.parseFmtpConfig = parser.parseFmtpConfig;\n    exports.parsePayloads = parser.parsePayloads;\n    exports.parseRemoteCandidates = parser.parseRemoteCandidates;\n    exports.parseImageAttributes = parser.parseImageAttributes;\n    exports.parseSimulcastStreamList = parser.parseSimulcastStreamList;\n  }\n});\n\n// ../../node_modules/isomorphic-ws/browser.js\nvar require_browser = __commonJS({\n  \"../../node_modules/isomorphic-ws/browser.js\"(exports, module) {\n    init_process();\n    var ws = null;\n    if (typeof WebSocket !== \"undefined\") {\n      ws = WebSocket;\n    } else if (typeof MozWebSocket !== \"undefined\") {\n      ws = MozWebSocket;\n    } else if (typeof global !== \"undefined\") {\n      ws = global.WebSocket || global.MozWebSocket;\n    } else if (typeof window !== \"undefined\") {\n      ws = window.WebSocket || window.MozWebSocket;\n    } else if (typeof self !== \"undefined\") {\n      ws = self.WebSocket || self.MozWebSocket;\n    }\n    module.exports = ws;\n  }\n});\n\n// ../../node_modules/jsrsasign/lib/jsrsasign.js\nvar require_jsrsasign = __commonJS({\n  \"../../node_modules/jsrsasign/lib/jsrsasign.js\"(exports) {\n    init_process();\n    var navigator2 = {};\n    navigator2.userAgent = false;\n    var window2 = {};\n    var CryptoJS = CryptoJS || function(e2, g) {\n      var a = {};\n      var b = a.lib = {};\n      var j = b.Base = function() {\n        function n2() {\n        }\n        return { extend: function(p) {\n          n2.prototype = this;\n          var o2 = new n2();\n          if (p) {\n            o2.mixIn(p);\n          }\n          if (!o2.hasOwnProperty(\"init\")) {\n            o2.init = function() {\n              o2.$super.init.apply(this, arguments);\n            };\n          }\n          o2.init.prototype = o2;\n          o2.$super = this;\n          return o2;\n        }, create: function() {\n          var o2 = this.extend();\n          o2.init.apply(o2, arguments);\n          return o2;\n        }, init: function() {\n        }, mixIn: function(p) {\n          for (var o2 in p) {\n            if (p.hasOwnProperty(o2)) {\n              this[o2] = p[o2];\n            }\n          }\n          if (p.hasOwnProperty(\"toString\")) {\n            this.toString = p.toString;\n          }\n        }, clone: function() {\n          return this.init.prototype.extend(this);\n        } };\n      }();\n      var l = b.WordArray = j.extend({ init: function(o2, n2) {\n        o2 = this.words = o2 || [];\n        if (n2 != g) {\n          this.sigBytes = n2;\n        } else {\n          this.sigBytes = o2.length * 4;\n        }\n      }, toString: function(n2) {\n        return (n2 || h).stringify(this);\n      }, concat: function(t3) {\n        var q = this.words;\n        var p = t3.words;\n        var n2 = this.sigBytes;\n        var s = t3.sigBytes;\n        this.clamp();\n        if (n2 % 4) {\n          for (var r2 = 0; r2 < s; r2++) {\n            var o2 = p[r2 >>> 2] >>> 24 - r2 % 4 * 8 & 255;\n            q[n2 + r2 >>> 2] |= o2 << 24 - (n2 + r2) % 4 * 8;\n          }\n        } else {\n          for (var r2 = 0; r2 < s; r2 += 4) {\n            q[n2 + r2 >>> 2] = p[r2 >>> 2];\n          }\n        }\n        this.sigBytes += s;\n        return this;\n      }, clamp: function() {\n        var o2 = this.words;\n        var n2 = this.sigBytes;\n        o2[n2 >>> 2] &= 4294967295 << 32 - n2 % 4 * 8;\n        o2.length = e2.ceil(n2 / 4);\n      }, clone: function() {\n        var n2 = j.clone.call(this);\n        n2.words = this.words.slice(0);\n        return n2;\n      }, random: function(p) {\n        var o2 = [];\n        for (var n2 = 0; n2 < p; n2 += 4) {\n          o2.push(e2.random() * 4294967296 | 0);\n        }\n        return new l.init(o2, p);\n      } });\n      var m = a.enc = {};\n      var h = m.Hex = { stringify: function(p) {\n        var r2 = p.words;\n        var o2 = p.sigBytes;\n        var q = [];\n        for (var n2 = 0; n2 < o2; n2++) {\n          var s = r2[n2 >>> 2] >>> 24 - n2 % 4 * 8 & 255;\n          q.push((s >>> 4).toString(16));\n          q.push((s & 15).toString(16));\n        }\n        return q.join(\"\");\n      }, parse: function(p) {\n        var n2 = p.length;\n        var q = [];\n        for (var o2 = 0; o2 < n2; o2 += 2) {\n          q[o2 >>> 3] |= parseInt(p.substr(o2, 2), 16) << 24 - o2 % 8 * 4;\n        }\n        return new l.init(q, n2 / 2);\n      } };\n      var d = m.Latin1 = { stringify: function(q) {\n        var r2 = q.words;\n        var p = q.sigBytes;\n        var n2 = [];\n        for (var o2 = 0; o2 < p; o2++) {\n          var s = r2[o2 >>> 2] >>> 24 - o2 % 4 * 8 & 255;\n          n2.push(String.fromCharCode(s));\n        }\n        return n2.join(\"\");\n      }, parse: function(p) {\n        var n2 = p.length;\n        var q = [];\n        for (var o2 = 0; o2 < n2; o2++) {\n          q[o2 >>> 2] |= (p.charCodeAt(o2) & 255) << 24 - o2 % 4 * 8;\n        }\n        return new l.init(q, n2);\n      } };\n      var c = m.Utf8 = { stringify: function(n2) {\n        try {\n          return decodeURIComponent(escape(d.stringify(n2)));\n        } catch (o2) {\n          throw new Error(\"Malformed UTF-8 data\");\n        }\n      }, parse: function(n2) {\n        return d.parse(unescape(encodeURIComponent(n2)));\n      } };\n      var i = b.BufferedBlockAlgorithm = j.extend({ reset: function() {\n        this._data = new l.init();\n        this._nDataBytes = 0;\n      }, _append: function(n2) {\n        if (typeof n2 == \"string\") {\n          n2 = c.parse(n2);\n        }\n        this._data.concat(n2);\n        this._nDataBytes += n2.sigBytes;\n      }, _process: function(w) {\n        var q = this._data;\n        var x = q.words;\n        var n2 = q.sigBytes;\n        var t3 = this.blockSize;\n        var v = t3 * 4;\n        var u = n2 / v;\n        if (w) {\n          u = e2.ceil(u);\n        } else {\n          u = e2.max((u | 0) - this._minBufferSize, 0);\n        }\n        var s = u * t3;\n        var r2 = e2.min(s * 4, n2);\n        if (s) {\n          for (var p = 0; p < s; p += t3) {\n            this._doProcessBlock(x, p);\n          }\n          var o2 = x.splice(0, s);\n          q.sigBytes -= r2;\n        }\n        return new l.init(o2, r2);\n      }, clone: function() {\n        var n2 = j.clone.call(this);\n        n2._data = this._data.clone();\n        return n2;\n      }, _minBufferSize: 0 });\n      var f = b.Hasher = i.extend({ cfg: j.extend(), init: function(n2) {\n        this.cfg = this.cfg.extend(n2);\n        this.reset();\n      }, reset: function() {\n        i.reset.call(this);\n        this._doReset();\n      }, update: function(n2) {\n        this._append(n2);\n        this._process();\n        return this;\n      }, finalize: function(n2) {\n        if (n2) {\n          this._append(n2);\n        }\n        var o2 = this._doFinalize();\n        return o2;\n      }, blockSize: 512 / 32, _createHelper: function(n2) {\n        return function(p, o2) {\n          return new n2.init(o2).finalize(p);\n        };\n      }, _createHmacHelper: function(n2) {\n        return function(p, o2) {\n          return new k.HMAC.init(n2, o2).finalize(p);\n        };\n      } });\n      var k = a.algo = {};\n      return a;\n    }(Math);\n    (function(g) {\n      var a = CryptoJS, f = a.lib, e2 = f.Base, h = f.WordArray, a = a.x64 = {};\n      a.Word = e2.extend({ init: function(b, c) {\n        this.high = b;\n        this.low = c;\n      } });\n      a.WordArray = e2.extend({ init: function(b, c) {\n        b = this.words = b || [];\n        this.sigBytes = c != g ? c : 8 * b.length;\n      }, toX32: function() {\n        for (var b = this.words, c = b.length, a2 = [], d = 0; d < c; d++) {\n          var e3 = b[d];\n          a2.push(e3.high);\n          a2.push(e3.low);\n        }\n        return h.create(a2, this.sigBytes);\n      }, clone: function() {\n        for (var b = e2.clone.call(this), c = b.words = this.words.slice(0), a2 = c.length, d = 0; d < a2; d++)\n          c[d] = c[d].clone();\n        return b;\n      } });\n    })();\n    CryptoJS.lib.Cipher || function(u) {\n      var g = CryptoJS, f = g.lib, k = f.Base, l = f.WordArray, q = f.BufferedBlockAlgorithm, r2 = g.enc.Base64, v = g.algo.EvpKDF, n2 = f.Cipher = q.extend({ cfg: k.extend(), createEncryptor: function(a, b) {\n        return this.create(this._ENC_XFORM_MODE, a, b);\n      }, createDecryptor: function(a, b) {\n        return this.create(this._DEC_XFORM_MODE, a, b);\n      }, init: function(a, b, c) {\n        this.cfg = this.cfg.extend(c);\n        this._xformMode = a;\n        this._key = b;\n        this.reset();\n      }, reset: function() {\n        q.reset.call(this);\n        this._doReset();\n      }, process: function(a) {\n        this._append(a);\n        return this._process();\n      }, finalize: function(a) {\n        a && this._append(a);\n        return this._doFinalize();\n      }, keySize: 4, ivSize: 4, _ENC_XFORM_MODE: 1, _DEC_XFORM_MODE: 2, _createHelper: function(a) {\n        return { encrypt: function(b, c, d) {\n          return (\"string\" == typeof c ? s : j).encrypt(a, b, c, d);\n        }, decrypt: function(b, c, d) {\n          return (\"string\" == typeof c ? s : j).decrypt(a, b, c, d);\n        } };\n      } });\n      f.StreamCipher = n2.extend({ _doFinalize: function() {\n        return this._process(true);\n      }, blockSize: 1 });\n      var m = g.mode = {}, t3 = function(a, b, c) {\n        var d = this._iv;\n        d ? this._iv = u : d = this._prevBlock;\n        for (var e2 = 0; e2 < c; e2++)\n          a[b + e2] ^= d[e2];\n      }, h = (f.BlockCipherMode = k.extend({ createEncryptor: function(a, b) {\n        return this.Encryptor.create(a, b);\n      }, createDecryptor: function(a, b) {\n        return this.Decryptor.create(a, b);\n      }, init: function(a, b) {\n        this._cipher = a;\n        this._iv = b;\n      } })).extend();\n      h.Encryptor = h.extend({ processBlock: function(a, b) {\n        var c = this._cipher, d = c.blockSize;\n        t3.call(this, a, b, d);\n        c.encryptBlock(a, b);\n        this._prevBlock = a.slice(b, b + d);\n      } });\n      h.Decryptor = h.extend({ processBlock: function(a, b) {\n        var c = this._cipher, d = c.blockSize, e2 = a.slice(b, b + d);\n        c.decryptBlock(\n          a,\n          b\n        );\n        t3.call(this, a, b, d);\n        this._prevBlock = e2;\n      } });\n      m = m.CBC = h;\n      h = (g.pad = {}).Pkcs7 = { pad: function(a, b) {\n        for (var c = 4 * b, c = c - a.sigBytes % c, d = c << 24 | c << 16 | c << 8 | c, e2 = [], f2 = 0; f2 < c; f2 += 4)\n          e2.push(d);\n        c = l.create(e2, c);\n        a.concat(c);\n      }, unpad: function(a) {\n        a.sigBytes -= a.words[a.sigBytes - 1 >>> 2] & 255;\n      } };\n      f.BlockCipher = n2.extend({ cfg: n2.cfg.extend({ mode: m, padding: h }), reset: function() {\n        n2.reset.call(this);\n        var a = this.cfg, b = a.iv, a = a.mode;\n        if (this._xformMode == this._ENC_XFORM_MODE)\n          var c = a.createEncryptor;\n        else\n          c = a.createDecryptor, this._minBufferSize = 1;\n        this._mode = c.call(a, this, b && b.words);\n      }, _doProcessBlock: function(a, b) {\n        this._mode.processBlock(a, b);\n      }, _doFinalize: function() {\n        var a = this.cfg.padding;\n        if (this._xformMode == this._ENC_XFORM_MODE) {\n          a.pad(this._data, this.blockSize);\n          var b = this._process(true);\n        } else\n          b = this._process(true), a.unpad(b);\n        return b;\n      }, blockSize: 4 });\n      var p = f.CipherParams = k.extend({ init: function(a) {\n        this.mixIn(a);\n      }, toString: function(a) {\n        return (a || this.formatter).stringify(this);\n      } }), m = (g.format = {}).OpenSSL = { stringify: function(a) {\n        var b = a.ciphertext;\n        a = a.salt;\n        return (a ? l.create([1398893684, 1701076831]).concat(a).concat(b) : b).toString(r2);\n      }, parse: function(a) {\n        a = r2.parse(a);\n        var b = a.words;\n        if (1398893684 == b[0] && 1701076831 == b[1]) {\n          var c = l.create(b.slice(2, 4));\n          b.splice(0, 4);\n          a.sigBytes -= 16;\n        }\n        return p.create({ ciphertext: a, salt: c });\n      } }, j = f.SerializableCipher = k.extend({ cfg: k.extend({ format: m }), encrypt: function(a, b, c, d) {\n        d = this.cfg.extend(d);\n        var e2 = a.createEncryptor(c, d);\n        b = e2.finalize(b);\n        e2 = e2.cfg;\n        return p.create({\n          ciphertext: b,\n          key: c,\n          iv: e2.iv,\n          algorithm: a,\n          mode: e2.mode,\n          padding: e2.padding,\n          blockSize: a.blockSize,\n          formatter: d.format\n        });\n      }, decrypt: function(a, b, c, d) {\n        d = this.cfg.extend(d);\n        b = this._parse(b, d.format);\n        return a.createDecryptor(c, d).finalize(b.ciphertext);\n      }, _parse: function(a, b) {\n        return \"string\" == typeof a ? b.parse(a, this) : a;\n      } }), g = (g.kdf = {}).OpenSSL = { execute: function(a, b, c, d) {\n        d || (d = l.random(8));\n        a = v.create({ keySize: b + c }).compute(a, d);\n        c = l.create(a.words.slice(b), 4 * c);\n        a.sigBytes = 4 * b;\n        return p.create({ key: a, iv: c, salt: d });\n      } }, s = f.PasswordBasedCipher = j.extend({ cfg: j.cfg.extend({ kdf: g }), encrypt: function(a, b, c, d) {\n        d = this.cfg.extend(d);\n        c = d.kdf.execute(c, a.keySize, a.ivSize);\n        d.iv = c.iv;\n        a = j.encrypt.call(this, a, b, c.key, d);\n        a.mixIn(c);\n        return a;\n      }, decrypt: function(a, b, c, d) {\n        d = this.cfg.extend(d);\n        b = this._parse(b, d.format);\n        c = d.kdf.execute(c, a.keySize, a.ivSize, b.salt);\n        d.iv = c.iv;\n        return j.decrypt.call(this, a, b, c.key, d);\n      } });\n    }();\n    (function() {\n      for (var q = CryptoJS, x = q.lib.BlockCipher, r2 = q.algo, j = [], y = [], z2 = [], A = [], B = [], C = [], s = [], u = [], v = [], w = [], g = [], k = 0; 256 > k; k++)\n        g[k] = 128 > k ? k << 1 : k << 1 ^ 283;\n      for (var n2 = 0, l = 0, k = 0; 256 > k; k++) {\n        var f = l ^ l << 1 ^ l << 2 ^ l << 3 ^ l << 4, f = f >>> 8 ^ f & 255 ^ 99;\n        j[n2] = f;\n        y[f] = n2;\n        var t3 = g[n2], D = g[t3], E = g[D], b = 257 * g[f] ^ 16843008 * f;\n        z2[n2] = b << 24 | b >>> 8;\n        A[n2] = b << 16 | b >>> 16;\n        B[n2] = b << 8 | b >>> 24;\n        C[n2] = b;\n        b = 16843009 * E ^ 65537 * D ^ 257 * t3 ^ 16843008 * n2;\n        s[f] = b << 24 | b >>> 8;\n        u[f] = b << 16 | b >>> 16;\n        v[f] = b << 8 | b >>> 24;\n        w[f] = b;\n        n2 ? (n2 = t3 ^ g[g[g[E ^ t3]]], l ^= g[g[l]]) : n2 = l = 1;\n      }\n      var F = [\n        0,\n        1,\n        2,\n        4,\n        8,\n        16,\n        32,\n        64,\n        128,\n        27,\n        54\n      ], r2 = r2.AES = x.extend({ _doReset: function() {\n        for (var c = this._key, e2 = c.words, a = c.sigBytes / 4, c = 4 * ((this._nRounds = a + 6) + 1), b2 = this._keySchedule = [], h = 0; h < c; h++)\n          if (h < a)\n            b2[h] = e2[h];\n          else {\n            var d = b2[h - 1];\n            h % a ? 6 < a && 4 == h % a && (d = j[d >>> 24] << 24 | j[d >>> 16 & 255] << 16 | j[d >>> 8 & 255] << 8 | j[d & 255]) : (d = d << 8 | d >>> 24, d = j[d >>> 24] << 24 | j[d >>> 16 & 255] << 16 | j[d >>> 8 & 255] << 8 | j[d & 255], d ^= F[h / a | 0] << 24);\n            b2[h] = b2[h - a] ^ d;\n          }\n        e2 = this._invKeySchedule = [];\n        for (a = 0; a < c; a++)\n          h = c - a, d = a % 4 ? b2[h] : b2[h - 4], e2[a] = 4 > a || 4 >= h ? d : s[j[d >>> 24]] ^ u[j[d >>> 16 & 255]] ^ v[j[d >>> 8 & 255]] ^ w[j[d & 255]];\n      }, encryptBlock: function(c, e2) {\n        this._doCryptBlock(c, e2, this._keySchedule, z2, A, B, C, j);\n      }, decryptBlock: function(c, e2) {\n        var a = c[e2 + 1];\n        c[e2 + 1] = c[e2 + 3];\n        c[e2 + 3] = a;\n        this._doCryptBlock(c, e2, this._invKeySchedule, s, u, v, w, y);\n        a = c[e2 + 1];\n        c[e2 + 1] = c[e2 + 3];\n        c[e2 + 3] = a;\n      }, _doCryptBlock: function(c, e2, a, b2, h, d, j2, m) {\n        for (var n3 = this._nRounds, f2 = c[e2] ^ a[0], g2 = c[e2 + 1] ^ a[1], k2 = c[e2 + 2] ^ a[2], p = c[e2 + 3] ^ a[3], l2 = 4, t4 = 1; t4 < n3; t4++)\n          var q2 = b2[f2 >>> 24] ^ h[g2 >>> 16 & 255] ^ d[k2 >>> 8 & 255] ^ j2[p & 255] ^ a[l2++], r3 = b2[g2 >>> 24] ^ h[k2 >>> 16 & 255] ^ d[p >>> 8 & 255] ^ j2[f2 & 255] ^ a[l2++], s2 = b2[k2 >>> 24] ^ h[p >>> 16 & 255] ^ d[f2 >>> 8 & 255] ^ j2[g2 & 255] ^ a[l2++], p = b2[p >>> 24] ^ h[f2 >>> 16 & 255] ^ d[g2 >>> 8 & 255] ^ j2[k2 & 255] ^ a[l2++], f2 = q2, g2 = r3, k2 = s2;\n        q2 = (m[f2 >>> 24] << 24 | m[g2 >>> 16 & 255] << 16 | m[k2 >>> 8 & 255] << 8 | m[p & 255]) ^ a[l2++];\n        r3 = (m[g2 >>> 24] << 24 | m[k2 >>> 16 & 255] << 16 | m[p >>> 8 & 255] << 8 | m[f2 & 255]) ^ a[l2++];\n        s2 = (m[k2 >>> 24] << 24 | m[p >>> 16 & 255] << 16 | m[f2 >>> 8 & 255] << 8 | m[g2 & 255]) ^ a[l2++];\n        p = (m[p >>> 24] << 24 | m[f2 >>> 16 & 255] << 16 | m[g2 >>> 8 & 255] << 8 | m[k2 & 255]) ^ a[l2++];\n        c[e2] = q2;\n        c[e2 + 1] = r3;\n        c[e2 + 2] = s2;\n        c[e2 + 3] = p;\n      }, keySize: 8 });\n      q.AES = x._createHelper(r2);\n    })();\n    (function() {\n      function j(b, c) {\n        var a = (this._lBlock >>> b ^ this._rBlock) & c;\n        this._rBlock ^= a;\n        this._lBlock ^= a << b;\n      }\n      function l(b, c) {\n        var a = (this._rBlock >>> b ^ this._lBlock) & c;\n        this._lBlock ^= a;\n        this._rBlock ^= a << b;\n      }\n      var h = CryptoJS, e2 = h.lib, n2 = e2.WordArray, e2 = e2.BlockCipher, g = h.algo, q = [57, 49, 41, 33, 25, 17, 9, 1, 58, 50, 42, 34, 26, 18, 10, 2, 59, 51, 43, 35, 27, 19, 11, 3, 60, 52, 44, 36, 63, 55, 47, 39, 31, 23, 15, 7, 62, 54, 46, 38, 30, 22, 14, 6, 61, 53, 45, 37, 29, 21, 13, 5, 28, 20, 12, 4], p = [\n        14,\n        17,\n        11,\n        24,\n        1,\n        5,\n        3,\n        28,\n        15,\n        6,\n        21,\n        10,\n        23,\n        19,\n        12,\n        4,\n        26,\n        8,\n        16,\n        7,\n        27,\n        20,\n        13,\n        2,\n        41,\n        52,\n        31,\n        37,\n        47,\n        55,\n        30,\n        40,\n        51,\n        45,\n        33,\n        48,\n        44,\n        49,\n        39,\n        56,\n        34,\n        53,\n        46,\n        42,\n        50,\n        36,\n        29,\n        32\n      ], r2 = [1, 2, 4, 6, 8, 10, 12, 14, 15, 17, 19, 21, 23, 25, 27, 28], s = [{\n        \"0\": 8421888,\n        268435456: 32768,\n        536870912: 8421378,\n        805306368: 2,\n        1073741824: 512,\n        1342177280: 8421890,\n        1610612736: 8389122,\n        1879048192: 8388608,\n        2147483648: 514,\n        2415919104: 8389120,\n        2684354560: 33280,\n        2952790016: 8421376,\n        3221225472: 32770,\n        3489660928: 8388610,\n        3758096384: 0,\n        4026531840: 33282,\n        134217728: 0,\n        402653184: 8421890,\n        671088640: 33282,\n        939524096: 32768,\n        1207959552: 8421888,\n        1476395008: 512,\n        1744830464: 8421378,\n        2013265920: 2,\n        2281701376: 8389120,\n        2550136832: 33280,\n        2818572288: 8421376,\n        3087007744: 8389122,\n        3355443200: 8388610,\n        3623878656: 32770,\n        3892314112: 514,\n        4160749568: 8388608,\n        1: 32768,\n        268435457: 2,\n        536870913: 8421888,\n        805306369: 8388608,\n        1073741825: 8421378,\n        1342177281: 33280,\n        1610612737: 512,\n        1879048193: 8389122,\n        2147483649: 8421890,\n        2415919105: 8421376,\n        2684354561: 8388610,\n        2952790017: 33282,\n        3221225473: 514,\n        3489660929: 8389120,\n        3758096385: 32770,\n        4026531841: 0,\n        134217729: 8421890,\n        402653185: 8421376,\n        671088641: 8388608,\n        939524097: 512,\n        1207959553: 32768,\n        1476395009: 8388610,\n        1744830465: 2,\n        2013265921: 33282,\n        2281701377: 32770,\n        2550136833: 8389122,\n        2818572289: 514,\n        3087007745: 8421888,\n        3355443201: 8389120,\n        3623878657: 0,\n        3892314113: 33280,\n        4160749569: 8421378\n      }, {\n        \"0\": 1074282512,\n        16777216: 16384,\n        33554432: 524288,\n        50331648: 1074266128,\n        67108864: 1073741840,\n        83886080: 1074282496,\n        100663296: 1073758208,\n        117440512: 16,\n        134217728: 540672,\n        150994944: 1073758224,\n        167772160: 1073741824,\n        184549376: 540688,\n        201326592: 524304,\n        218103808: 0,\n        234881024: 16400,\n        251658240: 1074266112,\n        8388608: 1073758208,\n        25165824: 540688,\n        41943040: 16,\n        58720256: 1073758224,\n        75497472: 1074282512,\n        92274688: 1073741824,\n        109051904: 524288,\n        125829120: 1074266128,\n        142606336: 524304,\n        159383552: 0,\n        176160768: 16384,\n        192937984: 1074266112,\n        209715200: 1073741840,\n        226492416: 540672,\n        243269632: 1074282496,\n        260046848: 16400,\n        268435456: 0,\n        285212672: 1074266128,\n        301989888: 1073758224,\n        318767104: 1074282496,\n        335544320: 1074266112,\n        352321536: 16,\n        369098752: 540688,\n        385875968: 16384,\n        402653184: 16400,\n        419430400: 524288,\n        436207616: 524304,\n        452984832: 1073741840,\n        469762048: 540672,\n        486539264: 1073758208,\n        503316480: 1073741824,\n        520093696: 1074282512,\n        276824064: 540688,\n        293601280: 524288,\n        310378496: 1074266112,\n        327155712: 16384,\n        343932928: 1073758208,\n        360710144: 1074282512,\n        377487360: 16,\n        394264576: 1073741824,\n        411041792: 1074282496,\n        427819008: 1073741840,\n        444596224: 1073758224,\n        461373440: 524304,\n        478150656: 0,\n        494927872: 16400,\n        511705088: 1074266128,\n        528482304: 540672\n      }, {\n        \"0\": 260,\n        1048576: 0,\n        2097152: 67109120,\n        3145728: 65796,\n        4194304: 65540,\n        5242880: 67108868,\n        6291456: 67174660,\n        7340032: 67174400,\n        8388608: 67108864,\n        9437184: 67174656,\n        10485760: 65792,\n        11534336: 67174404,\n        12582912: 67109124,\n        13631488: 65536,\n        14680064: 4,\n        15728640: 256,\n        524288: 67174656,\n        1572864: 67174404,\n        2621440: 0,\n        3670016: 67109120,\n        4718592: 67108868,\n        5767168: 65536,\n        6815744: 65540,\n        7864320: 260,\n        8912896: 4,\n        9961472: 256,\n        11010048: 67174400,\n        12058624: 65796,\n        13107200: 65792,\n        14155776: 67109124,\n        15204352: 67174660,\n        16252928: 67108864,\n        16777216: 67174656,\n        17825792: 65540,\n        18874368: 65536,\n        19922944: 67109120,\n        20971520: 256,\n        22020096: 67174660,\n        23068672: 67108868,\n        24117248: 0,\n        25165824: 67109124,\n        26214400: 67108864,\n        27262976: 4,\n        28311552: 65792,\n        29360128: 67174400,\n        30408704: 260,\n        31457280: 65796,\n        32505856: 67174404,\n        17301504: 67108864,\n        18350080: 260,\n        19398656: 67174656,\n        20447232: 0,\n        21495808: 65540,\n        22544384: 67109120,\n        23592960: 256,\n        24641536: 67174404,\n        25690112: 65536,\n        26738688: 67174660,\n        27787264: 65796,\n        28835840: 67108868,\n        29884416: 67109124,\n        30932992: 67174400,\n        31981568: 4,\n        33030144: 65792\n      }, {\n        \"0\": 2151682048,\n        65536: 2147487808,\n        131072: 4198464,\n        196608: 2151677952,\n        262144: 0,\n        327680: 4198400,\n        393216: 2147483712,\n        458752: 4194368,\n        524288: 2147483648,\n        589824: 4194304,\n        655360: 64,\n        720896: 2147487744,\n        786432: 2151678016,\n        851968: 4160,\n        917504: 4096,\n        983040: 2151682112,\n        32768: 2147487808,\n        98304: 64,\n        163840: 2151678016,\n        229376: 2147487744,\n        294912: 4198400,\n        360448: 2151682112,\n        425984: 0,\n        491520: 2151677952,\n        557056: 4096,\n        622592: 2151682048,\n        688128: 4194304,\n        753664: 4160,\n        819200: 2147483648,\n        884736: 4194368,\n        950272: 4198464,\n        1015808: 2147483712,\n        1048576: 4194368,\n        1114112: 4198400,\n        1179648: 2147483712,\n        1245184: 0,\n        1310720: 4160,\n        1376256: 2151678016,\n        1441792: 2151682048,\n        1507328: 2147487808,\n        1572864: 2151682112,\n        1638400: 2147483648,\n        1703936: 2151677952,\n        1769472: 4198464,\n        1835008: 2147487744,\n        1900544: 4194304,\n        1966080: 64,\n        2031616: 4096,\n        1081344: 2151677952,\n        1146880: 2151682112,\n        1212416: 0,\n        1277952: 4198400,\n        1343488: 4194368,\n        1409024: 2147483648,\n        1474560: 2147487808,\n        1540096: 64,\n        1605632: 2147483712,\n        1671168: 4096,\n        1736704: 2147487744,\n        1802240: 2151678016,\n        1867776: 4160,\n        1933312: 2151682048,\n        1998848: 4194304,\n        2064384: 4198464\n      }, {\n        \"0\": 128,\n        4096: 17039360,\n        8192: 262144,\n        12288: 536870912,\n        16384: 537133184,\n        20480: 16777344,\n        24576: 553648256,\n        28672: 262272,\n        32768: 16777216,\n        36864: 537133056,\n        40960: 536871040,\n        45056: 553910400,\n        49152: 553910272,\n        53248: 0,\n        57344: 17039488,\n        61440: 553648128,\n        2048: 17039488,\n        6144: 553648256,\n        10240: 128,\n        14336: 17039360,\n        18432: 262144,\n        22528: 537133184,\n        26624: 553910272,\n        30720: 536870912,\n        34816: 537133056,\n        38912: 0,\n        43008: 553910400,\n        47104: 16777344,\n        51200: 536871040,\n        55296: 553648128,\n        59392: 16777216,\n        63488: 262272,\n        65536: 262144,\n        69632: 128,\n        73728: 536870912,\n        77824: 553648256,\n        81920: 16777344,\n        86016: 553910272,\n        90112: 537133184,\n        94208: 16777216,\n        98304: 553910400,\n        102400: 553648128,\n        106496: 17039360,\n        110592: 537133056,\n        114688: 262272,\n        118784: 536871040,\n        122880: 0,\n        126976: 17039488,\n        67584: 553648256,\n        71680: 16777216,\n        75776: 17039360,\n        79872: 537133184,\n        83968: 536870912,\n        88064: 17039488,\n        92160: 128,\n        96256: 553910272,\n        100352: 262272,\n        104448: 553910400,\n        108544: 0,\n        112640: 553648128,\n        116736: 16777344,\n        120832: 262144,\n        124928: 537133056,\n        129024: 536871040\n      }, {\n        \"0\": 268435464,\n        256: 8192,\n        512: 270532608,\n        768: 270540808,\n        1024: 268443648,\n        1280: 2097152,\n        1536: 2097160,\n        1792: 268435456,\n        2048: 0,\n        2304: 268443656,\n        2560: 2105344,\n        2816: 8,\n        3072: 270532616,\n        3328: 2105352,\n        3584: 8200,\n        3840: 270540800,\n        128: 270532608,\n        384: 270540808,\n        640: 8,\n        896: 2097152,\n        1152: 2105352,\n        1408: 268435464,\n        1664: 268443648,\n        1920: 8200,\n        2176: 2097160,\n        2432: 8192,\n        2688: 268443656,\n        2944: 270532616,\n        3200: 0,\n        3456: 270540800,\n        3712: 2105344,\n        3968: 268435456,\n        4096: 268443648,\n        4352: 270532616,\n        4608: 270540808,\n        4864: 8200,\n        5120: 2097152,\n        5376: 268435456,\n        5632: 268435464,\n        5888: 2105344,\n        6144: 2105352,\n        6400: 0,\n        6656: 8,\n        6912: 270532608,\n        7168: 8192,\n        7424: 268443656,\n        7680: 270540800,\n        7936: 2097160,\n        4224: 8,\n        4480: 2105344,\n        4736: 2097152,\n        4992: 268435464,\n        5248: 268443648,\n        5504: 8200,\n        5760: 270540808,\n        6016: 270532608,\n        6272: 270540800,\n        6528: 270532616,\n        6784: 8192,\n        7040: 2105352,\n        7296: 2097160,\n        7552: 0,\n        7808: 268435456,\n        8064: 268443656\n      }, {\n        \"0\": 1048576,\n        16: 33555457,\n        32: 1024,\n        48: 1049601,\n        64: 34604033,\n        80: 0,\n        96: 1,\n        112: 34603009,\n        128: 33555456,\n        144: 1048577,\n        160: 33554433,\n        176: 34604032,\n        192: 34603008,\n        208: 1025,\n        224: 1049600,\n        240: 33554432,\n        8: 34603009,\n        24: 0,\n        40: 33555457,\n        56: 34604032,\n        72: 1048576,\n        88: 33554433,\n        104: 33554432,\n        120: 1025,\n        136: 1049601,\n        152: 33555456,\n        168: 34603008,\n        184: 1048577,\n        200: 1024,\n        216: 34604033,\n        232: 1,\n        248: 1049600,\n        256: 33554432,\n        272: 1048576,\n        288: 33555457,\n        304: 34603009,\n        320: 1048577,\n        336: 33555456,\n        352: 34604032,\n        368: 1049601,\n        384: 1025,\n        400: 34604033,\n        416: 1049600,\n        432: 1,\n        448: 0,\n        464: 34603008,\n        480: 33554433,\n        496: 1024,\n        264: 1049600,\n        280: 33555457,\n        296: 34603009,\n        312: 1,\n        328: 33554432,\n        344: 1048576,\n        360: 1025,\n        376: 34604032,\n        392: 33554433,\n        408: 34603008,\n        424: 0,\n        440: 34604033,\n        456: 1049601,\n        472: 1024,\n        488: 33555456,\n        504: 1048577\n      }, {\n        \"0\": 134219808,\n        1: 131072,\n        2: 134217728,\n        3: 32,\n        4: 131104,\n        5: 134350880,\n        6: 134350848,\n        7: 2048,\n        8: 134348800,\n        9: 134219776,\n        10: 133120,\n        11: 134348832,\n        12: 2080,\n        13: 0,\n        14: 134217760,\n        15: 133152,\n        2147483648: 2048,\n        2147483649: 134350880,\n        2147483650: 134219808,\n        2147483651: 134217728,\n        2147483652: 134348800,\n        2147483653: 133120,\n        2147483654: 133152,\n        2147483655: 32,\n        2147483656: 134217760,\n        2147483657: 2080,\n        2147483658: 131104,\n        2147483659: 134350848,\n        2147483660: 0,\n        2147483661: 134348832,\n        2147483662: 134219776,\n        2147483663: 131072,\n        16: 133152,\n        17: 134350848,\n        18: 32,\n        19: 2048,\n        20: 134219776,\n        21: 134217760,\n        22: 134348832,\n        23: 131072,\n        24: 0,\n        25: 131104,\n        26: 134348800,\n        27: 134219808,\n        28: 134350880,\n        29: 133120,\n        30: 2080,\n        31: 134217728,\n        2147483664: 131072,\n        2147483665: 2048,\n        2147483666: 134348832,\n        2147483667: 133152,\n        2147483668: 32,\n        2147483669: 134348800,\n        2147483670: 134217728,\n        2147483671: 134219808,\n        2147483672: 134350880,\n        2147483673: 134217760,\n        2147483674: 134219776,\n        2147483675: 0,\n        2147483676: 133120,\n        2147483677: 2080,\n        2147483678: 131104,\n        2147483679: 134350848\n      }], t3 = [4160749569, 528482304, 33030144, 2064384, 129024, 8064, 504, 2147483679], m = g.DES = e2.extend({ _doReset: function() {\n        for (var b = this._key.words, c = [], a = 0; 56 > a; a++) {\n          var f = q[a] - 1;\n          c[a] = b[f >>> 5] >>> 31 - f % 32 & 1;\n        }\n        b = this._subKeys = [];\n        for (f = 0; 16 > f; f++) {\n          for (var d = b[f] = [], e3 = r2[f], a = 0; 24 > a; a++)\n            d[a / 6 | 0] |= c[(p[a] - 1 + e3) % 28] << 31 - a % 6, d[4 + (a / 6 | 0)] |= c[28 + (p[a + 24] - 1 + e3) % 28] << 31 - a % 6;\n          d[0] = d[0] << 1 | d[0] >>> 31;\n          for (a = 1; 7 > a; a++)\n            d[a] >>>= 4 * (a - 1) + 3;\n          d[7] = d[7] << 5 | d[7] >>> 27;\n        }\n        c = this._invSubKeys = [];\n        for (a = 0; 16 > a; a++)\n          c[a] = b[15 - a];\n      }, encryptBlock: function(b, c) {\n        this._doCryptBlock(b, c, this._subKeys);\n      }, decryptBlock: function(b, c) {\n        this._doCryptBlock(b, c, this._invSubKeys);\n      }, _doCryptBlock: function(b, c, a) {\n        this._lBlock = b[c];\n        this._rBlock = b[c + 1];\n        j.call(this, 4, 252645135);\n        j.call(this, 16, 65535);\n        l.call(this, 2, 858993459);\n        l.call(this, 8, 16711935);\n        j.call(this, 1, 1431655765);\n        for (var f = 0; 16 > f; f++) {\n          for (var d = a[f], e3 = this._lBlock, h2 = this._rBlock, g2 = 0, k = 0; 8 > k; k++)\n            g2 |= s[k][((h2 ^ d[k]) & t3[k]) >>> 0];\n          this._lBlock = h2;\n          this._rBlock = e3 ^ g2;\n        }\n        a = this._lBlock;\n        this._lBlock = this._rBlock;\n        this._rBlock = a;\n        j.call(this, 1, 1431655765);\n        l.call(this, 8, 16711935);\n        l.call(this, 2, 858993459);\n        j.call(this, 16, 65535);\n        j.call(this, 4, 252645135);\n        b[c] = this._lBlock;\n        b[c + 1] = this._rBlock;\n      }, keySize: 2, ivSize: 2, blockSize: 2 });\n      h.DES = e2._createHelper(m);\n      g = g.TripleDES = e2.extend({ _doReset: function() {\n        var b = this._key.words;\n        this._des1 = m.createEncryptor(n2.create(b.slice(0, 2)));\n        this._des2 = m.createEncryptor(n2.create(b.slice(2, 4)));\n        this._des3 = m.createEncryptor(n2.create(b.slice(4, 6)));\n      }, encryptBlock: function(b, c) {\n        this._des1.encryptBlock(b, c);\n        this._des2.decryptBlock(b, c);\n        this._des3.encryptBlock(b, c);\n      }, decryptBlock: function(b, c) {\n        this._des3.decryptBlock(b, c);\n        this._des2.encryptBlock(b, c);\n        this._des1.decryptBlock(b, c);\n      }, keySize: 6, ivSize: 2, blockSize: 2 });\n      h.TripleDES = e2._createHelper(g);\n    })();\n    (function() {\n      var h = CryptoJS, j = h.lib.WordArray;\n      h.enc.Base64 = { stringify: function(b) {\n        var e2 = b.words, f = b.sigBytes, c = this._map;\n        b.clamp();\n        b = [];\n        for (var a = 0; a < f; a += 3)\n          for (var d = (e2[a >>> 2] >>> 24 - 8 * (a % 4) & 255) << 16 | (e2[a + 1 >>> 2] >>> 24 - 8 * ((a + 1) % 4) & 255) << 8 | e2[a + 2 >>> 2] >>> 24 - 8 * ((a + 2) % 4) & 255, g = 0; 4 > g && a + 0.75 * g < f; g++)\n            b.push(c.charAt(d >>> 6 * (3 - g) & 63));\n        if (e2 = c.charAt(64))\n          for (; b.length % 4; )\n            b.push(e2);\n        return b.join(\"\");\n      }, parse: function(b) {\n        var e2 = b.length, f = this._map, c = f.charAt(64);\n        c && (c = b.indexOf(c), -1 != c && (e2 = c));\n        for (var c = [], a = 0, d = 0; d < e2; d++)\n          if (d % 4) {\n            var g = f.indexOf(b.charAt(d - 1)) << 2 * (d % 4), h2 = f.indexOf(b.charAt(d)) >>> 6 - 2 * (d % 4);\n            c[a >>> 2] |= (g | h2) << 24 - 8 * (a % 4);\n            a++;\n          }\n        return j.create(c, a);\n      }, _map: \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\" };\n    })();\n    (function(E) {\n      function h(a2, f, g, j, p, h2, k2) {\n        a2 = a2 + (f & g | ~f & j) + p + k2;\n        return (a2 << h2 | a2 >>> 32 - h2) + f;\n      }\n      function k(a2, f, g, j, p, h2, k2) {\n        a2 = a2 + (f & j | g & ~j) + p + k2;\n        return (a2 << h2 | a2 >>> 32 - h2) + f;\n      }\n      function l(a2, f, g, j, h2, k2, l2) {\n        a2 = a2 + (f ^ g ^ j) + h2 + l2;\n        return (a2 << k2 | a2 >>> 32 - k2) + f;\n      }\n      function n2(a2, f, g, j, h2, k2, l2) {\n        a2 = a2 + (g ^ (f | ~j)) + h2 + l2;\n        return (a2 << k2 | a2 >>> 32 - k2) + f;\n      }\n      for (var r2 = CryptoJS, q = r2.lib, F = q.WordArray, s = q.Hasher, q = r2.algo, a = [], t3 = 0; 64 > t3; t3++)\n        a[t3] = 4294967296 * E.abs(E.sin(t3 + 1)) | 0;\n      q = q.MD5 = s.extend({\n        _doReset: function() {\n          this._hash = new F.init([1732584193, 4023233417, 2562383102, 271733878]);\n        },\n        _doProcessBlock: function(m, f) {\n          for (var g = 0; 16 > g; g++) {\n            var j = f + g, p = m[j];\n            m[j] = (p << 8 | p >>> 24) & 16711935 | (p << 24 | p >>> 8) & 4278255360;\n          }\n          var g = this._hash.words, j = m[f + 0], p = m[f + 1], q2 = m[f + 2], r3 = m[f + 3], s2 = m[f + 4], t4 = m[f + 5], u = m[f + 6], v = m[f + 7], w = m[f + 8], x = m[f + 9], y = m[f + 10], z2 = m[f + 11], A = m[f + 12], B = m[f + 13], C = m[f + 14], D = m[f + 15], b = g[0], c = g[1], d = g[2], e2 = g[3], b = h(b, c, d, e2, j, 7, a[0]), e2 = h(e2, b, c, d, p, 12, a[1]), d = h(d, e2, b, c, q2, 17, a[2]), c = h(c, d, e2, b, r3, 22, a[3]), b = h(b, c, d, e2, s2, 7, a[4]), e2 = h(e2, b, c, d, t4, 12, a[5]), d = h(d, e2, b, c, u, 17, a[6]), c = h(c, d, e2, b, v, 22, a[7]), b = h(b, c, d, e2, w, 7, a[8]), e2 = h(e2, b, c, d, x, 12, a[9]), d = h(d, e2, b, c, y, 17, a[10]), c = h(c, d, e2, b, z2, 22, a[11]), b = h(b, c, d, e2, A, 7, a[12]), e2 = h(e2, b, c, d, B, 12, a[13]), d = h(d, e2, b, c, C, 17, a[14]), c = h(c, d, e2, b, D, 22, a[15]), b = k(b, c, d, e2, p, 5, a[16]), e2 = k(e2, b, c, d, u, 9, a[17]), d = k(d, e2, b, c, z2, 14, a[18]), c = k(c, d, e2, b, j, 20, a[19]), b = k(b, c, d, e2, t4, 5, a[20]), e2 = k(e2, b, c, d, y, 9, a[21]), d = k(d, e2, b, c, D, 14, a[22]), c = k(c, d, e2, b, s2, 20, a[23]), b = k(b, c, d, e2, x, 5, a[24]), e2 = k(e2, b, c, d, C, 9, a[25]), d = k(d, e2, b, c, r3, 14, a[26]), c = k(c, d, e2, b, w, 20, a[27]), b = k(b, c, d, e2, B, 5, a[28]), e2 = k(\n            e2,\n            b,\n            c,\n            d,\n            q2,\n            9,\n            a[29]\n          ), d = k(d, e2, b, c, v, 14, a[30]), c = k(c, d, e2, b, A, 20, a[31]), b = l(b, c, d, e2, t4, 4, a[32]), e2 = l(e2, b, c, d, w, 11, a[33]), d = l(d, e2, b, c, z2, 16, a[34]), c = l(c, d, e2, b, C, 23, a[35]), b = l(b, c, d, e2, p, 4, a[36]), e2 = l(e2, b, c, d, s2, 11, a[37]), d = l(d, e2, b, c, v, 16, a[38]), c = l(c, d, e2, b, y, 23, a[39]), b = l(b, c, d, e2, B, 4, a[40]), e2 = l(e2, b, c, d, j, 11, a[41]), d = l(d, e2, b, c, r3, 16, a[42]), c = l(c, d, e2, b, u, 23, a[43]), b = l(b, c, d, e2, x, 4, a[44]), e2 = l(e2, b, c, d, A, 11, a[45]), d = l(d, e2, b, c, D, 16, a[46]), c = l(c, d, e2, b, q2, 23, a[47]), b = n2(b, c, d, e2, j, 6, a[48]), e2 = n2(e2, b, c, d, v, 10, a[49]), d = n2(\n            d,\n            e2,\n            b,\n            c,\n            C,\n            15,\n            a[50]\n          ), c = n2(c, d, e2, b, t4, 21, a[51]), b = n2(b, c, d, e2, A, 6, a[52]), e2 = n2(e2, b, c, d, r3, 10, a[53]), d = n2(d, e2, b, c, y, 15, a[54]), c = n2(c, d, e2, b, p, 21, a[55]), b = n2(b, c, d, e2, w, 6, a[56]), e2 = n2(e2, b, c, d, D, 10, a[57]), d = n2(d, e2, b, c, u, 15, a[58]), c = n2(c, d, e2, b, B, 21, a[59]), b = n2(b, c, d, e2, s2, 6, a[60]), e2 = n2(e2, b, c, d, z2, 10, a[61]), d = n2(d, e2, b, c, q2, 15, a[62]), c = n2(c, d, e2, b, x, 21, a[63]);\n          g[0] = g[0] + b | 0;\n          g[1] = g[1] + c | 0;\n          g[2] = g[2] + d | 0;\n          g[3] = g[3] + e2 | 0;\n        },\n        _doFinalize: function() {\n          var a2 = this._data, f = a2.words, g = 8 * this._nDataBytes, j = 8 * a2.sigBytes;\n          f[j >>> 5] |= 128 << 24 - j % 32;\n          var h2 = E.floor(g / 4294967296);\n          f[(j + 64 >>> 9 << 4) + 15] = (h2 << 8 | h2 >>> 24) & 16711935 | (h2 << 24 | h2 >>> 8) & 4278255360;\n          f[(j + 64 >>> 9 << 4) + 14] = (g << 8 | g >>> 24) & 16711935 | (g << 24 | g >>> 8) & 4278255360;\n          a2.sigBytes = 4 * (f.length + 1);\n          this._process();\n          a2 = this._hash;\n          f = a2.words;\n          for (g = 0; 4 > g; g++)\n            j = f[g], f[g] = (j << 8 | j >>> 24) & 16711935 | (j << 24 | j >>> 8) & 4278255360;\n          return a2;\n        },\n        clone: function() {\n          var a2 = s.clone.call(this);\n          a2._hash = this._hash.clone();\n          return a2;\n        }\n      });\n      r2.MD5 = s._createHelper(q);\n      r2.HmacMD5 = s._createHmacHelper(q);\n    })(Math);\n    (function() {\n      var k = CryptoJS, b = k.lib, m = b.WordArray, l = b.Hasher, d = [], b = k.algo.SHA1 = l.extend({ _doReset: function() {\n        this._hash = new m.init([1732584193, 4023233417, 2562383102, 271733878, 3285377520]);\n      }, _doProcessBlock: function(n2, p) {\n        for (var a = this._hash.words, e2 = a[0], f = a[1], h = a[2], j = a[3], b2 = a[4], c = 0; 80 > c; c++) {\n          if (16 > c)\n            d[c] = n2[p + c] | 0;\n          else {\n            var g = d[c - 3] ^ d[c - 8] ^ d[c - 14] ^ d[c - 16];\n            d[c] = g << 1 | g >>> 31;\n          }\n          g = (e2 << 5 | e2 >>> 27) + b2 + d[c];\n          g = 20 > c ? g + ((f & h | ~f & j) + 1518500249) : 40 > c ? g + ((f ^ h ^ j) + 1859775393) : 60 > c ? g + ((f & h | f & j | h & j) - 1894007588) : g + ((f ^ h ^ j) - 899497514);\n          b2 = j;\n          j = h;\n          h = f << 30 | f >>> 2;\n          f = e2;\n          e2 = g;\n        }\n        a[0] = a[0] + e2 | 0;\n        a[1] = a[1] + f | 0;\n        a[2] = a[2] + h | 0;\n        a[3] = a[3] + j | 0;\n        a[4] = a[4] + b2 | 0;\n      }, _doFinalize: function() {\n        var b2 = this._data, d2 = b2.words, a = 8 * this._nDataBytes, e2 = 8 * b2.sigBytes;\n        d2[e2 >>> 5] |= 128 << 24 - e2 % 32;\n        d2[(e2 + 64 >>> 9 << 4) + 14] = Math.floor(a / 4294967296);\n        d2[(e2 + 64 >>> 9 << 4) + 15] = a;\n        b2.sigBytes = 4 * d2.length;\n        this._process();\n        return this._hash;\n      }, clone: function() {\n        var b2 = l.clone.call(this);\n        b2._hash = this._hash.clone();\n        return b2;\n      } });\n      k.SHA1 = l._createHelper(b);\n      k.HmacSHA1 = l._createHmacHelper(b);\n    })();\n    (function(k) {\n      for (var g = CryptoJS, h = g.lib, v = h.WordArray, j = h.Hasher, h = g.algo, s = [], t3 = [], u = function(q) {\n        return 4294967296 * (q - (q | 0)) | 0;\n      }, l = 2, b = 0; 64 > b; ) {\n        var d;\n        a: {\n          d = l;\n          for (var w = k.sqrt(d), r2 = 2; r2 <= w; r2++)\n            if (!(d % r2)) {\n              d = false;\n              break a;\n            }\n          d = true;\n        }\n        d && (8 > b && (s[b] = u(k.pow(l, 0.5))), t3[b] = u(k.pow(l, 1 / 3)), b++);\n        l++;\n      }\n      var n2 = [], h = h.SHA256 = j.extend({ _doReset: function() {\n        this._hash = new v.init(s.slice(0));\n      }, _doProcessBlock: function(q, h2) {\n        for (var a = this._hash.words, c = a[0], d2 = a[1], b2 = a[2], k2 = a[3], f = a[4], g2 = a[5], j2 = a[6], l2 = a[7], e2 = 0; 64 > e2; e2++) {\n          if (16 > e2)\n            n2[e2] = q[h2 + e2] | 0;\n          else {\n            var m = n2[e2 - 15], p = n2[e2 - 2];\n            n2[e2] = ((m << 25 | m >>> 7) ^ (m << 14 | m >>> 18) ^ m >>> 3) + n2[e2 - 7] + ((p << 15 | p >>> 17) ^ (p << 13 | p >>> 19) ^ p >>> 10) + n2[e2 - 16];\n          }\n          m = l2 + ((f << 26 | f >>> 6) ^ (f << 21 | f >>> 11) ^ (f << 7 | f >>> 25)) + (f & g2 ^ ~f & j2) + t3[e2] + n2[e2];\n          p = ((c << 30 | c >>> 2) ^ (c << 19 | c >>> 13) ^ (c << 10 | c >>> 22)) + (c & d2 ^ c & b2 ^ d2 & b2);\n          l2 = j2;\n          j2 = g2;\n          g2 = f;\n          f = k2 + m | 0;\n          k2 = b2;\n          b2 = d2;\n          d2 = c;\n          c = m + p | 0;\n        }\n        a[0] = a[0] + c | 0;\n        a[1] = a[1] + d2 | 0;\n        a[2] = a[2] + b2 | 0;\n        a[3] = a[3] + k2 | 0;\n        a[4] = a[4] + f | 0;\n        a[5] = a[5] + g2 | 0;\n        a[6] = a[6] + j2 | 0;\n        a[7] = a[7] + l2 | 0;\n      }, _doFinalize: function() {\n        var d2 = this._data, b2 = d2.words, a = 8 * this._nDataBytes, c = 8 * d2.sigBytes;\n        b2[c >>> 5] |= 128 << 24 - c % 32;\n        b2[(c + 64 >>> 9 << 4) + 14] = k.floor(a / 4294967296);\n        b2[(c + 64 >>> 9 << 4) + 15] = a;\n        d2.sigBytes = 4 * b2.length;\n        this._process();\n        return this._hash;\n      }, clone: function() {\n        var b2 = j.clone.call(this);\n        b2._hash = this._hash.clone();\n        return b2;\n      } });\n      g.SHA256 = j._createHelper(h);\n      g.HmacSHA256 = j._createHmacHelper(h);\n    })(Math);\n    (function() {\n      var b = CryptoJS, d = b.lib.WordArray, a = b.algo, c = a.SHA256, a = a.SHA224 = c.extend({ _doReset: function() {\n        this._hash = new d.init([3238371032, 914150663, 812702999, 4144912697, 4290775857, 1750603025, 1694076839, 3204075428]);\n      }, _doFinalize: function() {\n        var a2 = c._doFinalize.call(this);\n        a2.sigBytes -= 4;\n        return a2;\n      } });\n      b.SHA224 = c._createHelper(a);\n      b.HmacSHA224 = c._createHmacHelper(a);\n    })();\n    (function() {\n      function a() {\n        return d.create.apply(d, arguments);\n      }\n      for (var n2 = CryptoJS, r2 = n2.lib.Hasher, e2 = n2.x64, d = e2.Word, T = e2.WordArray, e2 = n2.algo, ea = [\n        a(1116352408, 3609767458),\n        a(1899447441, 602891725),\n        a(3049323471, 3964484399),\n        a(3921009573, 2173295548),\n        a(961987163, 4081628472),\n        a(1508970993, 3053834265),\n        a(2453635748, 2937671579),\n        a(2870763221, 3664609560),\n        a(3624381080, 2734883394),\n        a(310598401, 1164996542),\n        a(607225278, 1323610764),\n        a(1426881987, 3590304994),\n        a(1925078388, 4068182383),\n        a(2162078206, 991336113),\n        a(2614888103, 633803317),\n        a(3248222580, 3479774868),\n        a(3835390401, 2666613458),\n        a(4022224774, 944711139),\n        a(264347078, 2341262773),\n        a(604807628, 2007800933),\n        a(770255983, 1495990901),\n        a(1249150122, 1856431235),\n        a(1555081692, 3175218132),\n        a(1996064986, 2198950837),\n        a(2554220882, 3999719339),\n        a(2821834349, 766784016),\n        a(2952996808, 2566594879),\n        a(3210313671, 3203337956),\n        a(3336571891, 1034457026),\n        a(3584528711, 2466948901),\n        a(113926993, 3758326383),\n        a(338241895, 168717936),\n        a(666307205, 1188179964),\n        a(773529912, 1546045734),\n        a(1294757372, 1522805485),\n        a(\n          1396182291,\n          2643833823\n        ),\n        a(1695183700, 2343527390),\n        a(1986661051, 1014477480),\n        a(2177026350, 1206759142),\n        a(2456956037, 344077627),\n        a(2730485921, 1290863460),\n        a(2820302411, 3158454273),\n        a(3259730800, 3505952657),\n        a(3345764771, 106217008),\n        a(3516065817, 3606008344),\n        a(3600352804, 1432725776),\n        a(4094571909, 1467031594),\n        a(275423344, 851169720),\n        a(430227734, 3100823752),\n        a(506948616, 1363258195),\n        a(659060556, 3750685593),\n        a(883997877, 3785050280),\n        a(958139571, 3318307427),\n        a(1322822218, 3812723403),\n        a(1537002063, 2003034995),\n        a(1747873779, 3602036899),\n        a(1955562222, 1575990012),\n        a(2024104815, 1125592928),\n        a(2227730452, 2716904306),\n        a(2361852424, 442776044),\n        a(2428436474, 593698344),\n        a(2756734187, 3733110249),\n        a(3204031479, 2999351573),\n        a(3329325298, 3815920427),\n        a(3391569614, 3928383900),\n        a(3515267271, 566280711),\n        a(3940187606, 3454069534),\n        a(4118630271, 4000239992),\n        a(116418474, 1914138554),\n        a(174292421, 2731055270),\n        a(289380356, 3203993006),\n        a(460393269, 320620315),\n        a(685471733, 587496836),\n        a(852142971, 1086792851),\n        a(1017036298, 365543100),\n        a(1126000580, 2618297676),\n        a(\n          1288033470,\n          3409855158\n        ),\n        a(1501505948, 4234509866),\n        a(1607167915, 987167468),\n        a(1816402316, 1246189591)\n      ], v = [], w = 0; 80 > w; w++)\n        v[w] = a();\n      e2 = e2.SHA512 = r2.extend({ _doReset: function() {\n        this._hash = new T.init([new d.init(1779033703, 4089235720), new d.init(3144134277, 2227873595), new d.init(1013904242, 4271175723), new d.init(2773480762, 1595750129), new d.init(1359893119, 2917565137), new d.init(2600822924, 725511199), new d.init(528734635, 4215389547), new d.init(1541459225, 327033209)]);\n      }, _doProcessBlock: function(a2, d2) {\n        for (var f = this._hash.words, F = f[0], e3 = f[1], n3 = f[2], r3 = f[3], G = f[4], H = f[5], I = f[6], f = f[7], w2 = F.high, J = F.low, X = e3.high, K = e3.low, Y = n3.high, L = n3.low, Z = r3.high, M = r3.low, $ = G.high, N = G.low, aa = H.high, O = H.low, ba = I.high, P = I.low, ca = f.high, Q = f.low, k = w2, g = J, z2 = X, x = K, A = Y, y = L, U = Z, B = M, l = $, h = N, R = aa, C = O, S = ba, D = P, V = ca, E = Q, m = 0; 80 > m; m++) {\n          var s = v[m];\n          if (16 > m)\n            var j = s.high = a2[d2 + 2 * m] | 0, b = s.low = a2[d2 + 2 * m + 1] | 0;\n          else {\n            var j = v[m - 15], b = j.high, p = j.low, j = (b >>> 1 | p << 31) ^ (b >>> 8 | p << 24) ^ b >>> 7, p = (p >>> 1 | b << 31) ^ (p >>> 8 | b << 24) ^ (p >>> 7 | b << 25), u = v[m - 2], b = u.high, c = u.low, u = (b >>> 19 | c << 13) ^ (b << 3 | c >>> 29) ^ b >>> 6, c = (c >>> 19 | b << 13) ^ (c << 3 | b >>> 29) ^ (c >>> 6 | b << 26), b = v[m - 7], W = b.high, t3 = v[m - 16], q = t3.high, t3 = t3.low, b = p + b.low, j = j + W + (b >>> 0 < p >>> 0 ? 1 : 0), b = b + c, j = j + u + (b >>> 0 < c >>> 0 ? 1 : 0), b = b + t3, j = j + q + (b >>> 0 < t3 >>> 0 ? 1 : 0);\n            s.high = j;\n            s.low = b;\n          }\n          var W = l & R ^ ~l & S, t3 = h & C ^ ~h & D, s = k & z2 ^ k & A ^ z2 & A, T2 = g & x ^ g & y ^ x & y, p = (k >>> 28 | g << 4) ^ (k << 30 | g >>> 2) ^ (k << 25 | g >>> 7), u = (g >>> 28 | k << 4) ^ (g << 30 | k >>> 2) ^ (g << 25 | k >>> 7), c = ea[m], fa = c.high, da = c.low, c = E + ((h >>> 14 | l << 18) ^ (h >>> 18 | l << 14) ^ (h << 23 | l >>> 9)), q = V + ((l >>> 14 | h << 18) ^ (l >>> 18 | h << 14) ^ (l << 23 | h >>> 9)) + (c >>> 0 < E >>> 0 ? 1 : 0), c = c + t3, q = q + W + (c >>> 0 < t3 >>> 0 ? 1 : 0), c = c + da, q = q + fa + (c >>> 0 < da >>> 0 ? 1 : 0), c = c + b, q = q + j + (c >>> 0 < b >>> 0 ? 1 : 0), b = u + T2, s = p + s + (b >>> 0 < u >>> 0 ? 1 : 0), V = S, E = D, S = R, D = C, R = l, C = h, h = B + c | 0, l = U + q + (h >>> 0 < B >>> 0 ? 1 : 0) | 0, U = A, B = y, A = z2, y = x, z2 = k, x = g, g = c + b | 0, k = q + s + (g >>> 0 < c >>> 0 ? 1 : 0) | 0;\n        }\n        J = F.low = J + g;\n        F.high = w2 + k + (J >>> 0 < g >>> 0 ? 1 : 0);\n        K = e3.low = K + x;\n        e3.high = X + z2 + (K >>> 0 < x >>> 0 ? 1 : 0);\n        L = n3.low = L + y;\n        n3.high = Y + A + (L >>> 0 < y >>> 0 ? 1 : 0);\n        M = r3.low = M + B;\n        r3.high = Z + U + (M >>> 0 < B >>> 0 ? 1 : 0);\n        N = G.low = N + h;\n        G.high = $ + l + (N >>> 0 < h >>> 0 ? 1 : 0);\n        O = H.low = O + C;\n        H.high = aa + R + (O >>> 0 < C >>> 0 ? 1 : 0);\n        P = I.low = P + D;\n        I.high = ba + S + (P >>> 0 < D >>> 0 ? 1 : 0);\n        Q = f.low = Q + E;\n        f.high = ca + V + (Q >>> 0 < E >>> 0 ? 1 : 0);\n      }, _doFinalize: function() {\n        var a2 = this._data, d2 = a2.words, f = 8 * this._nDataBytes, e3 = 8 * a2.sigBytes;\n        d2[e3 >>> 5] |= 128 << 24 - e3 % 32;\n        d2[(e3 + 128 >>> 10 << 5) + 30] = Math.floor(f / 4294967296);\n        d2[(e3 + 128 >>> 10 << 5) + 31] = f;\n        a2.sigBytes = 4 * d2.length;\n        this._process();\n        return this._hash.toX32();\n      }, clone: function() {\n        var a2 = r2.clone.call(this);\n        a2._hash = this._hash.clone();\n        return a2;\n      }, blockSize: 32 });\n      n2.SHA512 = r2._createHelper(e2);\n      n2.HmacSHA512 = r2._createHmacHelper(e2);\n    })();\n    (function() {\n      var c = CryptoJS, a = c.x64, b = a.Word, e2 = a.WordArray, a = c.algo, d = a.SHA512, a = a.SHA384 = d.extend({ _doReset: function() {\n        this._hash = new e2.init([new b.init(3418070365, 3238371032), new b.init(1654270250, 914150663), new b.init(2438529370, 812702999), new b.init(355462360, 4144912697), new b.init(1731405415, 4290775857), new b.init(2394180231, 1750603025), new b.init(3675008525, 1694076839), new b.init(1203062813, 3204075428)]);\n      }, _doFinalize: function() {\n        var a2 = d._doFinalize.call(this);\n        a2.sigBytes -= 16;\n        return a2;\n      } });\n      c.SHA384 = d._createHelper(a);\n      c.HmacSHA384 = d._createHmacHelper(a);\n    })();\n    (function() {\n      var q = CryptoJS, d = q.lib, n2 = d.WordArray, p = d.Hasher, d = q.algo, x = n2.create([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8, 3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12, 1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2, 4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13]), y = n2.create([5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12, 6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2, 15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13, 8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14, 12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11]), z2 = n2.create([\n        11,\n        14,\n        15,\n        12,\n        5,\n        8,\n        7,\n        9,\n        11,\n        13,\n        14,\n        15,\n        6,\n        7,\n        9,\n        8,\n        7,\n        6,\n        8,\n        13,\n        11,\n        9,\n        7,\n        15,\n        7,\n        12,\n        15,\n        9,\n        11,\n        7,\n        13,\n        12,\n        11,\n        13,\n        6,\n        7,\n        14,\n        9,\n        13,\n        15,\n        14,\n        8,\n        13,\n        6,\n        5,\n        12,\n        7,\n        5,\n        11,\n        12,\n        14,\n        15,\n        14,\n        15,\n        9,\n        8,\n        9,\n        14,\n        5,\n        6,\n        8,\n        6,\n        5,\n        12,\n        9,\n        15,\n        5,\n        11,\n        6,\n        8,\n        13,\n        12,\n        5,\n        12,\n        13,\n        14,\n        11,\n        8,\n        5,\n        6\n      ]), A = n2.create([8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6, 9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11, 9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5, 15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8, 8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11]), B = n2.create([0, 1518500249, 1859775393, 2400959708, 2840853838]), C = n2.create([\n        1352829926,\n        1548603684,\n        1836072691,\n        2053994217,\n        0\n      ]), d = d.RIPEMD160 = p.extend({ _doReset: function() {\n        this._hash = n2.create([1732584193, 4023233417, 2562383102, 271733878, 3285377520]);\n      }, _doProcessBlock: function(e2, v) {\n        for (var b = 0; 16 > b; b++) {\n          var c = v + b, f = e2[c];\n          e2[c] = (f << 8 | f >>> 24) & 16711935 | (f << 24 | f >>> 8) & 4278255360;\n        }\n        var c = this._hash.words, f = B.words, d2 = C.words, n3 = x.words, q2 = y.words, p2 = z2.words, w = A.words, t3, g, h, j, r2, u, k, l, m, s;\n        u = t3 = c[0];\n        k = g = c[1];\n        l = h = c[2];\n        m = j = c[3];\n        s = r2 = c[4];\n        for (var a, b = 0; 80 > b; b += 1)\n          a = t3 + e2[v + n3[b]] | 0, a = 16 > b ? a + ((g ^ h ^ j) + f[0]) : 32 > b ? a + ((g & h | ~g & j) + f[1]) : 48 > b ? a + (((g | ~h) ^ j) + f[2]) : 64 > b ? a + ((g & j | h & ~j) + f[3]) : a + ((g ^ (h | ~j)) + f[4]), a |= 0, a = a << p2[b] | a >>> 32 - p2[b], a = a + r2 | 0, t3 = r2, r2 = j, j = h << 10 | h >>> 22, h = g, g = a, a = u + e2[v + q2[b]] | 0, a = 16 > b ? a + ((k ^ (l | ~m)) + d2[0]) : 32 > b ? a + ((k & m | l & ~m) + d2[1]) : 48 > b ? a + (((k | ~l) ^ m) + d2[2]) : 64 > b ? a + ((k & l | ~k & m) + d2[3]) : a + ((k ^ l ^ m) + d2[4]), a |= 0, a = a << w[b] | a >>> 32 - w[b], a = a + s | 0, u = s, s = m, m = l << 10 | l >>> 22, l = k, k = a;\n        a = c[1] + h + m | 0;\n        c[1] = c[2] + j + s | 0;\n        c[2] = c[3] + r2 + u | 0;\n        c[3] = c[4] + t3 + k | 0;\n        c[4] = c[0] + g + l | 0;\n        c[0] = a;\n      }, _doFinalize: function() {\n        var e2 = this._data, d2 = e2.words, b = 8 * this._nDataBytes, c = 8 * e2.sigBytes;\n        d2[c >>> 5] |= 128 << 24 - c % 32;\n        d2[(c + 64 >>> 9 << 4) + 14] = (b << 8 | b >>> 24) & 16711935 | (b << 24 | b >>> 8) & 4278255360;\n        e2.sigBytes = 4 * (d2.length + 1);\n        this._process();\n        e2 = this._hash;\n        d2 = e2.words;\n        for (b = 0; 5 > b; b++)\n          c = d2[b], d2[b] = (c << 8 | c >>> 24) & 16711935 | (c << 24 | c >>> 8) & 4278255360;\n        return e2;\n      }, clone: function() {\n        var d2 = p.clone.call(this);\n        d2._hash = this._hash.clone();\n        return d2;\n      } });\n      q.RIPEMD160 = p._createHelper(d);\n      q.HmacRIPEMD160 = p._createHmacHelper(d);\n    })(Math);\n    (function() {\n      var c = CryptoJS, k = c.enc.Utf8;\n      c.algo.HMAC = c.lib.Base.extend({ init: function(a, b) {\n        a = this._hasher = new a.init();\n        \"string\" == typeof b && (b = k.parse(b));\n        var c2 = a.blockSize, e2 = 4 * c2;\n        b.sigBytes > e2 && (b = a.finalize(b));\n        b.clamp();\n        for (var f = this._oKey = b.clone(), g = this._iKey = b.clone(), h = f.words, j = g.words, d = 0; d < c2; d++)\n          h[d] ^= 1549556828, j[d] ^= 909522486;\n        f.sigBytes = g.sigBytes = e2;\n        this.reset();\n      }, reset: function() {\n        var a = this._hasher;\n        a.reset();\n        a.update(this._iKey);\n      }, update: function(a) {\n        this._hasher.update(a);\n        return this;\n      }, finalize: function(a) {\n        var b = this._hasher;\n        a = b.finalize(a);\n        b.reset();\n        return b.finalize(this._oKey.clone().concat(a));\n      } });\n    })();\n    (function() {\n      var b = CryptoJS, a = b.lib, d = a.Base, m = a.WordArray, a = b.algo, q = a.HMAC, l = a.PBKDF2 = d.extend({ cfg: d.extend({ keySize: 4, hasher: a.SHA1, iterations: 1 }), init: function(a2) {\n        this.cfg = this.cfg.extend(a2);\n      }, compute: function(a2, b2) {\n        for (var c = this.cfg, f = q.create(c.hasher, a2), g = m.create(), d2 = m.create([1]), l2 = g.words, r2 = d2.words, n2 = c.keySize, c = c.iterations; l2.length < n2; ) {\n          var h = f.update(b2).finalize(d2);\n          f.reset();\n          for (var j = h.words, s = j.length, k = h, p = 1; p < c; p++) {\n            k = f.finalize(k);\n            f.reset();\n            for (var t3 = k.words, e2 = 0; e2 < s; e2++)\n              j[e2] ^= t3[e2];\n          }\n          g.concat(h);\n          r2[0]++;\n        }\n        g.sigBytes = 4 * n2;\n        return g;\n      } });\n      b.PBKDF2 = function(a2, b2, c) {\n        return l.create(c).compute(a2, b2);\n      };\n    })();\n    var b64map = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n    var b64pad = \"=\";\n    function hex2b64(d) {\n      var b;\n      var e2;\n      var a = \"\";\n      for (b = 0; b + 3 <= d.length; b += 3) {\n        e2 = parseInt(d.substring(b, b + 3), 16);\n        a += b64map.charAt(e2 >> 6) + b64map.charAt(e2 & 63);\n      }\n      if (b + 1 == d.length) {\n        e2 = parseInt(d.substring(b, b + 1), 16);\n        a += b64map.charAt(e2 << 2);\n      } else {\n        if (b + 2 == d.length) {\n          e2 = parseInt(d.substring(b, b + 2), 16);\n          a += b64map.charAt(e2 >> 2) + b64map.charAt((e2 & 3) << 4);\n        }\n      }\n      if (b64pad) {\n        while ((a.length & 3) > 0) {\n          a += b64pad;\n        }\n      }\n      return a;\n    }\n    function b64tohex(f) {\n      var d = \"\";\n      var e2;\n      var b = 0;\n      var c;\n      var a;\n      for (e2 = 0; e2 < f.length; ++e2) {\n        if (f.charAt(e2) == b64pad) {\n          break;\n        }\n        a = b64map.indexOf(f.charAt(e2));\n        if (a < 0) {\n          continue;\n        }\n        if (b == 0) {\n          d += int2char(a >> 2);\n          c = a & 3;\n          b = 1;\n        } else {\n          if (b == 1) {\n            d += int2char(c << 2 | a >> 4);\n            c = a & 15;\n            b = 2;\n          } else {\n            if (b == 2) {\n              d += int2char(c);\n              d += int2char(a >> 2);\n              c = a & 3;\n              b = 3;\n            } else {\n              d += int2char(c << 2 | a >> 4);\n              d += int2char(a & 15);\n              b = 0;\n            }\n          }\n        }\n      }\n      if (b == 1) {\n        d += int2char(c << 2);\n      }\n      return d;\n    }\n    function b64toBA(e2) {\n      var d = b64tohex(e2);\n      var c;\n      var b = new Array();\n      for (c = 0; 2 * c < d.length; ++c) {\n        b[c] = parseInt(d.substring(2 * c, 2 * c + 2), 16);\n      }\n      return b;\n    }\n    var dbits;\n    var canary = 244837814094590;\n    var j_lm = (canary & 16777215) == 15715070;\n    function BigInteger(e2, d, f) {\n      if (e2 != null) {\n        if (\"number\" == typeof e2) {\n          this.fromNumber(e2, d, f);\n        } else {\n          if (d == null && \"string\" != typeof e2) {\n            this.fromString(e2, 256);\n          } else {\n            this.fromString(e2, d);\n          }\n        }\n      }\n    }\n    function nbi() {\n      return new BigInteger(null);\n    }\n    function am1(f, a, b, e2, h, g) {\n      while (--g >= 0) {\n        var d = a * this[f++] + b[e2] + h;\n        h = Math.floor(d / 67108864);\n        b[e2++] = d & 67108863;\n      }\n      return h;\n    }\n    function am2(f, q, r2, e2, o2, a) {\n      var k = q & 32767, p = q >> 15;\n      while (--a >= 0) {\n        var d = this[f] & 32767;\n        var g = this[f++] >> 15;\n        var b = p * d + g * k;\n        d = k * d + ((b & 32767) << 15) + r2[e2] + (o2 & 1073741823);\n        o2 = (d >>> 30) + (b >>> 15) + p * g + (o2 >>> 30);\n        r2[e2++] = d & 1073741823;\n      }\n      return o2;\n    }\n    function am3(f, q, r2, e2, o2, a) {\n      var k = q & 16383, p = q >> 14;\n      while (--a >= 0) {\n        var d = this[f] & 16383;\n        var g = this[f++] >> 14;\n        var b = p * d + g * k;\n        d = k * d + ((b & 16383) << 14) + r2[e2] + o2;\n        o2 = (d >> 28) + (b >> 14) + p * g;\n        r2[e2++] = d & 268435455;\n      }\n      return o2;\n    }\n    if (j_lm && navigator2.appName == \"Microsoft Internet Explorer\") {\n      BigInteger.prototype.am = am2;\n      dbits = 30;\n    } else {\n      if (j_lm && navigator2.appName != \"Netscape\") {\n        BigInteger.prototype.am = am1;\n        dbits = 26;\n      } else {\n        BigInteger.prototype.am = am3;\n        dbits = 28;\n      }\n    }\n    BigInteger.prototype.DB = dbits;\n    BigInteger.prototype.DM = (1 << dbits) - 1;\n    BigInteger.prototype.DV = 1 << dbits;\n    var BI_FP = 52;\n    BigInteger.prototype.FV = Math.pow(2, BI_FP);\n    BigInteger.prototype.F1 = BI_FP - dbits;\n    BigInteger.prototype.F2 = 2 * dbits - BI_FP;\n    var BI_RM = \"0123456789abcdefghijklmnopqrstuvwxyz\";\n    var BI_RC = new Array();\n    var rr;\n    var vv;\n    rr = \"0\".charCodeAt(0);\n    for (vv = 0; vv <= 9; ++vv) {\n      BI_RC[rr++] = vv;\n    }\n    rr = \"a\".charCodeAt(0);\n    for (vv = 10; vv < 36; ++vv) {\n      BI_RC[rr++] = vv;\n    }\n    rr = \"A\".charCodeAt(0);\n    for (vv = 10; vv < 36; ++vv) {\n      BI_RC[rr++] = vv;\n    }\n    function int2char(a) {\n      return BI_RM.charAt(a);\n    }\n    function intAt(b, a) {\n      var d = BI_RC[b.charCodeAt(a)];\n      return d == null ? -1 : d;\n    }\n    function bnpCopyTo(b) {\n      for (var a = this.t - 1; a >= 0; --a) {\n        b[a] = this[a];\n      }\n      b.t = this.t;\n      b.s = this.s;\n    }\n    function bnpFromInt(a) {\n      this.t = 1;\n      this.s = a < 0 ? -1 : 0;\n      if (a > 0) {\n        this[0] = a;\n      } else {\n        if (a < -1) {\n          this[0] = a + this.DV;\n        } else {\n          this.t = 0;\n        }\n      }\n    }\n    function nbv(a) {\n      var b = nbi();\n      b.fromInt(a);\n      return b;\n    }\n    function bnpFromString(h, c) {\n      var e2;\n      if (c == 16) {\n        e2 = 4;\n      } else {\n        if (c == 8) {\n          e2 = 3;\n        } else {\n          if (c == 256) {\n            e2 = 8;\n          } else {\n            if (c == 2) {\n              e2 = 1;\n            } else {\n              if (c == 32) {\n                e2 = 5;\n              } else {\n                if (c == 4) {\n                  e2 = 2;\n                } else {\n                  this.fromRadix(h, c);\n                  return;\n                }\n              }\n            }\n          }\n        }\n      }\n      this.t = 0;\n      this.s = 0;\n      var g = h.length, d = false, f = 0;\n      while (--g >= 0) {\n        var a = e2 == 8 ? h[g] & 255 : intAt(h, g);\n        if (a < 0) {\n          if (h.charAt(g) == \"-\") {\n            d = true;\n          }\n          continue;\n        }\n        d = false;\n        if (f == 0) {\n          this[this.t++] = a;\n        } else {\n          if (f + e2 > this.DB) {\n            this[this.t - 1] |= (a & (1 << this.DB - f) - 1) << f;\n            this[this.t++] = a >> this.DB - f;\n          } else {\n            this[this.t - 1] |= a << f;\n          }\n        }\n        f += e2;\n        if (f >= this.DB) {\n          f -= this.DB;\n        }\n      }\n      if (e2 == 8 && (h[0] & 128) != 0) {\n        this.s = -1;\n        if (f > 0) {\n          this[this.t - 1] |= (1 << this.DB - f) - 1 << f;\n        }\n      }\n      this.clamp();\n      if (d) {\n        BigInteger.ZERO.subTo(this, this);\n      }\n    }\n    function bnpClamp() {\n      var a = this.s & this.DM;\n      while (this.t > 0 && this[this.t - 1] == a) {\n        --this.t;\n      }\n    }\n    function bnToString(c) {\n      if (this.s < 0) {\n        return \"-\" + this.negate().toString(c);\n      }\n      var e2;\n      if (c == 16) {\n        e2 = 4;\n      } else {\n        if (c == 8) {\n          e2 = 3;\n        } else {\n          if (c == 2) {\n            e2 = 1;\n          } else {\n            if (c == 32) {\n              e2 = 5;\n            } else {\n              if (c == 4) {\n                e2 = 2;\n              } else {\n                return this.toRadix(c);\n              }\n            }\n          }\n        }\n      }\n      var g = (1 << e2) - 1, l, a = false, h = \"\", f = this.t;\n      var j = this.DB - f * this.DB % e2;\n      if (f-- > 0) {\n        if (j < this.DB && (l = this[f] >> j) > 0) {\n          a = true;\n          h = int2char(l);\n        }\n        while (f >= 0) {\n          if (j < e2) {\n            l = (this[f] & (1 << j) - 1) << e2 - j;\n            l |= this[--f] >> (j += this.DB - e2);\n          } else {\n            l = this[f] >> (j -= e2) & g;\n            if (j <= 0) {\n              j += this.DB;\n              --f;\n            }\n          }\n          if (l > 0) {\n            a = true;\n          }\n          if (a) {\n            h += int2char(l);\n          }\n        }\n      }\n      return a ? h : \"0\";\n    }\n    function bnNegate() {\n      var a = nbi();\n      BigInteger.ZERO.subTo(this, a);\n      return a;\n    }\n    function bnAbs() {\n      return this.s < 0 ? this.negate() : this;\n    }\n    function bnCompareTo(b) {\n      var d = this.s - b.s;\n      if (d != 0) {\n        return d;\n      }\n      var c = this.t;\n      d = c - b.t;\n      if (d != 0) {\n        return this.s < 0 ? -d : d;\n      }\n      while (--c >= 0) {\n        if ((d = this[c] - b[c]) != 0) {\n          return d;\n        }\n      }\n      return 0;\n    }\n    function nbits(a) {\n      var c = 1, b;\n      if ((b = a >>> 16) != 0) {\n        a = b;\n        c += 16;\n      }\n      if ((b = a >> 8) != 0) {\n        a = b;\n        c += 8;\n      }\n      if ((b = a >> 4) != 0) {\n        a = b;\n        c += 4;\n      }\n      if ((b = a >> 2) != 0) {\n        a = b;\n        c += 2;\n      }\n      if ((b = a >> 1) != 0) {\n        a = b;\n        c += 1;\n      }\n      return c;\n    }\n    function bnBitLength() {\n      if (this.t <= 0) {\n        return 0;\n      }\n      return this.DB * (this.t - 1) + nbits(this[this.t - 1] ^ this.s & this.DM);\n    }\n    function bnpDLShiftTo(c, b) {\n      var a;\n      for (a = this.t - 1; a >= 0; --a) {\n        b[a + c] = this[a];\n      }\n      for (a = c - 1; a >= 0; --a) {\n        b[a] = 0;\n      }\n      b.t = this.t + c;\n      b.s = this.s;\n    }\n    function bnpDRShiftTo(c, b) {\n      for (var a = c; a < this.t; ++a) {\n        b[a - c] = this[a];\n      }\n      b.t = Math.max(this.t - c, 0);\n      b.s = this.s;\n    }\n    function bnpLShiftTo(j, e2) {\n      var b = j % this.DB;\n      var a = this.DB - b;\n      var g = (1 << a) - 1;\n      var f = Math.floor(j / this.DB), h = this.s << b & this.DM, d;\n      for (d = this.t - 1; d >= 0; --d) {\n        e2[d + f + 1] = this[d] >> a | h;\n        h = (this[d] & g) << b;\n      }\n      for (d = f - 1; d >= 0; --d) {\n        e2[d] = 0;\n      }\n      e2[f] = h;\n      e2.t = this.t + f + 1;\n      e2.s = this.s;\n      e2.clamp();\n    }\n    function bnpRShiftTo(g, d) {\n      d.s = this.s;\n      var e2 = Math.floor(g / this.DB);\n      if (e2 >= this.t) {\n        d.t = 0;\n        return;\n      }\n      var b = g % this.DB;\n      var a = this.DB - b;\n      var f = (1 << b) - 1;\n      d[0] = this[e2] >> b;\n      for (var c = e2 + 1; c < this.t; ++c) {\n        d[c - e2 - 1] |= (this[c] & f) << a;\n        d[c - e2] = this[c] >> b;\n      }\n      if (b > 0) {\n        d[this.t - e2 - 1] |= (this.s & f) << a;\n      }\n      d.t = this.t - e2;\n      d.clamp();\n    }\n    function bnpSubTo(d, f) {\n      var e2 = 0, g = 0, b = Math.min(d.t, this.t);\n      while (e2 < b) {\n        g += this[e2] - d[e2];\n        f[e2++] = g & this.DM;\n        g >>= this.DB;\n      }\n      if (d.t < this.t) {\n        g -= d.s;\n        while (e2 < this.t) {\n          g += this[e2];\n          f[e2++] = g & this.DM;\n          g >>= this.DB;\n        }\n        g += this.s;\n      } else {\n        g += this.s;\n        while (e2 < d.t) {\n          g -= d[e2];\n          f[e2++] = g & this.DM;\n          g >>= this.DB;\n        }\n        g -= d.s;\n      }\n      f.s = g < 0 ? -1 : 0;\n      if (g < -1) {\n        f[e2++] = this.DV + g;\n      } else {\n        if (g > 0) {\n          f[e2++] = g;\n        }\n      }\n      f.t = e2;\n      f.clamp();\n    }\n    function bnpMultiplyTo(c, e2) {\n      var b = this.abs(), f = c.abs();\n      var d = b.t;\n      e2.t = d + f.t;\n      while (--d >= 0) {\n        e2[d] = 0;\n      }\n      for (d = 0; d < f.t; ++d) {\n        e2[d + b.t] = b.am(0, f[d], e2, d, 0, b.t);\n      }\n      e2.s = 0;\n      e2.clamp();\n      if (this.s != c.s) {\n        BigInteger.ZERO.subTo(e2, e2);\n      }\n    }\n    function bnpSquareTo(d) {\n      var a = this.abs();\n      var b = d.t = 2 * a.t;\n      while (--b >= 0) {\n        d[b] = 0;\n      }\n      for (b = 0; b < a.t - 1; ++b) {\n        var e2 = a.am(b, a[b], d, 2 * b, 0, 1);\n        if ((d[b + a.t] += a.am(b + 1, 2 * a[b], d, 2 * b + 1, e2, a.t - b - 1)) >= a.DV) {\n          d[b + a.t] -= a.DV;\n          d[b + a.t + 1] = 1;\n        }\n      }\n      if (d.t > 0) {\n        d[d.t - 1] += a.am(b, a[b], d, 2 * b, 0, 1);\n      }\n      d.s = 0;\n      d.clamp();\n    }\n    function bnpDivRemTo(n2, h, g) {\n      var w = n2.abs();\n      if (w.t <= 0) {\n        return;\n      }\n      var k = this.abs();\n      if (k.t < w.t) {\n        if (h != null) {\n          h.fromInt(0);\n        }\n        if (g != null) {\n          this.copyTo(g);\n        }\n        return;\n      }\n      if (g == null) {\n        g = nbi();\n      }\n      var d = nbi(), a = this.s, l = n2.s;\n      var v = this.DB - nbits(w[w.t - 1]);\n      if (v > 0) {\n        w.lShiftTo(v, d);\n        k.lShiftTo(v, g);\n      } else {\n        w.copyTo(d);\n        k.copyTo(g);\n      }\n      var p = d.t;\n      var b = d[p - 1];\n      if (b == 0) {\n        return;\n      }\n      var o2 = b * (1 << this.F1) + (p > 1 ? d[p - 2] >> this.F2 : 0);\n      var A = this.FV / o2, z2 = (1 << this.F1) / o2, x = 1 << this.F2;\n      var u = g.t, s = u - p, f = h == null ? nbi() : h;\n      d.dlShiftTo(s, f);\n      if (g.compareTo(f) >= 0) {\n        g[g.t++] = 1;\n        g.subTo(f, g);\n      }\n      BigInteger.ONE.dlShiftTo(p, f);\n      f.subTo(d, d);\n      while (d.t < p) {\n        d[d.t++] = 0;\n      }\n      while (--s >= 0) {\n        var c = g[--u] == b ? this.DM : Math.floor(g[u] * A + (g[u - 1] + x) * z2);\n        if ((g[u] += d.am(0, c, g, s, 0, p)) < c) {\n          d.dlShiftTo(s, f);\n          g.subTo(f, g);\n          while (g[u] < --c) {\n            g.subTo(f, g);\n          }\n        }\n      }\n      if (h != null) {\n        g.drShiftTo(p, h);\n        if (a != l) {\n          BigInteger.ZERO.subTo(h, h);\n        }\n      }\n      g.t = p;\n      g.clamp();\n      if (v > 0) {\n        g.rShiftTo(v, g);\n      }\n      if (a < 0) {\n        BigInteger.ZERO.subTo(g, g);\n      }\n    }\n    function bnMod(b) {\n      var c = nbi();\n      this.abs().divRemTo(b, null, c);\n      if (this.s < 0 && c.compareTo(BigInteger.ZERO) > 0) {\n        b.subTo(c, c);\n      }\n      return c;\n    }\n    function Classic(a) {\n      this.m = a;\n    }\n    function cConvert(a) {\n      if (a.s < 0 || a.compareTo(this.m) >= 0) {\n        return a.mod(this.m);\n      } else {\n        return a;\n      }\n    }\n    function cRevert(a) {\n      return a;\n    }\n    function cReduce(a) {\n      a.divRemTo(this.m, null, a);\n    }\n    function cMulTo(a, c, b) {\n      a.multiplyTo(c, b);\n      this.reduce(b);\n    }\n    function cSqrTo(a, b) {\n      a.squareTo(b);\n      this.reduce(b);\n    }\n    Classic.prototype.convert = cConvert;\n    Classic.prototype.revert = cRevert;\n    Classic.prototype.reduce = cReduce;\n    Classic.prototype.mulTo = cMulTo;\n    Classic.prototype.sqrTo = cSqrTo;\n    function bnpInvDigit() {\n      if (this.t < 1) {\n        return 0;\n      }\n      var a = this[0];\n      if ((a & 1) == 0) {\n        return 0;\n      }\n      var b = a & 3;\n      b = b * (2 - (a & 15) * b) & 15;\n      b = b * (2 - (a & 255) * b) & 255;\n      b = b * (2 - ((a & 65535) * b & 65535)) & 65535;\n      b = b * (2 - a * b % this.DV) % this.DV;\n      return b > 0 ? this.DV - b : -b;\n    }\n    function Montgomery(a) {\n      this.m = a;\n      this.mp = a.invDigit();\n      this.mpl = this.mp & 32767;\n      this.mph = this.mp >> 15;\n      this.um = (1 << a.DB - 15) - 1;\n      this.mt2 = 2 * a.t;\n    }\n    function montConvert(a) {\n      var b = nbi();\n      a.abs().dlShiftTo(this.m.t, b);\n      b.divRemTo(this.m, null, b);\n      if (a.s < 0 && b.compareTo(BigInteger.ZERO) > 0) {\n        this.m.subTo(b, b);\n      }\n      return b;\n    }\n    function montRevert(a) {\n      var b = nbi();\n      a.copyTo(b);\n      this.reduce(b);\n      return b;\n    }\n    function montReduce(a) {\n      while (a.t <= this.mt2) {\n        a[a.t++] = 0;\n      }\n      for (var c = 0; c < this.m.t; ++c) {\n        var b = a[c] & 32767;\n        var d = b * this.mpl + ((b * this.mph + (a[c] >> 15) * this.mpl & this.um) << 15) & a.DM;\n        b = c + this.m.t;\n        a[b] += this.m.am(0, d, a, c, 0, this.m.t);\n        while (a[b] >= a.DV) {\n          a[b] -= a.DV;\n          a[++b]++;\n        }\n      }\n      a.clamp();\n      a.drShiftTo(this.m.t, a);\n      if (a.compareTo(this.m) >= 0) {\n        a.subTo(this.m, a);\n      }\n    }\n    function montSqrTo(a, b) {\n      a.squareTo(b);\n      this.reduce(b);\n    }\n    function montMulTo(a, c, b) {\n      a.multiplyTo(c, b);\n      this.reduce(b);\n    }\n    Montgomery.prototype.convert = montConvert;\n    Montgomery.prototype.revert = montRevert;\n    Montgomery.prototype.reduce = montReduce;\n    Montgomery.prototype.mulTo = montMulTo;\n    Montgomery.prototype.sqrTo = montSqrTo;\n    function bnpIsEven() {\n      return (this.t > 0 ? this[0] & 1 : this.s) == 0;\n    }\n    function bnpExp(h, j) {\n      if (h > 4294967295 || h < 1) {\n        return BigInteger.ONE;\n      }\n      var f = nbi(), a = nbi(), d = j.convert(this), c = nbits(h) - 1;\n      d.copyTo(f);\n      while (--c >= 0) {\n        j.sqrTo(f, a);\n        if ((h & 1 << c) > 0) {\n          j.mulTo(a, d, f);\n        } else {\n          var b = f;\n          f = a;\n          a = b;\n        }\n      }\n      return j.revert(f);\n    }\n    function bnModPowInt(b, a) {\n      var c;\n      if (b < 256 || a.isEven()) {\n        c = new Classic(a);\n      } else {\n        c = new Montgomery(a);\n      }\n      return this.exp(b, c);\n    }\n    BigInteger.prototype.copyTo = bnpCopyTo;\n    BigInteger.prototype.fromInt = bnpFromInt;\n    BigInteger.prototype.fromString = bnpFromString;\n    BigInteger.prototype.clamp = bnpClamp;\n    BigInteger.prototype.dlShiftTo = bnpDLShiftTo;\n    BigInteger.prototype.drShiftTo = bnpDRShiftTo;\n    BigInteger.prototype.lShiftTo = bnpLShiftTo;\n    BigInteger.prototype.rShiftTo = bnpRShiftTo;\n    BigInteger.prototype.subTo = bnpSubTo;\n    BigInteger.prototype.multiplyTo = bnpMultiplyTo;\n    BigInteger.prototype.squareTo = bnpSquareTo;\n    BigInteger.prototype.divRemTo = bnpDivRemTo;\n    BigInteger.prototype.invDigit = bnpInvDigit;\n    BigInteger.prototype.isEven = bnpIsEven;\n    BigInteger.prototype.exp = bnpExp;\n    BigInteger.prototype.toString = bnToString;\n    BigInteger.prototype.negate = bnNegate;\n    BigInteger.prototype.abs = bnAbs;\n    BigInteger.prototype.compareTo = bnCompareTo;\n    BigInteger.prototype.bitLength = bnBitLength;\n    BigInteger.prototype.mod = bnMod;\n    BigInteger.prototype.modPowInt = bnModPowInt;\n    BigInteger.ZERO = nbv(0);\n    BigInteger.ONE = nbv(1);\n    function bnClone() {\n      var a = nbi();\n      this.copyTo(a);\n      return a;\n    }\n    function bnIntValue() {\n      if (this.s < 0) {\n        if (this.t == 1) {\n          return this[0] - this.DV;\n        } else {\n          if (this.t == 0) {\n            return -1;\n          }\n        }\n      } else {\n        if (this.t == 1) {\n          return this[0];\n        } else {\n          if (this.t == 0) {\n            return 0;\n          }\n        }\n      }\n      return (this[1] & (1 << 32 - this.DB) - 1) << this.DB | this[0];\n    }\n    function bnByteValue() {\n      return this.t == 0 ? this.s : this[0] << 24 >> 24;\n    }\n    function bnShortValue() {\n      return this.t == 0 ? this.s : this[0] << 16 >> 16;\n    }\n    function bnpChunkSize(a) {\n      return Math.floor(Math.LN2 * this.DB / Math.log(a));\n    }\n    function bnSigNum() {\n      if (this.s < 0) {\n        return -1;\n      } else {\n        if (this.t <= 0 || this.t == 1 && this[0] <= 0) {\n          return 0;\n        } else {\n          return 1;\n        }\n      }\n    }\n    function bnpToRadix(c) {\n      if (c == null) {\n        c = 10;\n      }\n      if (this.signum() == 0 || c < 2 || c > 36) {\n        return \"0\";\n      }\n      var f = this.chunkSize(c);\n      var e2 = Math.pow(c, f);\n      var i = nbv(e2), j = nbi(), h = nbi(), g = \"\";\n      this.divRemTo(i, j, h);\n      while (j.signum() > 0) {\n        g = (e2 + h.intValue()).toString(c).substr(1) + g;\n        j.divRemTo(i, j, h);\n      }\n      return h.intValue().toString(c) + g;\n    }\n    function bnpFromRadix(m, h) {\n      this.fromInt(0);\n      if (h == null) {\n        h = 10;\n      }\n      var f = this.chunkSize(h);\n      var g = Math.pow(h, f), e2 = false, a = 0, l = 0;\n      for (var c = 0; c < m.length; ++c) {\n        var k = intAt(m, c);\n        if (k < 0) {\n          if (m.charAt(c) == \"-\" && this.signum() == 0) {\n            e2 = true;\n          }\n          continue;\n        }\n        l = h * l + k;\n        if (++a >= f) {\n          this.dMultiply(g);\n          this.dAddOffset(l, 0);\n          a = 0;\n          l = 0;\n        }\n      }\n      if (a > 0) {\n        this.dMultiply(Math.pow(h, a));\n        this.dAddOffset(l, 0);\n      }\n      if (e2) {\n        BigInteger.ZERO.subTo(this, this);\n      }\n    }\n    function bnpFromNumber(f, e2, h) {\n      if (\"number\" == typeof e2) {\n        if (f < 2) {\n          this.fromInt(1);\n        } else {\n          this.fromNumber(f, h);\n          if (!this.testBit(f - 1)) {\n            this.bitwiseTo(BigInteger.ONE.shiftLeft(f - 1), op_or, this);\n          }\n          if (this.isEven()) {\n            this.dAddOffset(1, 0);\n          }\n          while (!this.isProbablePrime(e2)) {\n            this.dAddOffset(2, 0);\n            if (this.bitLength() > f) {\n              this.subTo(BigInteger.ONE.shiftLeft(f - 1), this);\n            }\n          }\n        }\n      } else {\n        var d = new Array(), g = f & 7;\n        d.length = (f >> 3) + 1;\n        e2.nextBytes(d);\n        if (g > 0) {\n          d[0] &= (1 << g) - 1;\n        } else {\n          d[0] = 0;\n        }\n        this.fromString(d, 256);\n      }\n    }\n    function bnToByteArray() {\n      var b = this.t, c = new Array();\n      c[0] = this.s;\n      var e2 = this.DB - b * this.DB % 8, f, a = 0;\n      if (b-- > 0) {\n        if (e2 < this.DB && (f = this[b] >> e2) != (this.s & this.DM) >> e2) {\n          c[a++] = f | this.s << this.DB - e2;\n        }\n        while (b >= 0) {\n          if (e2 < 8) {\n            f = (this[b] & (1 << e2) - 1) << 8 - e2;\n            f |= this[--b] >> (e2 += this.DB - 8);\n          } else {\n            f = this[b] >> (e2 -= 8) & 255;\n            if (e2 <= 0) {\n              e2 += this.DB;\n              --b;\n            }\n          }\n          if ((f & 128) != 0) {\n            f |= -256;\n          }\n          if (a == 0 && (this.s & 128) != (f & 128)) {\n            ++a;\n          }\n          if (a > 0 || f != this.s) {\n            c[a++] = f;\n          }\n        }\n      }\n      return c;\n    }\n    function bnEquals(b) {\n      return this.compareTo(b) == 0;\n    }\n    function bnMin(b) {\n      return this.compareTo(b) < 0 ? this : b;\n    }\n    function bnMax(b) {\n      return this.compareTo(b) > 0 ? this : b;\n    }\n    function bnpBitwiseTo(c, h, e2) {\n      var d, g, b = Math.min(c.t, this.t);\n      for (d = 0; d < b; ++d) {\n        e2[d] = h(this[d], c[d]);\n      }\n      if (c.t < this.t) {\n        g = c.s & this.DM;\n        for (d = b; d < this.t; ++d) {\n          e2[d] = h(this[d], g);\n        }\n        e2.t = this.t;\n      } else {\n        g = this.s & this.DM;\n        for (d = b; d < c.t; ++d) {\n          e2[d] = h(g, c[d]);\n        }\n        e2.t = c.t;\n      }\n      e2.s = h(this.s, c.s);\n      e2.clamp();\n    }\n    function op_and(a, b) {\n      return a & b;\n    }\n    function bnAnd(b) {\n      var c = nbi();\n      this.bitwiseTo(b, op_and, c);\n      return c;\n    }\n    function op_or(a, b) {\n      return a | b;\n    }\n    function bnOr(b) {\n      var c = nbi();\n      this.bitwiseTo(b, op_or, c);\n      return c;\n    }\n    function op_xor(a, b) {\n      return a ^ b;\n    }\n    function bnXor(b) {\n      var c = nbi();\n      this.bitwiseTo(b, op_xor, c);\n      return c;\n    }\n    function op_andnot(a, b) {\n      return a & ~b;\n    }\n    function bnAndNot(b) {\n      var c = nbi();\n      this.bitwiseTo(b, op_andnot, c);\n      return c;\n    }\n    function bnNot() {\n      var b = nbi();\n      for (var a = 0; a < this.t; ++a) {\n        b[a] = this.DM & ~this[a];\n      }\n      b.t = this.t;\n      b.s = ~this.s;\n      return b;\n    }\n    function bnShiftLeft(b) {\n      var a = nbi();\n      if (b < 0) {\n        this.rShiftTo(-b, a);\n      } else {\n        this.lShiftTo(b, a);\n      }\n      return a;\n    }\n    function bnShiftRight(b) {\n      var a = nbi();\n      if (b < 0) {\n        this.lShiftTo(-b, a);\n      } else {\n        this.rShiftTo(b, a);\n      }\n      return a;\n    }\n    function lbit(a) {\n      if (a == 0) {\n        return -1;\n      }\n      var b = 0;\n      if ((a & 65535) == 0) {\n        a >>= 16;\n        b += 16;\n      }\n      if ((a & 255) == 0) {\n        a >>= 8;\n        b += 8;\n      }\n      if ((a & 15) == 0) {\n        a >>= 4;\n        b += 4;\n      }\n      if ((a & 3) == 0) {\n        a >>= 2;\n        b += 2;\n      }\n      if ((a & 1) == 0) {\n        ++b;\n      }\n      return b;\n    }\n    function bnGetLowestSetBit() {\n      for (var a = 0; a < this.t; ++a) {\n        if (this[a] != 0) {\n          return a * this.DB + lbit(this[a]);\n        }\n      }\n      if (this.s < 0) {\n        return this.t * this.DB;\n      }\n      return -1;\n    }\n    function cbit(a) {\n      var b = 0;\n      while (a != 0) {\n        a &= a - 1;\n        ++b;\n      }\n      return b;\n    }\n    function bnBitCount() {\n      var c = 0, a = this.s & this.DM;\n      for (var b = 0; b < this.t; ++b) {\n        c += cbit(this[b] ^ a);\n      }\n      return c;\n    }\n    function bnTestBit(b) {\n      var a = Math.floor(b / this.DB);\n      if (a >= this.t) {\n        return this.s != 0;\n      }\n      return (this[a] & 1 << b % this.DB) != 0;\n    }\n    function bnpChangeBit(c, b) {\n      var a = BigInteger.ONE.shiftLeft(c);\n      this.bitwiseTo(a, b, a);\n      return a;\n    }\n    function bnSetBit(a) {\n      return this.changeBit(a, op_or);\n    }\n    function bnClearBit(a) {\n      return this.changeBit(a, op_andnot);\n    }\n    function bnFlipBit(a) {\n      return this.changeBit(a, op_xor);\n    }\n    function bnpAddTo(d, f) {\n      var e2 = 0, g = 0, b = Math.min(d.t, this.t);\n      while (e2 < b) {\n        g += this[e2] + d[e2];\n        f[e2++] = g & this.DM;\n        g >>= this.DB;\n      }\n      if (d.t < this.t) {\n        g += d.s;\n        while (e2 < this.t) {\n          g += this[e2];\n          f[e2++] = g & this.DM;\n          g >>= this.DB;\n        }\n        g += this.s;\n      } else {\n        g += this.s;\n        while (e2 < d.t) {\n          g += d[e2];\n          f[e2++] = g & this.DM;\n          g >>= this.DB;\n        }\n        g += d.s;\n      }\n      f.s = g < 0 ? -1 : 0;\n      if (g > 0) {\n        f[e2++] = g;\n      } else {\n        if (g < -1) {\n          f[e2++] = this.DV + g;\n        }\n      }\n      f.t = e2;\n      f.clamp();\n    }\n    function bnAdd(b) {\n      var c = nbi();\n      this.addTo(b, c);\n      return c;\n    }\n    function bnSubtract(b) {\n      var c = nbi();\n      this.subTo(b, c);\n      return c;\n    }\n    function bnMultiply(b) {\n      var c = nbi();\n      this.multiplyTo(b, c);\n      return c;\n    }\n    function bnSquare() {\n      var a = nbi();\n      this.squareTo(a);\n      return a;\n    }\n    function bnDivide(b) {\n      var c = nbi();\n      this.divRemTo(b, c, null);\n      return c;\n    }\n    function bnRemainder(b) {\n      var c = nbi();\n      this.divRemTo(b, null, c);\n      return c;\n    }\n    function bnDivideAndRemainder(b) {\n      var d = nbi(), c = nbi();\n      this.divRemTo(b, d, c);\n      return new Array(d, c);\n    }\n    function bnpDMultiply(a) {\n      this[this.t] = this.am(0, a - 1, this, 0, 0, this.t);\n      ++this.t;\n      this.clamp();\n    }\n    function bnpDAddOffset(b, a) {\n      if (b == 0) {\n        return;\n      }\n      while (this.t <= a) {\n        this[this.t++] = 0;\n      }\n      this[a] += b;\n      while (this[a] >= this.DV) {\n        this[a] -= this.DV;\n        if (++a >= this.t) {\n          this[this.t++] = 0;\n        }\n        ++this[a];\n      }\n    }\n    function NullExp() {\n    }\n    function nNop(a) {\n      return a;\n    }\n    function nMulTo(a, c, b) {\n      a.multiplyTo(c, b);\n    }\n    function nSqrTo(a, b) {\n      a.squareTo(b);\n    }\n    NullExp.prototype.convert = nNop;\n    NullExp.prototype.revert = nNop;\n    NullExp.prototype.mulTo = nMulTo;\n    NullExp.prototype.sqrTo = nSqrTo;\n    function bnPow(a) {\n      return this.exp(a, new NullExp());\n    }\n    function bnpMultiplyLowerTo(b, f, e2) {\n      var d = Math.min(this.t + b.t, f);\n      e2.s = 0;\n      e2.t = d;\n      while (d > 0) {\n        e2[--d] = 0;\n      }\n      var c;\n      for (c = e2.t - this.t; d < c; ++d) {\n        e2[d + this.t] = this.am(0, b[d], e2, d, 0, this.t);\n      }\n      for (c = Math.min(b.t, f); d < c; ++d) {\n        this.am(0, b[d], e2, d, 0, f - d);\n      }\n      e2.clamp();\n    }\n    function bnpMultiplyUpperTo(b, e2, d) {\n      --e2;\n      var c = d.t = this.t + b.t - e2;\n      d.s = 0;\n      while (--c >= 0) {\n        d[c] = 0;\n      }\n      for (c = Math.max(e2 - this.t, 0); c < b.t; ++c) {\n        d[this.t + c - e2] = this.am(e2 - c, b[c], d, 0, 0, this.t + c - e2);\n      }\n      d.clamp();\n      d.drShiftTo(1, d);\n    }\n    function Barrett(a) {\n      this.r2 = nbi();\n      this.q3 = nbi();\n      BigInteger.ONE.dlShiftTo(2 * a.t, this.r2);\n      this.mu = this.r2.divide(a);\n      this.m = a;\n    }\n    function barrettConvert(a) {\n      if (a.s < 0 || a.t > 2 * this.m.t) {\n        return a.mod(this.m);\n      } else {\n        if (a.compareTo(this.m) < 0) {\n          return a;\n        } else {\n          var b = nbi();\n          a.copyTo(b);\n          this.reduce(b);\n          return b;\n        }\n      }\n    }\n    function barrettRevert(a) {\n      return a;\n    }\n    function barrettReduce(a) {\n      a.drShiftTo(this.m.t - 1, this.r2);\n      if (a.t > this.m.t + 1) {\n        a.t = this.m.t + 1;\n        a.clamp();\n      }\n      this.mu.multiplyUpperTo(this.r2, this.m.t + 1, this.q3);\n      this.m.multiplyLowerTo(this.q3, this.m.t + 1, this.r2);\n      while (a.compareTo(this.r2) < 0) {\n        a.dAddOffset(1, this.m.t + 1);\n      }\n      a.subTo(this.r2, a);\n      while (a.compareTo(this.m) >= 0) {\n        a.subTo(this.m, a);\n      }\n    }\n    function barrettSqrTo(a, b) {\n      a.squareTo(b);\n      this.reduce(b);\n    }\n    function barrettMulTo(a, c, b) {\n      a.multiplyTo(c, b);\n      this.reduce(b);\n    }\n    Barrett.prototype.convert = barrettConvert;\n    Barrett.prototype.revert = barrettRevert;\n    Barrett.prototype.reduce = barrettReduce;\n    Barrett.prototype.mulTo = barrettMulTo;\n    Barrett.prototype.sqrTo = barrettSqrTo;\n    function bnModPow(q, f) {\n      var o2 = q.bitLength(), h, b = nbv(1), v;\n      if (o2 <= 0) {\n        return b;\n      } else {\n        if (o2 < 18) {\n          h = 1;\n        } else {\n          if (o2 < 48) {\n            h = 3;\n          } else {\n            if (o2 < 144) {\n              h = 4;\n            } else {\n              if (o2 < 768) {\n                h = 5;\n              } else {\n                h = 6;\n              }\n            }\n          }\n        }\n      }\n      if (o2 < 8) {\n        v = new Classic(f);\n      } else {\n        if (f.isEven()) {\n          v = new Barrett(f);\n        } else {\n          v = new Montgomery(f);\n        }\n      }\n      var p = new Array(), d = 3, s = h - 1, a = (1 << h) - 1;\n      p[1] = v.convert(this);\n      if (h > 1) {\n        var A = nbi();\n        v.sqrTo(p[1], A);\n        while (d <= a) {\n          p[d] = nbi();\n          v.mulTo(A, p[d - 2], p[d]);\n          d += 2;\n        }\n      }\n      var l = q.t - 1, x, u = true, c = nbi(), y;\n      o2 = nbits(q[l]) - 1;\n      while (l >= 0) {\n        if (o2 >= s) {\n          x = q[l] >> o2 - s & a;\n        } else {\n          x = (q[l] & (1 << o2 + 1) - 1) << s - o2;\n          if (l > 0) {\n            x |= q[l - 1] >> this.DB + o2 - s;\n          }\n        }\n        d = h;\n        while ((x & 1) == 0) {\n          x >>= 1;\n          --d;\n        }\n        if ((o2 -= d) < 0) {\n          o2 += this.DB;\n          --l;\n        }\n        if (u) {\n          p[x].copyTo(b);\n          u = false;\n        } else {\n          while (d > 1) {\n            v.sqrTo(b, c);\n            v.sqrTo(c, b);\n            d -= 2;\n          }\n          if (d > 0) {\n            v.sqrTo(b, c);\n          } else {\n            y = b;\n            b = c;\n            c = y;\n          }\n          v.mulTo(c, p[x], b);\n        }\n        while (l >= 0 && (q[l] & 1 << o2) == 0) {\n          v.sqrTo(b, c);\n          y = b;\n          b = c;\n          c = y;\n          if (--o2 < 0) {\n            o2 = this.DB - 1;\n            --l;\n          }\n        }\n      }\n      return v.revert(b);\n    }\n    function bnGCD(c) {\n      var b = this.s < 0 ? this.negate() : this.clone();\n      var h = c.s < 0 ? c.negate() : c.clone();\n      if (b.compareTo(h) < 0) {\n        var e2 = b;\n        b = h;\n        h = e2;\n      }\n      var d = b.getLowestSetBit(), f = h.getLowestSetBit();\n      if (f < 0) {\n        return b;\n      }\n      if (d < f) {\n        f = d;\n      }\n      if (f > 0) {\n        b.rShiftTo(f, b);\n        h.rShiftTo(f, h);\n      }\n      while (b.signum() > 0) {\n        if ((d = b.getLowestSetBit()) > 0) {\n          b.rShiftTo(d, b);\n        }\n        if ((d = h.getLowestSetBit()) > 0) {\n          h.rShiftTo(d, h);\n        }\n        if (b.compareTo(h) >= 0) {\n          b.subTo(h, b);\n          b.rShiftTo(1, b);\n        } else {\n          h.subTo(b, h);\n          h.rShiftTo(1, h);\n        }\n      }\n      if (f > 0) {\n        h.lShiftTo(f, h);\n      }\n      return h;\n    }\n    function bnpModInt(e2) {\n      if (e2 <= 0) {\n        return 0;\n      }\n      var c = this.DV % e2, b = this.s < 0 ? e2 - 1 : 0;\n      if (this.t > 0) {\n        if (c == 0) {\n          b = this[0] % e2;\n        } else {\n          for (var a = this.t - 1; a >= 0; --a) {\n            b = (c * b + this[a]) % e2;\n          }\n        }\n      }\n      return b;\n    }\n    function bnModInverse(f) {\n      var j = f.isEven();\n      if (this.isEven() && j || f.signum() == 0) {\n        return BigInteger.ZERO;\n      }\n      var i = f.clone(), h = this.clone();\n      var g = nbv(1), e2 = nbv(0), l = nbv(0), k = nbv(1);\n      while (i.signum() != 0) {\n        while (i.isEven()) {\n          i.rShiftTo(1, i);\n          if (j) {\n            if (!g.isEven() || !e2.isEven()) {\n              g.addTo(this, g);\n              e2.subTo(f, e2);\n            }\n            g.rShiftTo(1, g);\n          } else {\n            if (!e2.isEven()) {\n              e2.subTo(f, e2);\n            }\n          }\n          e2.rShiftTo(1, e2);\n        }\n        while (h.isEven()) {\n          h.rShiftTo(1, h);\n          if (j) {\n            if (!l.isEven() || !k.isEven()) {\n              l.addTo(this, l);\n              k.subTo(f, k);\n            }\n            l.rShiftTo(1, l);\n          } else {\n            if (!k.isEven()) {\n              k.subTo(f, k);\n            }\n          }\n          k.rShiftTo(1, k);\n        }\n        if (i.compareTo(h) >= 0) {\n          i.subTo(h, i);\n          if (j) {\n            g.subTo(l, g);\n          }\n          e2.subTo(k, e2);\n        } else {\n          h.subTo(i, h);\n          if (j) {\n            l.subTo(g, l);\n          }\n          k.subTo(e2, k);\n        }\n      }\n      if (h.compareTo(BigInteger.ONE) != 0) {\n        return BigInteger.ZERO;\n      }\n      if (k.compareTo(f) >= 0) {\n        return k.subtract(f);\n      }\n      if (k.signum() < 0) {\n        k.addTo(f, k);\n      } else {\n        return k;\n      }\n      if (k.signum() < 0) {\n        return k.add(f);\n      } else {\n        return k;\n      }\n    }\n    var lowprimes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997];\n    var lplim = (1 << 26) / lowprimes[lowprimes.length - 1];\n    function bnIsProbablePrime(e2) {\n      var d, b = this.abs();\n      if (b.t == 1 && b[0] <= lowprimes[lowprimes.length - 1]) {\n        for (d = 0; d < lowprimes.length; ++d) {\n          if (b[0] == lowprimes[d]) {\n            return true;\n          }\n        }\n        return false;\n      }\n      if (b.isEven()) {\n        return false;\n      }\n      d = 1;\n      while (d < lowprimes.length) {\n        var a = lowprimes[d], c = d + 1;\n        while (c < lowprimes.length && a < lplim) {\n          a *= lowprimes[c++];\n        }\n        a = b.modInt(a);\n        while (d < c) {\n          if (a % lowprimes[d++] == 0) {\n            return false;\n          }\n        }\n      }\n      return b.millerRabin(e2);\n    }\n    function bnpMillerRabin(f) {\n      var g = this.subtract(BigInteger.ONE);\n      var c = g.getLowestSetBit();\n      if (c <= 0) {\n        return false;\n      }\n      var h = g.shiftRight(c);\n      f = f + 1 >> 1;\n      if (f > lowprimes.length) {\n        f = lowprimes.length;\n      }\n      var b = nbi();\n      for (var e2 = 0; e2 < f; ++e2) {\n        b.fromInt(lowprimes[Math.floor(Math.random() * lowprimes.length)]);\n        var l = b.modPow(h, this);\n        if (l.compareTo(BigInteger.ONE) != 0 && l.compareTo(g) != 0) {\n          var d = 1;\n          while (d++ < c && l.compareTo(g) != 0) {\n            l = l.modPowInt(2, this);\n            if (l.compareTo(BigInteger.ONE) == 0) {\n              return false;\n            }\n          }\n          if (l.compareTo(g) != 0) {\n            return false;\n          }\n        }\n      }\n      return true;\n    }\n    BigInteger.prototype.chunkSize = bnpChunkSize;\n    BigInteger.prototype.toRadix = bnpToRadix;\n    BigInteger.prototype.fromRadix = bnpFromRadix;\n    BigInteger.prototype.fromNumber = bnpFromNumber;\n    BigInteger.prototype.bitwiseTo = bnpBitwiseTo;\n    BigInteger.prototype.changeBit = bnpChangeBit;\n    BigInteger.prototype.addTo = bnpAddTo;\n    BigInteger.prototype.dMultiply = bnpDMultiply;\n    BigInteger.prototype.dAddOffset = bnpDAddOffset;\n    BigInteger.prototype.multiplyLowerTo = bnpMultiplyLowerTo;\n    BigInteger.prototype.multiplyUpperTo = bnpMultiplyUpperTo;\n    BigInteger.prototype.modInt = bnpModInt;\n    BigInteger.prototype.millerRabin = bnpMillerRabin;\n    BigInteger.prototype.clone = bnClone;\n    BigInteger.prototype.intValue = bnIntValue;\n    BigInteger.prototype.byteValue = bnByteValue;\n    BigInteger.prototype.shortValue = bnShortValue;\n    BigInteger.prototype.signum = bnSigNum;\n    BigInteger.prototype.toByteArray = bnToByteArray;\n    BigInteger.prototype.equals = bnEquals;\n    BigInteger.prototype.min = bnMin;\n    BigInteger.prototype.max = bnMax;\n    BigInteger.prototype.and = bnAnd;\n    BigInteger.prototype.or = bnOr;\n    BigInteger.prototype.xor = bnXor;\n    BigInteger.prototype.andNot = bnAndNot;\n    BigInteger.prototype.not = bnNot;\n    BigInteger.prototype.shiftLeft = bnShiftLeft;\n    BigInteger.prototype.shiftRight = bnShiftRight;\n    BigInteger.prototype.getLowestSetBit = bnGetLowestSetBit;\n    BigInteger.prototype.bitCount = bnBitCount;\n    BigInteger.prototype.testBit = bnTestBit;\n    BigInteger.prototype.setBit = bnSetBit;\n    BigInteger.prototype.clearBit = bnClearBit;\n    BigInteger.prototype.flipBit = bnFlipBit;\n    BigInteger.prototype.add = bnAdd;\n    BigInteger.prototype.subtract = bnSubtract;\n    BigInteger.prototype.multiply = bnMultiply;\n    BigInteger.prototype.divide = bnDivide;\n    BigInteger.prototype.remainder = bnRemainder;\n    BigInteger.prototype.divideAndRemainder = bnDivideAndRemainder;\n    BigInteger.prototype.modPow = bnModPow;\n    BigInteger.prototype.modInverse = bnModInverse;\n    BigInteger.prototype.pow = bnPow;\n    BigInteger.prototype.gcd = bnGCD;\n    BigInteger.prototype.isProbablePrime = bnIsProbablePrime;\n    BigInteger.prototype.square = bnSquare;\n    function Arcfour() {\n      this.i = 0;\n      this.j = 0;\n      this.S = new Array();\n    }\n    function ARC4init(d) {\n      var c, a, b;\n      for (c = 0; c < 256; ++c) {\n        this.S[c] = c;\n      }\n      a = 0;\n      for (c = 0; c < 256; ++c) {\n        a = a + this.S[c] + d[c % d.length] & 255;\n        b = this.S[c];\n        this.S[c] = this.S[a];\n        this.S[a] = b;\n      }\n      this.i = 0;\n      this.j = 0;\n    }\n    function ARC4next() {\n      var a;\n      this.i = this.i + 1 & 255;\n      this.j = this.j + this.S[this.i] & 255;\n      a = this.S[this.i];\n      this.S[this.i] = this.S[this.j];\n      this.S[this.j] = a;\n      return this.S[a + this.S[this.i] & 255];\n    }\n    Arcfour.prototype.init = ARC4init;\n    Arcfour.prototype.next = ARC4next;\n    function prng_newstate() {\n      return new Arcfour();\n    }\n    var rng_psize = 256;\n    var rng_state;\n    var rng_pool;\n    var rng_pptr;\n    function rng_seed_int(a) {\n      rng_pool[rng_pptr++] ^= a & 255;\n      rng_pool[rng_pptr++] ^= a >> 8 & 255;\n      rng_pool[rng_pptr++] ^= a >> 16 & 255;\n      rng_pool[rng_pptr++] ^= a >> 24 & 255;\n      if (rng_pptr >= rng_psize) {\n        rng_pptr -= rng_psize;\n      }\n    }\n    function rng_seed_time() {\n      rng_seed_int(new Date().getTime());\n    }\n    if (rng_pool == null) {\n      rng_pool = new Array();\n      rng_pptr = 0;\n      if (window2 !== void 0 && (window2.crypto !== void 0 || window2.msCrypto !== void 0)) {\n        crypto2 = window2.crypto || window2.msCrypto;\n        if (crypto2.getRandomValues) {\n          ua = new Uint8Array(32);\n          crypto2.getRandomValues(ua);\n          for (t2 = 0; t2 < 32; ++t2) {\n            rng_pool[rng_pptr++] = ua[t2];\n          }\n        } else {\n          if (navigator2.appName == \"Netscape\" && navigator2.appVersion < \"5\") {\n            z = window2.crypto.random(32);\n            for (t2 = 0; t2 < z.length; ++t2) {\n              rng_pool[rng_pptr++] = z.charCodeAt(t2) & 255;\n            }\n          }\n        }\n      }\n      while (rng_pptr < rng_psize) {\n        t2 = Math.floor(65536 * Math.random());\n        rng_pool[rng_pptr++] = t2 >>> 8;\n        rng_pool[rng_pptr++] = t2 & 255;\n      }\n      rng_pptr = 0;\n      rng_seed_time();\n    }\n    var t2;\n    var crypto2;\n    var ua;\n    var z;\n    function rng_get_byte() {\n      if (rng_state == null) {\n        rng_seed_time();\n        rng_state = prng_newstate();\n        rng_state.init(rng_pool);\n        for (rng_pptr = 0; rng_pptr < rng_pool.length; ++rng_pptr) {\n          rng_pool[rng_pptr] = 0;\n        }\n        rng_pptr = 0;\n      }\n      return rng_state.next();\n    }\n    function rng_get_bytes(b) {\n      var a;\n      for (a = 0; a < b.length; ++a) {\n        b[a] = rng_get_byte();\n      }\n    }\n    function SecureRandom() {\n    }\n    SecureRandom.prototype.nextBytes = rng_get_bytes;\n    function parseBigInt(b, a) {\n      return new BigInteger(b, a);\n    }\n    function pkcs1pad2(e2, h) {\n      if (h < e2.length + 11) {\n        throw \"Message too long for RSA\";\n        return null;\n      }\n      var g = new Array();\n      var d = e2.length - 1;\n      while (d >= 0 && h > 0) {\n        var f = e2.charCodeAt(d--);\n        if (f < 128) {\n          g[--h] = f;\n        } else {\n          if (f > 127 && f < 2048) {\n            g[--h] = f & 63 | 128;\n            g[--h] = f >> 6 | 192;\n          } else {\n            g[--h] = f & 63 | 128;\n            g[--h] = f >> 6 & 63 | 128;\n            g[--h] = f >> 12 | 224;\n          }\n        }\n      }\n      g[--h] = 0;\n      var b = new SecureRandom();\n      var a = new Array();\n      while (h > 2) {\n        a[0] = 0;\n        while (a[0] == 0) {\n          b.nextBytes(a);\n        }\n        g[--h] = a[0];\n      }\n      g[--h] = 2;\n      g[--h] = 0;\n      return new BigInteger(g);\n    }\n    function oaep_mgf1_arr(c, a, e2) {\n      var b = \"\", d = 0;\n      while (b.length < a) {\n        b += e2(String.fromCharCode.apply(String, c.concat([(d & 4278190080) >> 24, (d & 16711680) >> 16, (d & 65280) >> 8, d & 255])));\n        d += 1;\n      }\n      return b;\n    }\n    function oaep_pad(q, a, f, l) {\n      var c = KJUR.crypto.MessageDigest;\n      var o2 = KJUR.crypto.Util;\n      var b = null;\n      if (!f) {\n        f = \"sha1\";\n      }\n      if (typeof f === \"string\") {\n        b = c.getCanonicalAlgName(f);\n        l = c.getHashLength(b);\n        f = function(i) {\n          return hextorstr(o2.hashHex(rstrtohex(i), b));\n        };\n      }\n      if (q.length + 2 * l + 2 > a) {\n        throw \"Message too long for RSA\";\n      }\n      var k = \"\", e2;\n      for (e2 = 0; e2 < a - q.length - 2 * l - 2; e2 += 1) {\n        k += \"\\0\";\n      }\n      var h = f(\"\") + k + \"\u0001\" + q;\n      var g = new Array(l);\n      new SecureRandom().nextBytes(g);\n      var j = oaep_mgf1_arr(g, h.length, f);\n      var p = [];\n      for (e2 = 0; e2 < h.length; e2 += 1) {\n        p[e2] = h.charCodeAt(e2) ^ j.charCodeAt(e2);\n      }\n      var m = oaep_mgf1_arr(p, g.length, f);\n      var d = [0];\n      for (e2 = 0; e2 < g.length; e2 += 1) {\n        d[e2 + 1] = g[e2] ^ m.charCodeAt(e2);\n      }\n      return new BigInteger(d.concat(p));\n    }\n    function RSAKey() {\n      this.n = null;\n      this.e = 0;\n      this.d = null;\n      this.p = null;\n      this.q = null;\n      this.dmp1 = null;\n      this.dmq1 = null;\n      this.coeff = null;\n    }\n    function RSASetPublic(b, a) {\n      this.isPublic = true;\n      this.isPrivate = false;\n      if (typeof b !== \"string\") {\n        this.n = b;\n        this.e = a;\n      } else {\n        if (b != null && a != null && b.length > 0 && a.length > 0) {\n          this.n = parseBigInt(b, 16);\n          this.e = parseInt(a, 16);\n        } else {\n          throw \"Invalid RSA public key\";\n        }\n      }\n    }\n    function RSADoPublic(a) {\n      return a.modPowInt(this.e, this.n);\n    }\n    function RSAEncrypt(d) {\n      var a = pkcs1pad2(d, this.n.bitLength() + 7 >> 3);\n      if (a == null) {\n        return null;\n      }\n      var e2 = this.doPublic(a);\n      if (e2 == null) {\n        return null;\n      }\n      var b = e2.toString(16);\n      if ((b.length & 1) == 0) {\n        return b;\n      } else {\n        return \"0\" + b;\n      }\n    }\n    function RSAEncryptOAEP(f, e2, b) {\n      var a = oaep_pad(f, this.n.bitLength() + 7 >> 3, e2, b);\n      if (a == null) {\n        return null;\n      }\n      var g = this.doPublic(a);\n      if (g == null) {\n        return null;\n      }\n      var d = g.toString(16);\n      if ((d.length & 1) == 0) {\n        return d;\n      } else {\n        return \"0\" + d;\n      }\n    }\n    RSAKey.prototype.doPublic = RSADoPublic;\n    RSAKey.prototype.setPublic = RSASetPublic;\n    RSAKey.prototype.encrypt = RSAEncrypt;\n    RSAKey.prototype.encryptOAEP = RSAEncryptOAEP;\n    RSAKey.prototype.type = \"RSA\";\n    function pkcs1unpad2(g, j) {\n      var a = g.toByteArray();\n      var f = 0;\n      while (f < a.length && a[f] == 0) {\n        ++f;\n      }\n      if (a.length - f != j - 1 || a[f] != 2) {\n        return null;\n      }\n      ++f;\n      while (a[f] != 0) {\n        if (++f >= a.length) {\n          return null;\n        }\n      }\n      var e2 = \"\";\n      while (++f < a.length) {\n        var h = a[f] & 255;\n        if (h < 128) {\n          e2 += String.fromCharCode(h);\n        } else {\n          if (h > 191 && h < 224) {\n            e2 += String.fromCharCode((h & 31) << 6 | a[f + 1] & 63);\n            ++f;\n          } else {\n            e2 += String.fromCharCode((h & 15) << 12 | (a[f + 1] & 63) << 6 | a[f + 2] & 63);\n            f += 2;\n          }\n        }\n      }\n      return e2;\n    }\n    function oaep_mgf1_str(c, a, e2) {\n      var b = \"\", d = 0;\n      while (b.length < a) {\n        b += e2(c + String.fromCharCode.apply(String, [(d & 4278190080) >> 24, (d & 16711680) >> 16, (d & 65280) >> 8, d & 255]));\n        d += 1;\n      }\n      return b;\n    }\n    function oaep_unpad(o2, b, g, p) {\n      var e2 = KJUR.crypto.MessageDigest;\n      var r2 = KJUR.crypto.Util;\n      var c = null;\n      if (!g) {\n        g = \"sha1\";\n      }\n      if (typeof g === \"string\") {\n        c = e2.getCanonicalAlgName(g);\n        p = e2.getHashLength(c);\n        g = function(d) {\n          return hextorstr(r2.hashHex(rstrtohex(d), c));\n        };\n      }\n      o2 = o2.toByteArray();\n      var h;\n      for (h = 0; h < o2.length; h += 1) {\n        o2[h] &= 255;\n      }\n      while (o2.length < b) {\n        o2.unshift(0);\n      }\n      o2 = String.fromCharCode.apply(String, o2);\n      if (o2.length < 2 * p + 2) {\n        throw \"Cipher too short\";\n      }\n      var f = o2.substr(1, p);\n      var s = o2.substr(p + 1);\n      var q = oaep_mgf1_str(s, p, g);\n      var k = [], h;\n      for (h = 0; h < f.length; h += 1) {\n        k[h] = f.charCodeAt(h) ^ q.charCodeAt(h);\n      }\n      var l = oaep_mgf1_str(String.fromCharCode.apply(String, k), o2.length - p, g);\n      var j = [];\n      for (h = 0; h < s.length; h += 1) {\n        j[h] = s.charCodeAt(h) ^ l.charCodeAt(h);\n      }\n      j = String.fromCharCode.apply(String, j);\n      if (j.substr(0, p) !== g(\"\")) {\n        throw \"Hash mismatch\";\n      }\n      j = j.substr(p);\n      var a = j.indexOf(\"\u0001\");\n      var m = a != -1 ? j.substr(0, a).lastIndexOf(\"\\0\") : -1;\n      if (m + 1 != a) {\n        throw \"Malformed data\";\n      }\n      return j.substr(a + 1);\n    }\n    function RSASetPrivate(c, a, b) {\n      this.isPrivate = true;\n      if (typeof c !== \"string\") {\n        this.n = c;\n        this.e = a;\n        this.d = b;\n      } else {\n        if (c != null && a != null && c.length > 0 && a.length > 0) {\n          this.n = parseBigInt(c, 16);\n          this.e = parseInt(a, 16);\n          this.d = parseBigInt(b, 16);\n        } else {\n          throw \"Invalid RSA private key\";\n        }\n      }\n    }\n    function RSASetPrivateEx(g, d, e2, c, b, a, h, f) {\n      this.isPrivate = true;\n      this.isPublic = false;\n      if (g == null) {\n        throw \"RSASetPrivateEx N == null\";\n      }\n      if (d == null) {\n        throw \"RSASetPrivateEx E == null\";\n      }\n      if (g.length == 0) {\n        throw \"RSASetPrivateEx N.length == 0\";\n      }\n      if (d.length == 0) {\n        throw \"RSASetPrivateEx E.length == 0\";\n      }\n      if (g != null && d != null && g.length > 0 && d.length > 0) {\n        this.n = parseBigInt(g, 16);\n        this.e = parseInt(d, 16);\n        this.d = parseBigInt(e2, 16);\n        this.p = parseBigInt(c, 16);\n        this.q = parseBigInt(b, 16);\n        this.dmp1 = parseBigInt(a, 16);\n        this.dmq1 = parseBigInt(h, 16);\n        this.coeff = parseBigInt(f, 16);\n      } else {\n        throw \"Invalid RSA private key in RSASetPrivateEx\";\n      }\n    }\n    function RSAGenerate(b, l) {\n      var a = new SecureRandom();\n      var g = b >> 1;\n      this.e = parseInt(l, 16);\n      var c = new BigInteger(l, 16);\n      var d = b / 2 - 100;\n      var k = BigInteger.ONE.shiftLeft(d);\n      for (; ; ) {\n        for (; ; ) {\n          this.p = new BigInteger(b - g, 1, a);\n          if (this.p.subtract(BigInteger.ONE).gcd(c).compareTo(BigInteger.ONE) == 0 && this.p.isProbablePrime(10)) {\n            break;\n          }\n        }\n        for (; ; ) {\n          this.q = new BigInteger(g, 1, a);\n          if (this.q.subtract(BigInteger.ONE).gcd(c).compareTo(BigInteger.ONE) == 0 && this.q.isProbablePrime(10)) {\n            break;\n          }\n        }\n        if (this.p.compareTo(this.q) <= 0) {\n          var j = this.p;\n          this.p = this.q;\n          this.q = j;\n        }\n        var h = this.q.subtract(this.p).abs();\n        if (h.bitLength() < d || h.compareTo(k) <= 0) {\n          continue;\n        }\n        var i = this.p.subtract(BigInteger.ONE);\n        var e2 = this.q.subtract(BigInteger.ONE);\n        var f = i.multiply(e2);\n        if (f.gcd(c).compareTo(BigInteger.ONE) == 0) {\n          this.n = this.p.multiply(this.q);\n          if (this.n.bitLength() == b) {\n            this.d = c.modInverse(f);\n            this.dmp1 = this.d.mod(i);\n            this.dmq1 = this.d.mod(e2);\n            this.coeff = this.q.modInverse(this.p);\n            break;\n          }\n        }\n      }\n      this.isPrivate = true;\n    }\n    function RSADoPrivate(a) {\n      if (this.p == null || this.q == null) {\n        return a.modPow(this.d, this.n);\n      }\n      var c = a.mod(this.p).modPow(this.dmp1, this.p);\n      var b = a.mod(this.q).modPow(this.dmq1, this.q);\n      while (c.compareTo(b) < 0) {\n        c = c.add(this.p);\n      }\n      return c.subtract(b).multiply(this.coeff).mod(this.p).multiply(this.q).add(b);\n    }\n    function RSADecrypt(b) {\n      if (b.length != Math.ceil(this.n.bitLength() / 4)) {\n        throw new Error(\"wrong ctext length\");\n      }\n      var d = parseBigInt(b, 16);\n      var a = this.doPrivate(d);\n      if (a == null) {\n        return null;\n      }\n      return pkcs1unpad2(a, this.n.bitLength() + 7 >> 3);\n    }\n    function RSADecryptOAEP(e2, d, b) {\n      if (e2.length != Math.ceil(this.n.bitLength() / 4)) {\n        throw new Error(\"wrong ctext length\");\n      }\n      var f = parseBigInt(e2, 16);\n      var a = this.doPrivate(f);\n      if (a == null) {\n        return null;\n      }\n      return oaep_unpad(a, this.n.bitLength() + 7 >> 3, d, b);\n    }\n    RSAKey.prototype.doPrivate = RSADoPrivate;\n    RSAKey.prototype.setPrivate = RSASetPrivate;\n    RSAKey.prototype.setPrivateEx = RSASetPrivateEx;\n    RSAKey.prototype.generate = RSAGenerate;\n    RSAKey.prototype.decrypt = RSADecrypt;\n    RSAKey.prototype.decryptOAEP = RSADecryptOAEP;\n    function ECFieldElementFp(b, a) {\n      this.x = a;\n      this.q = b;\n    }\n    function feFpEquals(a) {\n      if (a == this) {\n        return true;\n      }\n      return this.q.equals(a.q) && this.x.equals(a.x);\n    }\n    function feFpToBigInteger() {\n      return this.x;\n    }\n    function feFpNegate() {\n      return new ECFieldElementFp(this.q, this.x.negate().mod(this.q));\n    }\n    function feFpAdd(a) {\n      return new ECFieldElementFp(this.q, this.x.add(a.toBigInteger()).mod(this.q));\n    }\n    function feFpSubtract(a) {\n      return new ECFieldElementFp(this.q, this.x.subtract(a.toBigInteger()).mod(this.q));\n    }\n    function feFpMultiply(a) {\n      return new ECFieldElementFp(this.q, this.x.multiply(a.toBigInteger()).mod(this.q));\n    }\n    function feFpSquare() {\n      return new ECFieldElementFp(this.q, this.x.square().mod(this.q));\n    }\n    function feFpDivide(a) {\n      return new ECFieldElementFp(this.q, this.x.multiply(a.toBigInteger().modInverse(this.q)).mod(this.q));\n    }\n    ECFieldElementFp.prototype.equals = feFpEquals;\n    ECFieldElementFp.prototype.toBigInteger = feFpToBigInteger;\n    ECFieldElementFp.prototype.negate = feFpNegate;\n    ECFieldElementFp.prototype.add = feFpAdd;\n    ECFieldElementFp.prototype.subtract = feFpSubtract;\n    ECFieldElementFp.prototype.multiply = feFpMultiply;\n    ECFieldElementFp.prototype.square = feFpSquare;\n    ECFieldElementFp.prototype.divide = feFpDivide;\n    ECFieldElementFp.prototype.sqrt = function() {\n      return new ECFieldElementFp(this.q, this.x.sqrt().mod(this.q));\n    };\n    function ECPointFp(c, a, d, b) {\n      this.curve = c;\n      this.x = a;\n      this.y = d;\n      if (b == null) {\n        this.z = BigInteger.ONE;\n      } else {\n        this.z = b;\n      }\n      this.zinv = null;\n    }\n    function pointFpGetX() {\n      if (this.zinv == null) {\n        this.zinv = this.z.modInverse(this.curve.q);\n      }\n      return this.curve.fromBigInteger(this.x.toBigInteger().multiply(this.zinv).mod(this.curve.q));\n    }\n    function pointFpGetY() {\n      if (this.zinv == null) {\n        this.zinv = this.z.modInverse(this.curve.q);\n      }\n      return this.curve.fromBigInteger(this.y.toBigInteger().multiply(this.zinv).mod(this.curve.q));\n    }\n    function pointFpEquals(a) {\n      if (a == this) {\n        return true;\n      }\n      if (this.isInfinity()) {\n        return a.isInfinity();\n      }\n      if (a.isInfinity()) {\n        return this.isInfinity();\n      }\n      var c, b;\n      c = a.y.toBigInteger().multiply(this.z).subtract(this.y.toBigInteger().multiply(a.z)).mod(this.curve.q);\n      if (!c.equals(BigInteger.ZERO)) {\n        return false;\n      }\n      b = a.x.toBigInteger().multiply(this.z).subtract(this.x.toBigInteger().multiply(a.z)).mod(this.curve.q);\n      return b.equals(BigInteger.ZERO);\n    }\n    function pointFpIsInfinity() {\n      if (this.x == null && this.y == null) {\n        return true;\n      }\n      return this.z.equals(BigInteger.ZERO) && !this.y.toBigInteger().equals(BigInteger.ZERO);\n    }\n    function pointFpNegate() {\n      return new ECPointFp(this.curve, this.x, this.y.negate(), this.z);\n    }\n    function pointFpAdd(l) {\n      if (this.isInfinity()) {\n        return l;\n      }\n      if (l.isInfinity()) {\n        return this;\n      }\n      var p = l.y.toBigInteger().multiply(this.z).subtract(this.y.toBigInteger().multiply(l.z)).mod(this.curve.q);\n      var o2 = l.x.toBigInteger().multiply(this.z).subtract(this.x.toBigInteger().multiply(l.z)).mod(this.curve.q);\n      if (BigInteger.ZERO.equals(o2)) {\n        if (BigInteger.ZERO.equals(p)) {\n          return this.twice();\n        }\n        return this.curve.getInfinity();\n      }\n      var j = new BigInteger(\"3\");\n      var e2 = this.x.toBigInteger();\n      var n2 = this.y.toBigInteger();\n      var c = l.x.toBigInteger();\n      var k = l.y.toBigInteger();\n      var m = o2.square();\n      var i = m.multiply(o2);\n      var d = e2.multiply(m);\n      var g = p.square().multiply(this.z);\n      var a = g.subtract(d.shiftLeft(1)).multiply(l.z).subtract(i).multiply(o2).mod(this.curve.q);\n      var h = d.multiply(j).multiply(p).subtract(n2.multiply(i)).subtract(g.multiply(p)).multiply(l.z).add(p.multiply(i)).mod(this.curve.q);\n      var f = i.multiply(this.z).multiply(l.z).mod(this.curve.q);\n      return new ECPointFp(this.curve, this.curve.fromBigInteger(a), this.curve.fromBigInteger(h), f);\n    }\n    function pointFpTwice() {\n      if (this.isInfinity()) {\n        return this;\n      }\n      if (this.y.toBigInteger().signum() == 0) {\n        return this.curve.getInfinity();\n      }\n      var g = new BigInteger(\"3\");\n      var c = this.x.toBigInteger();\n      var h = this.y.toBigInteger();\n      var e2 = h.multiply(this.z);\n      var j = e2.multiply(h).mod(this.curve.q);\n      var i = this.curve.a.toBigInteger();\n      var k = c.square().multiply(g);\n      if (!BigInteger.ZERO.equals(i)) {\n        k = k.add(this.z.square().multiply(i));\n      }\n      k = k.mod(this.curve.q);\n      var b = k.square().subtract(c.shiftLeft(3).multiply(j)).shiftLeft(1).multiply(e2).mod(this.curve.q);\n      var f = k.multiply(g).multiply(c).subtract(j.shiftLeft(1)).shiftLeft(2).multiply(j).subtract(k.square().multiply(k)).mod(this.curve.q);\n      var d = e2.square().multiply(e2).shiftLeft(3).mod(this.curve.q);\n      return new ECPointFp(this.curve, this.curve.fromBigInteger(b), this.curve.fromBigInteger(f), d);\n    }\n    function pointFpMultiply(d) {\n      if (this.isInfinity()) {\n        return this;\n      }\n      if (d.signum() == 0) {\n        return this.curve.getInfinity();\n      }\n      var m = d;\n      var l = m.multiply(new BigInteger(\"3\"));\n      var b = this.negate();\n      var j = this;\n      var q = this.curve.q.subtract(d);\n      var o2 = q.multiply(new BigInteger(\"3\"));\n      var c = new ECPointFp(this.curve, this.x, this.y);\n      var a = c.negate();\n      var g;\n      for (g = l.bitLength() - 2; g > 0; --g) {\n        j = j.twice();\n        var n2 = l.testBit(g);\n        var f = m.testBit(g);\n        if (n2 != f) {\n          j = j.add(n2 ? this : b);\n        }\n      }\n      for (g = o2.bitLength() - 2; g > 0; --g) {\n        c = c.twice();\n        var p = o2.testBit(g);\n        var r2 = q.testBit(g);\n        if (p != r2) {\n          c = c.add(p ? c : a);\n        }\n      }\n      return j;\n    }\n    function pointFpMultiplyTwo(c, a, b) {\n      var d;\n      if (c.bitLength() > b.bitLength()) {\n        d = c.bitLength() - 1;\n      } else {\n        d = b.bitLength() - 1;\n      }\n      var f = this.curve.getInfinity();\n      var e2 = this.add(a);\n      while (d >= 0) {\n        f = f.twice();\n        if (c.testBit(d)) {\n          if (b.testBit(d)) {\n            f = f.add(e2);\n          } else {\n            f = f.add(this);\n          }\n        } else {\n          if (b.testBit(d)) {\n            f = f.add(a);\n          }\n        }\n        --d;\n      }\n      return f;\n    }\n    ECPointFp.prototype.getX = pointFpGetX;\n    ECPointFp.prototype.getY = pointFpGetY;\n    ECPointFp.prototype.equals = pointFpEquals;\n    ECPointFp.prototype.isInfinity = pointFpIsInfinity;\n    ECPointFp.prototype.negate = pointFpNegate;\n    ECPointFp.prototype.add = pointFpAdd;\n    ECPointFp.prototype.twice = pointFpTwice;\n    ECPointFp.prototype.multiply = pointFpMultiply;\n    ECPointFp.prototype.multiplyTwo = pointFpMultiplyTwo;\n    function ECCurveFp(e2, d, c) {\n      this.q = e2;\n      this.a = this.fromBigInteger(d);\n      this.b = this.fromBigInteger(c);\n      this.infinity = new ECPointFp(this, null, null);\n    }\n    function curveFpGetQ() {\n      return this.q;\n    }\n    function curveFpGetA() {\n      return this.a;\n    }\n    function curveFpGetB() {\n      return this.b;\n    }\n    function curveFpEquals(a) {\n      if (a == this) {\n        return true;\n      }\n      return this.q.equals(a.q) && this.a.equals(a.a) && this.b.equals(a.b);\n    }\n    function curveFpGetInfinity() {\n      return this.infinity;\n    }\n    function curveFpFromBigInteger(a) {\n      return new ECFieldElementFp(this.q, a);\n    }\n    function curveFpDecodePointHex(m) {\n      switch (parseInt(m.substr(0, 2), 16)) {\n        case 0:\n          return this.infinity;\n        case 2:\n        case 3:\n          var c = m.substr(0, 2);\n          var l = m.substr(2);\n          var j = this.fromBigInteger(new BigInteger(k, 16));\n          var i = this.getA();\n          var h = this.getB();\n          var e2 = j.square().add(i).multiply(j).add(h);\n          var g = e2.sqrt();\n          if (c == \"03\") {\n            g = g.negate();\n          }\n          return new ECPointFp(this, j, g);\n        case 4:\n        case 6:\n        case 7:\n          var d = (m.length - 2) / 2;\n          var k = m.substr(2, d);\n          var f = m.substr(d + 2, d);\n          return new ECPointFp(this, this.fromBigInteger(new BigInteger(k, 16)), this.fromBigInteger(new BigInteger(f, 16)));\n        default:\n          return null;\n      }\n    }\n    ECCurveFp.prototype.getQ = curveFpGetQ;\n    ECCurveFp.prototype.getA = curveFpGetA;\n    ECCurveFp.prototype.getB = curveFpGetB;\n    ECCurveFp.prototype.equals = curveFpEquals;\n    ECCurveFp.prototype.getInfinity = curveFpGetInfinity;\n    ECCurveFp.prototype.fromBigInteger = curveFpFromBigInteger;\n    ECCurveFp.prototype.decodePointHex = curveFpDecodePointHex;\n    ECFieldElementFp.prototype.getByteLength = function() {\n      return Math.floor((this.toBigInteger().bitLength() + 7) / 8);\n    };\n    ECPointFp.prototype.getEncoded = function(c) {\n      var d = function(h, f) {\n        var g = h.toByteArrayUnsigned();\n        if (f < g.length) {\n          g = g.slice(g.length - f);\n        } else {\n          while (f > g.length) {\n            g.unshift(0);\n          }\n        }\n        return g;\n      };\n      var a = this.getX().toBigInteger();\n      var e2 = this.getY().toBigInteger();\n      var b = d(a, 32);\n      if (c) {\n        if (e2.isEven()) {\n          b.unshift(2);\n        } else {\n          b.unshift(3);\n        }\n      } else {\n        b.unshift(4);\n        b = b.concat(d(e2, 32));\n      }\n      return b;\n    };\n    ECPointFp.decodeFrom = function(g, c) {\n      var f = c[0];\n      var e2 = c.length - 1;\n      var d = c.slice(1, 1 + e2 / 2);\n      var b = c.slice(1 + e2 / 2, 1 + e2);\n      d.unshift(0);\n      b.unshift(0);\n      var a = new BigInteger(d);\n      var h = new BigInteger(b);\n      return new ECPointFp(g, g.fromBigInteger(a), g.fromBigInteger(h));\n    };\n    ECPointFp.decodeFromHex = function(g, c) {\n      var f = c.substr(0, 2);\n      var e2 = c.length - 2;\n      var d = c.substr(2, e2 / 2);\n      var b = c.substr(2 + e2 / 2, e2 / 2);\n      var a = new BigInteger(d, 16);\n      var h = new BigInteger(b, 16);\n      return new ECPointFp(g, g.fromBigInteger(a), g.fromBigInteger(h));\n    };\n    ECPointFp.prototype.add2D = function(c) {\n      if (this.isInfinity()) {\n        return c;\n      }\n      if (c.isInfinity()) {\n        return this;\n      }\n      if (this.x.equals(c.x)) {\n        if (this.y.equals(c.y)) {\n          return this.twice();\n        }\n        return this.curve.getInfinity();\n      }\n      var g = c.x.subtract(this.x);\n      var e2 = c.y.subtract(this.y);\n      var a = e2.divide(g);\n      var d = a.square().subtract(this.x).subtract(c.x);\n      var f = a.multiply(this.x.subtract(d)).subtract(this.y);\n      return new ECPointFp(this.curve, d, f);\n    };\n    ECPointFp.prototype.twice2D = function() {\n      if (this.isInfinity()) {\n        return this;\n      }\n      if (this.y.toBigInteger().signum() == 0) {\n        return this.curve.getInfinity();\n      }\n      var b = this.curve.fromBigInteger(BigInteger.valueOf(2));\n      var e2 = this.curve.fromBigInteger(BigInteger.valueOf(3));\n      var a = this.x.square().multiply(e2).add(this.curve.a).divide(this.y.multiply(b));\n      var c = a.square().subtract(this.x.multiply(b));\n      var d = a.multiply(this.x.subtract(c)).subtract(this.y);\n      return new ECPointFp(this.curve, c, d);\n    };\n    ECPointFp.prototype.multiply2D = function(b) {\n      if (this.isInfinity()) {\n        return this;\n      }\n      if (b.signum() == 0) {\n        return this.curve.getInfinity();\n      }\n      var g = b;\n      var f = g.multiply(new BigInteger(\"3\"));\n      var l = this.negate();\n      var d = this;\n      var c;\n      for (c = f.bitLength() - 2; c > 0; --c) {\n        d = d.twice();\n        var a = f.testBit(c);\n        var j = g.testBit(c);\n        if (a != j) {\n          d = d.add2D(a ? this : l);\n        }\n      }\n      return d;\n    };\n    ECPointFp.prototype.isOnCurve = function() {\n      var d = this.getX().toBigInteger();\n      var i = this.getY().toBigInteger();\n      var f = this.curve.getA().toBigInteger();\n      var c = this.curve.getB().toBigInteger();\n      var h = this.curve.getQ();\n      var e2 = i.multiply(i).mod(h);\n      var g = d.multiply(d).multiply(d).add(f.multiply(d)).add(c).mod(h);\n      return e2.equals(g);\n    };\n    ECPointFp.prototype.toString = function() {\n      return \"(\" + this.getX().toBigInteger().toString() + \",\" + this.getY().toBigInteger().toString() + \")\";\n    };\n    ECPointFp.prototype.validate = function() {\n      var c = this.curve.getQ();\n      if (this.isInfinity()) {\n        throw new Error(\"Point is at infinity.\");\n      }\n      var a = this.getX().toBigInteger();\n      var b = this.getY().toBigInteger();\n      if (a.compareTo(BigInteger.ONE) < 0 || a.compareTo(c.subtract(BigInteger.ONE)) > 0) {\n        throw new Error(\"x coordinate out of bounds\");\n      }\n      if (b.compareTo(BigInteger.ONE) < 0 || b.compareTo(c.subtract(BigInteger.ONE)) > 0) {\n        throw new Error(\"y coordinate out of bounds\");\n      }\n      if (!this.isOnCurve()) {\n        throw new Error(\"Point is not on the curve.\");\n      }\n      if (this.multiply(c).isInfinity()) {\n        throw new Error(\"Point is not a scalar multiple of G.\");\n      }\n      return true;\n    };\n    var jsonParse = function() {\n      var e2 = \"(?:-?\\\\b(?:0|[1-9][0-9]*)(?:\\\\.[0-9]+)?(?:[eE][+-]?[0-9]+)?\\\\b)\";\n      var j = '(?:[^\\\\0-\\\\x08\\\\x0a-\\\\x1f\"\\\\\\\\]|\\\\\\\\(?:[\"/\\\\\\\\bfnrt]|u[0-9A-Fa-f]{4}))';\n      var i = '(?:\"' + j + '*\")';\n      var d = new RegExp(\"(?:false|true|null|[\\\\{\\\\}\\\\[\\\\]]|\" + e2 + \"|\" + i + \")\", \"g\");\n      var k = new RegExp(\"\\\\\\\\(?:([^u])|u(.{4}))\", \"g\");\n      var g = { '\"': '\"', \"/\": \"/\", \"\\\\\": \"\\\\\", b: \"\\b\", f: \"\\f\", n: \"\\n\", r: \"\\r\", t: \"\t\" };\n      function h(l, m, n2) {\n        return m ? g[m] : String.fromCharCode(parseInt(n2, 16));\n      }\n      var c = new String(\"\");\n      var a = \"\\\\\";\n      var f = { \"{\": Object, \"[\": Array };\n      var b = Object.hasOwnProperty;\n      return function(u, q) {\n        var p = u.match(d);\n        var x;\n        var v = p[0];\n        var l = false;\n        if (\"{\" === v) {\n          x = {};\n        } else {\n          if (\"[\" === v) {\n            x = [];\n          } else {\n            x = [];\n            l = true;\n          }\n        }\n        var t3;\n        var r2 = [x];\n        for (var o2 = 1 - l, m = p.length; o2 < m; ++o2) {\n          v = p[o2];\n          var w;\n          switch (v.charCodeAt(0)) {\n            default:\n              w = r2[0];\n              w[t3 || w.length] = +v;\n              t3 = void 0;\n              break;\n            case 34:\n              v = v.substring(1, v.length - 1);\n              if (v.indexOf(a) !== -1) {\n                v = v.replace(k, h);\n              }\n              w = r2[0];\n              if (!t3) {\n                if (w instanceof Array) {\n                  t3 = w.length;\n                } else {\n                  t3 = v || c;\n                  break;\n                }\n              }\n              w[t3] = v;\n              t3 = void 0;\n              break;\n            case 91:\n              w = r2[0];\n              r2.unshift(w[t3 || w.length] = []);\n              t3 = void 0;\n              break;\n            case 93:\n              r2.shift();\n              break;\n            case 102:\n              w = r2[0];\n              w[t3 || w.length] = false;\n              t3 = void 0;\n              break;\n            case 110:\n              w = r2[0];\n              w[t3 || w.length] = null;\n              t3 = void 0;\n              break;\n            case 116:\n              w = r2[0];\n              w[t3 || w.length] = true;\n              t3 = void 0;\n              break;\n            case 123:\n              w = r2[0];\n              r2.unshift(w[t3 || w.length] = {});\n              t3 = void 0;\n              break;\n            case 125:\n              r2.shift();\n              break;\n          }\n        }\n        if (l) {\n          if (r2.length !== 1) {\n            throw new Error();\n          }\n          x = x[0];\n        } else {\n          if (r2.length) {\n            throw new Error();\n          }\n        }\n        if (q) {\n          var s = function(C, B) {\n            var D = C[B];\n            if (D && typeof D === \"object\") {\n              var n2 = null;\n              for (var z2 in D) {\n                if (b.call(D, z2) && D !== C) {\n                  var y = s(D, z2);\n                  if (y !== void 0) {\n                    D[z2] = y;\n                  } else {\n                    if (!n2) {\n                      n2 = [];\n                    }\n                    n2.push(z2);\n                  }\n                }\n              }\n              if (n2) {\n                for (var A = n2.length; --A >= 0; ) {\n                  delete D[n2[A]];\n                }\n              }\n            }\n            return q.call(C, B, D);\n          };\n          x = s({ \"\": x }, \"\");\n        }\n        return x;\n      };\n    }();\n    if (typeof KJUR == \"undefined\" || !KJUR) {\n      KJUR = {};\n    }\n    if (typeof KJUR.asn1 == \"undefined\" || !KJUR.asn1) {\n      KJUR.asn1 = {};\n    }\n    KJUR.asn1.ASN1Util = new function() {\n      this.integerToByteHex = function(a) {\n        var b = a.toString(16);\n        if (b.length % 2 == 1) {\n          b = \"0\" + b;\n        }\n        return b;\n      };\n      this.bigIntToMinTwosComplementsHex = function(j) {\n        var f = j.toString(16);\n        if (f.substr(0, 1) != \"-\") {\n          if (f.length % 2 == 1) {\n            f = \"0\" + f;\n          } else {\n            if (!f.match(/^[0-7]/)) {\n              f = \"00\" + f;\n            }\n          }\n        } else {\n          var a = f.substr(1);\n          var e2 = a.length;\n          if (e2 % 2 == 1) {\n            e2 += 1;\n          } else {\n            if (!f.match(/^[0-7]/)) {\n              e2 += 2;\n            }\n          }\n          var g = \"\";\n          for (var d = 0; d < e2; d++) {\n            g += \"f\";\n          }\n          var c = new BigInteger(g, 16);\n          var b = c.xor(j).add(BigInteger.ONE);\n          f = b.toString(16).replace(/^-/, \"\");\n        }\n        return f;\n      };\n      this.getPEMStringFromHex = function(a, b) {\n        return hextopem(a, b);\n      };\n      this.newObject = function(k) {\n        var F = KJUR, o2 = F.asn1, v = o2.ASN1Object, B = o2.DERBoolean, e2 = o2.DERInteger, t3 = o2.DERBitString, h = o2.DEROctetString, x = o2.DERNull, y = o2.DERObjectIdentifier, m = o2.DEREnumerated, g = o2.DERUTF8String, f = o2.DERNumericString, A = o2.DERPrintableString, w = o2.DERTeletexString, q = o2.DERIA5String, E = o2.DERUTCTime, j = o2.DERGeneralizedTime, b = o2.DERVisibleString, l = o2.DERBMPString, n2 = o2.DERSequence, c = o2.DERSet, s = o2.DERTaggedObject, p = o2.ASN1Util.newObject;\n        if (k instanceof o2.ASN1Object) {\n          return k;\n        }\n        var u = Object.keys(k);\n        if (u.length != 1) {\n          throw new Error(\"key of param shall be only one.\");\n        }\n        var H = u[0];\n        if (\":asn1:bool:int:bitstr:octstr:null:oid:enum:utf8str:numstr:prnstr:telstr:ia5str:utctime:gentime:visstr:bmpstr:seq:set:tag:\".indexOf(\":\" + H + \":\") == -1) {\n          throw new Error(\"undefined key: \" + H);\n        }\n        if (H == \"bool\") {\n          return new B(k[H]);\n        }\n        if (H == \"int\") {\n          return new e2(k[H]);\n        }\n        if (H == \"bitstr\") {\n          return new t3(k[H]);\n        }\n        if (H == \"octstr\") {\n          return new h(k[H]);\n        }\n        if (H == \"null\") {\n          return new x(k[H]);\n        }\n        if (H == \"oid\") {\n          return new y(k[H]);\n        }\n        if (H == \"enum\") {\n          return new m(k[H]);\n        }\n        if (H == \"utf8str\") {\n          return new g(k[H]);\n        }\n        if (H == \"numstr\") {\n          return new f(k[H]);\n        }\n        if (H == \"prnstr\") {\n          return new A(k[H]);\n        }\n        if (H == \"telstr\") {\n          return new w(k[H]);\n        }\n        if (H == \"ia5str\") {\n          return new q(k[H]);\n        }\n        if (H == \"utctime\") {\n          return new E(k[H]);\n        }\n        if (H == \"gentime\") {\n          return new j(k[H]);\n        }\n        if (H == \"visstr\") {\n          return new b(k[H]);\n        }\n        if (H == \"bmpstr\") {\n          return new l(k[H]);\n        }\n        if (H == \"asn1\") {\n          return new v(k[H]);\n        }\n        if (H == \"seq\") {\n          var d = k[H];\n          var G = [];\n          for (var z2 = 0; z2 < d.length; z2++) {\n            var D = p(d[z2]);\n            G.push(D);\n          }\n          return new n2({ array: G });\n        }\n        if (H == \"set\") {\n          var d = k[H];\n          var G = [];\n          for (var z2 = 0; z2 < d.length; z2++) {\n            var D = p(d[z2]);\n            G.push(D);\n          }\n          return new c({ array: G });\n        }\n        if (H == \"tag\") {\n          var C = k[H];\n          if (Object.prototype.toString.call(C) === \"[object Array]\" && C.length == 3) {\n            var r2 = p(C[2]);\n            return new s({ tag: C[0], explicit: C[1], obj: r2 });\n          } else {\n            return new s(C);\n          }\n        }\n      };\n      this.jsonToASN1HEX = function(b) {\n        var a = this.newObject(b);\n        return a.tohex();\n      };\n    }();\n    KJUR.asn1.ASN1Util.oidHexToInt = function(a) {\n      var j = \"\";\n      var k = parseInt(a.substr(0, 2), 16);\n      var d = Math.floor(k / 40);\n      var c = k % 40;\n      var j = d + \".\" + c;\n      var e2 = \"\";\n      for (var f = 2; f < a.length; f += 2) {\n        var g = parseInt(a.substr(f, 2), 16);\n        var h = (\"00000000\" + g.toString(2)).slice(-8);\n        e2 = e2 + h.substr(1, 7);\n        if (h.substr(0, 1) == \"0\") {\n          var b = new BigInteger(e2, 2);\n          j = j + \".\" + b.toString(10);\n          e2 = \"\";\n        }\n      }\n      return j;\n    };\n    KJUR.asn1.ASN1Util.oidIntToHex = function(f) {\n      var e2 = function(a) {\n        var k = a.toString(16);\n        if (k.length == 1) {\n          k = \"0\" + k;\n        }\n        return k;\n      };\n      var d = function(o2) {\n        var n2 = \"\";\n        var k = new BigInteger(o2, 10);\n        var a = k.toString(2);\n        var l = 7 - a.length % 7;\n        if (l == 7) {\n          l = 0;\n        }\n        var q = \"\";\n        for (var m = 0; m < l; m++) {\n          q += \"0\";\n        }\n        a = q + a;\n        for (var m = 0; m < a.length - 1; m += 7) {\n          var p = a.substr(m, 7);\n          if (m != a.length - 7) {\n            p = \"1\" + p;\n          }\n          n2 += e2(parseInt(p, 2));\n        }\n        return n2;\n      };\n      if (!f.match(/^[0-9.]+$/)) {\n        throw \"malformed oid string: \" + f;\n      }\n      var g = \"\";\n      var b = f.split(\".\");\n      var j = parseInt(b[0]) * 40 + parseInt(b[1]);\n      g += e2(j);\n      b.splice(0, 2);\n      for (var c = 0; c < b.length; c++) {\n        g += d(b[c]);\n      }\n      return g;\n    };\n    KJUR.asn1.ASN1Object = function(e2) {\n      var c = true;\n      var b = null;\n      var d = \"00\";\n      var f = \"00\";\n      var a = \"\";\n      this.params = null;\n      this.getLengthHexFromValue = function() {\n        if (typeof this.hV == \"undefined\" || this.hV == null) {\n          throw new Error(\"this.hV is null or undefined\");\n        }\n        if (this.hV.length % 2 == 1) {\n          throw new Error(\"value hex must be even length: n=\" + a.length + \",v=\" + this.hV);\n        }\n        var j = this.hV.length / 2;\n        var i = j.toString(16);\n        if (i.length % 2 == 1) {\n          i = \"0\" + i;\n        }\n        if (j < 128) {\n          return i;\n        } else {\n          var h = i.length / 2;\n          if (h > 15) {\n            throw new Error(\"ASN.1 length too long to represent by 8x: n = \" + j.toString(16));\n          }\n          var g = 128 + h;\n          return g.toString(16) + i;\n        }\n      };\n      this.tohex = function() {\n        if (this.hTLV == null || this.isModified) {\n          this.hV = this.getFreshValueHex();\n          this.hL = this.getLengthHexFromValue();\n          this.hTLV = this.hT + this.hL + this.hV;\n          this.isModified = false;\n        }\n        return this.hTLV;\n      };\n      this.getEncodedHex = function() {\n        return this.tohex();\n      };\n      this.getValueHex = function() {\n        this.tohex();\n        return this.hV;\n      };\n      this.getFreshValueHex = function() {\n        return \"\";\n      };\n      this.setByParam = function(g) {\n        this.params = g;\n      };\n      if (e2 != void 0) {\n        if (e2.tlv != void 0) {\n          this.hTLV = e2.tlv;\n          this.isModified = false;\n        }\n      }\n    };\n    KJUR.asn1.DERAbstractString = function(c) {\n      KJUR.asn1.DERAbstractString.superclass.constructor.call(this);\n      var b = null;\n      var a = null;\n      this.getString = function() {\n        return this.s;\n      };\n      this.setString = function(d) {\n        this.hTLV = null;\n        this.isModified = true;\n        this.s = d;\n        this.hV = utf8tohex(this.s).toLowerCase();\n      };\n      this.setStringHex = function(d) {\n        this.hTLV = null;\n        this.isModified = true;\n        this.s = null;\n        this.hV = d;\n      };\n      this.getFreshValueHex = function() {\n        return this.hV;\n      };\n      if (typeof c != \"undefined\") {\n        if (typeof c == \"string\") {\n          this.setString(c);\n        } else {\n          if (typeof c.str != \"undefined\") {\n            this.setString(c.str);\n          } else {\n            if (typeof c.hex != \"undefined\") {\n              this.setStringHex(c.hex);\n            }\n          }\n        }\n      }\n    };\n    extendClass(KJUR.asn1.DERAbstractString, KJUR.asn1.ASN1Object);\n    KJUR.asn1.DERAbstractTime = function(c) {\n      KJUR.asn1.DERAbstractTime.superclass.constructor.call(this);\n      var b = null;\n      var a = null;\n      this.localDateToUTC = function(g) {\n        var e2 = g.getTime() + g.getTimezoneOffset() * 6e4;\n        var f = new Date(e2);\n        return f;\n      };\n      this.formatDate = function(m, o2, e2) {\n        var g = this.zeroPadding;\n        var n2 = this.localDateToUTC(m);\n        var p = String(n2.getFullYear());\n        if (o2 == \"utc\") {\n          p = p.substr(2, 2);\n        }\n        var l = g(String(n2.getMonth() + 1), 2);\n        var q = g(String(n2.getDate()), 2);\n        var h = g(String(n2.getHours()), 2);\n        var i = g(String(n2.getMinutes()), 2);\n        var j = g(String(n2.getSeconds()), 2);\n        var r2 = p + l + q + h + i + j;\n        if (e2 === true) {\n          var f = n2.getMilliseconds();\n          if (f != 0) {\n            var k = g(String(f), 3);\n            k = k.replace(/[0]+$/, \"\");\n            r2 = r2 + \".\" + k;\n          }\n        }\n        return r2 + \"Z\";\n      };\n      this.zeroPadding = function(e2, d) {\n        if (e2.length >= d) {\n          return e2;\n        }\n        return new Array(d - e2.length + 1).join(\"0\") + e2;\n      };\n      this.setByParam = function(d) {\n        this.hV = null;\n        this.hTLV = null;\n        this.params = d;\n      };\n      this.getString = function() {\n        return void 0;\n      };\n      this.setString = function(d) {\n        this.hTLV = null;\n        this.isModified = true;\n        if (this.params == void 0) {\n          this.params = {};\n        }\n        this.params.str = d;\n      };\n      this.setByDate = function(d) {\n        this.hTLV = null;\n        this.isModified = true;\n        if (this.params == void 0) {\n          this.params = {};\n        }\n        this.params.date = d;\n      };\n      this.setByDateValue = function(h, j, e2, d, f, g) {\n        var i = new Date(Date.UTC(h, j - 1, e2, d, f, g, 0));\n        this.setByDate(i);\n      };\n      this.getFreshValueHex = function() {\n        return this.hV;\n      };\n    };\n    extendClass(KJUR.asn1.DERAbstractTime, KJUR.asn1.ASN1Object);\n    KJUR.asn1.DERAbstractStructured = function(b) {\n      KJUR.asn1.DERAbstractString.superclass.constructor.call(this);\n      var a = null;\n      this.setByASN1ObjectArray = function(c) {\n        this.hTLV = null;\n        this.isModified = true;\n        this.asn1Array = c;\n      };\n      this.appendASN1Object = function(c) {\n        this.hTLV = null;\n        this.isModified = true;\n        this.asn1Array.push(c);\n      };\n      this.asn1Array = new Array();\n      if (typeof b != \"undefined\") {\n        if (typeof b.array != \"undefined\") {\n          this.asn1Array = b.array;\n        }\n      }\n    };\n    extendClass(KJUR.asn1.DERAbstractStructured, KJUR.asn1.ASN1Object);\n    KJUR.asn1.DERBoolean = function(a) {\n      KJUR.asn1.DERBoolean.superclass.constructor.call(this);\n      this.hT = \"01\";\n      if (a == false) {\n        this.hTLV = \"010100\";\n      } else {\n        this.hTLV = \"0101ff\";\n      }\n    };\n    extendClass(KJUR.asn1.DERBoolean, KJUR.asn1.ASN1Object);\n    KJUR.asn1.DERInteger = function(a) {\n      KJUR.asn1.DERInteger.superclass.constructor.call(this);\n      this.hT = \"02\";\n      this.setByBigInteger = function(b) {\n        this.hTLV = null;\n        this.isModified = true;\n        this.hV = KJUR.asn1.ASN1Util.bigIntToMinTwosComplementsHex(b);\n      };\n      this.setByInteger = function(c) {\n        var b = new BigInteger(String(c), 10);\n        this.setByBigInteger(b);\n      };\n      this.setValueHex = function(b) {\n        this.hV = b;\n      };\n      this.getFreshValueHex = function() {\n        return this.hV;\n      };\n      if (typeof a != \"undefined\") {\n        if (typeof a.bigint != \"undefined\") {\n          this.setByBigInteger(a.bigint);\n        } else {\n          if (typeof a[\"int\"] != \"undefined\") {\n            this.setByInteger(a[\"int\"]);\n          } else {\n            if (typeof a == \"number\") {\n              this.setByInteger(a);\n            } else {\n              if (typeof a.hex != \"undefined\") {\n                this.setValueHex(a.hex);\n              }\n            }\n          }\n        }\n      }\n    };\n    extendClass(KJUR.asn1.DERInteger, KJUR.asn1.ASN1Object);\n    KJUR.asn1.DERBitString = function(b) {\n      if (b !== void 0 && typeof b.obj !== \"undefined\") {\n        var a = KJUR.asn1.ASN1Util.newObject(b.obj);\n        b.hex = \"00\" + a.tohex();\n      }\n      KJUR.asn1.DERBitString.superclass.constructor.call(this);\n      this.hT = \"03\";\n      this.setHexValueIncludingUnusedBits = function(c) {\n        this.hTLV = null;\n        this.isModified = true;\n        this.hV = c;\n      };\n      this.setUnusedBitsAndHexValue = function(c, e2) {\n        if (c < 0 || 7 < c) {\n          throw \"unused bits shall be from 0 to 7: u = \" + c;\n        }\n        var d = \"0\" + c;\n        this.hTLV = null;\n        this.isModified = true;\n        this.hV = d + e2;\n      };\n      this.setByBinaryString = function(e2) {\n        e2 = e2.replace(/0+$/, \"\");\n        var f = 8 - e2.length % 8;\n        if (f == 8) {\n          f = 0;\n        }\n        e2 += \"0000000\".substr(0, f);\n        var j = \"\";\n        for (var g = 0; g < e2.length - 1; g += 8) {\n          var d = e2.substr(g, 8);\n          var c = parseInt(d, 2).toString(16);\n          if (c.length == 1) {\n            c = \"0\" + c;\n          }\n          j += c;\n        }\n        this.hTLV = null;\n        this.isModified = true;\n        this.hV = \"0\" + f + j;\n      };\n      this.setByBooleanArray = function(e2) {\n        var d = \"\";\n        for (var c = 0; c < e2.length; c++) {\n          if (e2[c] == true) {\n            d += \"1\";\n          } else {\n            d += \"0\";\n          }\n        }\n        this.setByBinaryString(d);\n      };\n      this.newFalseArray = function(e2) {\n        var c = new Array(e2);\n        for (var d = 0; d < e2; d++) {\n          c[d] = false;\n        }\n        return c;\n      };\n      this.getFreshValueHex = function() {\n        return this.hV;\n      };\n      if (typeof b != \"undefined\") {\n        if (typeof b == \"string\" && b.toLowerCase().match(/^[0-9a-f]+$/)) {\n          this.setHexValueIncludingUnusedBits(b);\n        } else {\n          if (typeof b.hex != \"undefined\") {\n            this.setHexValueIncludingUnusedBits(b.hex);\n          } else {\n            if (typeof b.bin != \"undefined\") {\n              this.setByBinaryString(b.bin);\n            } else {\n              if (typeof b.array != \"undefined\") {\n                this.setByBooleanArray(b.array);\n              }\n            }\n          }\n        }\n      }\n    };\n    extendClass(KJUR.asn1.DERBitString, KJUR.asn1.ASN1Object);\n    KJUR.asn1.DEROctetString = function(b) {\n      if (b !== void 0 && typeof b.obj !== \"undefined\") {\n        var a = KJUR.asn1.ASN1Util.newObject(b.obj);\n        b.hex = a.tohex();\n      }\n      KJUR.asn1.DEROctetString.superclass.constructor.call(this, b);\n      this.hT = \"04\";\n    };\n    extendClass(KJUR.asn1.DEROctetString, KJUR.asn1.DERAbstractString);\n    KJUR.asn1.DERNull = function() {\n      KJUR.asn1.DERNull.superclass.constructor.call(this);\n      this.hT = \"05\";\n      this.hTLV = \"0500\";\n    };\n    extendClass(KJUR.asn1.DERNull, KJUR.asn1.ASN1Object);\n    KJUR.asn1.DERObjectIdentifier = function(a) {\n      KJUR.asn1.DERObjectIdentifier.superclass.constructor.call(this);\n      this.hT = \"06\";\n      this.setValueHex = function(b) {\n        this.hTLV = null;\n        this.isModified = true;\n        this.s = null;\n        this.hV = b;\n      };\n      this.setValueOidString = function(b) {\n        var c = oidtohex(b);\n        if (c == null) {\n          throw new Error(\"malformed oid string: \" + b);\n        }\n        this.hTLV = null;\n        this.isModified = true;\n        this.s = null;\n        this.hV = c;\n      };\n      this.setValueName = function(c) {\n        var b = KJUR.asn1.x509.OID.name2oid(c);\n        if (b !== \"\") {\n          this.setValueOidString(b);\n        } else {\n          throw new Error(\"DERObjectIdentifier oidName undefined: \" + c);\n        }\n      };\n      this.setValueNameOrOid = function(b) {\n        if (b.match(/^[0-2].[0-9.]+$/)) {\n          this.setValueOidString(b);\n        } else {\n          this.setValueName(b);\n        }\n      };\n      this.getFreshValueHex = function() {\n        return this.hV;\n      };\n      this.setByParam = function(b) {\n        if (typeof b === \"string\") {\n          this.setValueNameOrOid(b);\n        } else {\n          if (b.oid !== void 0) {\n            this.setValueNameOrOid(b.oid);\n          } else {\n            if (b.name !== void 0) {\n              this.setValueNameOrOid(b.name);\n            } else {\n              if (b.hex !== void 0) {\n                this.setValueHex(b.hex);\n              }\n            }\n          }\n        }\n      };\n      if (a !== void 0) {\n        this.setByParam(a);\n      }\n    };\n    extendClass(KJUR.asn1.DERObjectIdentifier, KJUR.asn1.ASN1Object);\n    KJUR.asn1.DEREnumerated = function(a) {\n      KJUR.asn1.DEREnumerated.superclass.constructor.call(this);\n      this.hT = \"0a\";\n      this.setByBigInteger = function(b) {\n        this.hTLV = null;\n        this.isModified = true;\n        this.hV = KJUR.asn1.ASN1Util.bigIntToMinTwosComplementsHex(b);\n      };\n      this.setByInteger = function(c) {\n        var b = new BigInteger(String(c), 10);\n        this.setByBigInteger(b);\n      };\n      this.setValueHex = function(b) {\n        this.hV = b;\n      };\n      this.getFreshValueHex = function() {\n        return this.hV;\n      };\n      if (typeof a != \"undefined\") {\n        if (typeof a[\"int\"] != \"undefined\") {\n          this.setByInteger(a[\"int\"]);\n        } else {\n          if (typeof a == \"number\") {\n            this.setByInteger(a);\n          } else {\n            if (typeof a.hex != \"undefined\") {\n              this.setValueHex(a.hex);\n            }\n          }\n        }\n      }\n    };\n    extendClass(KJUR.asn1.DEREnumerated, KJUR.asn1.ASN1Object);\n    KJUR.asn1.DERUTF8String = function(a) {\n      KJUR.asn1.DERUTF8String.superclass.constructor.call(this, a);\n      this.hT = \"0c\";\n    };\n    extendClass(KJUR.asn1.DERUTF8String, KJUR.asn1.DERAbstractString);\n    KJUR.asn1.DERNumericString = function(a) {\n      KJUR.asn1.DERNumericString.superclass.constructor.call(this, a);\n      this.hT = \"12\";\n    };\n    extendClass(KJUR.asn1.DERNumericString, KJUR.asn1.DERAbstractString);\n    KJUR.asn1.DERPrintableString = function(a) {\n      KJUR.asn1.DERPrintableString.superclass.constructor.call(this, a);\n      this.hT = \"13\";\n    };\n    extendClass(KJUR.asn1.DERPrintableString, KJUR.asn1.DERAbstractString);\n    KJUR.asn1.DERTeletexString = function(a) {\n      KJUR.asn1.DERTeletexString.superclass.constructor.call(this, a);\n      this.hT = \"14\";\n    };\n    extendClass(KJUR.asn1.DERTeletexString, KJUR.asn1.DERAbstractString);\n    KJUR.asn1.DERIA5String = function(a) {\n      KJUR.asn1.DERIA5String.superclass.constructor.call(this, a);\n      this.hT = \"16\";\n    };\n    extendClass(KJUR.asn1.DERIA5String, KJUR.asn1.DERAbstractString);\n    KJUR.asn1.DERVisibleString = function(a) {\n      KJUR.asn1.DERIA5String.superclass.constructor.call(this, a);\n      this.hT = \"1a\";\n    };\n    extendClass(KJUR.asn1.DERVisibleString, KJUR.asn1.DERAbstractString);\n    KJUR.asn1.DERBMPString = function(a) {\n      KJUR.asn1.DERBMPString.superclass.constructor.call(this, a);\n      this.hT = \"1e\";\n    };\n    extendClass(KJUR.asn1.DERBMPString, KJUR.asn1.DERAbstractString);\n    KJUR.asn1.DERUTCTime = function(a) {\n      KJUR.asn1.DERUTCTime.superclass.constructor.call(this, a);\n      this.hT = \"17\";\n      this.params = void 0;\n      this.getFreshValueHex = function() {\n        var d = this.params;\n        if (this.params == void 0) {\n          d = { date: new Date() };\n        }\n        if (typeof d == \"string\") {\n          if (d.match(/^[0-9]{12}Z$/) || d.match(/^[0-9]{12}\\.[0-9]+Z$/)) {\n            this.hV = stohex(d);\n          } else {\n            throw new Error(\"malformed string for UTCTime: \" + d);\n          }\n        } else {\n          if (d.str != void 0) {\n            this.hV = stohex(d.str);\n          } else {\n            if (d.date == void 0 && d.millis == true) {\n              var c = new Date();\n              this.hV = stohex(this.formatDate(c, \"utc\", true));\n            } else {\n              if (d.date != void 0 && d.date instanceof Date) {\n                var b = d.millis === true;\n                this.hV = stohex(this.formatDate(d.date, \"utc\", b));\n              } else {\n                if (d instanceof Date) {\n                  this.hV = stohex(this.formatDate(d, \"utc\"));\n                }\n              }\n            }\n          }\n        }\n        if (this.hV == void 0) {\n          throw new Error(\"parameter not specified properly for UTCTime\");\n        }\n        return this.hV;\n      };\n      if (a != void 0) {\n        this.setByParam(a);\n      }\n    };\n    extendClass(KJUR.asn1.DERUTCTime, KJUR.asn1.DERAbstractTime);\n    KJUR.asn1.DERGeneralizedTime = function(a) {\n      KJUR.asn1.DERGeneralizedTime.superclass.constructor.call(this, a);\n      this.hT = \"18\";\n      this.params = a;\n      this.getFreshValueHex = function() {\n        var d = this.params;\n        if (this.params == void 0) {\n          d = { date: new Date() };\n        }\n        if (typeof d == \"string\") {\n          if (d.match(/^[0-9]{14}Z$/) || d.match(/^[0-9]{14}\\.[0-9]+Z$/)) {\n            this.hV = stohex(d);\n          } else {\n            throw new Error(\"malformed string for GeneralizedTime: \" + d);\n          }\n        } else {\n          if (d.str != void 0) {\n            this.hV = stohex(d.str);\n          } else {\n            if (d.date == void 0 && d.millis == true) {\n              var c = new Date();\n              this.hV = stohex(this.formatDate(c, \"gen\", true));\n            } else {\n              if (d.date != void 0 && d.date instanceof Date) {\n                var b = d.millis === true;\n                this.hV = stohex(this.formatDate(d.date, \"gen\", b));\n              } else {\n                if (d instanceof Date) {\n                  this.hV = stohex(this.formatDate(d, \"gen\"));\n                }\n              }\n            }\n          }\n        }\n        if (this.hV == void 0) {\n          throw new Error(\"parameter not specified properly for GeneralizedTime\");\n        }\n        return this.hV;\n      };\n      if (a != void 0) {\n        this.setByParam(a);\n      }\n    };\n    extendClass(KJUR.asn1.DERGeneralizedTime, KJUR.asn1.DERAbstractTime);\n    KJUR.asn1.DERSequence = function(a) {\n      KJUR.asn1.DERSequence.superclass.constructor.call(this, a);\n      this.hT = \"30\";\n      this.getFreshValueHex = function() {\n        var c = \"\";\n        for (var b = 0; b < this.asn1Array.length; b++) {\n          var d = this.asn1Array[b];\n          c += d.tohex();\n        }\n        this.hV = c;\n        return this.hV;\n      };\n    };\n    extendClass(KJUR.asn1.DERSequence, KJUR.asn1.DERAbstractStructured);\n    KJUR.asn1.DERSet = function(a) {\n      KJUR.asn1.DERSet.superclass.constructor.call(this, a);\n      this.hT = \"31\";\n      this.sortFlag = true;\n      this.getFreshValueHex = function() {\n        var b = new Array();\n        for (var c = 0; c < this.asn1Array.length; c++) {\n          var d = this.asn1Array[c];\n          b.push(d.tohex());\n        }\n        if (this.sortFlag == true) {\n          b.sort();\n        }\n        this.hV = b.join(\"\");\n        return this.hV;\n      };\n      if (typeof a != \"undefined\") {\n        if (typeof a.sortflag != \"undefined\" && a.sortflag == false) {\n          this.sortFlag = false;\n        }\n      }\n    };\n    extendClass(KJUR.asn1.DERSet, KJUR.asn1.DERAbstractStructured);\n    KJUR.asn1.DERTaggedObject = function(f) {\n      KJUR.asn1.DERTaggedObject.superclass.constructor.call(this);\n      var d = KJUR.asn1, e2 = ASN1HEX, a = e2.getV, c = e2.isASN1HEX, b = d.ASN1Util.newObject;\n      this.hT = \"a0\";\n      this.hV = \"\";\n      this.isExplicit = true;\n      this.asn1Object = null;\n      this.params = { tag: \"a0\", explicit: true };\n      this.setASN1Object = function(g, h, i) {\n        this.params = { tag: h, explicit: g, obj: i };\n      };\n      this.getFreshValueHex = function() {\n        var h = this.params;\n        if (h.explicit == void 0) {\n          h.explicit = true;\n        }\n        if (h.tage != void 0) {\n          h.tag = h.tage;\n          h.explicit = true;\n        }\n        if (h.tagi != void 0) {\n          h.tag = h.tagi;\n          h.explicit = false;\n        }\n        if (h.str != void 0) {\n          this.hV = utf8tohex(h.str);\n        } else {\n          if (h.hex != void 0) {\n            this.hV = h.hex;\n          } else {\n            if (h.obj != void 0) {\n              var g;\n              if (h.obj instanceof d.ASN1Object) {\n                g = h.obj.tohex();\n              } else {\n                if (typeof h.obj == \"object\") {\n                  g = b(h.obj).tohex();\n                }\n              }\n              if (h.explicit) {\n                this.hV = g;\n              } else {\n                this.hV = a(g, 0);\n              }\n            } else {\n              throw new Error(\"str, hex nor obj not specified\");\n            }\n          }\n        }\n        if (h.tag == void 0) {\n          h.tag = \"a0\";\n        }\n        this.hT = h.tag;\n        this.hTLV = null;\n        this.isModified = true;\n        return this.hV;\n      };\n      this.setByParam = function(g) {\n        this.params = g;\n      };\n      if (f !== void 0) {\n        this.setByParam(f);\n      }\n    };\n    extendClass(KJUR.asn1.DERTaggedObject, KJUR.asn1.ASN1Object);\n    var ASN1HEX = new function() {\n    }();\n    ASN1HEX.getLblen = function(c, a) {\n      if (c.substr(a + 2, 1) != \"8\") {\n        return 1;\n      }\n      var b = parseInt(c.substr(a + 3, 1));\n      if (b == 0) {\n        return -1;\n      }\n      if (0 < b && b < 10) {\n        return b + 1;\n      }\n      return -2;\n    };\n    ASN1HEX.getL = function(c, b) {\n      var a = ASN1HEX.getLblen(c, b);\n      if (a < 1) {\n        return \"\";\n      }\n      return c.substr(b + 2, a * 2);\n    };\n    ASN1HEX.getVblen = function(d, a) {\n      var c, b;\n      c = ASN1HEX.getL(d, a);\n      if (c == \"\") {\n        return -1;\n      }\n      if (c.substr(0, 1) === \"8\") {\n        b = new BigInteger(c.substr(2), 16);\n      } else {\n        b = new BigInteger(c, 16);\n      }\n      return b.intValue();\n    };\n    ASN1HEX.getVidx = function(c, b) {\n      var a = ASN1HEX.getLblen(c, b);\n      if (a < 0) {\n        return a;\n      }\n      return b + (a + 1) * 2;\n    };\n    ASN1HEX.getV = function(d, a) {\n      var c = ASN1HEX.getVidx(d, a);\n      var b = ASN1HEX.getVblen(d, a);\n      return d.substr(c, b * 2);\n    };\n    ASN1HEX.getTLV = function(b, a) {\n      return b.substr(a, 2) + ASN1HEX.getL(b, a) + ASN1HEX.getV(b, a);\n    };\n    ASN1HEX.getTLVblen = function(b, a) {\n      return 2 + ASN1HEX.getLblen(b, a) * 2 + ASN1HEX.getVblen(b, a) * 2;\n    };\n    ASN1HEX.getNextSiblingIdx = function(d, a) {\n      var c = ASN1HEX.getVidx(d, a);\n      var b = ASN1HEX.getVblen(d, a);\n      return c + b * 2;\n    };\n    ASN1HEX.getChildIdx = function(e2, k) {\n      var l = ASN1HEX;\n      var j = [];\n      var c, f, g;\n      c = l.getVidx(e2, k);\n      f = l.getVblen(e2, k) * 2;\n      if (e2.substr(k, 2) == \"03\") {\n        c += 2;\n        f -= 2;\n      }\n      g = 0;\n      var d = c;\n      while (g <= f) {\n        var b = l.getTLVblen(e2, d);\n        g += b;\n        if (g <= f) {\n          j.push(d);\n        }\n        d += b;\n        if (g >= f) {\n          break;\n        }\n      }\n      return j;\n    };\n    ASN1HEX.getNthChildIdx = function(d, b, e2) {\n      var c = ASN1HEX.getChildIdx(d, b);\n      return c[e2];\n    };\n    ASN1HEX.getIdxbyList = function(e2, d, c, i) {\n      var g = ASN1HEX;\n      var f, b;\n      if (c.length == 0) {\n        if (i !== void 0) {\n          if (e2.substr(d, 2) !== i) {\n            return -1;\n          }\n        }\n        return d;\n      }\n      f = c.shift();\n      b = g.getChildIdx(e2, d);\n      if (f >= b.length) {\n        return -1;\n      }\n      return g.getIdxbyList(e2, b[f], c, i);\n    };\n    ASN1HEX.getIdxbyListEx = function(f, k, b, g) {\n      var m = ASN1HEX;\n      var d, l;\n      if (b.length == 0) {\n        if (g !== void 0) {\n          if (f.substr(k, 2) !== g) {\n            return -1;\n          }\n        }\n        return k;\n      }\n      d = b.shift();\n      l = m.getChildIdx(f, k);\n      var j = 0;\n      for (var e2 = 0; e2 < l.length; e2++) {\n        var c = f.substr(l[e2], 2);\n        if (typeof d == \"number\" && !m.isContextTag(c) && j == d || typeof d == \"string\" && m.isContextTag(c, d)) {\n          return m.getIdxbyListEx(f, l[e2], b, g);\n        }\n        if (!m.isContextTag(c)) {\n          j++;\n        }\n      }\n      return -1;\n    };\n    ASN1HEX.getTLVbyList = function(d, c, b, f) {\n      var e2 = ASN1HEX;\n      var a = e2.getIdxbyList(d, c, b, f);\n      if (a == -1) {\n        return null;\n      }\n      if (a >= d.length) {\n        return null;\n      }\n      return e2.getTLV(d, a);\n    };\n    ASN1HEX.getTLVbyListEx = function(d, c, b, f) {\n      var e2 = ASN1HEX;\n      var a = e2.getIdxbyListEx(d, c, b, f);\n      if (a == -1) {\n        return null;\n      }\n      return e2.getTLV(d, a);\n    };\n    ASN1HEX.getVbyList = function(e2, c, b, g, i) {\n      var f = ASN1HEX;\n      var a, d;\n      a = f.getIdxbyList(e2, c, b, g);\n      if (a == -1) {\n        return null;\n      }\n      if (a >= e2.length) {\n        return null;\n      }\n      d = f.getV(e2, a);\n      if (i === true) {\n        d = d.substr(2);\n      }\n      return d;\n    };\n    ASN1HEX.getVbyListEx = function(b, e2, a, d, f) {\n      var j = ASN1HEX;\n      var g, c, i;\n      g = j.getIdxbyListEx(b, e2, a, d);\n      if (g == -1) {\n        return null;\n      }\n      i = j.getV(b, g);\n      if (b.substr(g, 2) == \"03\" && f !== false) {\n        i = i.substr(2);\n      }\n      return i;\n    };\n    ASN1HEX.getInt = function(e2, b, f) {\n      if (f == void 0) {\n        f = -1;\n      }\n      try {\n        var c = e2.substr(b, 2);\n        if (c != \"02\" && c != \"03\") {\n          return f;\n        }\n        var a = ASN1HEX.getV(e2, b);\n        if (c == \"02\") {\n          return parseInt(a, 16);\n        } else {\n          return bitstrtoint(a);\n        }\n      } catch (d) {\n        return f;\n      }\n    };\n    ASN1HEX.getOID = function(c, a, d) {\n      if (d == void 0) {\n        d = null;\n      }\n      try {\n        if (c.substr(a, 2) != \"06\") {\n          return d;\n        }\n        var e2 = ASN1HEX.getV(c, a);\n        return hextooid(e2);\n      } catch (b) {\n        return d;\n      }\n    };\n    ASN1HEX.getOIDName = function(d, a, f) {\n      if (f == void 0) {\n        f = null;\n      }\n      try {\n        var e2 = ASN1HEX.getOID(d, a, f);\n        if (e2 == f) {\n          return f;\n        }\n        var b = KJUR.asn1.x509.OID.oid2name(e2);\n        if (b == \"\") {\n          return e2;\n        }\n        return b;\n      } catch (c) {\n        return f;\n      }\n    };\n    ASN1HEX.getString = function(d, b, e2) {\n      if (e2 == void 0) {\n        e2 = null;\n      }\n      try {\n        var a = ASN1HEX.getV(d, b);\n        return hextorstr(a);\n      } catch (c) {\n        return e2;\n      }\n    };\n    ASN1HEX.hextooidstr = function(e2) {\n      var h = function(b, a) {\n        if (b.length >= a) {\n          return b;\n        }\n        return new Array(a - b.length + 1).join(\"0\") + b;\n      };\n      var l = [];\n      var o2 = e2.substr(0, 2);\n      var f = parseInt(o2, 16);\n      l[0] = new String(Math.floor(f / 40));\n      l[1] = new String(f % 40);\n      var m = e2.substr(2);\n      var k = [];\n      for (var g = 0; g < m.length / 2; g++) {\n        k.push(parseInt(m.substr(g * 2, 2), 16));\n      }\n      var j = [];\n      var d = \"\";\n      for (var g = 0; g < k.length; g++) {\n        if (k[g] & 128) {\n          d = d + h((k[g] & 127).toString(2), 7);\n        } else {\n          d = d + h((k[g] & 127).toString(2), 7);\n          j.push(new String(parseInt(d, 2)));\n          d = \"\";\n        }\n      }\n      var n2 = l.join(\".\");\n      if (j.length > 0) {\n        n2 = n2 + \".\" + j.join(\".\");\n      }\n      return n2;\n    };\n    ASN1HEX.dump = function(t3, c, l, g) {\n      var p = ASN1HEX;\n      var j = p.getV;\n      var y = p.dump;\n      var w = p.getChildIdx;\n      var e2 = t3;\n      if (t3 instanceof KJUR.asn1.ASN1Object) {\n        e2 = t3.tohex();\n      }\n      var q = function(A, i) {\n        if (A.length <= i * 2) {\n          return A;\n        } else {\n          var v = A.substr(0, i) + \"..(total \" + A.length / 2 + \"bytes)..\" + A.substr(A.length - i, i);\n          return v;\n        }\n      };\n      if (c === void 0) {\n        c = { ommit_long_octet: 32 };\n      }\n      if (l === void 0) {\n        l = 0;\n      }\n      if (g === void 0) {\n        g = \"\";\n      }\n      var x = c.ommit_long_octet;\n      var z2 = e2.substr(l, 2);\n      if (z2 == \"01\") {\n        var h = j(e2, l);\n        if (h == \"00\") {\n          return g + \"BOOLEAN FALSE\\n\";\n        } else {\n          return g + \"BOOLEAN TRUE\\n\";\n        }\n      }\n      if (z2 == \"02\") {\n        var h = j(e2, l);\n        return g + \"INTEGER \" + q(h, x) + \"\\n\";\n      }\n      if (z2 == \"03\") {\n        var h = j(e2, l);\n        if (p.isASN1HEX(h.substr(2))) {\n          var k = g + \"BITSTRING, encapsulates\\n\";\n          k = k + y(h.substr(2), c, 0, g + \"  \");\n          return k;\n        } else {\n          return g + \"BITSTRING \" + q(h, x) + \"\\n\";\n        }\n      }\n      if (z2 == \"04\") {\n        var h = j(e2, l);\n        if (p.isASN1HEX(h)) {\n          var k = g + \"OCTETSTRING, encapsulates\\n\";\n          k = k + y(h, c, 0, g + \"  \");\n          return k;\n        } else {\n          return g + \"OCTETSTRING \" + q(h, x) + \"\\n\";\n        }\n      }\n      if (z2 == \"05\") {\n        return g + \"NULL\\n\";\n      }\n      if (z2 == \"06\") {\n        var m = j(e2, l);\n        var b = KJUR.asn1.ASN1Util.oidHexToInt(m);\n        var o2 = KJUR.asn1.x509.OID.oid2name(b);\n        var a = b.replace(/\\./g, \" \");\n        if (o2 != \"\") {\n          return g + \"ObjectIdentifier \" + o2 + \" (\" + a + \")\\n\";\n        } else {\n          return g + \"ObjectIdentifier (\" + a + \")\\n\";\n        }\n      }\n      if (z2 == \"0a\") {\n        return g + \"ENUMERATED \" + parseInt(j(e2, l)) + \"\\n\";\n      }\n      if (z2 == \"0c\") {\n        return g + \"UTF8String '\" + hextoutf8(j(e2, l)) + \"'\\n\";\n      }\n      if (z2 == \"13\") {\n        return g + \"PrintableString '\" + hextoutf8(j(e2, l)) + \"'\\n\";\n      }\n      if (z2 == \"14\") {\n        return g + \"TeletexString '\" + hextoutf8(j(e2, l)) + \"'\\n\";\n      }\n      if (z2 == \"16\") {\n        return g + \"IA5String '\" + hextoutf8(j(e2, l)) + \"'\\n\";\n      }\n      if (z2 == \"17\") {\n        return g + \"UTCTime \" + hextoutf8(j(e2, l)) + \"\\n\";\n      }\n      if (z2 == \"18\") {\n        return g + \"GeneralizedTime \" + hextoutf8(j(e2, l)) + \"\\n\";\n      }\n      if (z2 == \"1a\") {\n        return g + \"VisualString '\" + hextoutf8(j(e2, l)) + \"'\\n\";\n      }\n      if (z2 == \"1e\") {\n        return g + \"BMPString '\" + ucs2hextoutf8(j(e2, l)) + \"'\\n\";\n      }\n      if (z2 == \"30\") {\n        if (e2.substr(l, 4) == \"3000\") {\n          return g + \"SEQUENCE {}\\n\";\n        }\n        var k = g + \"SEQUENCE\\n\";\n        var d = w(e2, l);\n        var f = c;\n        if ((d.length == 2 || d.length == 3) && e2.substr(d[0], 2) == \"06\" && e2.substr(d[d.length - 1], 2) == \"04\") {\n          var o2 = p.oidname(j(e2, d[0]));\n          var r2 = JSON.parse(JSON.stringify(c));\n          r2.x509ExtName = o2;\n          f = r2;\n        }\n        for (var u = 0; u < d.length; u++) {\n          k = k + y(e2, f, d[u], g + \"  \");\n        }\n        return k;\n      }\n      if (z2 == \"31\") {\n        var k = g + \"SET\\n\";\n        var d = w(e2, l);\n        for (var u = 0; u < d.length; u++) {\n          k = k + y(e2, c, d[u], g + \"  \");\n        }\n        return k;\n      }\n      var z2 = parseInt(z2, 16);\n      if ((z2 & 128) != 0) {\n        var n2 = z2 & 31;\n        if ((z2 & 32) != 0) {\n          var k = g + \"[\" + n2 + \"]\\n\";\n          var d = w(e2, l);\n          for (var u = 0; u < d.length; u++) {\n            k = k + y(e2, c, d[u], g + \"  \");\n          }\n          return k;\n        } else {\n          var h = j(e2, l);\n          if (ASN1HEX.isASN1HEX(h)) {\n            var k = g + \"[\" + n2 + \"]\\n\";\n            k = k + y(h, c, 0, g + \"  \");\n            return k;\n          } else {\n            if (h.substr(0, 8) == \"68747470\") {\n              h = hextoutf8(h);\n            } else {\n              if (c.x509ExtName === \"subjectAltName\" && n2 == 2) {\n                h = hextoutf8(h);\n              }\n            }\n          }\n          var k = g + \"[\" + n2 + \"] \" + h + \"\\n\";\n          return k;\n        }\n      }\n      return g + \"UNKNOWN(\" + z2 + \") \" + j(e2, l) + \"\\n\";\n    };\n    ASN1HEX.parse = function(x) {\n      var t3 = ASN1HEX, f = t3.parse, a = t3.isASN1HEX, l = t3.getV, b = t3.getTLV, y = t3.getChildIdx, i = KJUR.asn1, e2 = i.ASN1Util.oidHexToInt, B = i.x509.OID.oid2name, k = hextoutf8, n2 = ucs2hextoutf8, q = iso88591hextoutf8;\n      var c = { \"0c\": \"utf8str\", \"12\": \"numstr\", \"13\": \"prnstr\", \"14\": \"telstr\", \"16\": \"ia5str\", \"17\": \"utctime\", \"18\": \"gentime\", \"1a\": \"visstr\", \"1e\": \"bmpstr\", \"30\": \"seq\", \"31\": \"set\" };\n      var u = function(H) {\n        var D = [];\n        var E = y(H, 0);\n        for (var G = 0; G < E.length; G++) {\n          var s = E[G];\n          var d = b(H, s);\n          var F = f(d);\n          D.push(F);\n        }\n        return D;\n      };\n      var C = x.substr(0, 2);\n      var j = {};\n      var p = l(x, 0);\n      if (C == \"01\") {\n        if (x == \"0101ff\") {\n          return { bool: true };\n        }\n        return { bool: false };\n      } else {\n        if (C == \"02\") {\n          return { \"int\": { hex: p } };\n        } else {\n          if (C == \"03\") {\n            try {\n              if (p.substr(0, 2) != \"00\") {\n                throw \"not encap\";\n              }\n              var v = p.substr(2);\n              if (!a(v)) {\n                throw \"not encap\";\n              }\n              return { bitstr: { obj: f(v) } };\n            } catch (z2) {\n              var m = null;\n              if (p.length <= 10) {\n                m = bitstrtobinstr(p);\n              }\n              if (m == null) {\n                return { bitstr: { hex: p } };\n              } else {\n                return { bitstr: { bin: m } };\n              }\n            }\n          } else {\n            if (C == \"04\") {\n              try {\n                if (!a(p)) {\n                  throw \"not encap\";\n                }\n                return { octstr: { obj: f(p) } };\n              } catch (z2) {\n                return { octstr: { hex: p } };\n              }\n            } else {\n              if (C == \"05\") {\n                return { \"null\": \"\" };\n              } else {\n                if (C == \"06\") {\n                  var g = e2(p);\n                  var r2 = B(g);\n                  if (r2 == \"\") {\n                    return { oid: g };\n                  } else {\n                    return { oid: r2 };\n                  }\n                } else {\n                  if (C == \"0a\") {\n                    if (p.length > 4) {\n                      return { \"enum\": { hex: p } };\n                    } else {\n                      return { \"enum\": parseInt(p, 16) };\n                    }\n                  } else {\n                    if (C == \"30\" || C == \"31\") {\n                      j[c[C]] = u(x);\n                      return j;\n                    } else {\n                      if (C == \"14\") {\n                        var o2 = q(p);\n                        j[c[C]] = { str: o2 };\n                        return j;\n                      } else {\n                        if (C == \"1e\") {\n                          var o2 = n2(p);\n                          j[c[C]] = { str: o2 };\n                          return j;\n                        } else {\n                          if (\":0c:12:13:16:17:18:1a:\".indexOf(C) != -1) {\n                            var o2 = k(p);\n                            j[c[C]] = { str: o2 };\n                            return j;\n                          } else {\n                            if (C.match(/^8[0-9]$/)) {\n                              var o2 = k(p);\n                              if (o2 == null | o2 == \"\") {\n                                return { tag: { tag: C, explicit: false, hex: p } };\n                              } else {\n                                if (o2.match(/[\\x00-\\x1F\\x7F-\\x9F]/) != null || o2.match(/[\\u0000-\\u001F\\u0080–\\u009F]/) != null) {\n                                  return { tag: { tag: C, explicit: false, hex: p } };\n                                } else {\n                                  return { tag: { tag: C, explicit: false, str: o2 } };\n                                }\n                              }\n                            } else {\n                              if (C.match(/^a[0-9]$/)) {\n                                try {\n                                  if (!a(p)) {\n                                    throw new Error(\"not encap\");\n                                  }\n                                  return { tag: { tag: C, explicit: true, obj: f(p) } };\n                                } catch (z2) {\n                                  return { tag: { tag: C, explicit: true, hex: p } };\n                                }\n                              } else {\n                                var A = new KJUR.asn1.ASN1Object();\n                                A.hV = p;\n                                var w = A.getLengthHexFromValue();\n                                return { asn1: { tlv: C + w + p } };\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    };\n    ASN1HEX.isContextTag = function(c, b) {\n      c = c.toLowerCase();\n      var f, e2;\n      try {\n        f = parseInt(c, 16);\n      } catch (d) {\n        return -1;\n      }\n      if (b === void 0) {\n        if ((f & 192) == 128) {\n          return true;\n        } else {\n          return false;\n        }\n      }\n      try {\n        var a = b.match(/^\\[[0-9]+\\]$/);\n        if (a == null) {\n          return false;\n        }\n        e2 = parseInt(b.substr(1, b.length - 1), 10);\n        if (e2 > 31) {\n          return false;\n        }\n        if ((f & 192) == 128 && (f & 31) == e2) {\n          return true;\n        }\n        return false;\n      } catch (d) {\n        return false;\n      }\n    };\n    ASN1HEX.isASN1HEX = function(e2) {\n      var d = ASN1HEX;\n      if (e2.length % 2 == 1) {\n        return false;\n      }\n      var c = d.getVblen(e2, 0);\n      var b = e2.substr(0, 2);\n      var f = d.getL(e2, 0);\n      var a = e2.length - b.length - f.length;\n      if (a == c * 2) {\n        return true;\n      }\n      return false;\n    };\n    ASN1HEX.checkStrictDER = function(g, o2, d, c, r2) {\n      var s = ASN1HEX;\n      if (d === void 0) {\n        if (typeof g != \"string\") {\n          throw new Error(\"not hex string\");\n        }\n        g = g.toLowerCase();\n        if (!KJUR.lang.String.isHex(g)) {\n          throw new Error(\"not hex string\");\n        }\n        d = g.length;\n        c = g.length / 2;\n        if (c < 128) {\n          r2 = 1;\n        } else {\n          r2 = Math.ceil(c.toString(16)) + 1;\n        }\n      }\n      var k = s.getL(g, o2);\n      if (k.length > r2 * 2) {\n        throw new Error(\"L of TLV too long: idx=\" + o2);\n      }\n      var n2 = s.getVblen(g, o2);\n      if (n2 > c) {\n        throw new Error(\"value of L too long than hex: idx=\" + o2);\n      }\n      var q = s.getTLV(g, o2);\n      var f = q.length - 2 - s.getL(g, o2).length;\n      if (f !== n2 * 2) {\n        throw new Error(\"V string length and L's value not the same:\" + f + \"/\" + n2 * 2);\n      }\n      if (o2 === 0) {\n        if (g.length != q.length) {\n          throw new Error(\"total length and TLV length unmatch:\" + g.length + \"!=\" + q.length);\n        }\n      }\n      var b = g.substr(o2, 2);\n      if (b === \"02\") {\n        var a = s.getVidx(g, o2);\n        if (g.substr(a, 2) == \"00\" && g.charCodeAt(a + 2) < 56) {\n          throw new Error(\"not least zeros for DER INTEGER\");\n        }\n      }\n      if (parseInt(b, 16) & 32) {\n        var p = s.getVblen(g, o2);\n        var m = 0;\n        var l = s.getChildIdx(g, o2);\n        for (var e2 = 0; e2 < l.length; e2++) {\n          var j = s.getTLV(g, l[e2]);\n          m += j.length;\n          s.checkStrictDER(g, l[e2], d, c, r2);\n        }\n        if (p * 2 != m) {\n          throw new Error(\"sum of children's TLV length and L unmatch: \" + p * 2 + \"!=\" + m);\n        }\n      }\n    };\n    ASN1HEX.oidname = function(a) {\n      var c = KJUR.asn1;\n      if (KJUR.lang.String.isHex(a)) {\n        a = c.ASN1Util.oidHexToInt(a);\n      }\n      var b = c.x509.OID.oid2name(a);\n      if (b === \"\") {\n        b = a;\n      }\n      return b;\n    };\n    if (typeof KJUR == \"undefined\" || !KJUR) {\n      KJUR = {};\n    }\n    if (typeof KJUR.asn1 == \"undefined\" || !KJUR.asn1) {\n      KJUR.asn1 = {};\n    }\n    if (typeof KJUR.asn1.x509 == \"undefined\" || !KJUR.asn1.x509) {\n      KJUR.asn1.x509 = {};\n    }\n    KJUR.asn1.x509.Certificate = function(h) {\n      KJUR.asn1.x509.Certificate.superclass.constructor.call(this);\n      var d = KJUR, c = d.asn1, f = c.DERBitString, b = c.DERSequence, g = c.x509, a = g.TBSCertificate, e2 = g.AlgorithmIdentifier;\n      this.params = void 0;\n      this.setByParam = function(i) {\n        this.params = i;\n      };\n      this.sign = function() {\n        var l = this.params;\n        var k = l.sigalg;\n        if (l.sigalg.name != void 0) {\n          k = l.sigalg.name;\n        }\n        var i = l.tbsobj.tohex();\n        var j = new KJUR.crypto.Signature({ alg: k });\n        j.init(l.cakey);\n        j.updateHex(i);\n        l.sighex = j.sign();\n      };\n      this.getPEM = function() {\n        return hextopem(this.tohex(), \"CERTIFICATE\");\n      };\n      this.tohex = function() {\n        var k = this.params;\n        if (k.tbsobj == void 0 || k.tbsobj == null) {\n          k.tbsobj = new a(k);\n        }\n        if (k.sighex == void 0 && k.cakey != void 0) {\n          this.sign();\n        }\n        if (k.sighex == void 0) {\n          throw new Error(\"sighex or cakey parameter not defined\");\n        }\n        var i = [];\n        i.push(k.tbsobj);\n        i.push(new e2({ name: k.sigalg }));\n        i.push(new f({ hex: \"00\" + k.sighex }));\n        var j = new b({ array: i });\n        return j.tohex();\n      };\n      this.getEncodedHex = function() {\n        return this.tohex();\n      };\n      if (h != void 0) {\n        this.params = h;\n      }\n    };\n    extendClass(KJUR.asn1.x509.Certificate, KJUR.asn1.ASN1Object);\n    KJUR.asn1.x509.TBSCertificate = function(f) {\n      KJUR.asn1.x509.TBSCertificate.superclass.constructor.call(this);\n      var b = KJUR, i = b.asn1, d = i.x509, c = i.DERTaggedObject, h = i.DERInteger, g = i.DERSequence, l = d.AlgorithmIdentifier, e2 = d.Time, a = d.X500Name, j = d.Extensions, k = d.SubjectPublicKeyInfo;\n      this.params = null;\n      this.setByParam = function(m) {\n        this.params = m;\n      };\n      this.tohex = function() {\n        var n2 = [];\n        var q = this.params;\n        if (q.version != void 0 || q.version != 1) {\n          var m = 2;\n          if (q.version != void 0) {\n            m = q.version - 1;\n          }\n          var p = new c({ obj: new h({ \"int\": m }) });\n          n2.push(p);\n        }\n        n2.push(new h(q.serial));\n        n2.push(new l({ name: q.sigalg }));\n        n2.push(new a(q.issuer));\n        n2.push(new g({ array: [new e2(q.notbefore), new e2(q.notafter)] }));\n        n2.push(new a(q.subject));\n        n2.push(new k(KEYUTIL.getKey(q.sbjpubkey)));\n        if (q.ext !== void 0 && q.ext.length > 0) {\n          n2.push(new c({ tag: \"a3\", obj: new j(q.ext) }));\n        }\n        var o2 = new KJUR.asn1.DERSequence({ array: n2 });\n        return o2.tohex();\n      };\n      this.getEncodedHex = function() {\n        return this.tohex();\n      };\n      if (f !== void 0) {\n        this.setByParam(f);\n      }\n    };\n    extendClass(KJUR.asn1.x509.TBSCertificate, KJUR.asn1.ASN1Object);\n    KJUR.asn1.x509.Extensions = function(d) {\n      KJUR.asn1.x509.Extensions.superclass.constructor.call(this);\n      var c = KJUR, b = c.asn1, a = b.DERSequence, e2 = b.x509;\n      this.aParam = [];\n      this.setByParam = function(f) {\n        this.aParam = f;\n      };\n      this.tohex = function() {\n        var f = [];\n        for (var h = 0; h < this.aParam.length; h++) {\n          var l = this.aParam[h];\n          var k = l.extname;\n          var j = null;\n          if (l.extn != void 0) {\n            j = new e2.PrivateExtension(l);\n          } else {\n            if (k == \"subjectKeyIdentifier\") {\n              j = new e2.SubjectKeyIdentifier(l);\n            } else {\n              if (k == \"keyUsage\") {\n                j = new e2.KeyUsage(l);\n              } else {\n                if (k == \"subjectAltName\") {\n                  j = new e2.SubjectAltName(l);\n                } else {\n                  if (k == \"issuerAltName\") {\n                    j = new e2.IssuerAltName(l);\n                  } else {\n                    if (k == \"basicConstraints\") {\n                      j = new e2.BasicConstraints(l);\n                    } else {\n                      if (k == \"nameConstraints\") {\n                        j = new e2.NameConstraints(l);\n                      } else {\n                        if (k == \"cRLDistributionPoints\") {\n                          j = new e2.CRLDistributionPoints(l);\n                        } else {\n                          if (k == \"certificatePolicies\") {\n                            j = new e2.CertificatePolicies(l);\n                          } else {\n                            if (k == \"policyMappings\") {\n                              j = new e2.PolicyMappings(l);\n                            } else {\n                              if (k == \"policyConstraints\") {\n                                j = new e2.PolicyConstraints(l);\n                              } else {\n                                if (k == \"inhibitAnyPolicy\") {\n                                  j = new e2.InhibitAnyPolicy(l);\n                                } else {\n                                  if (k == \"authorityKeyIdentifier\") {\n                                    j = new e2.AuthorityKeyIdentifier(l);\n                                  } else {\n                                    if (k == \"extKeyUsage\") {\n                                      j = new e2.ExtKeyUsage(l);\n                                    } else {\n                                      if (k == \"authorityInfoAccess\") {\n                                        j = new e2.AuthorityInfoAccess(l);\n                                      } else {\n                                        if (k == \"cRLNumber\") {\n                                          j = new e2.CRLNumber(l);\n                                        } else {\n                                          if (k == \"cRLReason\") {\n                                            j = new e2.CRLReason(l);\n                                          } else {\n                                            if (k == \"ocspNonce\") {\n                                              j = new e2.OCSPNonce(l);\n                                            } else {\n                                              if (k == \"ocspNoCheck\") {\n                                                j = new e2.OCSPNoCheck(l);\n                                              } else {\n                                                if (k == \"adobeTimeStamp\") {\n                                                  j = new e2.AdobeTimeStamp(l);\n                                                } else {\n                                                  if (k == \"subjectDirectoryAttributes\") {\n                                                    j = new e2.SubjectDirectoryAttributes(l);\n                                                  } else {\n                                                    throw new Error(\"extension not supported:\" + JSON.stringify(l));\n                                                  }\n                                                }\n                                              }\n                                            }\n                                          }\n                                        }\n                                      }\n                                    }\n                                  }\n                                }\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n          if (j != null) {\n            f.push(j);\n          }\n        }\n        var g = new a({ array: f });\n        return g.tohex();\n      };\n      this.getEncodedHex = function() {\n        return this.tohex();\n      };\n      if (d != void 0) {\n        this.setByParam(d);\n      }\n    };\n    extendClass(KJUR.asn1.x509.Extensions, KJUR.asn1.ASN1Object);\n    KJUR.asn1.x509.Extension = function(d) {\n      KJUR.asn1.x509.Extension.superclass.constructor.call(this);\n      var f = null, a = KJUR, e2 = a.asn1, h = e2.DERObjectIdentifier, i = e2.DEROctetString, b = e2.DERBitString, g = e2.DERBoolean, c = e2.DERSequence;\n      this.tohex = function() {\n        var m = new h({ oid: this.oid });\n        var l = new i({ hex: this.getExtnValueHex() });\n        var k = new Array();\n        k.push(m);\n        if (this.critical) {\n          k.push(new g());\n        }\n        k.push(l);\n        var j = new c({ array: k });\n        return j.tohex();\n      };\n      this.getEncodedHex = function() {\n        return this.tohex();\n      };\n      this.critical = false;\n      if (d !== void 0) {\n        if (d.critical !== void 0) {\n          this.critical = d.critical;\n        }\n      }\n    };\n    extendClass(KJUR.asn1.x509.Extension, KJUR.asn1.ASN1Object);\n    KJUR.asn1.x509.KeyUsage = function(c) {\n      KJUR.asn1.x509.KeyUsage.superclass.constructor.call(this, c);\n      var b = Error;\n      var a = { digitalSignature: 0, nonRepudiation: 1, keyEncipherment: 2, dataEncipherment: 3, keyAgreement: 4, keyCertSign: 5, cRLSign: 6, encipherOnly: 7, decipherOnly: 8 };\n      this.getExtnValueHex = function() {\n        var d = this.getBinValue();\n        this.asn1ExtnValue = new KJUR.asn1.DERBitString({ bin: d });\n        return this.asn1ExtnValue.tohex();\n      };\n      this.getBinValue = function() {\n        var d = this.params;\n        if (typeof d != \"object\" || typeof d.names != \"object\" && typeof d.bin != \"string\") {\n          throw new b(\"parameter not yet set\");\n        }\n        if (d.names != void 0) {\n          return namearraytobinstr(d.names, a);\n        } else {\n          if (d.bin != void 0) {\n            return d.bin;\n          } else {\n            throw new b(\"parameter not set properly\");\n          }\n        }\n      };\n      this.oid = \"2.5.29.15\";\n      if (c !== void 0) {\n        this.params = c;\n      }\n    };\n    extendClass(KJUR.asn1.x509.KeyUsage, KJUR.asn1.x509.Extension);\n    KJUR.asn1.x509.BasicConstraints = function(g) {\n      KJUR.asn1.x509.BasicConstraints.superclass.constructor.call(this, g);\n      var c = KJUR.asn1, e2 = c.DERBoolean, f = c.DERInteger, b = c.DERSequence;\n      var a = false;\n      var d = -1;\n      this.getExtnValueHex = function() {\n        var i = new Array();\n        if (this.cA) {\n          i.push(new e2());\n        }\n        if (this.pathLen > -1) {\n          i.push(new f({ \"int\": this.pathLen }));\n        }\n        var h = new b({ array: i });\n        this.asn1ExtnValue = h;\n        return this.asn1ExtnValue.tohex();\n      };\n      this.oid = \"2.5.29.19\";\n      this.cA = false;\n      this.pathLen = -1;\n      if (g !== void 0) {\n        if (g.cA !== void 0) {\n          this.cA = g.cA;\n        }\n        if (g.pathLen !== void 0) {\n          this.pathLen = g.pathLen;\n        }\n      }\n    };\n    extendClass(KJUR.asn1.x509.BasicConstraints, KJUR.asn1.x509.Extension);\n    KJUR.asn1.x509.CRLDistributionPoints = function(d) {\n      KJUR.asn1.x509.CRLDistributionPoints.superclass.constructor.call(this, d);\n      var b = KJUR, a = b.asn1, c = a.x509;\n      this.getExtnValueHex = function() {\n        return this.asn1ExtnValue.tohex();\n      };\n      this.setByDPArray = function(e2) {\n        var f = [];\n        for (var g = 0; g < e2.length; g++) {\n          if (e2[g] instanceof KJUR.asn1.ASN1Object) {\n            f.push(e2[g]);\n          } else {\n            var h = new c.DistributionPoint(e2[g]);\n            f.push(h);\n          }\n        }\n        this.asn1ExtnValue = new a.DERSequence({ array: f });\n      };\n      this.setByOneURI = function(f) {\n        var e2 = new c.DistributionPoint({ fulluri: f });\n        this.setByDPArray([e2]);\n      };\n      this.oid = \"2.5.29.31\";\n      if (d !== void 0) {\n        if (d.array !== void 0) {\n          this.setByDPArray(d.array);\n        } else {\n          if (d.uri !== void 0) {\n            this.setByOneURI(d.uri);\n          }\n        }\n      }\n    };\n    extendClass(KJUR.asn1.x509.CRLDistributionPoints, KJUR.asn1.x509.Extension);\n    KJUR.asn1.x509.DistributionPoint = function(e2) {\n      KJUR.asn1.x509.DistributionPoint.superclass.constructor.call(this);\n      var a = null, c = KJUR, b = c.asn1, d = b.x509.DistributionPointName;\n      this.tohex = function() {\n        var f = new b.DERSequence();\n        if (this.asn1DP != null) {\n          var g = new b.DERTaggedObject({ explicit: true, tag: \"a0\", obj: this.asn1DP });\n          f.appendASN1Object(g);\n        }\n        this.hTLV = f.tohex();\n        return this.hTLV;\n      };\n      this.getEncodedHex = function() {\n        return this.tohex();\n      };\n      if (e2 !== void 0) {\n        if (e2.dpobj !== void 0) {\n          this.asn1DP = e2.dpobj;\n        } else {\n          if (e2.dpname !== void 0) {\n            this.asn1DP = new d(e2.dpname);\n          } else {\n            if (e2.fulluri !== void 0) {\n              this.asn1DP = new d({ full: [{ uri: e2.fulluri }] });\n            }\n          }\n        }\n      }\n    };\n    extendClass(KJUR.asn1.x509.DistributionPoint, KJUR.asn1.ASN1Object);\n    KJUR.asn1.x509.DistributionPointName = function(h) {\n      KJUR.asn1.x509.DistributionPointName.superclass.constructor.call(this);\n      var g = null, d = null, a = null, f = null, c = KJUR, b = c.asn1, e2 = b.DERTaggedObject;\n      this.tohex = function() {\n        if (this.type != \"full\") {\n          throw new Error(\"currently type shall be 'full': \" + this.type);\n        }\n        this.asn1Obj = new e2({ explicit: false, tag: this.tag, obj: this.asn1V });\n        this.hTLV = this.asn1Obj.tohex();\n        return this.hTLV;\n      };\n      this.getEncodedHex = function() {\n        return this.tohex();\n      };\n      if (h !== void 0) {\n        if (b.x509.GeneralNames.prototype.isPrototypeOf(h)) {\n          this.type = \"full\";\n          this.tag = \"a0\";\n          this.asn1V = h;\n        } else {\n          if (h.full !== void 0) {\n            this.type = \"full\";\n            this.tag = \"a0\";\n            this.asn1V = new b.x509.GeneralNames(h.full);\n          } else {\n            throw new Error(\"This class supports GeneralNames only as argument\");\n          }\n        }\n      }\n    };\n    extendClass(KJUR.asn1.x509.DistributionPointName, KJUR.asn1.ASN1Object);\n    KJUR.asn1.x509.CertificatePolicies = function(f) {\n      KJUR.asn1.x509.CertificatePolicies.superclass.constructor.call(this, f);\n      var c = KJUR, b = c.asn1, e2 = b.x509, a = b.DERSequence, d = e2.PolicyInformation;\n      this.params = null;\n      this.getExtnValueHex = function() {\n        var j = [];\n        for (var h = 0; h < this.params.array.length; h++) {\n          j.push(new d(this.params.array[h]));\n        }\n        var g = new a({ array: j });\n        this.asn1ExtnValue = g;\n        return this.asn1ExtnValue.tohex();\n      };\n      this.oid = \"2.5.29.32\";\n      if (f !== void 0) {\n        this.params = f;\n      }\n    };\n    extendClass(KJUR.asn1.x509.CertificatePolicies, KJUR.asn1.x509.Extension);\n    KJUR.asn1.x509.PolicyInformation = function(d) {\n      KJUR.asn1.x509.PolicyInformation.superclass.constructor.call(this, d);\n      var c = KJUR.asn1, b = c.DERSequence, e2 = c.DERObjectIdentifier, a = c.x509.PolicyQualifierInfo;\n      this.params = null;\n      this.tohex = function() {\n        if (this.params.policyoid === void 0 && this.params.array === void 0) {\n          throw new Error(\"parameter oid and array missing\");\n        }\n        var f = [new e2(this.params.policyoid)];\n        if (this.params.array !== void 0) {\n          var j = [];\n          for (var h = 0; h < this.params.array.length; h++) {\n            j.push(new a(this.params.array[h]));\n          }\n          if (j.length > 0) {\n            f.push(new b({ array: j }));\n          }\n        }\n        var g = new b({ array: f });\n        return g.tohex();\n      };\n      this.getEncodedHex = function() {\n        return this.tohex();\n      };\n      if (d !== void 0) {\n        this.params = d;\n      }\n    };\n    extendClass(KJUR.asn1.x509.PolicyInformation, KJUR.asn1.ASN1Object);\n    KJUR.asn1.x509.PolicyQualifierInfo = function(e2) {\n      KJUR.asn1.x509.PolicyQualifierInfo.superclass.constructor.call(this, e2);\n      var c = KJUR.asn1, b = c.DERSequence, d = c.DERIA5String, f = c.DERObjectIdentifier, a = c.x509.UserNotice;\n      this.params = null;\n      this.tohex = function() {\n        if (this.params.cps !== void 0) {\n          var g = new b({ array: [new f({ oid: \"1.3.6.1.5.5.7.2.1\" }), new d({ str: this.params.cps })] });\n          return g.tohex();\n        }\n        if (this.params.unotice != void 0) {\n          var g = new b({ array: [new f({ oid: \"1.3.6.1.5.5.7.2.2\" }), new a(this.params.unotice)] });\n          return g.tohex();\n        }\n      };\n      this.getEncodedHex = function() {\n        return this.tohex();\n      };\n      if (e2 !== void 0) {\n        this.params = e2;\n      }\n    };\n    extendClass(KJUR.asn1.x509.PolicyQualifierInfo, KJUR.asn1.ASN1Object);\n    KJUR.asn1.x509.UserNotice = function(e2) {\n      KJUR.asn1.x509.UserNotice.superclass.constructor.call(this, e2);\n      var a = KJUR.asn1.DERSequence, d = KJUR.asn1.DERInteger, c = KJUR.asn1.x509.DisplayText, b = KJUR.asn1.x509.NoticeReference;\n      this.params = null;\n      this.tohex = function() {\n        var f = [];\n        if (this.params.noticeref !== void 0) {\n          f.push(new b(this.params.noticeref));\n        }\n        if (this.params.exptext !== void 0) {\n          f.push(new c(this.params.exptext));\n        }\n        var g = new a({ array: f });\n        return g.tohex();\n      };\n      this.getEncodedHex = function() {\n        return this.tohex();\n      };\n      if (e2 !== void 0) {\n        this.params = e2;\n      }\n    };\n    extendClass(KJUR.asn1.x509.UserNotice, KJUR.asn1.ASN1Object);\n    KJUR.asn1.x509.NoticeReference = function(d) {\n      KJUR.asn1.x509.NoticeReference.superclass.constructor.call(this, d);\n      var a = KJUR.asn1.DERSequence, c = KJUR.asn1.DERInteger, b = KJUR.asn1.x509.DisplayText;\n      this.params = null;\n      this.tohex = function() {\n        var f = [];\n        if (this.params.org !== void 0) {\n          f.push(new b(this.params.org));\n        }\n        if (this.params.noticenum !== void 0) {\n          var h = [];\n          var e2 = this.params.noticenum;\n          for (var j = 0; j < e2.length; j++) {\n            h.push(new c(e2[j]));\n          }\n          f.push(new a({ array: h }));\n        }\n        if (f.length == 0) {\n          throw new Error(\"parameter is empty\");\n        }\n        var g = new a({ array: f });\n        return g.tohex();\n      };\n      this.getEncodedHex = function() {\n        return this.tohex();\n      };\n      if (d !== void 0) {\n        this.params = d;\n      }\n    };\n    extendClass(KJUR.asn1.x509.NoticeReference, KJUR.asn1.ASN1Object);\n    KJUR.asn1.x509.DisplayText = function(a) {\n      KJUR.asn1.x509.DisplayText.superclass.constructor.call(this, a);\n      this.hT = \"0c\";\n      if (a !== void 0) {\n        if (a.type === \"ia5\") {\n          this.hT = \"16\";\n        } else {\n          if (a.type === \"vis\") {\n            this.hT = \"1a\";\n          } else {\n            if (a.type === \"bmp\") {\n              this.hT = \"1e\";\n            }\n          }\n        }\n      }\n    };\n    extendClass(KJUR.asn1.x509.DisplayText, KJUR.asn1.DERAbstractString);\n    KJUR.asn1.x509.PolicyMappings = function(e2) {\n      KJUR.asn1.x509.PolicyMappings.superclass.constructor.call(this, e2);\n      var c = KJUR, b = c.asn1, d = b.x509, a = b.ASN1Util.newObject;\n      this.params = null;\n      this.getExtnValueHex = function() {\n        var j = this.params;\n        var f = [];\n        for (var g = 0; g < j.array.length; g++) {\n          var h = j.array[g];\n          f.push({ seq: [{ oid: h[0] }, { oid: h[1] }] });\n        }\n        this.asn1ExtnValue = a({ seq: f });\n        return this.asn1ExtnValue.tohex();\n      };\n      this.oid = \"2.5.29.33\";\n      if (e2 !== void 0) {\n        this.params = e2;\n      }\n    };\n    extendClass(KJUR.asn1.x509.PolicyMappings, KJUR.asn1.x509.Extension);\n    KJUR.asn1.x509.PolicyConstraints = function(e2) {\n      KJUR.asn1.x509.PolicyConstraints.superclass.constructor.call(this, e2);\n      var c = KJUR, b = c.asn1, d = b.x509, a = b.ASN1Util.newObject;\n      this.params = null;\n      this.getExtnValueHex = function() {\n        var g = this.params;\n        var f = [];\n        if (g.reqexp != void 0) {\n          f.push({ tag: { tagi: \"80\", obj: { \"int\": g.reqexp } } });\n        }\n        if (g.inhibit != void 0) {\n          f.push({ tag: { tagi: \"81\", obj: { \"int\": g.inhibit } } });\n        }\n        this.asn1ExtnValue = a({ seq: f });\n        return this.asn1ExtnValue.tohex();\n      };\n      this.oid = \"2.5.29.36\";\n      if (e2 !== void 0) {\n        this.params = e2;\n      }\n    };\n    extendClass(KJUR.asn1.x509.PolicyConstraints, KJUR.asn1.x509.Extension);\n    KJUR.asn1.x509.InhibitAnyPolicy = function(e2) {\n      KJUR.asn1.x509.InhibitAnyPolicy.superclass.constructor.call(this, e2);\n      var c = KJUR, b = c.asn1, d = b.x509, a = b.ASN1Util.newObject;\n      this.params = null;\n      this.getExtnValueHex = function() {\n        this.asn1ExtnValue = a({ \"int\": this.params.skip });\n        return this.asn1ExtnValue.tohex();\n      };\n      this.oid = \"2.5.29.54\";\n      if (e2 !== void 0) {\n        this.params = e2;\n      }\n    };\n    extendClass(KJUR.asn1.x509.InhibitAnyPolicy, KJUR.asn1.x509.Extension);\n    KJUR.asn1.x509.NameConstraints = function(f) {\n      KJUR.asn1.x509.NameConstraints.superclass.constructor.call(this, f);\n      var c = KJUR, b = c.asn1, e2 = b.x509, a = b.ASN1Util.newObject, d = e2.GeneralSubtree;\n      this.params = null;\n      this.getExtnValueHex = function() {\n        var l = this.params;\n        var g = [];\n        if (l.permit != void 0 && l.permit.length != void 0) {\n          var k = [];\n          for (var h = 0; h < l.permit.length; h++) {\n            k.push(new d(l.permit[h]));\n          }\n          g.push({ tag: { tagi: \"a0\", obj: { seq: k } } });\n        }\n        if (l.exclude != void 0 && l.exclude.length != void 0) {\n          var j = [];\n          for (var h = 0; h < l.exclude.length; h++) {\n            j.push(new d(l.exclude[h]));\n          }\n          g.push({ tag: { tagi: \"a1\", obj: { seq: j } } });\n        }\n        this.asn1ExtnValue = a({ seq: g });\n        return this.asn1ExtnValue.tohex();\n      };\n      this.oid = \"2.5.29.30\";\n      if (f !== void 0) {\n        this.params = f;\n      }\n    };\n    extendClass(KJUR.asn1.x509.NameConstraints, KJUR.asn1.x509.Extension);\n    KJUR.asn1.x509.GeneralSubtree = function(e2) {\n      KJUR.asn1.x509.GeneralSubtree.superclass.constructor.call(this);\n      var b = KJUR.asn1, d = b.x509, c = d.GeneralName, a = b.ASN1Util.newObject;\n      this.params = null;\n      this.setByParam = function(f) {\n        this.params = f;\n      };\n      this.tohex = function() {\n        var h = this.params;\n        var f = [new c(h)];\n        if (h.min != void 0) {\n          f.push({ tag: { tagi: \"80\", obj: { \"int\": h.min } } });\n        }\n        if (h.max != void 0) {\n          f.push({ tag: { tagi: \"81\", obj: { \"int\": h.max } } });\n        }\n        var g = a({ seq: f });\n        return g.tohex();\n      };\n      this.getEncodedHex = function() {\n        return this.tohex();\n      };\n      if (e2 !== void 0) {\n        this.setByParam(e2);\n      }\n    };\n    extendClass(KJUR.asn1.x509.GeneralSubtree, KJUR.asn1.ASN1Object);\n    KJUR.asn1.x509.ExtKeyUsage = function(c) {\n      KJUR.asn1.x509.ExtKeyUsage.superclass.constructor.call(this, c);\n      var b = KJUR, a = b.asn1;\n      this.setPurposeArray = function(d) {\n        this.asn1ExtnValue = new a.DERSequence();\n        for (var e2 = 0; e2 < d.length; e2++) {\n          var f = new a.DERObjectIdentifier(d[e2]);\n          this.asn1ExtnValue.appendASN1Object(f);\n        }\n      };\n      this.getExtnValueHex = function() {\n        return this.asn1ExtnValue.tohex();\n      };\n      this.oid = \"2.5.29.37\";\n      if (c !== void 0) {\n        if (c.array !== void 0) {\n          this.setPurposeArray(c.array);\n        }\n      }\n    };\n    extendClass(KJUR.asn1.x509.ExtKeyUsage, KJUR.asn1.x509.Extension);\n    KJUR.asn1.x509.AuthorityKeyIdentifier = function(f) {\n      KJUR.asn1.x509.AuthorityKeyIdentifier.superclass.constructor.call(this, f);\n      var b = KJUR, a = b.asn1, d = a.DERTaggedObject, e2 = a.x509.GeneralNames, c = b.crypto.Util.isKey;\n      this.asn1KID = null;\n      this.asn1CertIssuer = null;\n      this.asn1CertSN = null;\n      this.getExtnValueHex = function() {\n        var h = new Array();\n        if (this.asn1KID) {\n          h.push(new d({ explicit: false, tag: \"80\", obj: this.asn1KID }));\n        }\n        if (this.asn1CertIssuer) {\n          h.push(new d({ explicit: false, tag: \"a1\", obj: new e2([{ dn: this.asn1CertIssuer }]) }));\n        }\n        if (this.asn1CertSN) {\n          h.push(new d({ explicit: false, tag: \"82\", obj: this.asn1CertSN }));\n        }\n        var g = new a.DERSequence({ array: h });\n        this.asn1ExtnValue = g;\n        return this.asn1ExtnValue.tohex();\n      };\n      this.setKIDByParam = function(i) {\n        if (i.str !== void 0 || i.hex !== void 0) {\n          this.asn1KID = new KJUR.asn1.DEROctetString(i);\n        } else {\n          if (typeof i === \"object\" && KJUR.crypto.Util.isKey(i) || typeof i === \"string\" && i.indexOf(\"BEGIN \") != -1) {\n            var h = i;\n            if (typeof i === \"string\") {\n              h = KEYUTIL.getKey(i);\n            }\n            var g = KEYUTIL.getKeyID(h);\n            this.asn1KID = new KJUR.asn1.DEROctetString({ hex: g });\n          }\n        }\n      };\n      this.setCertIssuerByParam = function(g) {\n        if (g.str !== void 0 || g.ldapstr !== void 0 || g.hex !== void 0 || g.certsubject !== void 0 || g.certissuer !== void 0) {\n          this.asn1CertIssuer = new KJUR.asn1.x509.X500Name(g);\n        } else {\n          if (typeof g === \"string\" && g.indexOf(\"BEGIN \") != -1 && g.indexOf(\"CERTIFICATE\") != -1) {\n            this.asn1CertIssuer = new KJUR.asn1.x509.X500Name({ certissuer: g });\n          }\n        }\n      };\n      this.setCertSNByParam = function(i) {\n        if (i.str !== void 0 || i.bigint !== void 0 || i.hex !== void 0) {\n          this.asn1CertSN = new KJUR.asn1.DERInteger(i);\n        } else {\n          if (typeof i === \"string\" && i.indexOf(\"BEGIN \") != -1 && i.indexOf(\"CERTIFICATE\")) {\n            var g = new X509();\n            g.readCertPEM(i);\n            var h = g.getSerialNumberHex();\n            this.asn1CertSN = new KJUR.asn1.DERInteger({ hex: h });\n          }\n        }\n      };\n      this.oid = \"2.5.29.35\";\n      if (f !== void 0) {\n        if (f.kid !== void 0) {\n          this.setKIDByParam(f.kid);\n        }\n        if (f.issuer !== void 0) {\n          this.setCertIssuerByParam(f.issuer);\n        }\n        if (f.sn !== void 0) {\n          this.setCertSNByParam(f.sn);\n        }\n        if (f.issuersn !== void 0 && typeof f.issuersn === \"string\" && f.issuersn.indexOf(\"BEGIN \") != -1 && f.issuersn.indexOf(\"CERTIFICATE\")) {\n          this.setCertSNByParam(f.issuersn);\n          this.setCertIssuerByParam(f.issuersn);\n        }\n      }\n    };\n    extendClass(KJUR.asn1.x509.AuthorityKeyIdentifier, KJUR.asn1.x509.Extension);\n    KJUR.asn1.x509.SubjectKeyIdentifier = function(d) {\n      KJUR.asn1.x509.SubjectKeyIdentifier.superclass.constructor.call(this, d);\n      var b = KJUR, a = b.asn1, c = a.DEROctetString;\n      this.asn1KID = null;\n      this.getExtnValueHex = function() {\n        this.asn1ExtnValue = this.asn1KID;\n        return this.asn1ExtnValue.tohex();\n      };\n      this.setKIDByParam = function(g) {\n        if (g.str !== void 0 || g.hex !== void 0) {\n          this.asn1KID = new c(g);\n        } else {\n          if (typeof g === \"object\" && KJUR.crypto.Util.isKey(g) || typeof g === \"string\" && g.indexOf(\"BEGIN\") != -1) {\n            var f = g;\n            if (typeof g === \"string\") {\n              f = KEYUTIL.getKey(g);\n            }\n            var e2 = KEYUTIL.getKeyID(f);\n            this.asn1KID = new KJUR.asn1.DEROctetString({ hex: e2 });\n          }\n        }\n      };\n      this.oid = \"2.5.29.14\";\n      if (d !== void 0) {\n        if (d.kid !== void 0) {\n          this.setKIDByParam(d.kid);\n        }\n      }\n    };\n    extendClass(KJUR.asn1.x509.SubjectKeyIdentifier, KJUR.asn1.x509.Extension);\n    KJUR.asn1.x509.AuthorityInfoAccess = function(a) {\n      KJUR.asn1.x509.AuthorityInfoAccess.superclass.constructor.call(this, a);\n      this.setAccessDescriptionArray = function(k) {\n        var d = new Array(), b = KJUR, g = b.asn1, c = g.DERSequence, j = g.DERObjectIdentifier, l = g.x509.GeneralName;\n        for (var f = 0; f < k.length; f++) {\n          var e2;\n          var h = k[f];\n          if (h.ocsp !== void 0) {\n            e2 = new c({ array: [new j({ oid: \"1.3.6.1.5.5.7.48.1\" }), new l({ uri: h.ocsp })] });\n          } else {\n            if (h.caissuer !== void 0) {\n              e2 = new c({ array: [new j({ oid: \"1.3.6.1.5.5.7.48.2\" }), new l({ uri: h.caissuer })] });\n            } else {\n              throw new Error(\"unknown AccessMethod parameter: \" + JSON.stringify(h));\n            }\n          }\n          d.push(e2);\n        }\n        this.asn1ExtnValue = new c({ array: d });\n      };\n      this.getExtnValueHex = function() {\n        return this.asn1ExtnValue.tohex();\n      };\n      this.oid = \"1.3.6.1.5.5.7.1.1\";\n      if (a !== void 0) {\n        if (a.array !== void 0) {\n          this.setAccessDescriptionArray(a.array);\n        }\n      }\n    };\n    extendClass(KJUR.asn1.x509.AuthorityInfoAccess, KJUR.asn1.x509.Extension);\n    KJUR.asn1.x509.SubjectAltName = function(a) {\n      KJUR.asn1.x509.SubjectAltName.superclass.constructor.call(this, a);\n      this.setNameArray = function(b) {\n        this.asn1ExtnValue = new KJUR.asn1.x509.GeneralNames(b);\n      };\n      this.getExtnValueHex = function() {\n        return this.asn1ExtnValue.tohex();\n      };\n      this.oid = \"2.5.29.17\";\n      if (a !== void 0) {\n        if (a.array !== void 0) {\n          this.setNameArray(a.array);\n        }\n      }\n    };\n    extendClass(KJUR.asn1.x509.SubjectAltName, KJUR.asn1.x509.Extension);\n    KJUR.asn1.x509.IssuerAltName = function(a) {\n      KJUR.asn1.x509.IssuerAltName.superclass.constructor.call(this, a);\n      this.setNameArray = function(b) {\n        this.asn1ExtnValue = new KJUR.asn1.x509.GeneralNames(b);\n      };\n      this.getExtnValueHex = function() {\n        return this.asn1ExtnValue.tohex();\n      };\n      this.oid = \"2.5.29.18\";\n      if (a !== void 0) {\n        if (a.array !== void 0) {\n          this.setNameArray(a.array);\n        }\n      }\n    };\n    extendClass(KJUR.asn1.x509.IssuerAltName, KJUR.asn1.x509.Extension);\n    KJUR.asn1.x509.SubjectDirectoryAttributes = function(e2) {\n      KJUR.asn1.x509.SubjectDirectoryAttributes.superclass.constructor.call(this, e2);\n      var c = KJUR.asn1, a = c.DERSequence, b = c.ASN1Util.newObject, d = c.x509.OID.name2oid;\n      this.params = null;\n      this.getExtnValueHex = function() {\n        var f = [];\n        for (var j = 0; j < this.params.array.length; j++) {\n          var k = this.params.array[j];\n          var h = { seq: [{ oid: \"1.2.3.4\" }, { set: [{ utf8str: \"DE\" }] }] };\n          if (k.attr == \"dateOfBirth\") {\n            h.seq[0].oid = d(k.attr);\n            h.seq[1].set[0] = { gentime: k.str };\n          } else {\n            if (k.attr == \"placeOfBirth\") {\n              h.seq[0].oid = d(k.attr);\n              h.seq[1].set[0] = { utf8str: k.str };\n            } else {\n              if (k.attr == \"gender\") {\n                h.seq[0].oid = d(k.attr);\n                h.seq[1].set[0] = { prnstr: k.str };\n              } else {\n                if (k.attr == \"countryOfCitizenship\") {\n                  h.seq[0].oid = d(k.attr);\n                  h.seq[1].set[0] = { prnstr: k.str };\n                } else {\n                  if (k.attr == \"countryOfResidence\") {\n                    h.seq[0].oid = d(k.attr);\n                    h.seq[1].set[0] = { prnstr: k.str };\n                  } else {\n                    throw new Error(\"unsupported attribute: \" + k.attr);\n                  }\n                }\n              }\n            }\n          }\n          f.push(new b(h));\n        }\n        var g = new a({ array: f });\n        this.asn1ExtnValue = g;\n        return this.asn1ExtnValue.tohex();\n      };\n      this.oid = \"2.5.29.9\";\n      if (e2 !== void 0) {\n        this.params = e2;\n      }\n    };\n    extendClass(KJUR.asn1.x509.SubjectDirectoryAttributes, KJUR.asn1.x509.Extension);\n    KJUR.asn1.x509.PrivateExtension = function(f) {\n      KJUR.asn1.x509.PrivateExtension.superclass.constructor.call(this, f);\n      var c = KJUR, e2 = c.lang.String.isHex, b = c.asn1, d = b.x509.OID.name2oid, a = b.ASN1Util.newObject;\n      this.params = null;\n      this.setByParam = function(g) {\n        this.oid = d(g.extname);\n        this.params = g;\n      };\n      this.getExtnValueHex = function() {\n        if (this.params.extname == void 0 || this.params.extn == void 0) {\n          throw new Error(\"extname or extnhex not specified\");\n        }\n        var h = this.params.extn;\n        if (typeof h == \"string\" && e2(h)) {\n          return h;\n        } else {\n          if (typeof h == \"object\") {\n            try {\n              return a(h).tohex();\n            } catch (g) {\n            }\n          }\n        }\n        throw new Error(\"unsupported extn value\");\n      };\n      if (f != void 0) {\n        this.setByParam(f);\n      }\n    };\n    extendClass(KJUR.asn1.x509.PrivateExtension, KJUR.asn1.x509.Extension);\n    KJUR.asn1.x509.CRL = function(g) {\n      KJUR.asn1.x509.CRL.superclass.constructor.call(this);\n      var c = KJUR, b = c.asn1, a = b.DERSequence, e2 = b.DERBitString, f = b.x509, d = f.AlgorithmIdentifier, h = f.TBSCertList;\n      this.params = void 0;\n      this.setByParam = function(i) {\n        this.params = i;\n      };\n      this.sign = function() {\n        var j = new h(this.params).tohex();\n        var k = new KJUR.crypto.Signature({ alg: this.params.sigalg });\n        k.init(this.params.cakey);\n        k.updateHex(j);\n        var i = k.sign();\n        this.params.sighex = i;\n      };\n      this.getPEM = function() {\n        return hextopem(this.tohex(), \"X509 CRL\");\n      };\n      this.tohex = function() {\n        var k = this.params;\n        if (k.tbsobj == void 0) {\n          k.tbsobj = new h(k);\n        }\n        if (k.sighex == void 0 && k.cakey != void 0) {\n          this.sign();\n        }\n        if (k.sighex == void 0) {\n          throw new Error(\"sighex or cakey parameter not defined\");\n        }\n        var i = [];\n        i.push(k.tbsobj);\n        i.push(new d({ name: k.sigalg }));\n        i.push(new e2({ hex: \"00\" + k.sighex }));\n        var j = new a({ array: i });\n        return j.tohex();\n      };\n      this.getEncodedHex = function() {\n        return this.tohex();\n      };\n      if (g != void 0) {\n        this.params = g;\n      }\n    };\n    extendClass(KJUR.asn1.x509.CRL, KJUR.asn1.ASN1Object);\n    KJUR.asn1.x509.TBSCertList = function(f) {\n      KJUR.asn1.x509.TBSCertList.superclass.constructor.call(this);\n      var b = KJUR, i = b.asn1, h = i.DERInteger, g = i.DERSequence, c = i.DERTaggedObject, k = i.DERObjectIdentifier, d = i.x509, l = d.AlgorithmIdentifier, e2 = d.Time, j = d.Extensions, a = d.X500Name;\n      this.params = null;\n      this.setByParam = function(m) {\n        this.params = m;\n      };\n      this.getRevCertSequence = function() {\n        var m = [];\n        var n2 = this.params.revcert;\n        for (var o2 = 0; o2 < n2.length; o2++) {\n          var p = [new h(n2[o2].sn), new e2(n2[o2].date)];\n          if (n2[o2].ext != void 0) {\n            p.push(new j(n2[o2].ext));\n          }\n          m.push(new g({ array: p }));\n        }\n        return new g({ array: m });\n      };\n      this.tohex = function() {\n        var n2 = [];\n        var r2 = this.params;\n        if (r2.version != void 0) {\n          var m = r2.version - 1;\n          var p = new h({ \"int\": m });\n          n2.push(p);\n        }\n        n2.push(new l({ name: r2.sigalg }));\n        n2.push(new a(r2.issuer));\n        n2.push(new e2(r2.thisupdate));\n        if (r2.nextupdate != void 0) {\n          n2.push(new e2(r2.nextupdate));\n        }\n        if (r2.revcert != void 0) {\n          n2.push(this.getRevCertSequence());\n        }\n        if (r2.ext != void 0) {\n          var q = new j(r2.ext);\n          n2.push(new c({ tag: \"a0\", explicit: true, obj: q }));\n        }\n        var o2 = new g({ array: n2 });\n        return o2.tohex();\n      };\n      this.getEncodedHex = function() {\n        return this.tohex();\n      };\n      if (f !== void 0) {\n        this.setByParam(f);\n      }\n    };\n    extendClass(KJUR.asn1.x509.TBSCertList, KJUR.asn1.ASN1Object);\n    KJUR.asn1.x509.CRLEntry = function(e2) {\n      KJUR.asn1.x509.CRLEntry.superclass.constructor.call(this);\n      var d = null, c = null, b = KJUR, a = b.asn1;\n      this.setCertSerial = function(f) {\n        this.sn = new a.DERInteger(f);\n      };\n      this.setRevocationDate = function(f) {\n        this.time = new a.x509.Time(f);\n      };\n      this.tohex = function() {\n        var f = new a.DERSequence({ array: [this.sn, this.time] });\n        this.TLV = f.tohex();\n        return this.TLV;\n      };\n      this.getEncodedHex = function() {\n        return this.tohex();\n      };\n      if (e2 !== void 0) {\n        if (e2.time !== void 0) {\n          this.setRevocationDate(e2.time);\n        }\n        if (e2.sn !== void 0) {\n          this.setCertSerial(e2.sn);\n        }\n      }\n    };\n    extendClass(KJUR.asn1.x509.CRLEntry, KJUR.asn1.ASN1Object);\n    KJUR.asn1.x509.CRLNumber = function(a) {\n      KJUR.asn1.x509.CRLNumber.superclass.constructor.call(this, a);\n      this.params = void 0;\n      this.getExtnValueHex = function() {\n        this.asn1ExtnValue = new KJUR.asn1.DERInteger(this.params.num);\n        return this.asn1ExtnValue.tohex();\n      };\n      this.oid = \"2.5.29.20\";\n      if (a != void 0) {\n        this.params = a;\n      }\n    };\n    extendClass(KJUR.asn1.x509.CRLNumber, KJUR.asn1.x509.Extension);\n    KJUR.asn1.x509.CRLReason = function(a) {\n      KJUR.asn1.x509.CRLReason.superclass.constructor.call(this, a);\n      this.params = void 0;\n      this.getExtnValueHex = function() {\n        this.asn1ExtnValue = new KJUR.asn1.DEREnumerated(this.params.code);\n        return this.asn1ExtnValue.tohex();\n      };\n      this.oid = \"2.5.29.21\";\n      if (a != void 0) {\n        this.params = a;\n      }\n    };\n    extendClass(KJUR.asn1.x509.CRLReason, KJUR.asn1.x509.Extension);\n    KJUR.asn1.x509.OCSPNonce = function(a) {\n      KJUR.asn1.x509.OCSPNonce.superclass.constructor.call(this, a);\n      this.params = void 0;\n      this.getExtnValueHex = function() {\n        this.asn1ExtnValue = new KJUR.asn1.DEROctetString(this.params);\n        return this.asn1ExtnValue.tohex();\n      };\n      this.oid = \"1.3.6.1.5.5.7.48.1.2\";\n      if (a != void 0) {\n        this.params = a;\n      }\n    };\n    extendClass(KJUR.asn1.x509.OCSPNonce, KJUR.asn1.x509.Extension);\n    KJUR.asn1.x509.OCSPNoCheck = function(a) {\n      KJUR.asn1.x509.OCSPNoCheck.superclass.constructor.call(this, a);\n      this.params = void 0;\n      this.getExtnValueHex = function() {\n        this.asn1ExtnValue = new KJUR.asn1.DERNull();\n        return this.asn1ExtnValue.tohex();\n      };\n      this.oid = \"1.3.6.1.5.5.7.48.1.5\";\n      if (a != void 0) {\n        this.params = a;\n      }\n    };\n    extendClass(KJUR.asn1.x509.OCSPNoCheck, KJUR.asn1.x509.Extension);\n    KJUR.asn1.x509.AdobeTimeStamp = function(g) {\n      KJUR.asn1.x509.AdobeTimeStamp.superclass.constructor.call(this, g);\n      var c = KJUR, b = c.asn1, f = b.DERInteger, d = b.DERBoolean, a = b.DERSequence, e2 = b.x509.GeneralName;\n      this.params = null;\n      this.getExtnValueHex = function() {\n        var i = this.params;\n        var h = [new f(1)];\n        h.push(new e2({ uri: i.uri }));\n        if (i.reqauth != void 0) {\n          h.push(new d(i.reqauth));\n        }\n        this.asn1ExtnValue = new a({ array: h });\n        return this.asn1ExtnValue.tohex();\n      };\n      this.oid = \"1.2.840.113583.1.1.9.1\";\n      if (g !== void 0) {\n        this.setByParam(g);\n      }\n    };\n    extendClass(KJUR.asn1.x509.AdobeTimeStamp, KJUR.asn1.x509.Extension);\n    KJUR.asn1.x509.X500Name = function(f) {\n      KJUR.asn1.x509.X500Name.superclass.constructor.call(this);\n      this.asn1Array = [];\n      this.paramArray = [];\n      this.sRule = \"utf8\";\n      var c = KJUR, b = c.asn1, e2 = b.x509, d = e2.RDN, a = pemtohex;\n      this.setByString = function(g, l) {\n        if (l !== void 0) {\n          this.sRule = l;\n        }\n        var k = g.split(\"/\");\n        k.shift();\n        var j = [];\n        for (var m = 0; m < k.length; m++) {\n          if (k[m].match(/^[^=]+=.+$/)) {\n            j.push(k[m]);\n          } else {\n            var h = j.length - 1;\n            j[h] = j[h] + \"/\" + k[m];\n          }\n        }\n        for (var m = 0; m < j.length; m++) {\n          this.asn1Array.push(new d({ str: j[m], rule: this.sRule }));\n        }\n      };\n      this.setByLdapString = function(g, h) {\n        if (h !== void 0) {\n          this.sRule = h;\n        }\n        var i = e2.X500Name.ldapToCompat(g);\n        this.setByString(i, h);\n      };\n      this.setByObject = function(j, i) {\n        if (i !== void 0) {\n          this.sRule = i;\n        }\n        for (var g in j) {\n          if (j.hasOwnProperty(g)) {\n            var h = new d({ str: g + \"=\" + j[g], rule: this.sRule });\n            this.asn1Array ? this.asn1Array.push(h) : this.asn1Array = [h];\n          }\n        }\n      };\n      this.setByParam = function(h) {\n        if (h.rule !== void 0) {\n          this.sRule = h.rule;\n        }\n        if (h.array !== void 0) {\n          this.paramArray = h.array;\n        } else {\n          if (h.str !== void 0) {\n            this.setByString(h.str);\n          } else {\n            if (h.ldapstr !== void 0) {\n              this.setByLdapString(h.ldapstr);\n            } else {\n              if (h.hex !== void 0) {\n                this.hTLV = h.hex;\n              } else {\n                if (h.certissuer !== void 0) {\n                  var g = new X509();\n                  g.readCertPEM(h.certissuer);\n                  this.hTLV = g.getIssuerHex();\n                } else {\n                  if (h.certsubject !== void 0) {\n                    var g = new X509();\n                    g.readCertPEM(h.certsubject);\n                    this.hTLV = g.getSubjectHex();\n                  } else {\n                    if (typeof h === \"object\" && h.certsubject === void 0 && h.certissuer === void 0) {\n                      this.setByObject(h);\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      };\n      this.tohex = function() {\n        if (typeof this.hTLV == \"string\") {\n          return this.hTLV;\n        }\n        if (this.asn1Array.length == 0 && this.paramArray.length > 0) {\n          for (var g = 0; g < this.paramArray.length; g++) {\n            var k = { array: this.paramArray[g] };\n            if (this.sRule != \"utf8\") {\n              k.rule = this.sRule;\n            }\n            var h = new d(k);\n            this.asn1Array.push(h);\n          }\n        }\n        var j = new b.DERSequence({ array: this.asn1Array });\n        this.hTLV = j.tohex();\n        return this.hTLV;\n      };\n      this.getEncodedHex = function() {\n        return this.tohex();\n      };\n      if (f !== void 0) {\n        this.setByParam(f);\n      }\n    };\n    extendClass(KJUR.asn1.x509.X500Name, KJUR.asn1.ASN1Object);\n    KJUR.asn1.x509.X500Name.compatToLDAP = function(d) {\n      if (d.substr(0, 1) !== \"/\") {\n        throw \"malformed input\";\n      }\n      var b = \"\";\n      d = d.substr(1);\n      var c = d.split(\"/\");\n      c.reverse();\n      c = c.map(function(a) {\n        return a.replace(/,/, \"\\\\,\");\n      });\n      return c.join(\",\");\n    };\n    KJUR.asn1.x509.X500Name.onelineToLDAP = function(a) {\n      return KJUR.asn1.x509.X500Name.compatToLDAP(a);\n    };\n    KJUR.asn1.x509.X500Name.ldapToCompat = function(g) {\n      var c = g.split(\",\");\n      var e2 = false;\n      var b = [];\n      for (var f = 0; c.length > 0; f++) {\n        var h = c.shift();\n        if (e2 === true) {\n          var d = b.pop();\n          var j = (d + \",\" + h).replace(/\\\\,/g, \",\");\n          b.push(j);\n          e2 = false;\n        } else {\n          b.push(h);\n        }\n        if (h.substr(-1, 1) === \"\\\\\") {\n          e2 = true;\n        }\n      }\n      b = b.map(function(a) {\n        return a.replace(\"/\", \"\\\\/\");\n      });\n      b.reverse();\n      return \"/\" + b.join(\"/\");\n    };\n    KJUR.asn1.x509.X500Name.ldapToOneline = function(a) {\n      return KJUR.asn1.x509.X500Name.ldapToCompat(a);\n    };\n    KJUR.asn1.x509.RDN = function(b) {\n      KJUR.asn1.x509.RDN.superclass.constructor.call(this);\n      this.asn1Array = [];\n      this.paramArray = [];\n      this.sRule = \"utf8\";\n      var a = KJUR.asn1.x509.AttributeTypeAndValue;\n      this.setByParam = function(c) {\n        if (c.rule !== void 0) {\n          this.sRule = c.rule;\n        }\n        if (c.str !== void 0) {\n          this.addByMultiValuedString(c.str);\n        }\n        if (c.array !== void 0) {\n          this.paramArray = c.array;\n        }\n      };\n      this.addByString = function(c) {\n        this.asn1Array.push(new KJUR.asn1.x509.AttributeTypeAndValue({ str: c, rule: this.sRule }));\n      };\n      this.addByMultiValuedString = function(e2) {\n        var c = KJUR.asn1.x509.RDN.parseString(e2);\n        for (var d = 0; d < c.length; d++) {\n          this.addByString(c[d]);\n        }\n      };\n      this.tohex = function() {\n        if (this.asn1Array.length == 0 && this.paramArray.length > 0) {\n          for (var d = 0; d < this.paramArray.length; d++) {\n            var f = this.paramArray[d];\n            if (f.rule !== void 0 && this.sRule != \"utf8\") {\n              f.rule = this.sRule;\n            }\n            var c = new a(f);\n            this.asn1Array.push(c);\n          }\n        }\n        var e2 = new KJUR.asn1.DERSet({ array: this.asn1Array });\n        this.TLV = e2.tohex();\n        return this.TLV;\n      };\n      this.getEncodedHex = function() {\n        return this.tohex();\n      };\n      if (b !== void 0) {\n        this.setByParam(b);\n      }\n    };\n    extendClass(KJUR.asn1.x509.RDN, KJUR.asn1.ASN1Object);\n    KJUR.asn1.x509.RDN.parseString = function(m) {\n      var j = m.split(/\\+/);\n      var h = false;\n      var c = [];\n      for (var g = 0; j.length > 0; g++) {\n        var k = j.shift();\n        if (h === true) {\n          var f = c.pop();\n          var d = (f + \"+\" + k).replace(/\\\\\\+/g, \"+\");\n          c.push(d);\n          h = false;\n        } else {\n          c.push(k);\n        }\n        if (k.substr(-1, 1) === \"\\\\\") {\n          h = true;\n        }\n      }\n      var l = false;\n      var b = [];\n      for (var g = 0; c.length > 0; g++) {\n        var k = c.shift();\n        if (l === true) {\n          var e2 = b.pop();\n          if (k.match(/\"$/)) {\n            var d = (e2 + \"+\" + k).replace(/^([^=]+)=\"(.*)\"$/, \"$1=$2\");\n            b.push(d);\n            l = false;\n          } else {\n            b.push(e2 + \"+\" + k);\n          }\n        } else {\n          b.push(k);\n        }\n        if (k.match(/^[^=]+=\"/)) {\n          l = true;\n        }\n      }\n      return b;\n    };\n    KJUR.asn1.x509.AttributeTypeAndValue = function(c) {\n      KJUR.asn1.x509.AttributeTypeAndValue.superclass.constructor.call(this);\n      this.sRule = \"utf8\";\n      this.sType = null;\n      this.sValue = null;\n      this.dsType = null;\n      var a = KJUR, g = a.asn1, d = g.DERSequence, l = g.DERUTF8String, i = g.DERPrintableString, h = g.DERTeletexString, b = g.DERIA5String, e2 = g.DERVisibleString, k = g.DERBMPString, f = a.lang.String.isMail, j = a.lang.String.isPrintable;\n      this.setByParam = function(o2) {\n        if (o2.rule !== void 0) {\n          this.sRule = o2.rule;\n        }\n        if (o2.ds !== void 0) {\n          this.dsType = o2.ds;\n        }\n        if (o2.value === void 0 && o2.str !== void 0) {\n          var n2 = o2.str;\n          var m = n2.match(/^([^=]+)=(.+)$/);\n          if (m) {\n            this.sType = m[1];\n            this.sValue = m[2];\n          } else {\n            throw new Error(\"malformed attrTypeAndValueStr: \" + attrTypeAndValueStr);\n          }\n        } else {\n          this.sType = o2.type;\n          this.sValue = o2.value;\n        }\n      };\n      this.setByString = function(n2, o2) {\n        if (o2 !== void 0) {\n          this.sRule = o2;\n        }\n        var m = n2.match(/^([^=]+)=(.+)$/);\n        if (m) {\n          this.setByAttrTypeAndValueStr(m[1], m[2]);\n        } else {\n          throw new Error(\"malformed attrTypeAndValueStr: \" + attrTypeAndValueStr);\n        }\n      };\n      this._getDsType = function() {\n        var o2 = this.sType;\n        var n2 = this.sValue;\n        var m = this.sRule;\n        if (m === \"prn\") {\n          if (o2 == \"CN\" && f(n2)) {\n            return \"ia5\";\n          }\n          if (j(n2)) {\n            return \"prn\";\n          }\n          return \"utf8\";\n        } else {\n          if (m === \"utf8\") {\n            if (o2 == \"CN\" && f(n2)) {\n              return \"ia5\";\n            }\n            if (o2 == \"C\") {\n              return \"prn\";\n            }\n            return \"utf8\";\n          }\n        }\n        return \"utf8\";\n      };\n      this.setByAttrTypeAndValueStr = function(o2, n2, m) {\n        if (m !== void 0) {\n          this.sRule = m;\n        }\n        this.sType = o2;\n        this.sValue = n2;\n      };\n      this.getValueObj = function(n2, m) {\n        if (n2 == \"utf8\") {\n          return new l({ str: m });\n        }\n        if (n2 == \"prn\") {\n          return new i({ str: m });\n        }\n        if (n2 == \"tel\") {\n          return new h({ str: m });\n        }\n        if (n2 == \"ia5\") {\n          return new b({ str: m });\n        }\n        if (n2 == \"vis\") {\n          return new e2({ str: m });\n        }\n        if (n2 == \"bmp\") {\n          return new k({ str: m });\n        }\n        throw new Error(\"unsupported directory string type: type=\" + n2 + \" value=\" + m);\n      };\n      this.tohex = function() {\n        if (this.dsType == null) {\n          this.dsType = this._getDsType();\n        }\n        var n2 = KJUR.asn1.x509.OID.atype2obj(this.sType);\n        var m = this.getValueObj(this.dsType, this.sValue);\n        var p = new d({ array: [n2, m] });\n        this.TLV = p.tohex();\n        return this.TLV;\n      };\n      this.getEncodedHex = function() {\n        return this.tohex();\n      };\n      if (c !== void 0) {\n        this.setByParam(c);\n      }\n    };\n    extendClass(KJUR.asn1.x509.AttributeTypeAndValue, KJUR.asn1.ASN1Object);\n    KJUR.asn1.x509.SubjectPublicKeyInfo = function(f) {\n      KJUR.asn1.x509.SubjectPublicKeyInfo.superclass.constructor.call(this);\n      var l = null, k = null, a = KJUR, j = a.asn1, i = j.DERInteger, b = j.DERBitString, m = j.DERObjectIdentifier, e2 = j.DERSequence, h = j.ASN1Util.newObject, d = j.x509, o2 = d.AlgorithmIdentifier, g = a.crypto, n2 = g.ECDSA, c = g.DSA;\n      this.getASN1Object = function() {\n        if (this.asn1AlgId == null || this.asn1SubjPKey == null) {\n          throw \"algId and/or subjPubKey not set\";\n        }\n        var p = new e2({ array: [this.asn1AlgId, this.asn1SubjPKey] });\n        return p;\n      };\n      this.tohex = function() {\n        var p = this.getASN1Object();\n        this.hTLV = p.tohex();\n        return this.hTLV;\n      };\n      this.getEncodedHex = function() {\n        return this.tohex();\n      };\n      this.setPubKey = function(q) {\n        try {\n          if (q instanceof RSAKey) {\n            var u = h({ seq: [{ \"int\": { bigint: q.n } }, { \"int\": { \"int\": q.e } }] });\n            var s = u.tohex();\n            this.asn1AlgId = new o2({ name: \"rsaEncryption\" });\n            this.asn1SubjPKey = new b({ hex: \"00\" + s });\n          }\n        } catch (p) {\n        }\n        try {\n          if (q instanceof KJUR.crypto.ECDSA) {\n            var r2 = new m({ name: q.curveName });\n            this.asn1AlgId = new o2({ name: \"ecPublicKey\", asn1params: r2 });\n            this.asn1SubjPKey = new b({ hex: \"00\" + q.pubKeyHex });\n          }\n        } catch (p) {\n        }\n        try {\n          if (q instanceof KJUR.crypto.DSA) {\n            var r2 = new h({ seq: [{ \"int\": { bigint: q.p } }, { \"int\": { bigint: q.q } }, { \"int\": { bigint: q.g } }] });\n            this.asn1AlgId = new o2({ name: \"dsa\", asn1params: r2 });\n            var t3 = new i({ bigint: q.y });\n            this.asn1SubjPKey = new b({ hex: \"00\" + t3.tohex() });\n          }\n        } catch (p) {\n        }\n      };\n      if (f !== void 0) {\n        this.setPubKey(f);\n      }\n    };\n    extendClass(KJUR.asn1.x509.SubjectPublicKeyInfo, KJUR.asn1.ASN1Object);\n    KJUR.asn1.x509.Time = function(f) {\n      KJUR.asn1.x509.Time.superclass.constructor.call(this);\n      var e2 = null, a = null, d = KJUR, c = d.asn1, b = c.DERUTCTime, g = c.DERGeneralizedTime;\n      this.params = null;\n      this.type = null;\n      this.setTimeParams = function(h) {\n        this.timeParams = h;\n      };\n      this.setByParam = function(h) {\n        this.params = h;\n      };\n      this.getType = function(h) {\n        if (h.match(/^[0-9]{12}Z$/)) {\n          return \"utc\";\n        }\n        if (h.match(/^[0-9]{14}Z$/)) {\n          return \"gen\";\n        }\n        if (h.match(/^[0-9]{12}\\.[0-9]+Z$/)) {\n          return \"utc\";\n        }\n        if (h.match(/^[0-9]{14}\\.[0-9]+Z$/)) {\n          return \"gen\";\n        }\n        return null;\n      };\n      this.tohex = function() {\n        var i = this.params;\n        var h = null;\n        if (typeof i == \"string\") {\n          i = { str: i };\n        }\n        if (i != null && i.str && (i.type == null || i.type == void 0)) {\n          i.type = this.getType(i.str);\n        }\n        if (i != null && i.str) {\n          if (i.type == \"utc\") {\n            h = new b(i.str);\n          }\n          if (i.type == \"gen\") {\n            h = new g(i.str);\n          }\n        } else {\n          if (this.type == \"gen\") {\n            h = new g();\n          } else {\n            h = new b();\n          }\n        }\n        if (h == null) {\n          throw new Error(\"wrong setting for Time\");\n        }\n        this.TLV = h.tohex();\n        return this.TLV;\n      };\n      this.getEncodedHex = function() {\n        return this.tohex();\n      };\n      if (f != void 0) {\n        this.setByParam(f);\n      }\n    };\n    KJUR.asn1.x509.Time_bak = function(f) {\n      KJUR.asn1.x509.Time_bak.superclass.constructor.call(this);\n      var e2 = null, a = null, d = KJUR, c = d.asn1, b = c.DERUTCTime, g = c.DERGeneralizedTime;\n      this.setTimeParams = function(h) {\n        this.timeParams = h;\n      };\n      this.tohex = function() {\n        var h = null;\n        if (this.timeParams != null) {\n          if (this.type == \"utc\") {\n            h = new b(this.timeParams);\n          } else {\n            h = new g(this.timeParams);\n          }\n        } else {\n          if (this.type == \"utc\") {\n            h = new b();\n          } else {\n            h = new g();\n          }\n        }\n        this.TLV = h.tohex();\n        return this.TLV;\n      };\n      this.getEncodedHex = function() {\n        return this.tohex();\n      };\n      this.type = \"utc\";\n      if (f !== void 0) {\n        if (f.type !== void 0) {\n          this.type = f.type;\n        } else {\n          if (f.str !== void 0) {\n            if (f.str.match(/^[0-9]{12}Z$/)) {\n              this.type = \"utc\";\n            }\n            if (f.str.match(/^[0-9]{14}Z$/)) {\n              this.type = \"gen\";\n            }\n          }\n        }\n        this.timeParams = f;\n      }\n    };\n    extendClass(KJUR.asn1.x509.Time, KJUR.asn1.ASN1Object);\n    KJUR.asn1.x509.AlgorithmIdentifier = function(e2) {\n      KJUR.asn1.x509.AlgorithmIdentifier.superclass.constructor.call(this);\n      this.nameAlg = null;\n      this.asn1Alg = null;\n      this.asn1Params = null;\n      this.paramEmpty = false;\n      var b = KJUR, a = b.asn1, c = a.x509.AlgorithmIdentifier.PSSNAME2ASN1TLV;\n      this.tohex = function() {\n        if (this.nameAlg === null && this.asn1Alg === null) {\n          throw new Error(\"algorithm not specified\");\n        }\n        if (this.nameAlg !== null) {\n          var f = null;\n          for (var h in c) {\n            if (h === this.nameAlg) {\n              f = c[h];\n            }\n          }\n          if (f !== null) {\n            this.hTLV = f;\n            return this.hTLV;\n          }\n        }\n        if (this.nameAlg !== null && this.asn1Alg === null) {\n          this.asn1Alg = a.x509.OID.name2obj(this.nameAlg);\n        }\n        var g = [this.asn1Alg];\n        if (this.asn1Params !== null) {\n          g.push(this.asn1Params);\n        }\n        var i = new a.DERSequence({ array: g });\n        this.hTLV = i.tohex();\n        return this.hTLV;\n      };\n      this.getEncodedHex = function() {\n        return this.tohex();\n      };\n      if (e2 !== void 0) {\n        if (e2.name !== void 0) {\n          this.nameAlg = e2.name;\n        }\n        if (e2.asn1params !== void 0) {\n          this.asn1Params = e2.asn1params;\n        }\n        if (e2.paramempty !== void 0) {\n          this.paramEmpty = e2.paramempty;\n        }\n      }\n      if (this.asn1Params === null && this.paramEmpty === false && this.nameAlg !== null) {\n        if (this.nameAlg.name !== void 0) {\n          this.nameAlg = this.nameAlg.name;\n        }\n        var d = this.nameAlg.toLowerCase();\n        if (d.substr(-7, 7) !== \"withdsa\" && d.substr(-9, 9) !== \"withecdsa\") {\n          this.asn1Params = new a.DERNull();\n        }\n      }\n    };\n    extendClass(KJUR.asn1.x509.AlgorithmIdentifier, KJUR.asn1.ASN1Object);\n    KJUR.asn1.x509.AlgorithmIdentifier.PSSNAME2ASN1TLV = { SHAwithRSAandMGF1: \"300d06092a864886f70d01010a3000\", SHA256withRSAandMGF1: \"303d06092a864886f70d01010a3030a00d300b0609608648016503040201a11a301806092a864886f70d010108300b0609608648016503040201a203020120\", SHA384withRSAandMGF1: \"303d06092a864886f70d01010a3030a00d300b0609608648016503040202a11a301806092a864886f70d010108300b0609608648016503040202a203020130\", SHA512withRSAandMGF1: \"303d06092a864886f70d01010a3030a00d300b0609608648016503040203a11a301806092a864886f70d010108300b0609608648016503040203a203020140\" };\n    KJUR.asn1.x509.GeneralName = function(f) {\n      KJUR.asn1.x509.GeneralName.superclass.constructor.call(this);\n      var l = { rfc822: \"81\", dns: \"82\", dn: \"a4\", uri: \"86\", ip: \"87\", otherName: \"a0\" }, b = KJUR, h = b.asn1, d = h.x509, a = d.X500Name, g = d.OtherName, e2 = h.DERIA5String, i = h.DERPrintableString, k = h.DEROctetString, c = h.DERTaggedObject, m = h.ASN1Object, j = Error;\n      this.params = null;\n      this.setByParam = function(n2) {\n        this.params = n2;\n      };\n      this.tohex = function() {\n        var p = this.params;\n        var A, y, q;\n        var y = false;\n        if (p.other !== void 0) {\n          A = \"a0\", q = new g(p.other);\n        } else {\n          if (p.rfc822 !== void 0) {\n            A = \"81\";\n            q = new e2({ str: p.rfc822 });\n          } else {\n            if (p.dns !== void 0) {\n              A = \"82\";\n              q = new e2({ str: p.dns });\n            } else {\n              if (p.dn !== void 0) {\n                A = \"a4\";\n                y = true;\n                if (typeof p.dn === \"string\") {\n                  q = new a({ str: p.dn });\n                } else {\n                  if (p.dn instanceof KJUR.asn1.x509.X500Name) {\n                    q = p.dn;\n                  } else {\n                    q = new a(p.dn);\n                  }\n                }\n              } else {\n                if (p.ldapdn !== void 0) {\n                  A = \"a4\";\n                  y = true;\n                  q = new a({ ldapstr: p.ldapdn });\n                } else {\n                  if (p.certissuer !== void 0 || p.certsubj !== void 0) {\n                    A = \"a4\";\n                    y = true;\n                    var n2, o2;\n                    var z2 = null;\n                    if (p.certsubj !== void 0) {\n                      n2 = false;\n                      o2 = p.certsubj;\n                    } else {\n                      n2 = true;\n                      o2 = p.certissuer;\n                    }\n                    if (o2.match(/^[0-9A-Fa-f]+$/)) {\n                      z2 == o2;\n                    }\n                    if (o2.indexOf(\"-----BEGIN \") != -1) {\n                      z2 = pemtohex(o2);\n                    }\n                    if (z2 == null) {\n                      throw new Error(\"certsubj/certissuer not cert\");\n                    }\n                    var w = new X509();\n                    w.hex = z2;\n                    var s;\n                    if (n2) {\n                      s = w.getIssuerHex();\n                    } else {\n                      s = w.getSubjectHex();\n                    }\n                    q = new m();\n                    q.hTLV = s;\n                  } else {\n                    if (p.uri !== void 0) {\n                      A = \"86\";\n                      q = new e2({ str: p.uri });\n                    } else {\n                      if (p.ip !== void 0) {\n                        A = \"87\";\n                        var v;\n                        var t3 = p.ip;\n                        try {\n                          if (t3.match(/^[0-9a-f]+$/)) {\n                            var r2 = t3.length;\n                            if (r2 == 8 || r2 == 16 || r2 == 32 || r2 == 64) {\n                              v = t3;\n                            } else {\n                              throw \"err\";\n                            }\n                          } else {\n                            v = iptohex(t3);\n                          }\n                        } catch (u) {\n                          throw new j(\"malformed IP address: \" + p.ip + \":\" + u.message);\n                        }\n                        q = new k({ hex: v });\n                      } else {\n                        throw new j(\"improper params\");\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n        var B = new c({ tag: A, explicit: y, obj: q });\n        return B.tohex();\n      };\n      this.getEncodedHex = function() {\n        return this.tohex();\n      };\n      if (f !== void 0) {\n        this.setByParam(f);\n      }\n    };\n    extendClass(KJUR.asn1.x509.GeneralName, KJUR.asn1.ASN1Object);\n    KJUR.asn1.x509.GeneralNames = function(d) {\n      KJUR.asn1.x509.GeneralNames.superclass.constructor.call(this);\n      var a = null, c = KJUR, b = c.asn1;\n      this.setByParamArray = function(g) {\n        for (var e2 = 0; e2 < g.length; e2++) {\n          var f = new b.x509.GeneralName(g[e2]);\n          this.asn1Array.push(f);\n        }\n      };\n      this.tohex = function() {\n        var e2 = new b.DERSequence({ array: this.asn1Array });\n        return e2.tohex();\n      };\n      this.getEncodedHex = function() {\n        return this.tohex();\n      };\n      this.asn1Array = new Array();\n      if (typeof d != \"undefined\") {\n        this.setByParamArray(d);\n      }\n    };\n    extendClass(KJUR.asn1.x509.GeneralNames, KJUR.asn1.ASN1Object);\n    KJUR.asn1.x509.OtherName = function(g) {\n      KJUR.asn1.x509.OtherName.superclass.constructor.call(this);\n      var f = null, e2 = null, d = KJUR, c = d.asn1, h = c.DERObjectIdentifier, a = c.DERSequence, b = c.ASN1Util.newObject;\n      this.params = null;\n      this.setByParam = function(i) {\n        this.params = i;\n      };\n      this.tohex = function() {\n        var k = this.params;\n        if (k.oid == void 0 || k.value == void 0) {\n          throw new Error(\"oid or value not specified\");\n        }\n        var l = new h({ oid: k.oid });\n        var i = b({ tag: { tag: \"a0\", explicit: true, obj: k.value } });\n        var j = new a({ array: [l, i] });\n        return j.tohex();\n      };\n      this.getEncodedHex = function() {\n        return this.tohex();\n      };\n      if (g !== void 0) {\n        this.setByParam(g);\n      }\n    };\n    extendClass(KJUR.asn1.x509.OtherName, KJUR.asn1.ASN1Object);\n    KJUR.asn1.x509.OID = new function() {\n      var a = KJUR.asn1.DERObjectIdentifier;\n      this.name2oidList = { sha1: \"1.3.14.3.2.26\", sha256: \"2.16.840.1.101.3.4.2.1\", sha384: \"2.16.840.1.101.3.4.2.2\", sha512: \"2.16.840.1.101.3.4.2.3\", sha224: \"2.16.840.1.101.3.4.2.4\", md5: \"1.2.840.113549.2.5\", md2: \"1.3.14.7.2.2.1\", ripemd160: \"1.3.36.3.2.1\", MD2withRSA: \"1.2.840.113549.1.1.2\", MD4withRSA: \"1.2.840.113549.1.1.3\", MD5withRSA: \"1.2.840.113549.1.1.4\", SHA1withRSA: \"1.2.840.113549.1.1.5\", \"pkcs1-MGF\": \"1.2.840.113549.1.1.8\", rsaPSS: \"1.2.840.113549.1.1.10\", SHA224withRSA: \"1.2.840.113549.1.1.14\", SHA256withRSA: \"1.2.840.113549.1.1.11\", SHA384withRSA: \"1.2.840.113549.1.1.12\", SHA512withRSA: \"1.2.840.113549.1.1.13\", SHA1withECDSA: \"1.2.840.10045.4.1\", SHA224withECDSA: \"1.2.840.10045.4.3.1\", SHA256withECDSA: \"1.2.840.10045.4.3.2\", SHA384withECDSA: \"1.2.840.10045.4.3.3\", SHA512withECDSA: \"1.2.840.10045.4.3.4\", dsa: \"1.2.840.10040.4.1\", SHA1withDSA: \"1.2.840.10040.4.3\", SHA224withDSA: \"2.16.840.1.101.3.4.3.1\", SHA256withDSA: \"2.16.840.1.101.3.4.3.2\", rsaEncryption: \"1.2.840.113549.1.1.1\", commonName: \"2.5.4.3\", countryName: \"2.5.4.6\", localityName: \"2.5.4.7\", stateOrProvinceName: \"2.5.4.8\", streetAddress: \"2.5.4.9\", organizationName: \"2.5.4.10\", organizationalUnitName: \"2.5.4.11\", domainComponent: \"0.9.2342.19200300.100.1.25\", userId: \"0.9.2342.19200300.100.1.1\", surname: \"2.5.4.4\", givenName: \"2.5.4.42\", title: \"2.5.4.12\", distinguishedName: \"2.5.4.49\", emailAddress: \"1.2.840.113549.1.9.1\", description: \"2.5.4.13\", businessCategory: \"2.5.4.15\", postalCode: \"2.5.4.17\", uniqueIdentifier: \"2.5.4.45\", organizationIdentifier: \"2.5.4.97\", jurisdictionOfIncorporationL: \"1.3.6.1.4.1.311.60.2.1.1\", jurisdictionOfIncorporationSP: \"1.3.6.1.4.1.311.60.2.1.2\", jurisdictionOfIncorporationC: \"1.3.6.1.4.1.311.60.2.1.3\", subjectDirectoryAttributes: \"2.5.29.9\", subjectKeyIdentifier: \"2.5.29.14\", keyUsage: \"2.5.29.15\", subjectAltName: \"2.5.29.17\", issuerAltName: \"2.5.29.18\", basicConstraints: \"2.5.29.19\", cRLNumber: \"2.5.29.20\", cRLReason: \"2.5.29.21\", nameConstraints: \"2.5.29.30\", cRLDistributionPoints: \"2.5.29.31\", certificatePolicies: \"2.5.29.32\", anyPolicy: \"2.5.29.32.0\", policyMappings: \"2.5.29.33\", authorityKeyIdentifier: \"2.5.29.35\", policyConstraints: \"2.5.29.36\", extKeyUsage: \"2.5.29.37\", inhibitAnyPolicy: \"2.5.29.54\", authorityInfoAccess: \"1.3.6.1.5.5.7.1.1\", ocsp: \"1.3.6.1.5.5.7.48.1\", ocspBasic: \"1.3.6.1.5.5.7.48.1.1\", ocspNonce: \"1.3.6.1.5.5.7.48.1.2\", ocspNoCheck: \"1.3.6.1.5.5.7.48.1.5\", caIssuers: \"1.3.6.1.5.5.7.48.2\", anyExtendedKeyUsage: \"2.5.29.37.0\", serverAuth: \"1.3.6.1.5.5.7.3.1\", clientAuth: \"1.3.6.1.5.5.7.3.2\", codeSigning: \"1.3.6.1.5.5.7.3.3\", emailProtection: \"1.3.6.1.5.5.7.3.4\", timeStamping: \"1.3.6.1.5.5.7.3.8\", ocspSigning: \"1.3.6.1.5.5.7.3.9\", smtpUTF8Mailbox: \"1.3.6.1.5.5.7.8.9\", dateOfBirth: \"1.3.6.1.5.5.7.9.1\", placeOfBirth: \"1.3.6.1.5.5.7.9.2\", gender: \"1.3.6.1.5.5.7.9.3\", countryOfCitizenship: \"1.3.6.1.5.5.7.9.4\", countryOfResidence: \"1.3.6.1.5.5.7.9.5\", ecPublicKey: \"1.2.840.10045.2.1\", \"P-256\": \"1.2.840.10045.3.1.7\", secp256r1: \"1.2.840.10045.3.1.7\", secp256k1: \"1.3.132.0.10\", secp384r1: \"1.3.132.0.34\", secp521r1: \"1.3.132.0.35\", pkcs5PBES2: \"1.2.840.113549.1.5.13\", pkcs5PBKDF2: \"1.2.840.113549.1.5.12\", \"des-EDE3-CBC\": \"1.2.840.113549.3.7\", data: \"1.2.840.113549.1.7.1\", \"signed-data\": \"1.2.840.113549.1.7.2\", \"enveloped-data\": \"1.2.840.113549.1.7.3\", \"digested-data\": \"1.2.840.113549.1.7.5\", \"encrypted-data\": \"1.2.840.113549.1.7.6\", \"authenticated-data\": \"1.2.840.113549.1.9.16.1.2\", tstinfo: \"1.2.840.113549.1.9.16.1.4\", signingCertificate: \"1.2.840.113549.1.9.16.2.12\", timeStampToken: \"1.2.840.113549.1.9.16.2.14\", signaturePolicyIdentifier: \"1.2.840.113549.1.9.16.2.15\", etsArchiveTimeStamp: \"1.2.840.113549.1.9.16.2.27\", signingCertificateV2: \"1.2.840.113549.1.9.16.2.47\", etsArchiveTimeStampV2: \"1.2.840.113549.1.9.16.2.48\", extensionRequest: \"1.2.840.113549.1.9.14\", contentType: \"1.2.840.113549.1.9.3\", messageDigest: \"1.2.840.113549.1.9.4\", signingTime: \"1.2.840.113549.1.9.5\", counterSignature: \"1.2.840.113549.1.9.6\", archiveTimeStampV3: \"0.4.0.1733.2.4\", pdfRevocationInfoArchival: \"1.2.840.113583.1.1.8\", adobeTimeStamp: \"1.2.840.113583.1.1.9.1\" };\n      this.atype2oidList = { CN: \"2.5.4.3\", L: \"2.5.4.7\", ST: \"2.5.4.8\", O: \"2.5.4.10\", OU: \"2.5.4.11\", C: \"2.5.4.6\", STREET: \"2.5.4.9\", DC: \"0.9.2342.19200300.100.1.25\", UID: \"0.9.2342.19200300.100.1.1\", SN: \"2.5.4.4\", T: \"2.5.4.12\", DN: \"2.5.4.49\", E: \"1.2.840.113549.1.9.1\", description: \"2.5.4.13\", businessCategory: \"2.5.4.15\", postalCode: \"2.5.4.17\", serialNumber: \"2.5.4.5\", uniqueIdentifier: \"2.5.4.45\", organizationIdentifier: \"2.5.4.97\", jurisdictionOfIncorporationL: \"1.3.6.1.4.1.311.60.2.1.1\", jurisdictionOfIncorporationSP: \"1.3.6.1.4.1.311.60.2.1.2\", jurisdictionOfIncorporationC: \"1.3.6.1.4.1.311.60.2.1.3\" };\n      this.objCache = {};\n      this.name2obj = function(b) {\n        if (typeof this.objCache[b] != \"undefined\") {\n          return this.objCache[b];\n        }\n        if (typeof this.name2oidList[b] == \"undefined\") {\n          throw \"Name of ObjectIdentifier not defined: \" + b;\n        }\n        var c = this.name2oidList[b];\n        var d = new a({ oid: c });\n        this.objCache[b] = d;\n        return d;\n      };\n      this.atype2obj = function(b) {\n        if (this.objCache[b] !== void 0) {\n          return this.objCache[b];\n        }\n        var c;\n        if (b.match(/^\\d+\\.\\d+\\.[0-9.]+$/)) {\n          c = b;\n        } else {\n          if (this.atype2oidList[b] !== void 0) {\n            c = this.atype2oidList[b];\n          } else {\n            if (this.name2oidList[b] !== void 0) {\n              c = this.name2oidList[b];\n            } else {\n              throw new Error(\"AttributeType name undefined: \" + b);\n            }\n          }\n        }\n        var d = new a({ oid: c });\n        this.objCache[b] = d;\n        return d;\n      };\n      this.registerOIDs = function(b) {\n        if (!this.checkOIDs(b)) {\n          return;\n        }\n        for (var c in b) {\n          this.name2oidList[c] = b[c];\n        }\n      };\n      this.checkOIDs = function(b) {\n        try {\n          var d = Object.keys(b);\n          if (d.length == 0) {\n            return false;\n          }\n          d.map(function(g, e2, h) {\n            var f = this[g];\n            if (!f.match(/^[0-2]\\.[0-9.]+$/)) {\n              throw new Error(\"value is not OID\");\n            }\n          }, b);\n          return true;\n        } catch (c) {\n          return false;\n        }\n      };\n    }();\n    KJUR.asn1.x509.OID.oid2name = function(b) {\n      var c = KJUR.asn1.x509.OID.name2oidList;\n      for (var a in c) {\n        if (c[a] == b) {\n          return a;\n        }\n      }\n      return \"\";\n    };\n    KJUR.asn1.x509.OID.oid2atype = function(b) {\n      var c = KJUR.asn1.x509.OID.atype2oidList;\n      for (var a in c) {\n        if (c[a] == b) {\n          return a;\n        }\n      }\n      return b;\n    };\n    KJUR.asn1.x509.OID.name2oid = function(a) {\n      if (a.match(/^[0-9.]+$/)) {\n        return a;\n      }\n      var b = KJUR.asn1.x509.OID.name2oidList;\n      if (b[a] === void 0) {\n        return \"\";\n      }\n      return b[a];\n    };\n    KJUR.asn1.x509.X509Util = {};\n    KJUR.asn1.x509.X509Util.newCertPEM = function(e2) {\n      var d = KJUR.asn1.x509, b = d.TBSCertificate, a = d.Certificate;\n      var c = new a(e2);\n      return c.getPEM();\n    };\n    if (typeof KJUR == \"undefined\" || !KJUR) {\n      KJUR = {};\n    }\n    if (typeof KJUR.asn1 == \"undefined\" || !KJUR.asn1) {\n      KJUR.asn1 = {};\n    }\n    if (typeof KJUR.asn1.cms == \"undefined\" || !KJUR.asn1.cms) {\n      KJUR.asn1.cms = {};\n    }\n    KJUR.asn1.cms.Attribute = function(f) {\n      var e2 = Error, d = KJUR, c = d.asn1, b = c.DERSequence, a = c.DERSet, g = c.DERObjectIdentifier;\n      this.params = null;\n      this.typeOid = null;\n      this.setByParam = function(h) {\n        this.params = h;\n      };\n      this.getValueArray = function() {\n        throw new e2(\"not yet implemented abstract\");\n      };\n      this.tohex = function() {\n        var j = new g({ oid: this.typeOid });\n        var h = new a({ array: this.getValueArray() });\n        var i = new b({ array: [j, h] });\n        return i.tohex();\n      };\n      this.getEncodedHex = function() {\n        return this.tohex();\n      };\n    };\n    extendClass(KJUR.asn1.cms.Attribute, KJUR.asn1.ASN1Object);\n    KJUR.asn1.cms.ContentType = function(c) {\n      var b = KJUR, a = b.asn1;\n      a.cms.ContentType.superclass.constructor.call(this);\n      this.typeOid = \"1.2.840.113549.1.9.3\";\n      this.getValueArray = function() {\n        var d = new a.DERObjectIdentifier(this.params.type);\n        return [d];\n      };\n      if (c != void 0) {\n        this.setByParam(c);\n      }\n    };\n    extendClass(KJUR.asn1.cms.ContentType, KJUR.asn1.cms.Attribute);\n    KJUR.asn1.cms.MessageDigest = function(e2) {\n      var b = KJUR, a = b.asn1, c = a.DEROctetString, d = a.cms;\n      d.MessageDigest.superclass.constructor.call(this);\n      this.typeOid = \"1.2.840.113549.1.9.4\";\n      this.getValueArray = function() {\n        var f = new c(this.params);\n        return [f];\n      };\n      if (e2 != void 0) {\n        this.setByParam(e2);\n      }\n    };\n    extendClass(KJUR.asn1.cms.MessageDigest, KJUR.asn1.cms.Attribute);\n    KJUR.asn1.cms.SigningTime = function(c) {\n      var b = KJUR, a = b.asn1;\n      a.cms.SigningTime.superclass.constructor.call(this);\n      this.typeOid = \"1.2.840.113549.1.9.5\";\n      this.getValueArray = function() {\n        var d = new a.x509.Time(this.params);\n        return [d];\n      };\n      if (c != void 0) {\n        this.setByParam(c);\n      }\n    };\n    extendClass(KJUR.asn1.cms.SigningTime, KJUR.asn1.cms.Attribute);\n    KJUR.asn1.cms.SigningCertificate = function(h) {\n      var e2 = Error, d = KJUR, c = d.asn1, b = c.DERSequence, g = c.cms, a = g.ESSCertID, f = d.crypto;\n      g.SigningCertificate.superclass.constructor.call(this);\n      this.typeOid = \"1.2.840.113549.1.9.16.2.12\";\n      this.getValueArray = function() {\n        if (this.params == null || this.params == void 0 || this.params.array == void 0) {\n          throw new e2(\"parameter 'array' not specified\");\n        }\n        var o2 = this.params.array;\n        var k = [];\n        for (var l = 0; l < o2.length; l++) {\n          var n2 = o2[l];\n          if (h.hasis == false && (typeof n2 == \"string\" && (n2.indexOf(\"-----BEGIN\") != -1 || ASN1HEX.isASN1HEX(n2)))) {\n            n2 = { cert: n2 };\n          }\n          if (n2.hasis != false && h.hasis == false) {\n            n2.hasis = false;\n          }\n          k.push(new a(n2));\n        }\n        var j = new b({ array: k });\n        var m = new b({ array: [j] });\n        return [m];\n      };\n      if (h != void 0) {\n        this.setByParam(h);\n      }\n    };\n    extendClass(KJUR.asn1.cms.SigningCertificate, KJUR.asn1.cms.Attribute);\n    KJUR.asn1.cms.ESSCertID = function(g) {\n      KJUR.asn1.cms.ESSCertID.superclass.constructor.call(this);\n      var d = Error, c = KJUR, b = c.asn1, f = b.DEROctetString, a = b.DERSequence, e2 = b.cms.IssuerSerial;\n      this.params = null;\n      this.getCertHash = function(k, h) {\n        if (k.hash != void 0) {\n          return k.hash;\n        }\n        if (typeof k == \"string\" && k.indexOf(\"-----BEGIN\") == -1 && !ASN1HEX.isASN1HEX(k)) {\n          return k;\n        }\n        var i;\n        if (typeof k == \"string\") {\n          i = k;\n        } else {\n          if (k.cert != void 0) {\n            i = k.cert;\n          } else {\n            throw new d(\"hash nor cert unspecified\");\n          }\n        }\n        var j;\n        if (i.indexOf(\"-----BEGIN\") != -1) {\n          j = pemtohex(i);\n        } else {\n          j = i;\n        }\n        if (typeof k == \"string\") {\n          if (k.indexOf(\"-----BEGIN\") != -1) {\n            j = pemtohex(k);\n          } else {\n            if (ASN1HEX.isASN1HEX(k)) {\n              j = k;\n            }\n          }\n        }\n        var l;\n        if (k.alg != void 0) {\n          l = k.alg;\n        } else {\n          if (h != void 0) {\n            l = h;\n          } else {\n            throw new d(\"hash alg unspecified\");\n          }\n        }\n        return c.crypto.Util.hashHex(j, l);\n      };\n      this.tohex = function() {\n        var k = this.params;\n        var j = this.getCertHash(k, \"sha1\");\n        var h = [];\n        h.push(new f({ hex: j }));\n        if (typeof k == \"string\" && k.indexOf(\"-----BEGIN\") != -1 || k.cert != void 0 && k.hasis != false || k.issuer != void 0 && k.serial != void 0) {\n          h.push(new e2(k));\n        }\n        var i = new a({ array: h });\n        return i.tohex();\n      };\n      this.getEncodedHex = function() {\n        return this.tohex();\n      };\n      if (g != void 0) {\n        this.setByParam(g);\n      }\n    };\n    extendClass(KJUR.asn1.cms.ESSCertID, KJUR.asn1.ASN1Object);\n    KJUR.asn1.cms.SigningCertificateV2 = function(d) {\n      var h = Error, a = KJUR, g = a.asn1, e2 = g.DERSequence, b = g.x509, i = g.cms, c = i.ESSCertIDv2, f = a.crypto;\n      i.SigningCertificateV2.superclass.constructor.call(this);\n      this.typeOid = \"1.2.840.113549.1.9.16.2.47\";\n      this.getValueArray = function() {\n        if (this.params == null || this.params == void 0 || this.params.array == void 0) {\n          throw new h(\"parameter 'array' not specified\");\n        }\n        var o2 = this.params.array;\n        var l = [];\n        for (var m = 0; m < o2.length; m++) {\n          var n2 = o2[m];\n          if ((d.alg != void 0 || d.hasis == false) && (typeof n2 == \"string\" && (n2.indexOf(\"-----BEGIN\") != -1 || ASN1HEX.isASN1HEX(n2)))) {\n            n2 = { cert: n2 };\n          }\n          if (n2.alg == void 0 && d.alg != void 0) {\n            n2.alg = d.alg;\n          }\n          if (n2.hasis != false && d.hasis == false) {\n            n2.hasis = false;\n          }\n          l.push(new c(n2));\n        }\n        var k = new e2({ array: l });\n        var j = new e2({ array: [k] });\n        return [j];\n      };\n      if (d != void 0) {\n        this.setByParam(d);\n      }\n    };\n    extendClass(KJUR.asn1.cms.SigningCertificateV2, KJUR.asn1.cms.Attribute);\n    KJUR.asn1.cms.ESSCertIDv2 = function(h) {\n      KJUR.asn1.cms.ESSCertIDv2.superclass.constructor.call(this);\n      var d = Error, c = KJUR, b = c.asn1, f = b.DEROctetString, a = b.DERSequence, e2 = b.cms.IssuerSerial, g = b.x509.AlgorithmIdentifier;\n      this.params = null;\n      this.tohex = function() {\n        var l = this.params;\n        var k = this.getCertHash(l, \"sha256\");\n        var i = [];\n        if (l.alg != void 0 && l.alg != \"sha256\") {\n          i.push(new g({ name: l.alg }));\n        }\n        i.push(new f({ hex: k }));\n        if (typeof l == \"string\" && l.indexOf(\"-----BEGIN\") != -1 || l.cert != void 0 && l.hasis != false || l.issuer != void 0 && l.serial != void 0) {\n          i.push(new e2(l));\n        }\n        var j = new a({ array: i });\n        return j.tohex();\n      };\n      this.getEncodedHex = function() {\n        return this.tohex();\n      };\n      if (h != void 0) {\n        this.setByParam(h);\n      }\n    };\n    extendClass(KJUR.asn1.cms.ESSCertIDv2, KJUR.asn1.cms.ESSCertID);\n    KJUR.asn1.cms.IssuerSerial = function(e2) {\n      var i = Error, c = KJUR, h = c.asn1, g = h.DERInteger, f = h.DERSequence, j = h.cms, d = h.x509, a = d.GeneralNames, b = X509;\n      j.IssuerSerial.superclass.constructor.call(this);\n      this.setByParam = function(k) {\n        this.params = k;\n      };\n      this.tohex = function() {\n        var p = this.params;\n        var l, r2;\n        if (typeof p == \"string\" && p.indexOf(\"-----BEGIN\") != -1 || p.cert != void 0) {\n          var n2;\n          if (p.cert != void 0) {\n            n2 = p.cert;\n          } else {\n            n2 = p;\n          }\n          var k = new b();\n          k.readCertPEM(n2);\n          l = k.getIssuer();\n          r2 = { hex: k.getSerialNumberHex() };\n        } else {\n          if (p.issuer != void 0 && p.serial) {\n            l = p.issuer;\n            r2 = p.serial;\n          } else {\n            throw new i(\"cert or issuer and serial parameter not specified\");\n          }\n        }\n        var q = new a([{ dn: l }]);\n        var o2 = new g(r2);\n        var m = new f({ array: [q, o2] });\n        return m.tohex();\n      };\n      this.getEncodedHex = function() {\n        return this.tohex();\n      };\n      if (e2 != void 0) {\n        this.setByParam(e2);\n      }\n    };\n    extendClass(KJUR.asn1.cms.IssuerSerial, KJUR.asn1.ASN1Object);\n    KJUR.asn1.cms.SignerIdentifier = function(f) {\n      var c = KJUR, i = c.asn1, h = i.DERInteger, g = i.DERSequence, l = i.cms, k = l.IssuerAndSerialNumber, d = l.SubjectKeyIdentifier, e2 = i.x509, a = e2.X500Name, b = X509, j = Error;\n      l.SignerIdentifier.superclass.constructor.call(this);\n      this.params = null;\n      this.tohex = function() {\n        var o2 = this.params;\n        if (o2.type == \"isssn\") {\n          var m = new k(o2);\n          return m.tohex();\n        } else {\n          if (o2.type == \"skid\") {\n            var n2 = new d(o2);\n            return n2.tohex();\n          } else {\n            throw new Error(\"wrong property for isssn or skid\");\n          }\n        }\n      };\n      this.getEncodedHex = function() {\n        return this.tohex();\n      };\n      if (f != void 0) {\n        this.setByParam(f);\n      }\n    };\n    extendClass(KJUR.asn1.cms.SignerIdentifier, KJUR.asn1.ASN1Object);\n    KJUR.asn1.cms.IssuerAndSerialNumber = function(e2) {\n      var c = KJUR, h = c.asn1, g = h.DERInteger, f = h.DERSequence, j = h.cms, d = h.x509, a = d.X500Name, b = X509, i = Error;\n      j.IssuerAndSerialNumber.superclass.constructor.call(this);\n      this.params = null;\n      this.tohex = function() {\n        var p = this.params;\n        var l, r2;\n        if (typeof p == \"string\" && p.indexOf(\"-----BEGIN\") != -1 || p.cert != void 0) {\n          var n2;\n          if (p.cert != void 0) {\n            n2 = p.cert;\n          } else {\n            n2 = p;\n          }\n          var k = new b();\n          k.readCertPEM(n2);\n          l = k.getIssuer();\n          r2 = { hex: k.getSerialNumberHex() };\n        } else {\n          if (p.issuer != void 0 && p.serial) {\n            l = p.issuer;\n            r2 = p.serial;\n          } else {\n            throw new i(\"cert or issuer and serial parameter not specified\");\n          }\n        }\n        var q = new a(l);\n        var o2 = new g(r2);\n        var m = new f({ array: [q, o2] });\n        return m.tohex();\n      };\n      this.getEncodedHex = function() {\n        return this.tohex();\n      };\n      this.setByParam = function(k) {\n        this.params = k;\n      };\n      if (e2 != void 0) {\n        this.setByParam(e2);\n      }\n    };\n    extendClass(KJUR.asn1.cms.IssuerAndSerialNumber, KJUR.asn1.ASN1Object);\n    KJUR.asn1.cms.SubjectKeyIdentifier = function(g) {\n      var d = KJUR, k = d.asn1, i = k.DERInteger, h = k.DERSequence, j = k.ASN1Util.newObject, m = k.cms, f = m.IssuerAndSerialName, c = m.SubjectKeyIdentifier, e2 = k.x509, a = e2.X500Name, b = X509, l = Error;\n      m.SubjectKeyIdentifier.superclass.constructor.call(this);\n      this.tohex = function() {\n        var r2 = this.params;\n        if (r2.cert == void 0 && r2.skid == void 0) {\n          throw new l(\"property cert nor skid undefined\");\n        }\n        var q;\n        if (r2.cert != void 0) {\n          var n2 = new b(r2.cert);\n          var o2 = n2.getExtSubjectKeyIdentifier();\n          q = o2.kid.hex;\n        } else {\n          if (r2.skid != void 0) {\n            q = r2.skid;\n          }\n        }\n        var p = j({ tag: { tage: \"a0\", obj: { octstr: { hex: q } } } });\n        return p.tohex();\n      };\n      this.getEncodedHex = function() {\n        return this.tohex();\n      };\n      if (g != void 0) {\n        this.setByParam(g);\n      }\n    };\n    extendClass(KJUR.asn1.cms.SubjectKeyIdentifier, KJUR.asn1.ASN1Object);\n    KJUR.asn1.cms.AttributeList = function(f) {\n      var d = Error, c = KJUR, b = c.asn1, a = b.DERSet, e2 = b.cms;\n      e2.AttributeList.superclass.constructor.call(this);\n      this.params = null;\n      this.hTLV = null;\n      this.setByParam = function(g) {\n        this.params = g;\n      };\n      this.tohex = function() {\n        var o2 = this.params;\n        if (this.hTLV != null) {\n          return this.hTLV;\n        }\n        var m = true;\n        if (o2.sortflag != void 0) {\n          m = o2.sortflag;\n        }\n        var j = o2.array;\n        var g = [];\n        for (var l = 0; l < j.length; l++) {\n          var n2 = j[l];\n          var k = n2.attr;\n          if (k == \"contentType\") {\n            g.push(new e2.ContentType(n2));\n          } else {\n            if (k == \"messageDigest\") {\n              g.push(new e2.MessageDigest(n2));\n            } else {\n              if (k == \"signingTime\") {\n                g.push(new e2.SigningTime(n2));\n              } else {\n                if (k == \"signingCertificate\") {\n                  g.push(new e2.SigningCertificate(n2));\n                } else {\n                  if (k == \"signingCertificateV2\") {\n                    g.push(new e2.SigningCertificateV2(n2));\n                  } else {\n                    if (k == \"signaturePolicyIdentifier\") {\n                      g.push(new KJUR.asn1.cades.SignaturePolicyIdentifier(n2));\n                    } else {\n                      if (k == \"signatureTimeStamp\" || k == \"timeStampToken\") {\n                        g.push(new KJUR.asn1.cades.SignatureTimeStamp(n2));\n                      } else {\n                        throw new d(\"unknown attr: \" + k);\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n        var h = new a({ array: g, sortflag: m });\n        this.hTLV = h.tohex();\n        return this.hTLV;\n      };\n      this.getEncodedHex = function() {\n        return this.tohex();\n      };\n      if (f != void 0) {\n        this.setByParam(f);\n      }\n    };\n    extendClass(KJUR.asn1.cms.AttributeList, KJUR.asn1.ASN1Object);\n    KJUR.asn1.cms.SignerInfo = function(q) {\n      var n2 = Error, r2 = KJUR, i = r2.asn1, c = i.DERInteger, f = i.DEROctetString, h = i.DERSequence, m = i.DERTaggedObject, k = i.cms, p = k.SignerIdentifier, l = k.AttributeList, g = k.ContentType, e2 = k.EncapsulatedContentInfo, d = k.MessageDigest, j = k.SignedData, a = i.x509, s = a.AlgorithmIdentifier, b = r2.crypto, o2 = KEYUTIL;\n      k.SignerInfo.superclass.constructor.call(this);\n      this.params = null;\n      this.sign = function() {\n        var y = this.params;\n        var x = y.sigalg;\n        var u = new l(y.sattrs).tohex();\n        var v = o2.getKey(y.signkey);\n        var w = new b.Signature({ alg: x });\n        w.init(v);\n        w.updateHex(u);\n        var t3 = w.sign();\n        y.sighex = t3;\n      };\n      this.tohex = function() {\n        var w = this.params;\n        var t3 = [];\n        t3.push(new c({ \"int\": w.version }));\n        t3.push(new p(w.id));\n        t3.push(new s({ name: w.hashalg }));\n        if (w.sattrs != void 0) {\n          var x = new l(w.sattrs);\n          try {\n            t3.push(new m({ tag: \"a0\", explicit: false, obj: x }));\n          } catch (v) {\n            throw new n2(\"si sattr error: \" + v);\n          }\n        }\n        if (w.sigalgfield != void 0) {\n          t3.push(new s({ name: w.sigalgfield }));\n        } else {\n          t3.push(new s({ name: w.sigalg }));\n        }\n        if (w.sighex == void 0 && w.signkey != void 0) {\n          this.sign();\n        }\n        t3.push(new f({ hex: w.sighex }));\n        if (w.uattrs != void 0) {\n          var x = new l(w.uattrs);\n          try {\n            t3.push(new m({ tag: \"a1\", explicit: false, obj: x }));\n          } catch (v) {\n            throw new n2(\"si uattr error: \" + v);\n          }\n        }\n        var u = new h({ array: t3 });\n        return u.tohex();\n      };\n      this.getEncodedHex = function() {\n        return this.tohex();\n      };\n      if (q != void 0) {\n        this.setByParam(q);\n      }\n    };\n    extendClass(KJUR.asn1.cms.SignerInfo, KJUR.asn1.ASN1Object);\n    KJUR.asn1.cms.EncapsulatedContentInfo = function(g) {\n      var c = KJUR, b = c.asn1, e2 = b.DERTaggedObject, a = b.DERSequence, h = b.DERObjectIdentifier, d = b.DEROctetString, f = b.cms;\n      f.EncapsulatedContentInfo.superclass.constructor.call(this);\n      this.params = null;\n      this.tohex = function() {\n        var m = this.params;\n        var i = [];\n        i.push(new h(m.type));\n        if (m.content != void 0 && (m.content.hex != void 0 || m.content.str != void 0) && m.isDetached != true) {\n          var k = new d(m.content);\n          var l = new e2({ tag: \"a0\", explicit: true, obj: k });\n          i.push(l);\n        }\n        var j = new a({ array: i });\n        return j.tohex();\n      };\n      this.getEncodedHex = function() {\n        return this.tohex();\n      };\n      this.setByParam = function(i) {\n        this.params = i;\n      };\n      if (g != void 0) {\n        this.setByParam(g);\n      }\n    };\n    extendClass(KJUR.asn1.cms.EncapsulatedContentInfo, KJUR.asn1.ASN1Object);\n    KJUR.asn1.cms.ContentInfo = function(g) {\n      var c = KJUR, b = c.asn1, d = b.DERTaggedObject, a = b.DERSequence, h = b.DERObjectIdentifier, f = b.x509, e2 = f.OID.name2obj;\n      KJUR.asn1.cms.ContentInfo.superclass.constructor.call(this);\n      this.params = null;\n      this.tohex = function() {\n        var l = this.params;\n        var i = [];\n        i.push(new h(l.type));\n        var k = new d({ tag: \"a0\", explicit: true, obj: l.obj });\n        i.push(k);\n        var j = new a({ array: i });\n        return j.tohex();\n      };\n      this.getEncodedHex = function() {\n        return this.tohex();\n      };\n      this.setByParam = function(i) {\n        this.params = i;\n      };\n      if (g != void 0) {\n        this.setByParam(g);\n      }\n    };\n    extendClass(KJUR.asn1.cms.ContentInfo, KJUR.asn1.ASN1Object);\n    KJUR.asn1.cms.SignedData = function(e2) {\n      var j = Error, a = KJUR, h = a.asn1, m = h.ASN1Object, g = h.DERInteger, p = h.DERSet, f = h.DERSequence, b = h.DERTaggedObject, o2 = h.cms, l = o2.EncapsulatedContentInfo, d = o2.SignerInfo, q = o2.ContentInfo, k = o2.CertificateSet, i = o2.RevocationInfoChoices, c = h.x509, n2 = c.AlgorithmIdentifier;\n      KJUR.asn1.cms.SignedData.superclass.constructor.call(this);\n      this.params = null;\n      this.checkAndFixParam = function() {\n        var r2 = this.params;\n        this._setDigestAlgs(r2);\n        this._setContentTypeByEContent(r2);\n        this._setMessageDigestByEContent(r2);\n        this._setSignerInfoVersion(r2);\n        this._setSignedDataVersion(r2);\n      };\n      this._setDigestAlgs = function(v) {\n        var u = {};\n        var t3 = v.sinfos;\n        for (var r2 = 0; r2 < t3.length; r2++) {\n          var s = t3[r2];\n          u[s.hashalg] = 1;\n        }\n        v.hashalgs = Object.keys(u).sort();\n      };\n      this._setContentTypeByEContent = function(w) {\n        var u = w.econtent.type;\n        var v = w.sinfos;\n        for (var r2 = 0; r2 < v.length; r2++) {\n          var t3 = v[r2];\n          var s = this._getAttrParamByName(t3, \"contentType\");\n          s.type = u;\n        }\n      };\n      this._setMessageDigestByEContent = function(r2) {\n        var v = r2.econtent;\n        var y = r2.econtent.type;\n        var x = v.content.hex;\n        if (x == void 0 && v.type == \"data\" && v.content.str != void 0) {\n          x = rstrtohex(v.content.str);\n        }\n        var A = r2.sinfos;\n        for (var u = 0; u < A.length; u++) {\n          var t3 = A[u];\n          var s = t3.hashalg;\n          var z2 = this._getAttrParamByName(t3, \"messageDigest\");\n          var w = KJUR.crypto.Util.hashHex(x, s);\n          z2.hex = w;\n        }\n      };\n      this._getAttrParamByName = function(t3, s) {\n        var u = t3.sattrs.array;\n        for (var r2 = 0; r2 < u.length; r2++) {\n          if (u[r2].attr == s) {\n            return u[r2];\n          }\n        }\n      };\n      this._setSignerInfoVersion = function(v) {\n        var t3 = v.sinfos;\n        for (var r2 = 0; r2 < t3.length; r2++) {\n          var s = t3[r2];\n          var u = 1;\n          if (s.id.type == \"skid\") {\n            u = 3;\n          }\n          s.version = u;\n        }\n      };\n      this._setSignedDataVersion = function(s) {\n        var r2 = this._getSignedDataVersion(s);\n        s.version = r2;\n      };\n      this._getSignedDataVersion = function(w) {\n        if (w.revinfos != void 0) {\n          var r2 = w.revinfos;\n          for (var t3 = 0; t3 < r2.length; t3++) {\n            var s = r2[t3];\n            if (s.ocsp != void 0) {\n              return 5;\n            }\n          }\n        }\n        var v = w.sinfos;\n        for (var t3 = 0; t3 < v.length; t3++) {\n          var u = w.sinfos[t3];\n          if (u.version == 3) {\n            return 3;\n          }\n        }\n        if (w.econtent.type != \"data\") {\n          return 3;\n        }\n        return 1;\n      };\n      this.tohex = function() {\n        var y = this.params;\n        if (this.getEncodedHexPrepare != void 0) {\n          this.getEncodedHexPrepare();\n        }\n        if (y.fixed != true) {\n          this.checkAndFixParam();\n        }\n        var r2 = [];\n        r2.push(new g({ \"int\": y.version }));\n        var w = [];\n        for (var v = 0; v < y.hashalgs.length; v++) {\n          var t3 = y.hashalgs[v];\n          w.push(new n2({ name: t3 }));\n        }\n        r2.push(new p({ array: w }));\n        r2.push(new l(y.econtent));\n        if (y.certs != void 0) {\n          r2.push(new k(y.certs));\n        }\n        if (y.revinfos != void 0) {\n          r2.push(new i(y.revinfos));\n        }\n        var u = [];\n        for (var v = 0; v < y.sinfos.length; v++) {\n          var x = y.sinfos[v];\n          u.push(new d(x));\n        }\n        r2.push(new p({ array: u }));\n        var s = new f({ array: r2 });\n        return s.tohex();\n      };\n      this.getEncodedHex = function() {\n        return this.tohex();\n      };\n      this.getContentInfo = function() {\n        var r2 = new q({ type: \"signed-data\", obj: this });\n        return r2;\n      };\n      this.getContentInfoEncodedHex = function() {\n        return this.getContentInfo().tohex();\n      };\n      if (e2 != void 0) {\n        this.setByParam(e2);\n      }\n    };\n    extendClass(KJUR.asn1.cms.SignedData, KJUR.asn1.ASN1Object);\n    KJUR.asn1.cms.CertificateSet = function(f) {\n      KJUR.asn1.cms.CertificateSet.superclass.constructor.call(this);\n      var c = Error, b = KJUR.asn1, e2 = b.DERTaggedObject, a = b.DERSet, d = b.ASN1Object;\n      this.params = null;\n      this.tohex = function() {\n        var j = this.params;\n        var p = [];\n        var q;\n        if (j instanceof Array) {\n          q = j;\n        } else {\n          if (j.array != void 0) {\n            q = j.array;\n          } else {\n            throw new c(\"cert array not specified\");\n          }\n        }\n        for (var k = 0; k < q.length; k++) {\n          var l = q[k];\n          var n2 = pemtohex(l);\n          var g = new d();\n          g.hTLV = n2;\n          p.push(g);\n        }\n        var m = { array: p };\n        if (j.sortflag == false) {\n          m.sortflag = false;\n        }\n        var o2 = new a(m);\n        var h = new e2({ tag: \"a0\", explicit: false, obj: o2 });\n        return h.tohex();\n      };\n      this.getEncodedHex = function() {\n        return this.tohex();\n      };\n      if (f != void 0) {\n        this.setByParam(f);\n      }\n    };\n    extendClass(KJUR.asn1.cms.CertificateSet, KJUR.asn1.ASN1Object);\n    KJUR.asn1.cms.RevocationInfoChoices = function(a) {\n      KJUR.asn1.cms.RevocationInfoChoices.superclass.constructor.call(this);\n      this.params = null;\n      this.tohex = function() {\n        var e2 = this.params;\n        if (!e2 instanceof Array) {\n          throw new Error(\"params is not array\");\n        }\n        var b = [];\n        for (var c = 0; c < e2.length; c++) {\n          b.push(new KJUR.asn1.cms.RevocationInfoChoice(e2[c]));\n        }\n        var d = KJUR.asn1.ASN1Util.newObject({ tag: { tagi: \"a1\", obj: { set: b } } });\n        return d.tohex();\n      };\n      this.getEncodedHex = function() {\n        return this.tohex();\n      };\n      if (a != void 0) {\n        this.setByParam(a);\n      }\n    };\n    extendClass(KJUR.asn1.cms.RevocationInfoChoices, KJUR.asn1.ASN1Object);\n    KJUR.asn1.cms.RevocationInfoChoice = function(a) {\n      KJUR.asn1.cms.RevocationInfoChoice.superclass.constructor.call(this);\n      this.params = null;\n      this.tohex = function() {\n        var d = this.params;\n        if (d.crl != void 0 && typeof d.crl == \"string\") {\n          var b = d.crl;\n          if (d.crl.indexOf(\"-----BEGIN\") != -1) {\n            b = pemtohex(d.crl);\n          }\n          return b;\n        } else {\n          if (d.ocsp != void 0) {\n            var c = KJUR.asn1.ASN1Util.newObject({ tag: { tagi: \"a1\", obj: new KJUR.asn1.cms.OtherRevocationFormat(d) } });\n            return c.tohex();\n          } else {\n            throw new Error(\"property crl or ocsp undefined\");\n          }\n        }\n      };\n      this.getEncodedHex = function() {\n        return this.tohex();\n      };\n      if (a != void 0) {\n        this.setByParam(a);\n      }\n    };\n    extendClass(KJUR.asn1.cms.RevocationInfoChoice, KJUR.asn1.ASN1Object);\n    KJUR.asn1.cms.OtherRevocationFormat = function(f) {\n      KJUR.asn1.cms.OtherRevocationFormat.superclass.constructor.call(this);\n      var d = Error, c = KJUR, b = c.asn1, a = b.ASN1Util.newObject, e2 = c.lang.String.isHex;\n      this.params = null;\n      this.tohex = function() {\n        var h = this.params;\n        if (h.ocsp == void 0) {\n          throw new d(\"property ocsp not specified\");\n        }\n        if (!e2(h.ocsp) || !ASN1HEX.isASN1HEX(h.ocsp)) {\n          throw new d(\"ocsp value not ASN.1 hex string\");\n        }\n        var g = a({ seq: [{ oid: \"1.3.6.1.5.5.7.16.2\" }, { asn1: { tlv: h.ocsp } }] });\n        return g.tohex();\n      };\n      this.getEncodedHex = function() {\n        return this.tohex();\n      };\n      if (f != void 0) {\n        this.setByParam(f);\n      }\n    };\n    extendClass(KJUR.asn1.cms.OtherRevocationFormat, KJUR.asn1.ASN1Object);\n    KJUR.asn1.cms.CMSUtil = new function() {\n    }();\n    KJUR.asn1.cms.CMSUtil.newSignedData = function(a) {\n      return new KJUR.asn1.cms.SignedData(a);\n    };\n    KJUR.asn1.cms.CMSUtil.verifySignedData = function(n2) {\n      var C = KJUR, p = C.asn1, s = p.cms, D = s.SignerInfo, q = s.SignedData, y = s.SigningTime, b = s.SigningCertificate, d = s.SigningCertificateV2, A = p.cades, u = A.SignaturePolicyIdentifier, i = C.lang.String.isHex, v = ASN1HEX, h = v.getVbyList, a = v.getTLVbyList, t3 = v.getIdxbyList, z2 = v.getChildIdx, c = v.getTLV, B = v.oidname, j = C.crypto.Util.hashHex;\n      if (n2.cms === void 0 && !i(n2.cms)) {\n      }\n      var E = n2.cms;\n      var g = function(J, H) {\n        var G;\n        for (var I = 3; I < 6; I++) {\n          G = t3(J, 0, [1, 0, I]);\n          if (G !== void 0) {\n            var F = J.substr(G, 2);\n            if (F === \"a0\") {\n              H.certsIdx = G;\n            }\n            if (F === \"a1\") {\n              H.revinfosIdx = G;\n            }\n            if (F === \"31\") {\n              H.signerinfosIdx = G;\n            }\n          }\n        }\n      };\n      var l = function(I, F) {\n        var H = F.signerinfosIdx;\n        if (H === void 0) {\n          return;\n        }\n        var L = z2(I, H);\n        F.signerInfoIdxList = L;\n        for (var G = 0; G < L.length; G++) {\n          var K = L[G];\n          var J = { idx: K };\n          k(I, J);\n          F.signerInfos.push(J);\n        }\n      };\n      var k = function(I, J) {\n        var F = J.idx;\n        J.signerid_issuer1 = a(I, F, [1, 0], \"30\");\n        J.signerid_serial1 = h(I, F, [1, 1], \"02\");\n        J.hashalg = B(h(I, F, [2, 0], \"06\"));\n        var H = t3(I, F, [3], \"a0\");\n        J.idxSignedAttrs = H;\n        f(I, J, H);\n        var G = z2(I, F);\n        var K = G.length;\n        if (K < 6) {\n          throw \"malformed SignerInfo\";\n        }\n        J.sigalg = B(h(I, F, [K - 2, 0], \"06\"));\n        J.sigval = h(I, F, [K - 1], \"04\");\n      };\n      var f = function(L, M, F) {\n        var J = z2(L, F);\n        M.signedAttrIdxList = J;\n        for (var K = 0; K < J.length; K++) {\n          var I = J[K];\n          var G = h(L, I, [0], \"06\");\n          var H;\n          if (G === \"2a864886f70d010905\") {\n            H = hextoutf8(h(L, I, [1, 0]));\n            M.saSigningTime = H;\n          } else {\n            if (G === \"2a864886f70d010904\") {\n              H = h(L, I, [1, 0], \"04\");\n              M.saMessageDigest = H;\n            }\n          }\n        }\n      };\n      var w = function(G, F) {\n        if (h(G, 0, [0], \"06\") !== \"2a864886f70d010702\") {\n          return F;\n        }\n        F.cmsType = \"signedData\";\n        F.econtent = h(G, 0, [1, 0, 2, 1, 0]);\n        g(G, F);\n        F.signerInfos = [];\n        l(G, F);\n      };\n      var o2 = function(J, F) {\n        var G = F.parse.signerInfos;\n        var L = G.length;\n        var K = true;\n        for (var I = 0; I < L; I++) {\n          var H = G[I];\n          e2(J, F, H, I);\n          if (!H.isValid) {\n            K = false;\n          }\n        }\n        F.isValid = K;\n      };\n      var x = function(F, Q, J, P) {\n        var N = Q.parse.certsIdx;\n        var H;\n        if (Q.certs === void 0) {\n          H = [];\n          Q.certkeys = [];\n          var K = z2(F, N);\n          for (var I = 0; I < K.length; I++) {\n            var M = c(F, K[I]);\n            var O = new X509();\n            O.readCertHex(M);\n            H[I] = O;\n            Q.certkeys[I] = O.getPublicKey();\n          }\n          Q.certs = H;\n        } else {\n          H = Q.certs;\n        }\n        Q.cccc = H.length;\n        Q.cccci = K.length;\n        for (var I = 0; I < H.length; I++) {\n          var L = O.getIssuerHex();\n          var G = O.getSerialNumberHex();\n          if (J.signerid_issuer1 === L && J.signerid_serial1 === G) {\n            J.certkey_idx = I;\n          }\n        }\n      };\n      var e2 = function(F, R, I, N) {\n        I.verifyDetail = {};\n        var Q = I.verifyDetail;\n        var K = R.parse.econtent;\n        var G = I.hashalg;\n        var L = I.saMessageDigest;\n        Q.validMessageDigest = false;\n        if (j(K, G) === L) {\n          Q.validMessageDigest = true;\n        }\n        x(F, R, I, N);\n        Q.validSignatureValue = false;\n        var H = I.sigalg;\n        var M = \"31\" + c(F, I.idxSignedAttrs).substr(2);\n        I.signedattrshex = M;\n        var J = R.certs[I.certkey_idx].getPublicKey();\n        var P = new KJUR.crypto.Signature({ alg: H });\n        P.init(J);\n        P.updateHex(M);\n        var O = P.verify(I.sigval);\n        Q.validSignatureValue_isValid = O;\n        if (O === true) {\n          Q.validSignatureValue = true;\n        }\n        I.isValid = false;\n        if (Q.validMessageDigest && Q.validSignatureValue) {\n          I.isValid = true;\n        }\n      };\n      var m = function() {\n      };\n      var r2 = { isValid: false, parse: {} };\n      w(E, r2.parse);\n      o2(E, r2);\n      return r2;\n    };\n    KJUR.asn1.cms.CMSParser = function() {\n      var g = Error, a = X509, h = new a(), l = ASN1HEX, i = l.getV, b = l.getTLV, f = l.getIdxbyList, c = l.getTLVbyList, d = l.getTLVbyListEx, e2 = l.getVbyList, k = l.getVbyListEx, j = l.getChildIdx;\n      this.getCMSSignedData = function(m) {\n        var o2 = c(m, 0, [1, 0]);\n        var n2 = this.getSignedData(o2);\n        return n2;\n      };\n      this.getSignedData = function(o2) {\n        var q = j(o2, 0);\n        var v = {};\n        var p = i(o2, q[0]);\n        var n2 = parseInt(p, 16);\n        v.version = n2;\n        var r2 = b(o2, q[1]);\n        v.hashalgs = this.getHashAlgArray(r2);\n        var t3 = b(o2, q[2]);\n        v.econtent = this.getEContent(t3);\n        var m = d(o2, 0, [\"[0]\"]);\n        if (m != null) {\n          v.certs = this.getCertificateSet(m);\n        }\n        var u = d(o2, 0, [\"[1]\"]);\n        if (u != null) {\n        }\n        var s = d(o2, 0, [3]);\n        v.sinfos = this.getSignerInfos(s);\n        return v;\n      };\n      this.getHashAlgArray = function(s) {\n        var q = j(s, 0);\n        var m = new a();\n        var n2 = [];\n        for (var r2 = 0; r2 < q.length; r2++) {\n          var p = b(s, q[r2]);\n          var o2 = m.getAlgorithmIdentifierName(p);\n          n2.push(o2);\n        }\n        return n2;\n      };\n      this.getEContent = function(m) {\n        var n2 = {};\n        var p = e2(m, 0, [0]);\n        var o2 = e2(m, 0, [1, 0]);\n        n2.type = KJUR.asn1.x509.OID.oid2name(ASN1HEX.hextooidstr(p));\n        n2.content = { hex: o2 };\n        return n2;\n      };\n      this.getSignerInfos = function(p) {\n        var r2 = [];\n        var m = j(p, 0);\n        for (var n2 = 0; n2 < m.length; n2++) {\n          var o2 = b(p, m[n2]);\n          var q = this.getSignerInfo(o2);\n          r2.push(q);\n        }\n        return r2;\n      };\n      this.getSignerInfo = function(s) {\n        var y = {};\n        var u = j(s, 0);\n        var q = l.getInt(s, u[0], -1);\n        if (q != -1) {\n          y.version = q;\n        }\n        var t3 = b(s, u[1]);\n        var p = this.getIssuerAndSerialNumber(t3);\n        y.id = p;\n        var z2 = b(s, u[2]);\n        var n2 = h.getAlgorithmIdentifierName(z2);\n        y.hashalg = n2;\n        var w = d(s, 0, [\"[0]\"]);\n        if (w != null) {\n          var A = this.getAttributeList(w);\n          y.sattrs = A;\n        }\n        var m = d(s, 0, [3]);\n        var x = h.getAlgorithmIdentifierName(m);\n        y.sigalg = x;\n        var o2 = k(s, 0, [4]);\n        y.sighex = o2;\n        var r2 = d(s, 0, [\"[1]\"]);\n        if (r2 != null) {\n          var v = this.getAttributeList(r2);\n          y.uattrs = v;\n        }\n        return y;\n      };\n      this.getSignerIdentifier = function(m) {\n        if (m.substr(0, 2) == \"30\") {\n          return this.getIssuerAndSerialNumber(m);\n        } else {\n          throw new Error(\"SKID of signerIdentifier not supported\");\n        }\n      };\n      this.getIssuerAndSerialNumber = function(n2) {\n        var o2 = { type: \"isssn\" };\n        var m = j(n2, 0);\n        var p = b(n2, m[0]);\n        o2.issuer = h.getX500Name(p);\n        var q = i(n2, m[1]);\n        o2.serial = { hex: q };\n        return o2;\n      };\n      this.getAttributeList = function(q) {\n        var m = [];\n        var n2 = j(q, 0);\n        for (var o2 = 0; o2 < n2.length; o2++) {\n          var p = b(q, n2[o2]);\n          var r2 = this.getAttribute(p);\n          m.push(r2);\n        }\n        return { array: m };\n      };\n      this.getAttribute = function(p) {\n        var t3 = {};\n        var q = j(p, 0);\n        var o2 = l.getOID(p, q[0]);\n        var m = KJUR.asn1.x509.OID.oid2name(o2);\n        t3.attr = m;\n        var r2 = b(p, q[1]);\n        var u = j(r2, 0);\n        if (u.length == 1) {\n          t3.valhex = b(r2, u[0]);\n        } else {\n          var s = [];\n          for (var n2 = 0; n2 < u.length; n2++) {\n            s.push(b(r2, u[n2]));\n          }\n          t3.valhex = s;\n        }\n        if (m == \"contentType\") {\n          this.setContentType(t3);\n        } else {\n          if (m == \"messageDigest\") {\n            this.setMessageDigest(t3);\n          } else {\n            if (m == \"signingTime\") {\n              this.setSigningTime(t3);\n            } else {\n              if (m == \"signingCertificate\") {\n                this.setSigningCertificate(t3);\n              } else {\n                if (m == \"signingCertificateV2\") {\n                  this.setSigningCertificateV2(t3);\n                } else {\n                  if (m == \"signaturePolicyIdentifier\") {\n                    this.setSignaturePolicyIdentifier(t3);\n                  }\n                }\n              }\n            }\n          }\n        }\n        return t3;\n      };\n      this.setContentType = function(m) {\n        var n2 = l.getOIDName(m.valhex, 0, null);\n        if (n2 != null) {\n          m.type = n2;\n          delete m.valhex;\n        }\n      };\n      this.setSigningTime = function(o2) {\n        var n2 = i(o2.valhex, 0);\n        var m = hextoutf8(n2);\n        o2.str = m;\n        delete o2.valhex;\n      };\n      this.setMessageDigest = function(m) {\n        var n2 = i(m.valhex, 0);\n        m.hex = n2;\n        delete m.valhex;\n      };\n      this.setSigningCertificate = function(n2) {\n        var q = j(n2.valhex, 0);\n        if (q.length > 0) {\n          var m = b(n2.valhex, q[0]);\n          var p = j(m, 0);\n          var t3 = [];\n          for (var o2 = 0; o2 < p.length; o2++) {\n            var s = b(m, p[o2]);\n            var u = this.getESSCertID(s);\n            t3.push(u);\n          }\n          n2.array = t3;\n        }\n        if (q.length > 1) {\n          var r2 = b(n2.valhex, q[1]);\n          n2.polhex = r2;\n        }\n        delete n2.valhex;\n      };\n      this.setSignaturePolicyIdentifier = function(s) {\n        var q = j(s.valhex, 0);\n        if (q.length > 0) {\n          var r2 = l.getOID(s.valhex, q[0]);\n          s.oid = r2;\n        }\n        if (q.length > 1) {\n          var m = new a();\n          var t3 = j(s.valhex, q[1]);\n          var p = b(s.valhex, t3[0]);\n          var o2 = m.getAlgorithmIdentifierName(p);\n          s.alg = o2;\n          var n2 = i(s.valhex, t3[1]);\n          s.hash = n2;\n        }\n        delete s.valhex;\n      };\n      this.setSigningCertificateV2 = function(o2) {\n        var s = j(o2.valhex, 0);\n        if (s.length > 0) {\n          var n2 = b(o2.valhex, s[0]);\n          var r2 = j(n2, 0);\n          var u = [];\n          for (var q = 0; q < r2.length; q++) {\n            var m = b(n2, r2[q]);\n            var p = this.getESSCertIDv2(m);\n            u.push(p);\n          }\n          o2.array = u;\n        }\n        if (s.length > 1) {\n          var t3 = b(o2.valhex, s[1]);\n          o2.polhex = t3;\n        }\n        delete o2.valhex;\n      };\n      this.getESSCertID = function(o2) {\n        var p = {};\n        var n2 = j(o2, 0);\n        if (n2.length > 0) {\n          var q = i(o2, n2[0]);\n          p.hash = q;\n        }\n        if (n2.length > 1) {\n          var m = b(o2, n2[1]);\n          var r2 = this.getIssuerSerial(m);\n          if (r2.serial != void 0) {\n            p.serial = r2.serial;\n          }\n          if (r2.issuer != void 0) {\n            p.issuer = r2.issuer;\n          }\n        }\n        return p;\n      };\n      this.getESSCertIDv2 = function(q) {\n        var s = {};\n        var p = j(q, 0);\n        if (p.length < 1 || 3 < p.length) {\n          throw new g(\"wrong number of elements\");\n        }\n        var r2 = 0;\n        if (q.substr(p[0], 2) == \"30\") {\n          var o2 = b(q, p[0]);\n          s.alg = h.getAlgorithmIdentifierName(o2);\n          r2++;\n        } else {\n          s.alg = \"sha256\";\n        }\n        var n2 = i(q, p[r2]);\n        s.hash = n2;\n        if (p.length > r2 + 1) {\n          var m = b(q, p[r2 + 1]);\n          var t3 = this.getIssuerSerial(m);\n          s.issuer = t3.issuer;\n          s.serial = t3.serial;\n        }\n        return s;\n      };\n      this.getIssuerSerial = function(q) {\n        var r2 = {};\n        var n2 = j(q, 0);\n        var m = b(q, n2[0]);\n        var p = h.getGeneralNames(m);\n        var o2 = p[0].dn;\n        r2.issuer = o2;\n        var s = i(q, n2[1]);\n        r2.serial = { hex: s };\n        return r2;\n      };\n      this.getCertificateSet = function(p) {\n        var n2 = j(p, 0);\n        var m = [];\n        for (var o2 = 0; o2 < n2.length; o2++) {\n          var r2 = b(p, n2[o2]);\n          if (r2.substr(0, 2) == \"30\") {\n            var q = hextopem(r2, \"CERTIFICATE\");\n            m.push(q);\n          }\n        }\n        return { array: m, sortflag: false };\n      };\n    };\n    if (typeof KJUR == \"undefined\" || !KJUR) {\n      KJUR = {};\n    }\n    if (typeof KJUR.asn1 == \"undefined\" || !KJUR.asn1) {\n      KJUR.asn1 = {};\n    }\n    if (typeof KJUR.asn1.tsp == \"undefined\" || !KJUR.asn1.tsp) {\n      KJUR.asn1.tsp = {};\n    }\n    KJUR.asn1.tsp.TimeStampToken = function(d) {\n      var c = KJUR, b = c.asn1, a = b.tsp;\n      a.TimeStampToken.superclass.constructor.call(this);\n      this.params = null;\n      this.getEncodedHexPrepare = function() {\n        var e2 = new a.TSTInfo(this.params.econtent.content);\n        this.params.econtent.content.hex = e2.tohex();\n      };\n      if (d != void 0) {\n        this.setByParam(d);\n      }\n    };\n    extendClass(KJUR.asn1.tsp.TimeStampToken, KJUR.asn1.cms.SignedData);\n    KJUR.asn1.tsp.TSTInfo = function(f) {\n      var m = Error, c = KJUR, j = c.asn1, g = j.DERSequence, i = j.DERInteger, l = j.DERBoolean, h = j.DERGeneralizedTime, n2 = j.DERObjectIdentifier, e2 = j.DERTaggedObject, k = j.tsp, d = k.MessageImprint, b = k.Accuracy, a = j.x509.X500Name, o2 = j.x509.GeneralName;\n      k.TSTInfo.superclass.constructor.call(this);\n      this.dVersion = new i({ \"int\": 1 });\n      this.dPolicy = null;\n      this.dMessageImprint = null;\n      this.dSerial = null;\n      this.dGenTime = null;\n      this.dAccuracy = null;\n      this.dOrdering = null;\n      this.dNonce = null;\n      this.dTsa = null;\n      this.tohex = function() {\n        var p = [this.dVersion];\n        if (this.dPolicy == null) {\n          throw new Error(\"policy shall be specified.\");\n        }\n        p.push(this.dPolicy);\n        if (this.dMessageImprint == null) {\n          throw new Error(\"messageImprint shall be specified.\");\n        }\n        p.push(this.dMessageImprint);\n        if (this.dSerial == null) {\n          throw new Error(\"serialNumber shall be specified.\");\n        }\n        p.push(this.dSerial);\n        if (this.dGenTime == null) {\n          throw new Error(\"genTime shall be specified.\");\n        }\n        p.push(this.dGenTime);\n        if (this.dAccuracy != null) {\n          p.push(this.dAccuracy);\n        }\n        if (this.dOrdering != null) {\n          p.push(this.dOrdering);\n        }\n        if (this.dNonce != null) {\n          p.push(this.dNonce);\n        }\n        if (this.dTsa != null) {\n          p.push(this.dTsa);\n        }\n        var q = new g({ array: p });\n        this.hTLV = q.tohex();\n        return this.hTLV;\n      };\n      this.getEncodedHex = function() {\n        return this.tohex();\n      };\n      if (f !== void 0) {\n        if (typeof f.policy == \"string\") {\n          if (!f.policy.match(/^[0-9.]+$/)) {\n            throw \"policy shall be oid like 0.1.4.134\";\n          }\n          this.dPolicy = new n2({ oid: f.policy });\n        }\n        if (f.messageImprint !== void 0) {\n          this.dMessageImprint = new d(f.messageImprint);\n        }\n        if (f.serial !== void 0) {\n          this.dSerial = new i(f.serial);\n        }\n        if (f.genTime !== void 0) {\n          this.dGenTime = new h(f.genTime);\n        }\n        if (f.accuracy !== void 0) {\n          this.dAccuracy = new b(f.accuracy);\n        }\n        if (f.ordering !== void 0 && f.ordering == true) {\n          this.dOrdering = new l();\n        }\n        if (f.nonce !== void 0) {\n          this.dNonce = new i(f.nonce);\n        }\n        if (f.tsa !== void 0) {\n          this.dTsa = new e2({ tag: \"a0\", explicit: true, obj: new o2({ dn: f.tsa }) });\n        }\n      }\n    };\n    extendClass(KJUR.asn1.tsp.TSTInfo, KJUR.asn1.ASN1Object);\n    KJUR.asn1.tsp.Accuracy = function(d) {\n      var c = KJUR, b = c.asn1, a = b.ASN1Util.newObject;\n      b.tsp.Accuracy.superclass.constructor.call(this);\n      this.params = null;\n      this.tohex = function() {\n        var f = this.params;\n        var e2 = [];\n        if (f.seconds != void 0 && typeof f.seconds == \"number\") {\n          e2.push({ \"int\": f.seconds });\n        }\n        if (f.millis != void 0 && typeof f.millis == \"number\") {\n          e2.push({ tag: { tagi: \"80\", obj: { \"int\": f.millis } } });\n        }\n        if (f.micros != void 0 && typeof f.micros == \"number\") {\n          e2.push({ tag: { tagi: \"81\", obj: { \"int\": f.micros } } });\n        }\n        return a({ seq: e2 }).tohex();\n      };\n      this.getEncodedHex = function() {\n        return this.tohex();\n      };\n      if (d != void 0) {\n        this.setByParam(d);\n      }\n    };\n    extendClass(KJUR.asn1.tsp.Accuracy, KJUR.asn1.ASN1Object);\n    KJUR.asn1.tsp.MessageImprint = function(g) {\n      var c = KJUR, b = c.asn1, a = b.DERSequence, d = b.DEROctetString, f = b.x509, e2 = f.AlgorithmIdentifier;\n      b.tsp.MessageImprint.superclass.constructor.call(this);\n      this.params = null;\n      this.tohex = function() {\n        var k = this.params;\n        var j = new e2({ name: k.alg });\n        var h = new d({ hex: k.hash });\n        var i = new a({ array: [j, h] });\n        return i.tohex();\n      };\n      this.getEncodedHex = function() {\n        return this.tohex();\n      };\n      if (g !== void 0) {\n        this.setByParam(g);\n      }\n    };\n    extendClass(KJUR.asn1.tsp.MessageImprint, KJUR.asn1.ASN1Object);\n    KJUR.asn1.tsp.TimeStampReq = function(c) {\n      var a = KJUR, f = a.asn1, d = f.DERSequence, e2 = f.DERInteger, h = f.DERBoolean, j = f.ASN1Object, i = f.DERObjectIdentifier, g = f.tsp, b = g.MessageImprint;\n      g.TimeStampReq.superclass.constructor.call(this);\n      this.params = null;\n      this.tohex = function() {\n        var m = this.params;\n        var k = [];\n        k.push(new e2({ \"int\": 1 }));\n        if (m.messageImprint instanceof KJUR.asn1.ASN1Object) {\n          k.push(m.messageImprint);\n        } else {\n          k.push(new b(m.messageImprint));\n        }\n        if (m.policy != void 0) {\n          k.push(new i(m.policy));\n        }\n        if (m.nonce != void 0) {\n          k.push(new e2(m.nonce));\n        }\n        if (m.certreq == true) {\n          k.push(new h());\n        }\n        var l = new d({ array: k });\n        return l.tohex();\n      };\n      this.getEncodedHex = function() {\n        return this.tohex();\n      };\n      if (c != void 0) {\n        this.setByParam(c);\n      }\n    };\n    extendClass(KJUR.asn1.tsp.TimeStampReq, KJUR.asn1.ASN1Object);\n    KJUR.asn1.tsp.TimeStampResp = function(g) {\n      var e2 = KJUR, d = e2.asn1, c = d.DERSequence, f = d.ASN1Object, a = d.tsp, b = a.PKIStatusInfo;\n      a.TimeStampResp.superclass.constructor.call(this);\n      this.params = null;\n      this.tohex = function() {\n        var j = this.params;\n        var h = [];\n        if (j.econtent != void 0 || j.tst != void 0) {\n          if (j.statusinfo != void 0) {\n            h.push(new b(j.statusinfo));\n          } else {\n            h.push(new b(\"granted\"));\n          }\n          if (j.econtent != void 0) {\n            h.push(new a.TimeStampToken(j).getContentInfo());\n          } else {\n            if (j.tst instanceof d.ASN1Object) {\n              h.push(j.tst);\n            } else {\n              throw new Error(\"improper member tst value\");\n            }\n          }\n        } else {\n          if (j.statusinfo != void 0) {\n            h.push(new b(j.statusinfo));\n          } else {\n            throw new Error(\"parameter for token nor statusinfo not specified\");\n          }\n        }\n        var i = new c({ array: h });\n        return i.tohex();\n      };\n      this.getEncodedHex = function() {\n        return this.tohex();\n      };\n      if (g != void 0) {\n        this.setByParam(g);\n      }\n    };\n    extendClass(KJUR.asn1.tsp.TimeStampResp, KJUR.asn1.ASN1Object);\n    KJUR.asn1.tsp.PKIStatusInfo = function(d) {\n      var h = Error, a = KJUR, g = a.asn1, e2 = g.DERSequence, i = g.tsp, f = i.PKIStatus, c = i.PKIFreeText, b = i.PKIFailureInfo;\n      i.PKIStatusInfo.superclass.constructor.call(this);\n      this.params = null;\n      this.tohex = function() {\n        var l = this.params;\n        var j = [];\n        if (typeof l == \"string\") {\n          j.push(new f(l));\n        } else {\n          if (l.status == void 0) {\n            throw new h(\"property 'status' unspecified\");\n          }\n          j.push(new f(l.status));\n          if (l.statusstr != void 0) {\n            j.push(new c(l.statusstr));\n          }\n          if (l.failinfo != void 0) {\n            j.push(new b(l.failinfo));\n          }\n        }\n        var k = new e2({ array: j });\n        return k.tohex();\n      };\n      this.getEncodedHex = function() {\n        return this.tohex();\n      };\n      if (d != void 0) {\n        this.setByParam(d);\n      }\n    };\n    extendClass(KJUR.asn1.tsp.PKIStatusInfo, KJUR.asn1.ASN1Object);\n    KJUR.asn1.tsp.PKIStatus = function(g) {\n      var e2 = Error, d = KJUR, c = d.asn1, f = c.DERInteger, b = c.tsp;\n      b.PKIStatus.superclass.constructor.call(this);\n      var a = { granted: 0, grantedWithMods: 1, rejection: 2, waiting: 3, revocationWarning: 4, revocationNotification: 5 };\n      this.params = null;\n      this.tohex = function() {\n        var k = this.params;\n        var h, j;\n        if (typeof k == \"string\") {\n          try {\n            j = a[k];\n          } catch (i) {\n            throw new e2(\"undefined name: \" + k);\n          }\n        } else {\n          if (typeof k == \"number\") {\n            j = k;\n          } else {\n            throw new e2(\"unsupported params\");\n          }\n        }\n        return new f({ \"int\": j }).tohex();\n      };\n      this.getEncodedHex = function() {\n        return this.tohex();\n      };\n      if (g != void 0) {\n        this.setByParam(g);\n      }\n    };\n    extendClass(KJUR.asn1.tsp.PKIStatus, KJUR.asn1.ASN1Object);\n    KJUR.asn1.tsp.PKIFreeText = function(g) {\n      var f = Error, e2 = KJUR, d = e2.asn1, b = d.DERSequence, c = d.DERUTF8String, a = d.tsp;\n      a.PKIFreeText.superclass.constructor.call(this);\n      this.params = null;\n      this.tohex = function() {\n        var l = this.params;\n        if (!l instanceof Array) {\n          throw new f(\"wrong params: not array\");\n        }\n        var h = [];\n        for (var k = 0; k < l.length; k++) {\n          h.push(new c({ str: l[k] }));\n        }\n        var j = new b({ array: h });\n        return j.tohex();\n      };\n      this.getEncodedHex = function() {\n        return this.tohex();\n      };\n      if (g != void 0) {\n        this.setByParam(g);\n      }\n    };\n    extendClass(KJUR.asn1.tsp.PKIFreeText, KJUR.asn1.ASN1Object);\n    KJUR.asn1.tsp.PKIFailureInfo = function(h) {\n      var f = Error, e2 = KJUR, d = e2.asn1, g = d.DERBitString, b = d.tsp, c = b.PKIFailureInfo;\n      var a = { badAlg: 0, badRequest: 2, badDataFormat: 5, timeNotAvailable: 14, unacceptedPolicy: 15, unacceptedExtension: 16, addInfoNotAvailable: 17, systemFailure: 25 };\n      c.superclass.constructor.call(this);\n      this.params = null;\n      this.getBinValue = function() {\n        var n2 = this.params;\n        var m = 0;\n        if (typeof n2 == \"number\" && 0 <= n2 && n2 <= 25) {\n          m |= 1 << n2;\n          var k = m.toString(2);\n          var l = \"\";\n          for (var j = k.length - 1; j >= 0; j--) {\n            l += k[j];\n          }\n          return l;\n        } else {\n          if (typeof n2 == \"string\" && a[n2] != void 0) {\n            return namearraytobinstr([n2], a);\n          } else {\n            if (typeof n2 == \"object\" && n2.length != void 0) {\n              return namearraytobinstr(n2, a);\n            } else {\n              throw new f(\"wrong params\");\n            }\n          }\n        }\n        return;\n      };\n      this.tohex = function() {\n        var j = this.params;\n        var i = this.getBinValue();\n        return new g({ bin: i }).tohex();\n      };\n      this.getEncodedHex = function() {\n        return this.tohex();\n      };\n      if (h != void 0) {\n        this.setByParam(h);\n      }\n    };\n    extendClass(KJUR.asn1.tsp.PKIFailureInfo, KJUR.asn1.ASN1Object);\n    KJUR.asn1.tsp.AbstractTSAAdapter = function(a) {\n      this.getTSTHex = function(c, b) {\n        throw \"not implemented yet\";\n      };\n    };\n    KJUR.asn1.tsp.SimpleTSAAdapter = function(e2) {\n      var d = KJUR, c = d.asn1, a = c.tsp, b = d.crypto.Util.hashHex;\n      a.SimpleTSAAdapter.superclass.constructor.call(this);\n      this.params = null;\n      this.serial = 0;\n      this.getTSTHex = function(g, f) {\n        var i = b(g, f);\n        this.params.econtent.content.messageImprint = { alg: f, hash: i };\n        this.params.econtent.content.serial = { \"int\": this.serial++ };\n        var h = Math.floor(Math.random() * 1e9);\n        this.params.econtent.content.nonce = { \"int\": h };\n        var j = new a.TimeStampToken(this.params);\n        return j.getContentInfoEncodedHex();\n      };\n      if (e2 !== void 0) {\n        this.params = e2;\n      }\n    };\n    extendClass(KJUR.asn1.tsp.SimpleTSAAdapter, KJUR.asn1.tsp.AbstractTSAAdapter);\n    KJUR.asn1.tsp.FixedTSAAdapter = function(e2) {\n      var d = KJUR, c = d.asn1, a = c.tsp, b = d.crypto.Util.hashHex;\n      a.FixedTSAAdapter.superclass.constructor.call(this);\n      this.params = null;\n      this.getTSTHex = function(g, f) {\n        var h = b(g, f);\n        this.params.econtent.content.messageImprint = { alg: f, hash: h };\n        var i = new a.TimeStampToken(this.params);\n        return i.getContentInfoEncodedHex();\n      };\n      if (e2 !== void 0) {\n        this.params = e2;\n      }\n    };\n    extendClass(KJUR.asn1.tsp.FixedTSAAdapter, KJUR.asn1.tsp.AbstractTSAAdapter);\n    KJUR.asn1.tsp.TSPUtil = new function() {\n    }();\n    KJUR.asn1.tsp.TSPUtil.newTimeStampToken = function(a) {\n      return new KJUR.asn1.tsp.TimeStampToken(a);\n    };\n    KJUR.asn1.tsp.TSPUtil.parseTimeStampReq = function(a) {\n      var b = new KJUR.asn1.tsp.TSPParser();\n      return b.getTimeStampReq(a);\n    };\n    KJUR.asn1.tsp.TSPUtil.parseMessageImprint = function(a) {\n      var b = new KJUR.asn1.tsp.TSPParser();\n      return b.getMessageImprint(a);\n    };\n    KJUR.asn1.tsp.TSPParser = function() {\n      var e2 = Error, a = X509, f = new a(), k = ASN1HEX, g = k.getV, b = k.getTLV, d = k.getIdxbyList, c = k.getTLVbyListEx, i = k.getChildIdx;\n      var j = [\"granted\", \"grantedWithMods\", \"rejection\", \"waiting\", \"revocationWarning\", \"revocationNotification\"];\n      var h = { 0: \"badAlg\", 2: \"badRequest\", 5: \"badDataFormat\", 14: \"timeNotAvailable\", 15: \"unacceptedPolicy\", 16: \"unacceptedExtension\", 17: \"addInfoNotAvailable\", 25: \"systemFailure\" };\n      this.getResponse = function(n2) {\n        var l = i(n2, 0);\n        if (l.length == 1) {\n          return this.getPKIStatusInfo(b(n2, l[0]));\n        } else {\n          if (l.length > 1) {\n            var o2 = this.getPKIStatusInfo(b(n2, l[0]));\n            var m = b(n2, l[1]);\n            var p = this.getToken(m);\n            p.statusinfo = o2;\n            return p;\n          }\n        }\n      };\n      this.getToken = function(m) {\n        var l = new KJUR.asn1.cms.CMSParser();\n        var n2 = l.getCMSSignedData(m);\n        this.setTSTInfo(n2);\n        return n2;\n      };\n      this.setTSTInfo = function(l) {\n        var o2 = l.econtent;\n        if (o2.type == \"tstinfo\") {\n          var n2 = o2.content.hex;\n          var m = this.getTSTInfo(n2);\n          o2.content = m;\n        }\n      };\n      this.getTSTInfo = function(r2) {\n        var x = {};\n        var s = i(r2, 0);\n        var p = g(r2, s[1]);\n        x.policy = hextooid(p);\n        var o2 = b(r2, s[2]);\n        x.messageImprint = this.getMessageImprint(o2);\n        var u = g(r2, s[3]);\n        x.serial = { hex: u };\n        var y = g(r2, s[4]);\n        x.genTime = { str: hextoutf8(y) };\n        var q = 0;\n        if (s.length > 5 && r2.substr(s[5], 2) == \"30\") {\n          var v = b(r2, s[5]);\n          x.accuracy = this.getAccuracy(v);\n          q++;\n        }\n        if (s.length > 5 + q && r2.substr(s[5 + q], 2) == \"01\") {\n          var z2 = g(r2, s[5 + q]);\n          if (z2 == \"ff\") {\n            x.ordering = true;\n          }\n          q++;\n        }\n        if (s.length > 5 + q && r2.substr(s[5 + q], 2) == \"02\") {\n          var n2 = g(r2, s[5 + q]);\n          x.nonce = { hex: n2 };\n          q++;\n        }\n        if (s.length > 5 + q && r2.substr(s[5 + q], 2) == \"a0\") {\n          var m = b(r2, s[5 + q]);\n          m = \"30\" + m.substr(2);\n          pGeneralNames = f.getGeneralNames(m);\n          var t3 = pGeneralNames[0].dn;\n          x.tsa = t3;\n          q++;\n        }\n        if (s.length > 5 + q && r2.substr(s[5 + q], 2) == \"a1\") {\n          var l = b(r2, s[5 + q]);\n          l = \"30\" + l.substr(2);\n          var w = f.getExtParamArray(l);\n          x.ext = w;\n          q++;\n        }\n        return x;\n      };\n      this.getAccuracy = function(q) {\n        var r2 = {};\n        var o2 = i(q, 0);\n        for (var p = 0; p < o2.length; p++) {\n          var m = q.substr(o2[p], 2);\n          var l = g(q, o2[p]);\n          var n2 = parseInt(l, 16);\n          if (m == \"02\") {\n            r2.seconds = n2;\n          } else {\n            if (m == \"80\") {\n              r2.millis = n2;\n            } else {\n              if (m == \"81\") {\n                r2.micros = n2;\n              }\n            }\n          }\n        }\n        return r2;\n      };\n      this.getMessageImprint = function(n2) {\n        if (n2.substr(0, 2) != \"30\") {\n          throw new Error(\"head of messageImprint hex shall be x30\");\n        }\n        var s = {};\n        var l = i(n2, 0);\n        var t3 = d(n2, 0, [0, 0]);\n        var o2 = g(n2, t3);\n        var p = k.hextooidstr(o2);\n        var r2 = KJUR.asn1.x509.OID.oid2name(p);\n        if (r2 == \"\") {\n          throw new Error(\"hashAlg name undefined: \" + p);\n        }\n        var m = r2;\n        var q = d(n2, 0, [1]);\n        s.alg = m;\n        s.hash = g(n2, q);\n        return s;\n      };\n      this.getPKIStatusInfo = function(o2) {\n        var t3 = {};\n        var r2 = i(o2, 0);\n        var n2 = 0;\n        try {\n          var l = g(o2, r2[0]);\n          var p = parseInt(l, 16);\n          t3.status = j[p];\n        } catch (s) {\n        }\n        if (r2.length > 1 && o2.substr(r2[1], 2) == \"30\") {\n          var m = b(o2, r2[1]);\n          t3.statusstr = this.getPKIFreeText(m);\n          n2++;\n        }\n        if (r2.length > n2 && o2.substr(r2[1 + n2], 2) == \"03\") {\n          var q = b(o2, r2[1 + n2]);\n          t3.failinfo = this.getPKIFailureInfo(q);\n        }\n        return t3;\n      };\n      this.getPKIFreeText = function(n2) {\n        var o2 = [];\n        var l = i(n2, 0);\n        for (var m = 0; m < l.length; m++) {\n          o2.push(k.getString(n2, l[m]));\n        }\n        return o2;\n      };\n      this.getPKIFailureInfo = function(l) {\n        var m = k.getInt(l, 0);\n        if (h[m] != void 0) {\n          return h[m];\n        } else {\n          return m;\n        }\n      };\n      this.getTimeStampReq = function(q) {\n        var p = {};\n        p.certreq = false;\n        var s = i(q, 0);\n        if (s.length < 2) {\n          throw new Error(\"TimeStampReq must have at least 2 items\");\n        }\n        var n2 = b(q, s[1]);\n        p.messageImprint = KJUR.asn1.tsp.TSPUtil.parseMessageImprint(n2);\n        for (var o2 = 2; o2 < s.length; o2++) {\n          var m = s[o2];\n          var l = q.substr(m, 2);\n          if (l == \"06\") {\n            var r2 = g(q, m);\n            p.policy = k.hextooidstr(r2);\n          }\n          if (l == \"02\") {\n            p.nonce = g(q, m);\n          }\n          if (l == \"01\") {\n            p.certreq = true;\n          }\n        }\n        return p;\n      };\n    };\n    if (typeof KJUR == \"undefined\" || !KJUR) {\n      KJUR = {};\n    }\n    if (typeof KJUR.asn1 == \"undefined\" || !KJUR.asn1) {\n      KJUR.asn1 = {};\n    }\n    if (typeof KJUR.asn1.cades == \"undefined\" || !KJUR.asn1.cades) {\n      KJUR.asn1.cades = {};\n    }\n    KJUR.asn1.cades.SignaturePolicyIdentifier = function(e2) {\n      var c = KJUR, b = c.asn1, a = b.cades, d = a.SignaturePolicyId;\n      a.SignaturePolicyIdentifier.superclass.constructor.call(this);\n      this.typeOid = \"1.2.840.113549.1.9.16.2.15\";\n      this.params = null;\n      this.getValueArray = function() {\n        return [new d(this.params)];\n      };\n      this.setByParam = function(f) {\n        this.params = f;\n      };\n      if (e2 != void 0) {\n        this.setByParam(e2);\n      }\n    };\n    extendClass(KJUR.asn1.cades.SignaturePolicyIdentifier, KJUR.asn1.cms.Attribute);\n    KJUR.asn1.cades.SignaturePolicyId = function(e2) {\n      var a = KJUR, g = a.asn1, f = g.DERSequence, i = g.DERObjectIdentifier, d = g.x509, j = d.AlgorithmIdentifier, c = g.cades, h = c.SignaturePolicyId, b = c.OtherHashAlgAndValue;\n      h.superclass.constructor.call(this);\n      this.params = null;\n      this.tohex = function() {\n        var m = this.params;\n        var k = [];\n        k.push(new i(m.oid));\n        k.push(new b(m));\n        var l = new f({ array: k });\n        return l.tohex();\n      };\n      this.getEncodedHex = function() {\n        return this.tohex();\n      };\n      this.setByParam = function(k) {\n        this.params = k;\n      };\n      if (e2 != void 0) {\n        this.setByParam(e2);\n      }\n    };\n    extendClass(KJUR.asn1.cades.SignaturePolicyId, KJUR.asn1.ASN1Object);\n    KJUR.asn1.cades.OtherHashAlgAndValue = function(e2) {\n      var h = Error, a = KJUR, g = a.asn1, f = g.DERSequence, i = g.DEROctetString, d = g.x509, j = d.AlgorithmIdentifier, c = g.cades, b = c.OtherHashAlgAndValue;\n      b.superclass.constructor.call(this);\n      this.params = null;\n      this.tohex = function() {\n        var o2 = this.params;\n        if (o2.alg == void 0) {\n          throw new h(\"property 'alg' not specified\");\n        }\n        if (o2.hash == void 0 && o2.cert == void 0) {\n          throw new h(\"property 'hash' nor 'cert' not specified\");\n        }\n        var m = null;\n        if (o2.hash != void 0) {\n          m = o2.hash;\n        } else {\n          if (o2.cert != void 0) {\n            if (typeof o2.cert != \"string\") {\n              throw new h(\"cert not string\");\n            }\n            var n2 = o2.cert;\n            if (o2.cert.indexOf(\"-----BEGIN\") != -1) {\n              n2 = pemtohex(o2.cert);\n            }\n            m = KJUR.crypto.Util.hashHex(n2, o2.alg);\n          }\n        }\n        var k = [];\n        k.push(new j({ name: o2.alg }));\n        k.push(new i({ hex: m }));\n        var l = new f({ array: k });\n        return l.tohex();\n      };\n      this.getEncodedHex = function() {\n        return this.tohex();\n      };\n      if (e2 != void 0) {\n        this.setByParam(e2);\n      }\n    };\n    extendClass(KJUR.asn1.cades.OtherHashAlgAndValue, KJUR.asn1.ASN1Object);\n    KJUR.asn1.cades.OtherHashValue = function(g) {\n      KJUR.asn1.cades.OtherHashValue.superclass.constructor.call(this);\n      var d = Error, c = KJUR, f = c.lang.String.isHex, b = c.asn1, e2 = b.DEROctetString, a = c.crypto.Util.hashHex;\n      this.params = null;\n      this.tohex = function() {\n        var j = this.params;\n        if (j.hash == void 0 && j.cert == void 0) {\n          throw new d(\"hash or cert not specified\");\n        }\n        var h = null;\n        if (j.hash != void 0) {\n          h = j.hash;\n        } else {\n          if (j.cert != void 0) {\n            if (typeof j.cert != \"string\") {\n              throw new d(\"cert not string\");\n            }\n            var i = j.cert;\n            if (j.cert.indexOf(\"-----BEGIN\") != -1) {\n              i = pemtohex(j.cert);\n            }\n            h = KJUR.crypto.Util.hashHex(i, \"sha1\");\n          }\n        }\n        return new e2({ hex: h }).tohex();\n      };\n      this.getEncodedHex = function() {\n        return this.tohex();\n      };\n      if (g != void 0) {\n        this.setByParam(g);\n      }\n    };\n    extendClass(KJUR.asn1.cades.OtherHashValue, KJUR.asn1.ASN1Object);\n    KJUR.asn1.cades.SignatureTimeStamp = function(h) {\n      var d = Error, c = KJUR, f = c.lang.String.isHex, b = c.asn1, e2 = b.ASN1Object, g = b.x509, a = b.cades;\n      a.SignatureTimeStamp.superclass.constructor.call(this);\n      this.typeOid = \"1.2.840.113549.1.9.16.2.14\";\n      this.params = null;\n      this.getValueArray = function() {\n        var l = this.params;\n        if (l.tst != void 0) {\n          if (f(l.tst)) {\n            var j = new e2();\n            j.hTLV = l.tst;\n            return [j];\n          } else {\n            if (l.tst instanceof e2) {\n              return [l.tst];\n            } else {\n              throw new d(\"params.tst has wrong value\");\n            }\n          }\n        } else {\n          if (l.res != void 0) {\n            var k = l.res;\n            if (k instanceof e2) {\n              k = k.tohex();\n            }\n            if (typeof k != \"string\" || !f(k)) {\n              throw new d(\"params.res has wrong value\");\n            }\n            var i = ASN1HEX.getTLVbyList(k, 0, [1]);\n            var j = new e2();\n            j.hTLV = l.tst;\n            return [j];\n          }\n        }\n      };\n      if (h != null) {\n        this.setByParam(h);\n      }\n    };\n    extendClass(KJUR.asn1.cades.SignatureTimeStamp, KJUR.asn1.cms.Attribute);\n    KJUR.asn1.cades.CompleteCertificateRefs = function(h) {\n      var f = Error, e2 = KJUR, d = e2.asn1, b = d.DERSequence, c = d.cades, a = c.OtherCertID, g = e2.lang.String.isHex;\n      c.CompleteCertificateRefs.superclass.constructor.call(this);\n      this.typeOid = \"1.2.840.113549.1.9.16.2.21\";\n      this.params = null;\n      this.getValueArray = function() {\n        var o2 = this.params;\n        var k = [];\n        for (var m = 0; m < o2.array.length; m++) {\n          var n2 = o2.array[m];\n          if (typeof n2 == \"string\") {\n            if (n2.indexOf(\"-----BEGIN\") != -1) {\n              n2 = { cert: n2 };\n            } else {\n              if (g(n2)) {\n                n2 = { hash: n2 };\n              } else {\n                throw new f(\"unsupported value: \" + n2);\n              }\n            }\n          }\n          if (o2.alg != void 0 && n2.alg == void 0) {\n            n2.alg = o2.alg;\n          }\n          if (o2.hasis != void 0 && n2.hasis == void 0) {\n            n2.hasis = o2.hasis;\n          }\n          var j = new a(n2);\n          k.push(j);\n        }\n        var l = new b({ array: k });\n        return [l];\n      };\n      if (h != void 0) {\n        this.setByParam(h);\n      }\n    };\n    extendClass(KJUR.asn1.cades.CompleteCertificateRefs, KJUR.asn1.cms.Attribute);\n    KJUR.asn1.cades.OtherCertID = function(e2) {\n      var a = KJUR, h = a.asn1, f = h.DERSequence, i = h.cms, g = i.IssuerSerial, c = h.cades, d = c.OtherHashValue, b = c.OtherHashAlgAndValue;\n      c.OtherCertID.superclass.constructor.call(this);\n      this.params = e2;\n      this.tohex = function() {\n        var n2 = this.params;\n        if (typeof n2 == \"string\") {\n          if (n2.indexOf(\"-----BEGIN\") != -1) {\n            n2 = { cert: n2 };\n          } else {\n            if (_isHex(n2)) {\n              n2 = { hash: n2 };\n            }\n          }\n        }\n        var j = [];\n        var m = null;\n        if (n2.alg != void 0) {\n          m = new b(n2);\n        } else {\n          m = new d(n2);\n        }\n        j.push(m);\n        if (n2.cert != void 0 && n2.hasis == true || n2.issuer != void 0 && n2.serial != void 0) {\n          var l = new g(n2);\n          j.push(l);\n        }\n        var k = new f({ array: j });\n        return k.tohex();\n      };\n      this.getEncodedHex = function() {\n        return this.tohex();\n      };\n      if (e2 != void 0) {\n        this.setByParam(e2);\n      }\n    };\n    extendClass(KJUR.asn1.cades.OtherCertID, KJUR.asn1.ASN1Object);\n    KJUR.asn1.cades.OtherHash = function(g) {\n      var i = Error, a = KJUR, h = a.asn1, j = h.cms, c = h.cades, b = c.OtherHashAlgAndValue, e2 = c.OtherHashValue, d = a.crypto.Util.hashHex, f = a.lang.String.isHex;\n      c.OtherHash.superclass.constructor.call(this);\n      this.params = null;\n      this.tohex = function() {\n        var l = this.params;\n        if (typeof l == \"string\") {\n          if (l.indexOf(\"-----BEGIN\") != -1) {\n            l = { cert: l };\n          } else {\n            if (f(l)) {\n              l = { hash: l };\n            }\n          }\n        }\n        var k = null;\n        if (l.alg != void 0) {\n          k = new b(l);\n        } else {\n          k = new e2(l);\n        }\n        return k.tohex();\n      };\n      this.getEncodedHex = function() {\n        return this.tohex();\n      };\n      if (g != void 0) {\n        this.setByParam(g);\n      }\n    };\n    extendClass(KJUR.asn1.cades.OtherHash, KJUR.asn1.ASN1Object);\n    KJUR.asn1.cades.CAdESUtil = new function() {\n    }();\n    KJUR.asn1.cades.CAdESUtil.parseSignedDataForAddingUnsigned = function(a) {\n      var c = new KJUR.asn1.cms.CMSParser();\n      var b = c.getCMSSignedData(a);\n      return b;\n    };\n    KJUR.asn1.cades.CAdESUtil.parseSignerInfoForAddingUnsigned = function(g, q, c) {\n      var p = ASN1HEX, s = p.getChildIdx, a = p.getTLV, l = p.getV, v = KJUR, h = v.asn1, n2 = h.ASN1Object, j = h.cms, k = j.AttributeList, w = j.SignerInfo;\n      var o2 = {};\n      var t3 = s(g, q);\n      if (t3.length != 6) {\n        throw \"not supported items for SignerInfo (!=6)\";\n      }\n      var d = t3.shift();\n      o2.version = a(g, d);\n      var e2 = t3.shift();\n      o2.si = a(g, e2);\n      var m = t3.shift();\n      o2.digalg = a(g, m);\n      var f = t3.shift();\n      o2.sattrs = a(g, f);\n      var i = t3.shift();\n      o2.sigalg = a(g, i);\n      var b = t3.shift();\n      o2.sig = a(g, b);\n      o2.sigval = l(g, b);\n      var u = null;\n      o2.obj = new w();\n      u = new n2();\n      u.hTLV = o2.version;\n      o2.obj.dCMSVersion = u;\n      u = new n2();\n      u.hTLV = o2.si;\n      o2.obj.dSignerIdentifier = u;\n      u = new n2();\n      u.hTLV = o2.digalg;\n      o2.obj.dDigestAlgorithm = u;\n      u = new n2();\n      u.hTLV = o2.sattrs;\n      o2.obj.dSignedAttrs = u;\n      u = new n2();\n      u.hTLV = o2.sigalg;\n      o2.obj.dSigAlg = u;\n      u = new n2();\n      u.hTLV = o2.sig;\n      o2.obj.dSig = u;\n      o2.obj.dUnsignedAttrs = new k();\n      return o2;\n    };\n    if (typeof KJUR.asn1.csr == \"undefined\" || !KJUR.asn1.csr) {\n      KJUR.asn1.csr = {};\n    }\n    KJUR.asn1.csr.CertificationRequest = function(g) {\n      var d = KJUR, c = d.asn1, e2 = c.DERBitString, b = c.DERSequence, a = c.csr, f = c.x509, h = a.CertificationRequestInfo;\n      a.CertificationRequest.superclass.constructor.call(this);\n      this.setByParam = function(i) {\n        this.params = i;\n      };\n      this.sign = function() {\n        var j = new h(this.params).tohex();\n        var k = new KJUR.crypto.Signature({ alg: this.params.sigalg });\n        k.init(this.params.sbjprvkey);\n        k.updateHex(j);\n        var i = k.sign();\n        this.params.sighex = i;\n      };\n      this.getPEM = function() {\n        return hextopem(this.tohex(), \"CERTIFICATE REQUEST\");\n      };\n      this.tohex = function() {\n        var l = this.params;\n        var j = new KJUR.asn1.csr.CertificationRequestInfo(this.params);\n        var m = new KJUR.asn1.x509.AlgorithmIdentifier({ name: l.sigalg });\n        if (l.sighex == void 0 && l.sbjprvkey != void 0) {\n          this.sign();\n        }\n        if (l.sighex == void 0) {\n          throw new Error(\"sighex or sbjprvkey parameter not defined\");\n        }\n        var k = new e2({ hex: \"00\" + l.sighex });\n        var i = new b({ array: [j, m, k] });\n        return i.tohex();\n      };\n      this.getEncodedHex = function() {\n        return this.tohex();\n      };\n      if (g !== void 0) {\n        this.setByParam(g);\n      }\n    };\n    extendClass(KJUR.asn1.csr.CertificationRequest, KJUR.asn1.ASN1Object);\n    KJUR.asn1.csr.CertificationRequestInfo = function(f) {\n      var b = KJUR, j = b.asn1, c = j.DERBitString, g = j.DERSequence, i = j.DERInteger, p = j.DERUTF8String, d = j.DERTaggedObject, h = j.ASN1Util.newObject, n2 = j.csr, e2 = j.x509, a = e2.X500Name, l = e2.Extensions, o2 = e2.SubjectPublicKeyInfo, k = n2.AttributeList;\n      n2.CertificationRequestInfo.superclass.constructor.call(this);\n      this.params = null;\n      this.setByParam = function(q) {\n        if (q != void 0) {\n          this.params = q;\n        }\n      };\n      this.tohex = function() {\n        var v = this.params;\n        var r2 = [];\n        r2.push(new i({ \"int\": 0 }));\n        r2.push(new a(v.subject));\n        r2.push(new o2(KEYUTIL.getKey(v.sbjpubkey)));\n        if (v.attrs != void 0) {\n          var u = m(v.attrs);\n          var t3 = h({ tag: { tage: \"a0\", obj: u } });\n          r2.push(t3);\n        } else {\n          if (v.extreq != void 0) {\n            var q = new l(v.extreq);\n            var t3 = h({ tag: { tage: \"a0\", obj: { seq: [{ oid: \"1.2.840.113549.1.9.14\" }, { set: [q] }] } } });\n            r2.push(t3);\n          } else {\n            r2.push(new d({ tag: \"a0\", explicit: false, obj: new p({ str: \"\" }) }));\n          }\n        }\n        var s = new g({ array: r2 });\n        return s.tohex();\n      };\n      this.getEncodedHex = function() {\n        return this.tohex();\n      };\n      function m(s) {\n        var w = Error, v = KJUR.asn1.x509.Extensions;\n        var y = [];\n        for (var u = 0; u < s.length; u++) {\n          var r2 = s[u];\n          var x = r2.attr;\n          if (x == \"extensionRequest\") {\n            var t3 = new v(r2.ext);\n            var q = { seq: [{ oid: \"1.2.840.113549.1.9.14\" }, { set: [t3] }] };\n            y.push(q);\n          } else {\n            if (x == \"unstructuredName\") {\n              var q = { seq: [{ oid: \"1.2.840.113549.1.9.2\" }, { set: r2.names }] };\n              y.push(q);\n            } else {\n              if (x == \"challengePassword\") {\n                var q = { seq: [{ oid: \"1.2.840.113549.1.9.7\" }, { set: [{ utf8str: r2.password }] }] };\n                y.push(q);\n              } else {\n                throw new w(\"unknown CSR attribute\");\n              }\n            }\n          }\n        }\n        return { set: y };\n      }\n      if (f != void 0) {\n        this.setByParam(f);\n      }\n    };\n    extendClass(KJUR.asn1.csr.CertificationRequestInfo, KJUR.asn1.ASN1Object);\n    KJUR.asn1.csr.AttributeList = function(b) {\n      function a(c) {\n      }\n    };\n    extendClass(KJUR.asn1.csr.AttributeList, KJUR.asn1.ASN1Object);\n    KJUR.asn1.csr.CSRUtil = new function() {\n    }();\n    KJUR.asn1.csr.CSRUtil.newCSRPEM = function(e2) {\n      var b = KEYUTIL, a = KJUR.asn1.csr;\n      var c = new a.CertificationRequest(e2);\n      var d = c.getPEM();\n      return d;\n    };\n    KJUR.asn1.csr.CSRUtil.getParam = function(d, a) {\n      var m = ASN1HEX, i = m.getV, j = m.getIdxbyList, b = m.getTLVbyList, o2 = m.getTLVbyListEx, n2 = m.getVbyListEx;\n      var l = function(u) {\n        var t3 = j(u, 0, [0, 3, 0, 0], \"06\");\n        if (i(u, t3) != \"2a864886f70d01090e\") {\n          return null;\n        }\n        return b(u, 0, [0, 3, 0, 1, 0], \"30\");\n      };\n      var g = {};\n      if (d.indexOf(\"-----BEGIN CERTIFICATE REQUEST\") == -1) {\n        throw new Error(\"argument is not PEM file\");\n      }\n      var e2 = pemtohex(d, \"CERTIFICATE REQUEST\");\n      if (a) {\n        g.tbs = b(e2, 0, [0]);\n      }\n      try {\n        var p = o2(e2, 0, [0, 1]);\n        if (p == \"3000\") {\n          g.subject = {};\n        } else {\n          var f = new X509();\n          g.subject = f.getX500Name(p);\n        }\n      } catch (q) {\n      }\n      var k = o2(e2, 0, [0, 2]);\n      var r2 = KEYUTIL.getKey(k, null, \"pkcs8pub\");\n      g.sbjpubkey = KEYUTIL.getPEM(r2, \"PKCS8PUB\");\n      var c = l(e2);\n      var f = new X509();\n      if (c != null) {\n        g.extreq = f.getExtParamArray(c);\n      }\n      try {\n        var h = o2(e2, 0, [1], \"30\");\n        var f = new X509();\n        g.sigalg = f.getAlgorithmIdentifierName(h);\n      } catch (q) {\n      }\n      try {\n        var s = n2(e2, 0, [2]);\n        g.sighex = s;\n      } catch (q) {\n      }\n      return g;\n    };\n    KJUR.asn1.csr.CSRUtil.verifySignature = function(b) {\n      try {\n        var c = null;\n        if (typeof b == \"string\" && b.indexOf(\"-----BEGIN CERTIFICATE REQUEST\") != -1) {\n          c = KJUR.asn1.csr.CSRUtil.getParam(b, true);\n        } else {\n          if (typeof b == \"object\" && b.sbjpubkey != void 0 && b.sigalg != void 0 && b.sighex != void 0 && b.tbs != void 0) {\n            c = b;\n          }\n        }\n        if (c == null) {\n          return false;\n        }\n        var d = new KJUR.crypto.Signature({ alg: c.sigalg });\n        d.init(c.sbjpubkey);\n        d.updateHex(c.tbs);\n        return d.verify(c.sighex);\n      } catch (a) {\n        alert(a);\n        return false;\n      }\n    };\n    if (typeof KJUR == \"undefined\" || !KJUR) {\n      KJUR = {};\n    }\n    if (typeof KJUR.asn1 == \"undefined\" || !KJUR.asn1) {\n      KJUR.asn1 = {};\n    }\n    if (typeof KJUR.asn1.ocsp == \"undefined\" || !KJUR.asn1.ocsp) {\n      KJUR.asn1.ocsp = {};\n    }\n    KJUR.asn1.ocsp.DEFAULT_HASH = \"sha1\";\n    KJUR.asn1.ocsp.OCSPResponse = function(e2) {\n      KJUR.asn1.ocsp.OCSPResponse.superclass.constructor.call(this);\n      var a = KJUR.asn1.DEREnumerated, b = KJUR.asn1.ASN1Util.newObject, c = KJUR.asn1.ocsp.ResponseBytes;\n      var d = [\"successful\", \"malformedRequest\", \"internalError\", \"tryLater\", \"_not_used_\", \"sigRequired\", \"unauthorized\"];\n      this.params = null;\n      this._getStatusCode = function() {\n        var f = this.params.resstatus;\n        if (typeof f == \"number\") {\n          return f;\n        }\n        if (typeof f != \"string\") {\n          return -1;\n        }\n        return d.indexOf(f);\n      };\n      this.setByParam = function(f) {\n        this.params = f;\n      };\n      this.tohex = function() {\n        var h = this.params;\n        var g = this._getStatusCode();\n        if (g == -1) {\n          throw new Error(\"responseStatus not supported: \" + h.resstatus);\n        }\n        if (g != 0) {\n          return b({ seq: [{ \"enum\": { \"int\": g } }] }).tohex();\n        }\n        var f = new c(h);\n        return b({ seq: [{ \"enum\": { \"int\": 0 } }, { tag: { tag: \"a0\", explicit: true, obj: f } }] }).tohex();\n      };\n      this.getEncodedHex = function() {\n        return this.tohex();\n      };\n      if (e2 !== void 0) {\n        this.setByParam(e2);\n      }\n    };\n    extendClass(KJUR.asn1.ocsp.OCSPResponse, KJUR.asn1.ASN1Object);\n    KJUR.asn1.ocsp.ResponseBytes = function(e2) {\n      KJUR.asn1.ocsp.ResponseBytes.superclass.constructor.call(this);\n      var b = KJUR.asn1, a = b.DERSequence, f = b.DERObjectIdentifier, c = b.DEROctetString, d = b.ocsp.BasicOCSPResponse;\n      this.params = null;\n      this.setByParam = function(g) {\n        this.params = g;\n      };\n      this.tohex = function() {\n        var j = this.params;\n        if (j.restype != \"ocspBasic\") {\n          throw new Error(\"not supported responseType: \" + j.restype);\n        }\n        var i = new d(j);\n        var g = [];\n        g.push(new f({ name: \"ocspBasic\" }));\n        g.push(new c({ hex: i.tohex() }));\n        var h = new a({ array: g });\n        return h.tohex();\n      };\n      this.getEncodedHex = function() {\n        return this.tohex();\n      };\n      if (e2 !== void 0) {\n        this.setByParam(e2);\n      }\n    };\n    extendClass(KJUR.asn1.ocsp.ResponseBytes, KJUR.asn1.ASN1Object);\n    KJUR.asn1.ocsp.BasicOCSPResponse = function(d) {\n      KJUR.asn1.ocsp.BasicOCSPResponse.superclass.constructor.call(this);\n      var i = Error, g = KJUR.asn1, j = g.ASN1Object, e2 = g.DERSequence, f = g.DERGeneralizedTime, c = g.DERTaggedObject, b = g.DERBitString, h = g.x509.Extensions, k = g.x509.AlgorithmIdentifier, l = g.ocsp, a = l.ResponderID;\n      _SingleResponseList = l.SingleResponseList, _ResponseData = l.ResponseData;\n      this.params = null;\n      this.setByParam = function(m) {\n        this.params = m;\n      };\n      this.sign = function() {\n        var o2 = this.params;\n        var m = o2.tbsresp.tohex();\n        var n2 = new KJUR.crypto.Signature({ alg: o2.sigalg });\n        n2.init(o2.reskey);\n        n2.updateHex(m);\n        o2.sighex = n2.sign();\n      };\n      this.tohex = function() {\n        var t3 = this.params;\n        if (t3.tbsresp == void 0) {\n          t3.tbsresp = new _ResponseData(t3);\n        }\n        if (t3.sighex == void 0 && t3.reskey != void 0) {\n          this.sign();\n        }\n        var n2 = [];\n        n2.push(t3.tbsresp);\n        n2.push(new k({ name: t3.sigalg }));\n        n2.push(new b({ hex: \"00\" + t3.sighex }));\n        if (t3.certs != void 0 && t3.certs.length != void 0) {\n          var m = [];\n          for (var q = 0; q < t3.certs.length; q++) {\n            var s = t3.certs[q];\n            var r2 = null;\n            if (ASN1HEX.isASN1HEX(s)) {\n              r2 = s;\n            } else {\n              if (s.match(/-----BEGIN/)) {\n                r2 = pemtohex(s);\n              } else {\n                throw new i(\"certs[\" + q + \"] not hex or PEM\");\n              }\n            }\n            m.push(new j({ tlv: r2 }));\n          }\n          var p = new e2({ array: m });\n          n2.push(new c({ tag: \"a0\", explicit: true, obj: p }));\n        }\n        var o2 = new e2({ array: n2 });\n        return o2.tohex();\n      };\n      this.getEncodedHex = function() {\n        return this.tohex();\n      };\n      if (d !== void 0) {\n        this.setByParam(d);\n      }\n    };\n    extendClass(KJUR.asn1.ocsp.BasicOCSPResponse, KJUR.asn1.ASN1Object);\n    KJUR.asn1.ocsp.ResponseData = function(c) {\n      KJUR.asn1.ocsp.ResponseData.superclass.constructor.call(this);\n      var h = Error, f = KJUR.asn1, d = f.DERSequence, e2 = f.DERGeneralizedTime, b = f.DERTaggedObject, g = f.x509.Extensions, i = f.ocsp, a = i.ResponderID;\n      _SingleResponseList = i.SingleResponseList;\n      this.params = null;\n      this.tohex = function() {\n        var m = this.params;\n        if (m.respid != void 0) {\n          new h(\"respid not specified\");\n        }\n        if (m.prodat != void 0) {\n          new h(\"prodat not specified\");\n        }\n        if (m.array != void 0) {\n          new h(\"array not specified\");\n        }\n        var j = [];\n        j.push(new a(m.respid));\n        j.push(new e2(m.prodat));\n        j.push(new _SingleResponseList(m.array));\n        if (m.ext != void 0) {\n          var l = new g(m.ext);\n          j.push(new b({ tag: \"a1\", explicit: true, obj: l }));\n        }\n        var k = new d({ array: j });\n        return k.tohex();\n      };\n      this.getEncodedHex = function() {\n        return this.tohex();\n      };\n      this.setByParam = function(j) {\n        this.params = j;\n      };\n      if (c !== void 0) {\n        this.setByParam(c);\n      }\n    };\n    extendClass(KJUR.asn1.ocsp.ResponseData, KJUR.asn1.ASN1Object);\n    KJUR.asn1.ocsp.ResponderID = function(g) {\n      KJUR.asn1.ocsp.ResponderID.superclass.constructor.call(this);\n      var d = KJUR, c = d.asn1, b = c.ASN1Util.newObject, f = c.x509.X500Name, e2 = d.lang.String.isHex, a = Error;\n      this.params = null;\n      this.tohex = function() {\n        var m = this.params;\n        if (m.key != void 0) {\n          var l = null;\n          if (typeof m.key == \"string\") {\n            if (e2(m.key)) {\n              l = m.key;\n            }\n            if (m.key.match(/-----BEGIN CERTIFICATE/)) {\n              var h = new X509(m.key);\n              var k = h.getExtSubjectKeyIdentifier();\n              if (k != null) {\n                l = k.kid.hex;\n              }\n            }\n          } else {\n            if (m.key instanceof X509) {\n              var k = m.key.getExtSubjectKeyIdentifier();\n              if (k != null) {\n                l = k.kid.hex;\n              }\n            }\n          }\n          if (l == null) {\n            throw new a(\"wrong key member value\");\n          }\n          var j = b({ tag: { tag: \"a2\", explicit: true, obj: { octstr: { hex: l } } } });\n          return j.tohex();\n        } else {\n          if (m.name != void 0) {\n            var i = null;\n            if (typeof m.name == \"string\" && m.name.match(/-----BEGIN CERTIFICATE/)) {\n              var h = new X509(m.name);\n              i = h.getSubject();\n            } else {\n              if (m.name instanceof X509) {\n                i = m.name.getSubject();\n              } else {\n                if (typeof m.name == \"object\" && (m.name.array != void 0 || m.name.str != void 0)) {\n                  i = m.name;\n                }\n              }\n            }\n            if (i == null) {\n              throw new a(\"wrong name member value\");\n            }\n            var j = b({ tag: { tag: \"a1\", explicit: true, obj: new f(i) } });\n            return j.tohex();\n          }\n        }\n        throw new a(\"key or name not specified\");\n      };\n      this.getEncodedHex = function() {\n        return this.tohex();\n      };\n      this.setByParam = function(h) {\n        this.params = h;\n      };\n      if (g !== void 0) {\n        this.setByParam(g);\n      }\n    };\n    extendClass(KJUR.asn1.ocsp.ResponderID, KJUR.asn1.ASN1Object);\n    KJUR.asn1.ocsp.SingleResponseList = function(d) {\n      KJUR.asn1.ocsp.SingleResponseList.superclass.constructor.call(this);\n      var c = KJUR.asn1, b = c.DERSequence, a = c.ocsp.SingleResponse;\n      this.params = null;\n      this.tohex = function() {\n        var h = this.params;\n        if (typeof h != \"object\" || h.length == void 0) {\n          throw new Error(\"params not specified properly\");\n        }\n        var e2 = [];\n        for (var g = 0; g < h.length; g++) {\n          e2.push(new a(h[g]));\n        }\n        var f = new b({ array: e2 });\n        return f.tohex();\n      };\n      this.getEncodedHex = function() {\n        return this.tohex();\n      };\n      this.setByParam = function(e2) {\n        this.params = e2;\n      };\n      if (d !== void 0) {\n        this.setByParam(d);\n      }\n    };\n    extendClass(KJUR.asn1.ocsp.SingleResponseList, KJUR.asn1.ASN1Object);\n    KJUR.asn1.ocsp.SingleResponse = function(e2) {\n      var k = Error, a = KJUR, i = a.asn1, f = i.DERSequence, g = i.DERGeneralizedTime, b = i.DERTaggedObject, l = i.ocsp, h = l.CertID, c = l.CertStatus, d = i.x509, j = d.Extensions;\n      l.SingleResponse.superclass.constructor.call(this);\n      this.params = null;\n      this.tohex = function() {\n        var q = this.params;\n        var n2 = [];\n        if (q.certid == void 0) {\n          throw new k(\"certid unspecified\");\n        }\n        if (q.status == void 0) {\n          throw new k(\"status unspecified\");\n        }\n        if (q.thisupdate == void 0) {\n          throw new k(\"thisupdate unspecified\");\n        }\n        n2.push(new h(q.certid));\n        n2.push(new c(q.status));\n        n2.push(new g(q.thisupdate));\n        if (q.nextupdate != void 0) {\n          var m = new g(q.nextupdate);\n          n2.push(new b({ tag: \"a0\", explicit: true, obj: m }));\n        }\n        if (q.ext != void 0) {\n          var p = new j(q.ext);\n          n2.push(new b({ tag: \"a1\", explicit: true, obj: p }));\n        }\n        var o2 = new f({ array: n2 });\n        return o2.tohex();\n      };\n      this.getEncodedHex = function() {\n        return this.tohex();\n      };\n      this.setByParam = function(m) {\n        this.params = m;\n      };\n      if (e2 !== void 0) {\n        this.setByParam(e2);\n      }\n    };\n    extendClass(KJUR.asn1.ocsp.SingleResponse, KJUR.asn1.ASN1Object);\n    KJUR.asn1.ocsp.CertID = function(e2) {\n      var b = KJUR, i = b.asn1, l = i.DEROctetString, h = i.DERInteger, f = i.DERSequence, d = i.x509, m = d.AlgorithmIdentifier, n2 = i.ocsp, k = n2.DEFAULT_HASH, g = b.crypto, c = g.Util.hashHex, a = X509, o2 = ASN1HEX, j = o2.getVbyList;\n      n2.CertID.superclass.constructor.call(this);\n      this.DEFAULT_HASH = \"sha1\";\n      this.params = null;\n      this.setByValue = function(s, r2, p, q) {\n        if (q == void 0) {\n          q = this.DEFAULT_HASH;\n        }\n        this.params = { alg: q, issname: s, isskey: r2, sbjsn: p };\n      };\n      this.setByCert = function(p, q, r2) {\n        if (r2 == void 0) {\n          r2 = this.DEFAULT_HASH;\n        }\n        this.params = { alg: r2, issuerCert: p, subjectCert: q };\n      };\n      this.getParamByCerts = function(y, x, t3) {\n        if (t3 == void 0) {\n          t3 = this.DEFAULT_HASH;\n        }\n        var q = new a(y);\n        var v = new a(x);\n        var s = c(q.getSubjectHex(), t3);\n        var u = q.getPublicKeyHex();\n        var p = c(j(u, 0, [1], \"03\", true), t3);\n        var w = v.getSerialNumberHex();\n        var r2 = { alg: t3, issname: s, isskey: p, sbjsn: w };\n        return r2;\n      };\n      this.tohex = function() {\n        if (typeof this.params != \"object\") {\n          throw new Error(\"params not set\");\n        }\n        var s = this.params;\n        var u, r2, y, q;\n        if (s.alg == void 0) {\n          q = this.DEFAULT_HASH;\n        } else {\n          q = s.alg;\n        }\n        if (s.issuerCert != void 0 && s.subjectCert != void 0) {\n          var t3 = this.getParamByCerts(s.issuerCert, s.subjectCert, q);\n          u = t3.issname;\n          r2 = t3.isskey;\n          y = t3.sbjsn;\n        } else {\n          if (s.issname != void 0 && s.isskey != void 0 && s.sbjsn != void 0) {\n            u = s.issname;\n            r2 = s.isskey;\n            y = s.sbjsn;\n          } else {\n            throw new Error(\"required param members not defined\");\n          }\n        }\n        var A = new m({ name: q });\n        var v = new l({ hex: u });\n        var x = new l({ hex: r2 });\n        var w = new h({ hex: y });\n        var z2 = new f({ array: [A, v, x, w] });\n        this.hTLV = z2.tohex();\n        return this.hTLV;\n      };\n      this.getEncodedHex = function() {\n        return this.tohex();\n      };\n      if (e2 !== void 0) {\n        this.setByParam(e2);\n      }\n    };\n    extendClass(KJUR.asn1.ocsp.CertID, KJUR.asn1.ASN1Object);\n    KJUR.asn1.ocsp.CertStatus = function(a) {\n      KJUR.asn1.ocsp.CertStatus.superclass.constructor.call(this);\n      this.params = null;\n      this.tohex = function() {\n        var d = this.params;\n        if (d.status == \"good\") {\n          return \"8000\";\n        }\n        if (d.status == \"unknown\") {\n          return \"8200\";\n        }\n        if (d.status == \"revoked\") {\n          var c = [{ gentime: { str: d.time } }];\n          if (d.reason != void 0) {\n            c.push({ tag: { tag: \"a0\", explicit: true, obj: { \"enum\": { \"int\": d.reason } } } });\n          }\n          var b = { tag: \"a1\", explicit: false, obj: { seq: c } };\n          return KJUR.asn1.ASN1Util.newObject({ tag: b }).tohex();\n        }\n        throw new Error(\"bad status\");\n      };\n      this.getEncodedHex = function() {\n        return this.tohex();\n      };\n      this.setByParam = function(b) {\n        this.params = b;\n      };\n      if (a !== void 0) {\n        this.setByParam(a);\n      }\n    };\n    extendClass(KJUR.asn1.ocsp.CertStatus, KJUR.asn1.ASN1Object);\n    KJUR.asn1.ocsp.Request = function(f) {\n      var c = KJUR, b = c.asn1, a = b.DERSequence, d = b.ocsp;\n      d.Request.superclass.constructor.call(this);\n      this.dReqCert = null;\n      this.dExt = null;\n      this.tohex = function() {\n        var g = [];\n        if (this.dReqCert === null) {\n          throw \"reqCert not set\";\n        }\n        g.push(this.dReqCert);\n        var h = new a({ array: g });\n        this.hTLV = h.tohex();\n        return this.hTLV;\n      };\n      this.getEncodedHex = function() {\n        return this.tohex();\n      };\n      if (typeof f !== \"undefined\") {\n        var e2 = new d.CertID(f);\n        this.dReqCert = e2;\n      }\n    };\n    extendClass(KJUR.asn1.ocsp.Request, KJUR.asn1.ASN1Object);\n    KJUR.asn1.ocsp.TBSRequest = function(e2) {\n      var c = KJUR, b = c.asn1, a = b.DERSequence, d = b.ocsp;\n      d.TBSRequest.superclass.constructor.call(this);\n      this.version = 0;\n      this.dRequestorName = null;\n      this.dRequestList = [];\n      this.dRequestExt = null;\n      this.setRequestListByParam = function(h) {\n        var f = [];\n        for (var g = 0; g < h.length; g++) {\n          var j = new d.Request(h[0]);\n          f.push(j);\n        }\n        this.dRequestList = f;\n      };\n      this.tohex = function() {\n        var f = [];\n        if (this.version !== 0) {\n          throw \"not supported version: \" + this.version;\n        }\n        if (this.dRequestorName !== null) {\n          throw \"requestorName not supported\";\n        }\n        var h = new a({ array: this.dRequestList });\n        f.push(h);\n        if (this.dRequestExt !== null) {\n          throw \"requestExtensions not supported\";\n        }\n        var g = new a({ array: f });\n        this.hTLV = g.tohex();\n        return this.hTLV;\n      };\n      this.getEncodedHex = function() {\n        return this.tohex();\n      };\n      if (e2 !== void 0) {\n        if (e2.reqList !== void 0) {\n          this.setRequestListByParam(e2.reqList);\n        }\n      }\n    };\n    extendClass(KJUR.asn1.ocsp.TBSRequest, KJUR.asn1.ASN1Object);\n    KJUR.asn1.ocsp.OCSPRequest = function(f) {\n      var c = KJUR, b = c.asn1, a = b.DERSequence, d = b.ocsp;\n      d.OCSPRequest.superclass.constructor.call(this);\n      this.dTbsRequest = null;\n      this.dOptionalSignature = null;\n      this.tohex = function() {\n        var g = [];\n        if (this.dTbsRequest !== null) {\n          g.push(this.dTbsRequest);\n        } else {\n          throw \"tbsRequest not set\";\n        }\n        if (this.dOptionalSignature !== null) {\n          throw \"optionalSignature not supported\";\n        }\n        var h = new a({ array: g });\n        this.hTLV = h.tohex();\n        return this.hTLV;\n      };\n      this.getEncodedHex = function() {\n        return this.tohex();\n      };\n      if (f !== void 0) {\n        if (f.reqList !== void 0) {\n          var e2 = new d.TBSRequest(f);\n          this.dTbsRequest = e2;\n        }\n      }\n    };\n    extendClass(KJUR.asn1.ocsp.OCSPRequest, KJUR.asn1.ASN1Object);\n    KJUR.asn1.ocsp.OCSPUtil = {};\n    KJUR.asn1.ocsp.OCSPUtil.getRequestHex = function(a, b, h) {\n      var d = KJUR, c = d.asn1, e2 = c.ocsp;\n      if (h === void 0) {\n        h = e2.DEFAULT_HASH;\n      }\n      var g = { alg: h, issuerCert: a, subjectCert: b };\n      var f = new e2.OCSPRequest({ reqList: [g] });\n      return f.tohex();\n    };\n    KJUR.asn1.ocsp.OCSPUtil.getOCSPResponseInfo = function(b) {\n      var m = ASN1HEX, c = m.getVbyList, k = m.getVbyListEx, e2 = m.getIdxbyList, d = m.getIdxbyListEx, g = m.getV;\n      var n2 = {};\n      try {\n        var j = k(b, 0, [0], \"0a\");\n        n2.responseStatus = parseInt(j, 16);\n      } catch (f) {\n      }\n      if (n2.responseStatus !== 0) {\n        return n2;\n      }\n      try {\n        var i = e2(b, 0, [1, 0, 1, 0, 0, 2, 0, 1]);\n        if (b.substr(i, 2) === \"80\") {\n          n2.certStatus = \"good\";\n        } else {\n          if (b.substr(i, 2) === \"a1\") {\n            n2.certStatus = \"revoked\";\n            n2.revocationTime = hextoutf8(c(b, i, [0]));\n          } else {\n            if (b.substr(i, 2) === \"82\") {\n              n2.certStatus = \"unknown\";\n            }\n          }\n        }\n      } catch (f) {\n      }\n      try {\n        var a = e2(b, 0, [1, 0, 1, 0, 0, 2, 0, 2]);\n        n2.thisUpdate = hextoutf8(g(b, a));\n      } catch (f) {\n      }\n      try {\n        var l = e2(b, 0, [1, 0, 1, 0, 0, 2, 0, 3]);\n        if (b.substr(l, 2) === \"a0\") {\n          n2.nextUpdate = hextoutf8(c(b, l, [0]));\n        }\n      } catch (f) {\n      }\n      return n2;\n    };\n    KJUR.asn1.ocsp.OCSPParser = function() {\n      var g = Error, a = X509, h = new a(), l = ASN1HEX, i = l.getV, b = l.getTLV, f = l.getIdxbyList, e2 = l.getVbyList, c = l.getTLVbyList, k = l.getVbyListEx, d = l.getTLVbyListEx, j = l.getChildIdx;\n      this.getOCSPRequest = function(o2) {\n        var n2 = j(o2, 0);\n        if (n2.length != 1 && n2.length != 2) {\n          throw new g(\"wrong number elements: \" + n2.length);\n        }\n        var m = this.getTBSRequest(b(o2, n2[0]));\n        return m;\n      };\n      this.getTBSRequest = function(o2) {\n        var m = {};\n        var n2 = d(o2, 0, [0], \"30\");\n        m.array = this.getRequestList(n2);\n        var p = d(o2, 0, [\"[2]\", 0], \"30\");\n        if (p != null) {\n          m.ext = h.getExtParamArray(p);\n        }\n        return m;\n      };\n      this.getRequestList = function(p) {\n        var m = [];\n        var n2 = j(p, 0);\n        for (var o2 = 0; o2 < n2.length; o2++) {\n          var p = b(p, n2[o2]);\n          m.push(this.getRequest(p));\n        }\n        return m;\n      };\n      this.getRequest = function(n2) {\n        var m = j(n2, 0);\n        if (m.length != 1 && m.length != 2) {\n          throw new g(\"wrong number elements: \" + m.length);\n        }\n        var p = this.getCertID(b(n2, m[0]));\n        if (m.length == 2) {\n          var o2 = f(n2, 0, [1, 0]);\n          p.ext = h.getExtParamArray(b(n2, o2));\n        }\n        return p;\n      };\n      this.getCertID = function(p) {\n        var o2 = j(p, 0);\n        if (o2.length != 4) {\n          throw new g(\"wrong number elements: \" + o2.length);\n        }\n        var n2 = new a();\n        var m = {};\n        m.alg = n2.getAlgorithmIdentifierName(b(p, o2[0]));\n        m.issname = i(p, o2[1]);\n        m.isskey = i(p, o2[2]);\n        m.sbjsn = i(p, o2[3]);\n        return m;\n      };\n      this.getOCSPResponse = function(r2) {\n        var o2 = j(r2, 0);\n        var m;\n        var q = i(r2, o2[0]);\n        var p = parseInt(q);\n        if (o2.length == 1) {\n          return { resstatus: p };\n        }\n        var n2 = c(r2, 0, [1, 0]);\n        m = this.getResponseBytes(n2);\n        m.resstatus = p;\n        return m;\n      };\n      this.getResponseBytes = function(p) {\n        var o2 = j(p, 0);\n        var n2;\n        var q = c(p, 0, [1, 0]);\n        n2 = this.getBasicOCSPResponse(q);\n        var m = i(p, o2[0]);\n        n2.restype = KJUR.asn1.x509.OID.oid2name(hextooid(m));\n        return n2;\n      };\n      this.getBasicOCSPResponse = function(q) {\n        var t3 = j(q, 0);\n        var v;\n        v = this.getResponseData(b(q, t3[0]));\n        var u = new X509();\n        v.alg = u.getAlgorithmIdentifierName(b(q, t3[1]));\n        var n2 = i(q, t3[2]);\n        v.sighex = n2.substr(2);\n        var m = k(q, 0, [\"[0]\"]);\n        if (m != null) {\n          var r2 = j(m, 0);\n          var o2 = [];\n          for (var p = 0; p < r2.length; p++) {\n            var s = b(m, r2[p]);\n            o2.push(s);\n          }\n          v.certs = o2;\n        }\n        return v;\n      };\n      this.getResponseData = function(q) {\n        var p = j(q, 0);\n        var r2 = p.length;\n        var o2 = {};\n        var n2 = 0;\n        if (q.substr(p[0], 2) == \"a0\") {\n          n2++;\n        }\n        o2.respid = this.getResponderID(b(q, p[n2++]));\n        var t3 = i(q, p[n2++]);\n        o2.prodat = hextoutf8(t3);\n        o2.array = this.getSingleResponseList(b(q, p[n2++]));\n        if (q.substr(p[r2 - 1], 2) == \"a1\") {\n          var s = c(q, p[r2 - 1], [0]);\n          var m = new X509();\n          o2.ext = m.getExtParamArray(s);\n        }\n        return o2;\n      };\n      this.getResponderID = function(o2) {\n        var n2 = {};\n        if (o2.substr(0, 2) == \"a2\") {\n          var p = e2(o2, 0, [0]);\n          n2.key = p;\n        }\n        if (o2.substr(0, 2) == \"a1\") {\n          var q = c(o2, 0, [0]);\n          var m = new X509();\n          n2.name = m.getX500Name(q);\n        }\n        return n2;\n      };\n      this.getSingleResponseList = function(q) {\n        var n2 = j(q, 0);\n        var m = [];\n        for (var o2 = 0; o2 < n2.length; o2++) {\n          var r2 = this.getSingleResponse(b(q, n2[o2]));\n          m.push(r2);\n        }\n        return m;\n      };\n      this.getSingleResponse = function(p) {\n        var t3 = j(p, 0);\n        var v = {};\n        var r2 = this.getCertID(b(p, t3[0]));\n        v.certid = r2;\n        var u = this.getCertStatus(b(p, t3[1]));\n        v.status = u;\n        if (p.substr(t3[2], 2) == \"18\") {\n          var q = i(p, t3[2]);\n          v.thisupdate = hextoutf8(q);\n        }\n        for (var o2 = 3; o2 < t3.length; o2++) {\n          if (p.substr(t3[o2], 2) == \"a0\") {\n            var m = e2(p, t3[o2], [0], \"18\");\n            v.nextupdate = hextoutf8(m);\n          }\n          if (p.substr(t3[o2], 2) == \"a1\") {\n            var s = new X509();\n            var n2 = c(p, 0, [o2, 0]);\n            v.ext = s.getExtParamArray(n2);\n          }\n        }\n        return v;\n      };\n      this.getCertStatus = function(p) {\n        var m = {};\n        if (p == \"8000\") {\n          return { status: \"good\" };\n        }\n        if (p == \"8200\") {\n          return { status: \"unknown\" };\n        }\n        if (p.substr(0, 2) == \"a1\") {\n          m.status = \"revoked\";\n          var o2 = e2(p, 0, [0]);\n          var n2 = hextoutf8(o2);\n          m.time = n2;\n        }\n        return m;\n      };\n    };\n    var KJUR;\n    if (typeof KJUR == \"undefined\" || !KJUR) {\n      KJUR = {};\n    }\n    if (typeof KJUR.lang == \"undefined\" || !KJUR.lang) {\n      KJUR.lang = {};\n    }\n    KJUR.lang.String = function() {\n    };\n    function stoBA(d) {\n      var b = new Array();\n      for (var c = 0; c < d.length; c++) {\n        b[c] = d.charCodeAt(c);\n      }\n      return b;\n    }\n    function BAtos(b) {\n      var d = \"\";\n      for (var c = 0; c < b.length; c++) {\n        d = d + String.fromCharCode(b[c]);\n      }\n      return d;\n    }\n    function BAtohex(b) {\n      var e2 = \"\";\n      for (var d = 0; d < b.length; d++) {\n        var c = b[d].toString(16);\n        if (c.length == 1) {\n          c = \"0\" + c;\n        }\n        e2 = e2 + c;\n      }\n      return e2;\n    }\n    function stohex(a) {\n      return BAtohex(stoBA(a));\n    }\n    function stob64(a) {\n      return hex2b64(stohex(a));\n    }\n    function stob64u(a) {\n      return b64tob64u(hex2b64(stohex(a)));\n    }\n    function b64utos(a) {\n      return BAtos(b64toBA(b64utob64(a)));\n    }\n    function b64tob64u(a) {\n      a = a.replace(/\\=/g, \"\");\n      a = a.replace(/\\+/g, \"-\");\n      a = a.replace(/\\//g, \"_\");\n      return a;\n    }\n    function b64utob64(a) {\n      if (a.length % 4 == 2) {\n        a = a + \"==\";\n      } else {\n        if (a.length % 4 == 3) {\n          a = a + \"=\";\n        }\n      }\n      a = a.replace(/-/g, \"+\");\n      a = a.replace(/_/g, \"/\");\n      return a;\n    }\n    function hextob64u(a) {\n      if (a.length % 2 == 1) {\n        a = \"0\" + a;\n      }\n      return b64tob64u(hex2b64(a));\n    }\n    function b64utohex(a) {\n      return b64tohex(b64utob64(a));\n    }\n    var utf8tob64u;\n    var b64utoutf8;\n    if (typeof Buffer === \"function\") {\n      utf8tob64u = function(a) {\n        return b64tob64u(Buffer.from(a, \"utf8\").toString(\"base64\"));\n      };\n      b64utoutf8 = function(a) {\n        return Buffer.from(b64utob64(a), \"base64\").toString(\"utf8\");\n      };\n    } else {\n      utf8tob64u = function(a) {\n        return hextob64u(uricmptohex(encodeURIComponentAll(a)));\n      };\n      b64utoutf8 = function(a) {\n        return decodeURIComponent(hextouricmp(b64utohex(a)));\n      };\n    }\n    function utf8tob64(a) {\n      return hex2b64(uricmptohex(encodeURIComponentAll(a)));\n    }\n    function b64toutf8(a) {\n      return decodeURIComponent(hextouricmp(b64tohex(a)));\n    }\n    function utf8tohex(a) {\n      return uricmptohex(encodeURIComponentAll(a)).toLowerCase();\n    }\n    function hextoutf8(b) {\n      try {\n        return decodeURIComponent(hextouricmp(b));\n      } catch (a) {\n        return null;\n      }\n    }\n    function iso88591hextoutf8(a) {\n      return hextoutf8(iso88591hextoutf8hex(a));\n    }\n    function iso88591hextoutf8hex(e2) {\n      var c = e2.match(/.{1,2}/g);\n      var b = [];\n      for (var d = 0; d < c.length; d++) {\n        var f = parseInt(c[d], 16);\n        if (161 <= f && f <= 191) {\n          b.push(\"c2\");\n          b.push(c[d]);\n        } else {\n          if (192 <= f && f <= 255) {\n            b.push(\"c3\");\n            b.push((f - 64).toString(16));\n          } else {\n            b.push(c[d]);\n          }\n        }\n      }\n      return b.join(\"\");\n    }\n    function hextorstr(c) {\n      var b = \"\";\n      for (var a = 0; a < c.length - 1; a += 2) {\n        b += String.fromCharCode(parseInt(c.substr(a, 2), 16));\n      }\n      return b;\n    }\n    function rstrtohex(c) {\n      var a = \"\";\n      for (var b = 0; b < c.length; b++) {\n        a += (\"0\" + c.charCodeAt(b).toString(16)).slice(-2);\n      }\n      return a;\n    }\n    function hextob64(a) {\n      return hex2b64(a);\n    }\n    function hextob64nl(b) {\n      var a = hextob64(b);\n      var c = a.replace(/(.{64})/g, \"$1\\r\\n\");\n      c = c.replace(/\\r\\n$/, \"\");\n      return c;\n    }\n    function b64nltohex(b) {\n      var a = b.replace(/[^0-9A-Za-z\\/+=]*/g, \"\");\n      var c = b64tohex(a);\n      return c;\n    }\n    function hextopem(a, b) {\n      var c = hextob64nl(a);\n      return \"-----BEGIN \" + b + \"-----\\r\\n\" + c + \"\\r\\n-----END \" + b + \"-----\\r\\n\";\n    }\n    function pemtohex(a, b) {\n      if (a.indexOf(\"-----BEGIN \") == -1) {\n        throw \"can't find PEM header: \" + b;\n      }\n      if (b !== void 0) {\n        a = a.replace(new RegExp(\"^[^]*-----BEGIN \" + b + \"-----\"), \"\");\n        a = a.replace(new RegExp(\"-----END \" + b + \"-----[^]*$\"), \"\");\n      } else {\n        a = a.replace(/^[^]*-----BEGIN [^-]+-----/, \"\");\n        a = a.replace(/-----END [^-]+-----[^]*$/, \"\");\n      }\n      return b64nltohex(a);\n    }\n    function hextoArrayBuffer(d) {\n      if (d.length % 2 != 0) {\n        throw \"input is not even length\";\n      }\n      if (d.match(/^[0-9A-Fa-f]+$/) == null) {\n        throw \"input is not hexadecimal\";\n      }\n      var b = new ArrayBuffer(d.length / 2);\n      var a = new DataView(b);\n      for (var c = 0; c < d.length / 2; c++) {\n        a.setUint8(c, parseInt(d.substr(c * 2, 2), 16));\n      }\n      return b;\n    }\n    function ArrayBuffertohex(b) {\n      var d = \"\";\n      var a = new DataView(b);\n      for (var c = 0; c < b.byteLength; c++) {\n        d += (\"00\" + a.getUint8(c).toString(16)).slice(-2);\n      }\n      return d;\n    }\n    function zulutomsec(n2) {\n      var l, j, m, e2, f, i, b, k;\n      var a, h, g, c;\n      c = n2.match(/^(\\d{2}|\\d{4})(\\d\\d)(\\d\\d)(\\d\\d)(\\d\\d)(\\d\\d)(|\\.\\d+)Z$/);\n      if (c) {\n        a = c[1];\n        l = parseInt(a);\n        if (a.length === 2) {\n          if (50 <= l && l < 100) {\n            l = 1900 + l;\n          } else {\n            if (0 <= l && l < 50) {\n              l = 2e3 + l;\n            }\n          }\n        }\n        j = parseInt(c[2]) - 1;\n        m = parseInt(c[3]);\n        e2 = parseInt(c[4]);\n        f = parseInt(c[5]);\n        i = parseInt(c[6]);\n        b = 0;\n        h = c[7];\n        if (h !== \"\") {\n          g = (h.substr(1) + \"00\").substr(0, 3);\n          b = parseInt(g);\n        }\n        return Date.UTC(l, j, m, e2, f, i, b);\n      }\n      throw new Error(\"unsupported zulu format: \" + n2);\n    }\n    function zulutosec(a) {\n      return Math.round(zulutomsec(a) / 1e3);\n    }\n    function zulutodate(a) {\n      return new Date(zulutomsec(a));\n    }\n    function datetozulu(g, e2, f) {\n      var b;\n      var a = g.getUTCFullYear();\n      if (e2) {\n        if (a < 1950 || 2049 < a) {\n          throw \"not proper year for UTCTime: \" + a;\n        }\n        b = (\"\" + a).slice(-2);\n      } else {\n        b = (\"000\" + a).slice(-4);\n      }\n      b += (\"0\" + (g.getUTCMonth() + 1)).slice(-2);\n      b += (\"0\" + g.getUTCDate()).slice(-2);\n      b += (\"0\" + g.getUTCHours()).slice(-2);\n      b += (\"0\" + g.getUTCMinutes()).slice(-2);\n      b += (\"0\" + g.getUTCSeconds()).slice(-2);\n      if (f) {\n        var c = g.getUTCMilliseconds();\n        if (c !== 0) {\n          c = (\"00\" + c).slice(-3);\n          c = c.replace(/0+$/g, \"\");\n          b += \".\" + c;\n        }\n      }\n      b += \"Z\";\n      return b;\n    }\n    function uricmptohex(a) {\n      return a.replace(/%/g, \"\");\n    }\n    function hextouricmp(a) {\n      return a.replace(/(..)/g, \"%$1\");\n    }\n    function ipv6tohex(g) {\n      var b = \"malformed IPv6 address\";\n      if (!g.match(/^[0-9A-Fa-f:]+$/)) {\n        throw b;\n      }\n      g = g.toLowerCase();\n      var d = g.split(\":\").length - 1;\n      if (d < 2) {\n        throw b;\n      }\n      var e2 = \":\".repeat(7 - d + 2);\n      g = g.replace(\"::\", e2);\n      var c = g.split(\":\");\n      if (c.length != 8) {\n        throw b;\n      }\n      for (var f = 0; f < 8; f++) {\n        c[f] = (\"0000\" + c[f]).slice(-4);\n      }\n      return c.join(\"\");\n    }\n    function hextoipv6(d) {\n      if (!d.match(/^[0-9A-Fa-f]{32}$/)) {\n        throw new Error(\"malformed IPv6 address: \" + d);\n      }\n      d = d.toLowerCase();\n      var b = d.match(/.{1,4}/g);\n      b = b.map(function(a) {\n        return a.replace(/^0+/, \"\");\n      });\n      b = b.map(function(a) {\n        return a == \"\" ? \"0\" : a;\n      });\n      d = \":\" + b.join(\":\") + \":\";\n      var c = d.match(/:(0:){2,}/g);\n      if (c == null) {\n        return d.slice(1, -1);\n      }\n      var e2 = c.sort().slice(-1)[0];\n      d = d.replace(e2.substr(0, e2.length - 1), \":\");\n      if (d.substr(0, 2) != \"::\") {\n        d = d.substr(1);\n      }\n      if (d.substr(-2, 2) != \"::\") {\n        d = d.substr(0, d.length - 1);\n      }\n      return d;\n    }\n    function hextoip(b) {\n      var c = new Error(\"malformed hex value\");\n      if (!b.match(/^([0-9A-Fa-f][0-9A-Fa-f]){1,}$/)) {\n        throw c;\n      }\n      if (b.length == 8) {\n        var d;\n        try {\n          d = parseInt(b.substr(0, 2), 16) + \".\" + parseInt(b.substr(2, 2), 16) + \".\" + parseInt(b.substr(4, 2), 16) + \".\" + parseInt(b.substr(6, 2), 16);\n          return d;\n        } catch (a) {\n          throw c;\n        }\n      } else {\n        if (b.length == 16) {\n          try {\n            return hextoip(b.substr(0, 8)) + \"/\" + ipprefixlen(b.substr(8));\n          } catch (a) {\n            throw c;\n          }\n        } else {\n          if (b.length == 32) {\n            return hextoipv6(b);\n          } else {\n            if (b.length == 64) {\n              try {\n                return hextoipv6(b.substr(0, 32)) + \"/\" + ipprefixlen(b.substr(32));\n              } catch (a) {\n                throw c;\n              }\n              return;\n            } else {\n              return b;\n            }\n          }\n        }\n      }\n    }\n    function ipprefixlen(c) {\n      var d = new Error(\"malformed mask\");\n      var a;\n      try {\n        a = new BigInteger(c, 16).toString(2);\n      } catch (b) {\n        throw d;\n      }\n      if (!a.match(/^1*0*$/)) {\n        throw d;\n      }\n      return a.replace(/0+$/, \"\").length;\n    }\n    function iptohex(g) {\n      var j = new Error(\"malformed IP address\");\n      g = g.toLowerCase(g);\n      if (!g.match(/^[0-9a-f.:/]+$/)) {\n        throw j;\n      }\n      if (g.match(/^[0-9.]+$/)) {\n        var b = g.split(\".\");\n        if (b.length !== 4) {\n          throw j;\n        }\n        var h = \"\";\n        try {\n          for (var f = 0; f < 4; f++) {\n            var k = parseInt(b[f]);\n            h += (\"0\" + k.toString(16)).slice(-2);\n          }\n          return h;\n        } catch (e2) {\n          throw j;\n        }\n      } else {\n        if (g.match(/^[0-9.]+\\/[0-9]+$/)) {\n          var c = g.split(\"/\");\n          return iptohex(c[0]) + ipnetmask(parseInt(c[1]), 32);\n        } else {\n          if (g.match(/^[0-9a-f:]+$/) && g.indexOf(\":\") !== -1) {\n            return ipv6tohex(g);\n          } else {\n            if (g.match(/^[0-9a-f:]+\\/[0-9]+$/) && g.indexOf(\":\") !== -1) {\n              var c = g.split(\"/\");\n              return ipv6tohex(c[0]) + ipnetmask(parseInt(c[1]), 128);\n            } else {\n              throw j;\n            }\n          }\n        }\n      }\n    }\n    function ipnetmask(d, c) {\n      if (c == 32 && d == 0) {\n        return \"00000000\";\n      }\n      if (c == 128 && d == 0) {\n        return \"00000000000000000000000000000000\";\n      }\n      var a = Array(d + 1).join(\"1\") + Array(c - d + 1).join(\"0\");\n      return new BigInteger(a, 2).toString(16);\n    }\n    function ucs2hextoutf8(d) {\n      function e2(f) {\n        var h = parseInt(f.substr(0, 2), 16);\n        var a = parseInt(f.substr(2), 16);\n        if (h == 0 & a < 128) {\n          return String.fromCharCode(a);\n        }\n        if (h < 8) {\n          var j = 192 | (h & 7) << 3 | (a & 192) >> 6;\n          var i = 128 | a & 63;\n          return hextoutf8(j.toString(16) + i.toString(16));\n        }\n        var j = 224 | (h & 240) >> 4;\n        var i = 128 | (h & 15) << 2 | (a & 192) >> 6;\n        var g = 128 | a & 63;\n        return hextoutf8(j.toString(16) + i.toString(16) + g.toString(16));\n      }\n      var c = d.match(/.{4}/g);\n      var b = c.map(e2);\n      return b.join(\"\");\n    }\n    function encodeURIComponentAll(a) {\n      var d = encodeURIComponent(a);\n      var b = \"\";\n      for (var c = 0; c < d.length; c++) {\n        if (d[c] == \"%\") {\n          b = b + d.substr(c, 3);\n          c = c + 2;\n        } else {\n          b = b + \"%\" + stohex(d[c]);\n        }\n      }\n      return b;\n    }\n    function newline_toUnix(a) {\n      a = a.replace(/\\r\\n/mg, \"\\n\");\n      return a;\n    }\n    function newline_toDos(a) {\n      a = a.replace(/\\r\\n/mg, \"\\n\");\n      a = a.replace(/\\n/mg, \"\\r\\n\");\n      return a;\n    }\n    KJUR.lang.String.isInteger = function(a) {\n      if (a.match(/^[0-9]+$/)) {\n        return true;\n      } else {\n        if (a.match(/^-[0-9]+$/)) {\n          return true;\n        } else {\n          return false;\n        }\n      }\n    };\n    KJUR.lang.String.isHex = function(a) {\n      return ishex(a);\n    };\n    function ishex(a) {\n      if (a.length % 2 == 0 && (a.match(/^[0-9a-f]+$/) || a.match(/^[0-9A-F]+$/))) {\n        return true;\n      } else {\n        return false;\n      }\n    }\n    KJUR.lang.String.isBase64 = function(a) {\n      a = a.replace(/\\s+/g, \"\");\n      if (a.match(/^[0-9A-Za-z+\\/]+={0,3}$/) && a.length % 4 == 0) {\n        return true;\n      } else {\n        return false;\n      }\n    };\n    KJUR.lang.String.isBase64URL = function(a) {\n      if (a.match(/[+/=]/)) {\n        return false;\n      }\n      a = b64utob64(a);\n      return KJUR.lang.String.isBase64(a);\n    };\n    function isBase64URLDot(a) {\n      if (a.match(/^[0-9A-Za-z-_.]+$/)) {\n        return true;\n      }\n      return false;\n    }\n    KJUR.lang.String.isIntegerArray = function(a) {\n      a = a.replace(/\\s+/g, \"\");\n      if (a.match(/^\\[[0-9,]+\\]$/)) {\n        return true;\n      } else {\n        return false;\n      }\n    };\n    KJUR.lang.String.isPrintable = function(a) {\n      if (a.match(/^[0-9A-Za-z '()+,-./:=?]*$/) !== null) {\n        return true;\n      }\n      return false;\n    };\n    KJUR.lang.String.isIA5 = function(a) {\n      if (a.match(/^[\\x20-\\x21\\x23-\\x7f]*$/) !== null) {\n        return true;\n      }\n      return false;\n    };\n    KJUR.lang.String.isMail = function(a) {\n      if (a.match(/^[A-Za-z0-9]{1}[A-Za-z0-9_.-]*@{1}[A-Za-z0-9_.-]{1,}\\.[A-Za-z0-9]{1,}$/) !== null) {\n        return true;\n      }\n      return false;\n    };\n    function hextoposhex(a) {\n      if (a.length % 2 == 1) {\n        return \"0\" + a;\n      }\n      if (a.substr(0, 1) > \"7\") {\n        return \"00\" + a;\n      }\n      return a;\n    }\n    function intarystrtohex(b) {\n      b = b.replace(/^\\s*\\[\\s*/, \"\");\n      b = b.replace(/\\s*\\]\\s*$/, \"\");\n      b = b.replace(/\\s*/g, \"\");\n      try {\n        var c = b.split(/,/).map(function(g, e2, h) {\n          var f = parseInt(g);\n          if (f < 0 || 255 < f) {\n            throw \"integer not in range 0-255\";\n          }\n          var d = (\"00\" + f.toString(16)).slice(-2);\n          return d;\n        }).join(\"\");\n        return c;\n      } catch (a) {\n        throw \"malformed integer array string: \" + a;\n      }\n    }\n    var strdiffidx = function(c, a) {\n      var d = c.length;\n      if (c.length > a.length) {\n        d = a.length;\n      }\n      for (var b = 0; b < d; b++) {\n        if (c.charCodeAt(b) != a.charCodeAt(b)) {\n          return b;\n        }\n      }\n      if (c.length != a.length) {\n        return d;\n      }\n      return -1;\n    };\n    function oidtohex(g) {\n      var f = function(a) {\n        var l = a.toString(16);\n        if (l.length == 1) {\n          l = \"0\" + l;\n        }\n        return l;\n      };\n      var e2 = function(p) {\n        var o2 = \"\";\n        var l = parseInt(p, 10);\n        var a = l.toString(2);\n        var m = 7 - a.length % 7;\n        if (m == 7) {\n          m = 0;\n        }\n        var r2 = \"\";\n        for (var n2 = 0; n2 < m; n2++) {\n          r2 += \"0\";\n        }\n        a = r2 + a;\n        for (var n2 = 0; n2 < a.length - 1; n2 += 7) {\n          var q = a.substr(n2, 7);\n          if (n2 != a.length - 7) {\n            q = \"1\" + q;\n          }\n          o2 += f(parseInt(q, 2));\n        }\n        return o2;\n      };\n      try {\n        if (!g.match(/^[0-9.]+$/)) {\n          return null;\n        }\n        var j = \"\";\n        var b = g.split(\".\");\n        var k = parseInt(b[0], 10) * 40 + parseInt(b[1], 10);\n        j += f(k);\n        b.splice(0, 2);\n        for (var d = 0; d < b.length; d++) {\n          j += e2(b[d]);\n        }\n        return j;\n      } catch (c) {\n        return null;\n      }\n    }\n    function hextooid(g) {\n      if (!ishex(g)) {\n        return null;\n      }\n      try {\n        var m = [];\n        var p = g.substr(0, 2);\n        var e2 = parseInt(p, 16);\n        m[0] = new String(Math.floor(e2 / 40));\n        m[1] = new String(e2 % 40);\n        var n2 = g.substr(2);\n        var l = [];\n        for (var f = 0; f < n2.length / 2; f++) {\n          l.push(parseInt(n2.substr(f * 2, 2), 16));\n        }\n        var k = [];\n        var d = \"\";\n        for (var f = 0; f < l.length; f++) {\n          if (l[f] & 128) {\n            d = d + strpad((l[f] & 127).toString(2), 7);\n          } else {\n            d = d + strpad((l[f] & 127).toString(2), 7);\n            k.push(new String(parseInt(d, 2)));\n            d = \"\";\n          }\n        }\n        var o2 = m.join(\".\");\n        if (k.length > 0) {\n          o2 = o2 + \".\" + k.join(\".\");\n        }\n        return o2;\n      } catch (j) {\n        return null;\n      }\n    }\n    var strpad = function(c, b, a) {\n      if (a == void 0) {\n        a = \"0\";\n      }\n      if (c.length >= b) {\n        return c;\n      }\n      return new Array(b - c.length + 1).join(a) + c;\n    };\n    function bitstrtoint(e2) {\n      if (e2.length % 2 != 0) {\n        return -1;\n      }\n      e2 = e2.toLowerCase();\n      if (e2.match(/^[0-9a-f]+$/) == null) {\n        return -1;\n      }\n      try {\n        var a = e2.substr(0, 2);\n        if (a == \"00\") {\n          return parseInt(e2.substr(2), 16);\n        }\n        var b = parseInt(a, 16);\n        if (b > 7) {\n          return -1;\n        }\n        var g = e2.substr(2);\n        var d = parseInt(g, 16).toString(2);\n        if (d == \"0\") {\n          d = \"00000000\";\n        }\n        d = d.slice(0, 0 - b);\n        var f = parseInt(d, 2);\n        if (f == NaN) {\n          return -1;\n        }\n        return f;\n      } catch (c) {\n        return -1;\n      }\n    }\n    function inttobitstr(e2) {\n      if (typeof e2 != \"number\") {\n        return null;\n      }\n      if (e2 < 0) {\n        return null;\n      }\n      var c = Number(e2).toString(2);\n      var b = 8 - c.length % 8;\n      if (b == 8) {\n        b = 0;\n      }\n      c = c + strpad(\"\", b, \"0\");\n      var d = parseInt(c, 2).toString(16);\n      if (d.length % 2 == 1) {\n        d = \"0\" + d;\n      }\n      var a = \"0\" + b;\n      return a + d;\n    }\n    function bitstrtobinstr(g) {\n      if (typeof g != \"string\") {\n        return null;\n      }\n      if (g.length % 2 != 0) {\n        return null;\n      }\n      if (!g.match(/^[0-9a-f]+$/)) {\n        return null;\n      }\n      try {\n        var c = parseInt(g.substr(0, 2), 16);\n        if (c < 0 || 7 < c) {\n          return null;\n        }\n        var j = g.substr(2);\n        var f = \"\";\n        for (var e2 = 0; e2 < j.length; e2 += 2) {\n          var b = j.substr(e2, 2);\n          var a = parseInt(b, 16).toString(2);\n          a = (\"0000000\" + a).slice(-8);\n          f += a;\n        }\n        return f.substr(0, f.length - c);\n      } catch (d) {\n        return null;\n      }\n    }\n    function binstrtobitstr(b) {\n      if (typeof b != \"string\") {\n        return null;\n      }\n      if (b.match(/^[01]+$/) == null) {\n        return null;\n      }\n      try {\n        var c = parseInt(b, 2);\n        return inttobitstr(c);\n      } catch (a) {\n        return null;\n      }\n    }\n    function namearraytobinstr(e2, g) {\n      var f = 0;\n      for (var a = 0; a < e2.length; a++) {\n        f |= 1 << g[e2[a]];\n      }\n      var b = f.toString(2);\n      var c = \"\";\n      for (var a = b.length - 1; a >= 0; a--) {\n        c += b[a];\n      }\n      return c;\n    }\n    function extendClass(c, a) {\n      var b = function() {\n      };\n      b.prototype = a.prototype;\n      c.prototype = new b();\n      c.prototype.constructor = c;\n      c.superclass = a.prototype;\n      if (a.prototype.constructor == Object.prototype.constructor) {\n        a.prototype.constructor = a;\n      }\n    }\n    if (typeof KJUR == \"undefined\" || !KJUR) {\n      KJUR = {};\n    }\n    if (typeof KJUR.crypto == \"undefined\" || !KJUR.crypto) {\n      KJUR.crypto = {};\n    }\n    KJUR.crypto.Util = new function() {\n      this.DIGESTINFOHEAD = { sha1: \"3021300906052b0e03021a05000414\", sha224: \"302d300d06096086480165030402040500041c\", sha256: \"3031300d060960864801650304020105000420\", sha384: \"3041300d060960864801650304020205000430\", sha512: \"3051300d060960864801650304020305000440\", md2: \"3020300c06082a864886f70d020205000410\", md5: \"3020300c06082a864886f70d020505000410\", ripemd160: \"3021300906052b2403020105000414\" };\n      this.DEFAULTPROVIDER = { md5: \"cryptojs\", sha1: \"cryptojs\", sha224: \"cryptojs\", sha256: \"cryptojs\", sha384: \"cryptojs\", sha512: \"cryptojs\", ripemd160: \"cryptojs\", hmacmd5: \"cryptojs\", hmacsha1: \"cryptojs\", hmacsha224: \"cryptojs\", hmacsha256: \"cryptojs\", hmacsha384: \"cryptojs\", hmacsha512: \"cryptojs\", hmacripemd160: \"cryptojs\", MD5withRSA: \"cryptojs/jsrsa\", SHA1withRSA: \"cryptojs/jsrsa\", SHA224withRSA: \"cryptojs/jsrsa\", SHA256withRSA: \"cryptojs/jsrsa\", SHA384withRSA: \"cryptojs/jsrsa\", SHA512withRSA: \"cryptojs/jsrsa\", RIPEMD160withRSA: \"cryptojs/jsrsa\", MD5withECDSA: \"cryptojs/jsrsa\", SHA1withECDSA: \"cryptojs/jsrsa\", SHA224withECDSA: \"cryptojs/jsrsa\", SHA256withECDSA: \"cryptojs/jsrsa\", SHA384withECDSA: \"cryptojs/jsrsa\", SHA512withECDSA: \"cryptojs/jsrsa\", RIPEMD160withECDSA: \"cryptojs/jsrsa\", SHA1withDSA: \"cryptojs/jsrsa\", SHA224withDSA: \"cryptojs/jsrsa\", SHA256withDSA: \"cryptojs/jsrsa\", MD5withRSAandMGF1: \"cryptojs/jsrsa\", SHAwithRSAandMGF1: \"cryptojs/jsrsa\", SHA1withRSAandMGF1: \"cryptojs/jsrsa\", SHA224withRSAandMGF1: \"cryptojs/jsrsa\", SHA256withRSAandMGF1: \"cryptojs/jsrsa\", SHA384withRSAandMGF1: \"cryptojs/jsrsa\", SHA512withRSAandMGF1: \"cryptojs/jsrsa\", RIPEMD160withRSAandMGF1: \"cryptojs/jsrsa\" };\n      this.CRYPTOJSMESSAGEDIGESTNAME = { md5: CryptoJS.algo.MD5, sha1: CryptoJS.algo.SHA1, sha224: CryptoJS.algo.SHA224, sha256: CryptoJS.algo.SHA256, sha384: CryptoJS.algo.SHA384, sha512: CryptoJS.algo.SHA512, ripemd160: CryptoJS.algo.RIPEMD160 };\n      this.getDigestInfoHex = function(a, b) {\n        if (typeof this.DIGESTINFOHEAD[b] == \"undefined\") {\n          throw \"alg not supported in Util.DIGESTINFOHEAD: \" + b;\n        }\n        return this.DIGESTINFOHEAD[b] + a;\n      };\n      this.getPaddedDigestInfoHex = function(h, a, j) {\n        var c = this.getDigestInfoHex(h, a);\n        var d = j / 4;\n        if (c.length + 22 > d) {\n          throw \"key is too short for SigAlg: keylen=\" + j + \",\" + a;\n        }\n        var b = \"0001\";\n        var k = \"00\" + c;\n        var g = \"\";\n        var l = d - b.length - k.length;\n        for (var f = 0; f < l; f += 2) {\n          g += \"ff\";\n        }\n        var e2 = b + g + k;\n        return e2;\n      };\n      this.hashString = function(a, c) {\n        var b = new KJUR.crypto.MessageDigest({ alg: c });\n        return b.digestString(a);\n      };\n      this.hashHex = function(b, c) {\n        var a = new KJUR.crypto.MessageDigest({ alg: c });\n        return a.digestHex(b);\n      };\n      this.sha1 = function(a) {\n        return this.hashString(a, \"sha1\");\n      };\n      this.sha256 = function(a) {\n        return this.hashString(a, \"sha256\");\n      };\n      this.sha256Hex = function(a) {\n        return this.hashHex(a, \"sha256\");\n      };\n      this.sha512 = function(a) {\n        return this.hashString(a, \"sha512\");\n      };\n      this.sha512Hex = function(a) {\n        return this.hashHex(a, \"sha512\");\n      };\n      this.isKey = function(a) {\n        if (a instanceof RSAKey || a instanceof KJUR.crypto.DSA || a instanceof KJUR.crypto.ECDSA) {\n          return true;\n        } else {\n          return false;\n        }\n      };\n    }();\n    KJUR.crypto.Util.md5 = function(a) {\n      var b = new KJUR.crypto.MessageDigest({ alg: \"md5\", prov: \"cryptojs\" });\n      return b.digestString(a);\n    };\n    KJUR.crypto.Util.ripemd160 = function(a) {\n      var b = new KJUR.crypto.MessageDigest({ alg: \"ripemd160\", prov: \"cryptojs\" });\n      return b.digestString(a);\n    };\n    KJUR.crypto.Util.SECURERANDOMGEN = new SecureRandom();\n    KJUR.crypto.Util.getRandomHexOfNbytes = function(b) {\n      var a = new Array(b);\n      KJUR.crypto.Util.SECURERANDOMGEN.nextBytes(a);\n      return BAtohex(a);\n    };\n    KJUR.crypto.Util.getRandomBigIntegerOfNbytes = function(a) {\n      return new BigInteger(KJUR.crypto.Util.getRandomHexOfNbytes(a), 16);\n    };\n    KJUR.crypto.Util.getRandomHexOfNbits = function(d) {\n      var c = d % 8;\n      var a = (d - c) / 8;\n      var b = new Array(a + 1);\n      KJUR.crypto.Util.SECURERANDOMGEN.nextBytes(b);\n      b[0] = (255 << c & 255 ^ 255) & b[0];\n      return BAtohex(b);\n    };\n    KJUR.crypto.Util.getRandomBigIntegerOfNbits = function(a) {\n      return new BigInteger(KJUR.crypto.Util.getRandomHexOfNbits(a), 16);\n    };\n    KJUR.crypto.Util.getRandomBigIntegerZeroToMax = function(b) {\n      var a = b.bitLength();\n      while (1) {\n        var c = KJUR.crypto.Util.getRandomBigIntegerOfNbits(a);\n        if (b.compareTo(c) != -1) {\n          return c;\n        }\n      }\n    };\n    KJUR.crypto.Util.getRandomBigIntegerMinToMax = function(e2, b) {\n      var c = e2.compareTo(b);\n      if (c == 1) {\n        throw \"biMin is greater than biMax\";\n      }\n      if (c == 0) {\n        return e2;\n      }\n      var a = b.subtract(e2);\n      var d = KJUR.crypto.Util.getRandomBigIntegerZeroToMax(a);\n      return d.add(e2);\n    };\n    KJUR.crypto.MessageDigest = function(c) {\n      var b = null;\n      var a = null;\n      var d = null;\n      this.setAlgAndProvider = function(g, f) {\n        g = KJUR.crypto.MessageDigest.getCanonicalAlgName(g);\n        if (g !== null && f === void 0) {\n          f = KJUR.crypto.Util.DEFAULTPROVIDER[g];\n        }\n        if (\":md5:sha1:sha224:sha256:sha384:sha512:ripemd160:\".indexOf(g) != -1 && f == \"cryptojs\") {\n          try {\n            this.md = KJUR.crypto.Util.CRYPTOJSMESSAGEDIGESTNAME[g].create();\n          } catch (e2) {\n            throw \"setAlgAndProvider hash alg set fail alg=\" + g + \"/\" + e2;\n          }\n          this.updateString = function(h) {\n            this.md.update(h);\n          };\n          this.updateHex = function(h) {\n            var i = CryptoJS.enc.Hex.parse(h);\n            this.md.update(i);\n          };\n          this.digest = function() {\n            var h = this.md.finalize();\n            return h.toString(CryptoJS.enc.Hex);\n          };\n          this.digestString = function(h) {\n            this.updateString(h);\n            return this.digest();\n          };\n          this.digestHex = function(h) {\n            this.updateHex(h);\n            return this.digest();\n          };\n        }\n        if (\":sha256:\".indexOf(g) != -1 && f == \"sjcl\") {\n          try {\n            this.md = new sjcl.hash.sha256();\n          } catch (e2) {\n            throw \"setAlgAndProvider hash alg set fail alg=\" + g + \"/\" + e2;\n          }\n          this.updateString = function(h) {\n            this.md.update(h);\n          };\n          this.updateHex = function(i) {\n            var h = sjcl.codec.hex.toBits(i);\n            this.md.update(h);\n          };\n          this.digest = function() {\n            var h = this.md.finalize();\n            return sjcl.codec.hex.fromBits(h);\n          };\n          this.digestString = function(h) {\n            this.updateString(h);\n            return this.digest();\n          };\n          this.digestHex = function(h) {\n            this.updateHex(h);\n            return this.digest();\n          };\n        }\n      };\n      this.updateString = function(e2) {\n        throw \"updateString(str) not supported for this alg/prov: \" + this.algName + \"/\" + this.provName;\n      };\n      this.updateHex = function(e2) {\n        throw \"updateHex(hex) not supported for this alg/prov: \" + this.algName + \"/\" + this.provName;\n      };\n      this.digest = function() {\n        throw \"digest() not supported for this alg/prov: \" + this.algName + \"/\" + this.provName;\n      };\n      this.digestString = function(e2) {\n        throw \"digestString(str) not supported for this alg/prov: \" + this.algName + \"/\" + this.provName;\n      };\n      this.digestHex = function(e2) {\n        throw \"digestHex(hex) not supported for this alg/prov: \" + this.algName + \"/\" + this.provName;\n      };\n      if (c !== void 0) {\n        if (c.alg !== void 0) {\n          this.algName = c.alg;\n          if (c.prov === void 0) {\n            this.provName = KJUR.crypto.Util.DEFAULTPROVIDER[this.algName];\n          }\n          this.setAlgAndProvider(this.algName, this.provName);\n        }\n      }\n    };\n    KJUR.crypto.MessageDigest.getCanonicalAlgName = function(a) {\n      if (typeof a === \"string\") {\n        a = a.toLowerCase();\n        a = a.replace(/-/, \"\");\n      }\n      return a;\n    };\n    KJUR.crypto.MessageDigest.getHashLength = function(c) {\n      var b = KJUR.crypto.MessageDigest;\n      var a = b.getCanonicalAlgName(c);\n      if (b.HASHLENGTH[a] === void 0) {\n        throw \"not supported algorithm: \" + c;\n      }\n      return b.HASHLENGTH[a];\n    };\n    KJUR.crypto.MessageDigest.HASHLENGTH = { md5: 16, sha1: 20, sha224: 28, sha256: 32, sha384: 48, sha512: 64, ripemd160: 20 };\n    KJUR.crypto.Mac = function(d) {\n      var f = null;\n      var c = null;\n      var a = null;\n      var e2 = null;\n      var b = null;\n      this.setAlgAndProvider = function(k, i) {\n        k = k.toLowerCase();\n        if (k == null) {\n          k = \"hmacsha1\";\n        }\n        k = k.toLowerCase();\n        if (k.substr(0, 4) != \"hmac\") {\n          throw \"setAlgAndProvider unsupported HMAC alg: \" + k;\n        }\n        if (i === void 0) {\n          i = KJUR.crypto.Util.DEFAULTPROVIDER[k];\n        }\n        this.algProv = k + \"/\" + i;\n        var g = k.substr(4);\n        if (\":md5:sha1:sha224:sha256:sha384:sha512:ripemd160:\".indexOf(g) != -1 && i == \"cryptojs\") {\n          try {\n            var j = KJUR.crypto.Util.CRYPTOJSMESSAGEDIGESTNAME[g];\n            this.mac = CryptoJS.algo.HMAC.create(j, this.pass);\n          } catch (h) {\n            throw \"setAlgAndProvider hash alg set fail hashAlg=\" + g + \"/\" + h;\n          }\n          this.updateString = function(l) {\n            this.mac.update(l);\n          };\n          this.updateHex = function(l) {\n            var m = CryptoJS.enc.Hex.parse(l);\n            this.mac.update(m);\n          };\n          this.doFinal = function() {\n            var l = this.mac.finalize();\n            return l.toString(CryptoJS.enc.Hex);\n          };\n          this.doFinalString = function(l) {\n            this.updateString(l);\n            return this.doFinal();\n          };\n          this.doFinalHex = function(l) {\n            this.updateHex(l);\n            return this.doFinal();\n          };\n        }\n      };\n      this.updateString = function(g) {\n        throw \"updateString(str) not supported for this alg/prov: \" + this.algProv;\n      };\n      this.updateHex = function(g) {\n        throw \"updateHex(hex) not supported for this alg/prov: \" + this.algProv;\n      };\n      this.doFinal = function() {\n        throw \"digest() not supported for this alg/prov: \" + this.algProv;\n      };\n      this.doFinalString = function(g) {\n        throw \"digestString(str) not supported for this alg/prov: \" + this.algProv;\n      };\n      this.doFinalHex = function(g) {\n        throw \"digestHex(hex) not supported for this alg/prov: \" + this.algProv;\n      };\n      this.setPassword = function(h) {\n        if (typeof h == \"string\") {\n          var g = h;\n          if (h.length % 2 == 1 || !h.match(/^[0-9A-Fa-f]+$/)) {\n            g = rstrtohex(h);\n          }\n          this.pass = CryptoJS.enc.Hex.parse(g);\n          return;\n        }\n        if (typeof h != \"object\") {\n          throw \"KJUR.crypto.Mac unsupported password type: \" + h;\n        }\n        var g = null;\n        if (h.hex !== void 0) {\n          if (h.hex.length % 2 != 0 || !h.hex.match(/^[0-9A-Fa-f]+$/)) {\n            throw \"Mac: wrong hex password: \" + h.hex;\n          }\n          g = h.hex;\n        }\n        if (h.utf8 !== void 0) {\n          g = utf8tohex(h.utf8);\n        }\n        if (h.rstr !== void 0) {\n          g = rstrtohex(h.rstr);\n        }\n        if (h.b64 !== void 0) {\n          g = b64tohex(h.b64);\n        }\n        if (h.b64u !== void 0) {\n          g = b64utohex(h.b64u);\n        }\n        if (g == null) {\n          throw \"KJUR.crypto.Mac unsupported password type: \" + h;\n        }\n        this.pass = CryptoJS.enc.Hex.parse(g);\n      };\n      if (d !== void 0) {\n        if (d.pass !== void 0) {\n          this.setPassword(d.pass);\n        }\n        if (d.alg !== void 0) {\n          this.algName = d.alg;\n          if (d.prov === void 0) {\n            this.provName = KJUR.crypto.Util.DEFAULTPROVIDER[this.algName];\n          }\n          this.setAlgAndProvider(this.algName, this.provName);\n        }\n      }\n    };\n    KJUR.crypto.Signature = function(o2) {\n      var q = null;\n      var n2 = null;\n      var r2 = null;\n      var c = null;\n      var l = null;\n      var d = null;\n      var k = null;\n      var h = null;\n      var p = null;\n      var e2 = null;\n      var b = -1;\n      var g = null;\n      var j = null;\n      var a = null;\n      var i = null;\n      var f = null;\n      this._setAlgNames = function() {\n        var s = this.algName.match(/^(.+)with(.+)$/);\n        if (s) {\n          this.mdAlgName = s[1].toLowerCase();\n          this.pubkeyAlgName = s[2].toLowerCase();\n          if (this.pubkeyAlgName == \"rsaandmgf1\" && this.mdAlgName == \"sha\") {\n            this.mdAlgName = \"sha1\";\n          }\n        }\n      };\n      this._zeroPaddingOfSignature = function(x, w) {\n        var v = \"\";\n        var t3 = w / 4 - x.length;\n        for (var u = 0; u < t3; u++) {\n          v = v + \"0\";\n        }\n        return v + x;\n      };\n      this.setAlgAndProvider = function(u, t3) {\n        this._setAlgNames();\n        if (t3 != \"cryptojs/jsrsa\") {\n          throw new Error(\"provider not supported: \" + t3);\n        }\n        if (\":md5:sha1:sha224:sha256:sha384:sha512:ripemd160:\".indexOf(this.mdAlgName) != -1) {\n          try {\n            this.md = new KJUR.crypto.MessageDigest({ alg: this.mdAlgName });\n          } catch (s) {\n            throw new Error(\"setAlgAndProvider hash alg set fail alg=\" + this.mdAlgName + \"/\" + s);\n          }\n          this.init = function(w, x) {\n            var y = null;\n            try {\n              if (x === void 0) {\n                y = KEYUTIL.getKey(w);\n              } else {\n                y = KEYUTIL.getKey(w, x);\n              }\n            } catch (v) {\n              throw \"init failed:\" + v;\n            }\n            if (y.isPrivate === true) {\n              this.prvKey = y;\n              this.state = \"SIGN\";\n            } else {\n              if (y.isPublic === true) {\n                this.pubKey = y;\n                this.state = \"VERIFY\";\n              } else {\n                throw \"init failed.:\" + y;\n              }\n            }\n          };\n          this.updateString = function(v) {\n            this.md.updateString(v);\n          };\n          this.updateHex = function(v) {\n            this.md.updateHex(v);\n          };\n          this.sign = function() {\n            this.sHashHex = this.md.digest();\n            if (this.prvKey === void 0 && this.ecprvhex !== void 0 && this.eccurvename !== void 0 && KJUR.crypto.ECDSA !== void 0) {\n              this.prvKey = new KJUR.crypto.ECDSA({ curve: this.eccurvename, prv: this.ecprvhex });\n            }\n            if (this.prvKey instanceof RSAKey && this.pubkeyAlgName === \"rsaandmgf1\") {\n              this.hSign = this.prvKey.signWithMessageHashPSS(this.sHashHex, this.mdAlgName, this.pssSaltLen);\n            } else {\n              if (this.prvKey instanceof RSAKey && this.pubkeyAlgName === \"rsa\") {\n                this.hSign = this.prvKey.signWithMessageHash(this.sHashHex, this.mdAlgName);\n              } else {\n                if (this.prvKey instanceof KJUR.crypto.ECDSA) {\n                  this.hSign = this.prvKey.signWithMessageHash(this.sHashHex);\n                } else {\n                  if (this.prvKey instanceof KJUR.crypto.DSA) {\n                    this.hSign = this.prvKey.signWithMessageHash(this.sHashHex);\n                  } else {\n                    throw \"Signature: unsupported private key alg: \" + this.pubkeyAlgName;\n                  }\n                }\n              }\n            }\n            return this.hSign;\n          };\n          this.signString = function(v) {\n            this.updateString(v);\n            return this.sign();\n          };\n          this.signHex = function(v) {\n            this.updateHex(v);\n            return this.sign();\n          };\n          this.verify = function(v) {\n            this.sHashHex = this.md.digest();\n            if (this.pubKey === void 0 && this.ecpubhex !== void 0 && this.eccurvename !== void 0 && KJUR.crypto.ECDSA !== void 0) {\n              this.pubKey = new KJUR.crypto.ECDSA({ curve: this.eccurvename, pub: this.ecpubhex });\n            }\n            if (this.pubKey instanceof RSAKey && this.pubkeyAlgName === \"rsaandmgf1\") {\n              return this.pubKey.verifyWithMessageHashPSS(this.sHashHex, v, this.mdAlgName, this.pssSaltLen);\n            } else {\n              if (this.pubKey instanceof RSAKey && this.pubkeyAlgName === \"rsa\") {\n                return this.pubKey.verifyWithMessageHash(this.sHashHex, v);\n              } else {\n                if (KJUR.crypto.ECDSA !== void 0 && this.pubKey instanceof KJUR.crypto.ECDSA) {\n                  return this.pubKey.verifyWithMessageHash(this.sHashHex, v);\n                } else {\n                  if (KJUR.crypto.DSA !== void 0 && this.pubKey instanceof KJUR.crypto.DSA) {\n                    return this.pubKey.verifyWithMessageHash(this.sHashHex, v);\n                  } else {\n                    throw \"Signature: unsupported public key alg: \" + this.pubkeyAlgName;\n                  }\n                }\n              }\n            }\n          };\n        }\n      };\n      this.init = function(s, t3) {\n        throw \"init(key, pass) not supported for this alg:prov=\" + this.algProvName;\n      };\n      this.updateString = function(s) {\n        throw \"updateString(str) not supported for this alg:prov=\" + this.algProvName;\n      };\n      this.updateHex = function(s) {\n        throw \"updateHex(hex) not supported for this alg:prov=\" + this.algProvName;\n      };\n      this.sign = function() {\n        throw \"sign() not supported for this alg:prov=\" + this.algProvName;\n      };\n      this.signString = function(s) {\n        throw \"digestString(str) not supported for this alg:prov=\" + this.algProvName;\n      };\n      this.signHex = function(s) {\n        throw \"digestHex(hex) not supported for this alg:prov=\" + this.algProvName;\n      };\n      this.verify = function(s) {\n        throw \"verify(hSigVal) not supported for this alg:prov=\" + this.algProvName;\n      };\n      this.initParams = o2;\n      if (o2 !== void 0) {\n        if (o2.alg !== void 0) {\n          this.algName = o2.alg;\n          if (o2.prov === void 0) {\n            this.provName = KJUR.crypto.Util.DEFAULTPROVIDER[this.algName];\n          } else {\n            this.provName = o2.prov;\n          }\n          this.algProvName = this.algName + \":\" + this.provName;\n          this.setAlgAndProvider(this.algName, this.provName);\n          this._setAlgNames();\n        }\n        if (o2.psssaltlen !== void 0) {\n          this.pssSaltLen = o2.psssaltlen;\n        }\n        if (o2.prvkeypem !== void 0) {\n          if (o2.prvkeypas !== void 0) {\n            throw \"both prvkeypem and prvkeypas parameters not supported\";\n          } else {\n            try {\n              var q = KEYUTIL.getKey(o2.prvkeypem);\n              this.init(q);\n            } catch (m) {\n              throw \"fatal error to load pem private key: \" + m;\n            }\n          }\n        }\n      }\n    };\n    KJUR.crypto.Cipher = function(a) {\n    };\n    KJUR.crypto.Cipher.encrypt = function(e2, f, d) {\n      if (f instanceof RSAKey && f.isPublic) {\n        var c = KJUR.crypto.Cipher.getAlgByKeyAndName(f, d);\n        if (c === \"RSA\") {\n          return f.encrypt(e2);\n        }\n        if (c === \"RSAOAEP\") {\n          return f.encryptOAEP(e2, \"sha1\");\n        }\n        var b = c.match(/^RSAOAEP(\\d+)$/);\n        if (b !== null) {\n          return f.encryptOAEP(e2, \"sha\" + b[1]);\n        }\n        throw \"Cipher.encrypt: unsupported algorithm for RSAKey: \" + d;\n      } else {\n        throw \"Cipher.encrypt: unsupported key or algorithm\";\n      }\n    };\n    KJUR.crypto.Cipher.decrypt = function(e2, f, d) {\n      if (f instanceof RSAKey && f.isPrivate) {\n        var c = KJUR.crypto.Cipher.getAlgByKeyAndName(f, d);\n        if (c === \"RSA\") {\n          return f.decrypt(e2);\n        }\n        if (c === \"RSAOAEP\") {\n          return f.decryptOAEP(e2, \"sha1\");\n        }\n        var b = c.match(/^RSAOAEP(\\d+)$/);\n        if (b !== null) {\n          return f.decryptOAEP(e2, \"sha\" + b[1]);\n        }\n        throw \"Cipher.decrypt: unsupported algorithm for RSAKey: \" + d;\n      } else {\n        throw \"Cipher.decrypt: unsupported key or algorithm\";\n      }\n    };\n    KJUR.crypto.Cipher.getAlgByKeyAndName = function(b, a) {\n      if (b instanceof RSAKey) {\n        if (\":RSA:RSAOAEP:RSAOAEP224:RSAOAEP256:RSAOAEP384:RSAOAEP512:\".indexOf(a) != -1) {\n          return a;\n        }\n        if (a === null || a === void 0) {\n          return \"RSA\";\n        }\n        throw \"getAlgByKeyAndName: not supported algorithm name for RSAKey: \" + a;\n      }\n      throw \"getAlgByKeyAndName: not supported algorithm name: \" + a;\n    };\n    KJUR.crypto.OID = new function() {\n      this.oidhex2name = { \"2a864886f70d010101\": \"rsaEncryption\", \"2a8648ce3d0201\": \"ecPublicKey\", \"2a8648ce380401\": \"dsa\", \"2a8648ce3d030107\": \"secp256r1\", \"2b8104001f\": \"secp192k1\", \"2b81040021\": \"secp224r1\", \"2b8104000a\": \"secp256k1\", \"2b81040022\": \"secp384r1\", \"2b81040023\": \"secp521r1\", \"2a8648ce380403\": \"SHA1withDSA\", \"608648016503040301\": \"SHA224withDSA\", \"608648016503040302\": \"SHA256withDSA\" };\n    }();\n    if (typeof KJUR == \"undefined\" || !KJUR) {\n      KJUR = {};\n    }\n    if (typeof KJUR.crypto == \"undefined\" || !KJUR.crypto) {\n      KJUR.crypto = {};\n    }\n    KJUR.crypto.ECDSA = function(e2) {\n      var g = \"secp256r1\";\n      var p = null;\n      var b = null;\n      var i = null;\n      var j = Error, f = BigInteger, h = ECPointFp, m = KJUR.crypto.ECDSA, c = KJUR.crypto.ECParameterDB, d = m.getName, q = ASN1HEX, n2 = q.getVbyListEx, k = q.isASN1HEX;\n      var a = new SecureRandom();\n      var o2 = null;\n      this.type = \"EC\";\n      this.isPrivate = false;\n      this.isPublic = false;\n      function l(x, t3, w, s) {\n        var r2 = Math.max(t3.bitLength(), s.bitLength());\n        var y = x.add2D(w);\n        var v = x.curve.getInfinity();\n        for (var u = r2 - 1; u >= 0; --u) {\n          v = v.twice2D();\n          v.z = f.ONE;\n          if (t3.testBit(u)) {\n            if (s.testBit(u)) {\n              v = v.add2D(y);\n            } else {\n              v = v.add2D(x);\n            }\n          } else {\n            if (s.testBit(u)) {\n              v = v.add2D(w);\n            }\n          }\n        }\n        return v;\n      }\n      this.getBigRandom = function(r2) {\n        return new f(r2.bitLength(), a).mod(r2.subtract(f.ONE)).add(f.ONE);\n      };\n      this.setNamedCurve = function(r2) {\n        this.ecparams = c.getByName(r2);\n        this.prvKeyHex = null;\n        this.pubKeyHex = null;\n        this.curveName = r2;\n      };\n      this.setPrivateKeyHex = function(r2) {\n        this.isPrivate = true;\n        this.prvKeyHex = r2;\n      };\n      this.setPublicKeyHex = function(r2) {\n        this.isPublic = true;\n        this.pubKeyHex = r2;\n      };\n      this.getPublicKeyXYHex = function() {\n        var t3 = this.pubKeyHex;\n        if (t3.substr(0, 2) !== \"04\") {\n          throw \"this method supports uncompressed format(04) only\";\n        }\n        var s = this.ecparams.keycharlen;\n        if (t3.length !== 2 + s * 2) {\n          throw \"malformed public key hex length\";\n        }\n        var r2 = {};\n        r2.x = t3.substr(2, s);\n        r2.y = t3.substr(2 + s);\n        return r2;\n      };\n      this.getShortNISTPCurveName = function() {\n        var r2 = this.curveName;\n        if (r2 === \"secp256r1\" || r2 === \"NIST P-256\" || r2 === \"P-256\" || r2 === \"prime256v1\") {\n          return \"P-256\";\n        }\n        if (r2 === \"secp384r1\" || r2 === \"NIST P-384\" || r2 === \"P-384\") {\n          return \"P-384\";\n        }\n        if (r2 === \"secp521r1\" || r2 === \"NIST P-521\" || r2 === \"P-521\") {\n          return \"P-521\";\n        }\n        return null;\n      };\n      this.generateKeyPairHex = function() {\n        var s = this.ecparams.n;\n        var u = this.getBigRandom(s);\n        var r2 = this.ecparams.keycharlen;\n        var t3 = (\"0000000000\" + u.toString(16)).slice(-r2);\n        this.setPrivateKeyHex(t3);\n        var v = this.generatePublicKeyHex();\n        return { ecprvhex: t3, ecpubhex: v };\n      };\n      this.generatePublicKeyHex = function() {\n        var u = new f(this.prvKeyHex, 16);\n        var w = this.ecparams.G.multiply(u);\n        var t3 = w.getX().toBigInteger();\n        var s = w.getY().toBigInteger();\n        var r2 = this.ecparams.keycharlen;\n        var y = (\"0000000000\" + t3.toString(16)).slice(-r2);\n        var v = (\"0000000000\" + s.toString(16)).slice(-r2);\n        var x = \"04\" + y + v;\n        this.setPublicKeyHex(x);\n        return x;\n      };\n      this.signWithMessageHash = function(r2) {\n        return this.signHex(r2, this.prvKeyHex);\n      };\n      this.signHex = function(x, u) {\n        var A = new f(u, 16);\n        var v = this.ecparams.n;\n        var z2 = new f(x.substring(0, this.ecparams.keycharlen), 16);\n        do {\n          var w = this.getBigRandom(v);\n          var B = this.ecparams.G;\n          var y = B.multiply(w);\n          var t3 = y.getX().toBigInteger().mod(v);\n        } while (t3.compareTo(f.ZERO) <= 0);\n        var C = w.modInverse(v).multiply(z2.add(A.multiply(t3))).mod(v);\n        return m.biRSSigToASN1Sig(t3, C);\n      };\n      this.sign = function(w, B) {\n        var z2 = B;\n        var u = this.ecparams.n;\n        var y = f.fromByteArrayUnsigned(w);\n        do {\n          var v = this.getBigRandom(u);\n          var A = this.ecparams.G;\n          var x = A.multiply(v);\n          var t3 = x.getX().toBigInteger().mod(u);\n        } while (t3.compareTo(BigInteger.ZERO) <= 0);\n        var C = v.modInverse(u).multiply(y.add(z2.multiply(t3))).mod(u);\n        return this.serializeSig(t3, C);\n      };\n      this.verifyWithMessageHash = function(s, r2) {\n        return this.verifyHex(s, r2, this.pubKeyHex);\n      };\n      this.verifyHex = function(v, y, u) {\n        try {\n          var t3, B;\n          var w = m.parseSigHex(y);\n          t3 = w.r;\n          B = w.s;\n          var x = h.decodeFromHex(this.ecparams.curve, u);\n          var z2 = new f(v.substring(0, this.ecparams.keycharlen), 16);\n          return this.verifyRaw(z2, t3, B, x);\n        } catch (A) {\n          return false;\n        }\n      };\n      this.verify = function(z2, A, u) {\n        var w, t3;\n        if (Bitcoin.Util.isArray(A)) {\n          var y = this.parseSig(A);\n          w = y.r;\n          t3 = y.s;\n        } else {\n          if (\"object\" === typeof A && A.r && A.s) {\n            w = A.r;\n            t3 = A.s;\n          } else {\n            throw \"Invalid value for signature\";\n          }\n        }\n        var v;\n        if (u instanceof ECPointFp) {\n          v = u;\n        } else {\n          if (Bitcoin.Util.isArray(u)) {\n            v = h.decodeFrom(this.ecparams.curve, u);\n          } else {\n            throw \"Invalid format for pubkey value, must be byte array or ECPointFp\";\n          }\n        }\n        var x = f.fromByteArrayUnsigned(z2);\n        return this.verifyRaw(x, w, t3, v);\n      };\n      this.verifyRaw = function(z2, t3, E, y) {\n        var x = this.ecparams.n;\n        var D = this.ecparams.G;\n        if (t3.compareTo(f.ONE) < 0 || t3.compareTo(x) >= 0) {\n          return false;\n        }\n        if (E.compareTo(f.ONE) < 0 || E.compareTo(x) >= 0) {\n          return false;\n        }\n        var A = E.modInverse(x);\n        var w = z2.multiply(A).mod(x);\n        var u = t3.multiply(A).mod(x);\n        var B = D.multiply(w).add(y.multiply(u));\n        var C = B.getX().toBigInteger().mod(x);\n        return C.equals(t3);\n      };\n      this.serializeSig = function(v, u) {\n        var w = v.toByteArraySigned();\n        var t3 = u.toByteArraySigned();\n        var x = [];\n        x.push(2);\n        x.push(w.length);\n        x = x.concat(w);\n        x.push(2);\n        x.push(t3.length);\n        x = x.concat(t3);\n        x.unshift(x.length);\n        x.unshift(48);\n        return x;\n      };\n      this.parseSig = function(y) {\n        var x;\n        if (y[0] != 48) {\n          throw new Error(\"Signature not a valid DERSequence\");\n        }\n        x = 2;\n        if (y[x] != 2) {\n          throw new Error(\"First element in signature must be a DERInteger\");\n        }\n        var w = y.slice(x + 2, x + 2 + y[x + 1]);\n        x += 2 + y[x + 1];\n        if (y[x] != 2) {\n          throw new Error(\"Second element in signature must be a DERInteger\");\n        }\n        var t3 = y.slice(x + 2, x + 2 + y[x + 1]);\n        x += 2 + y[x + 1];\n        var v = f.fromByteArrayUnsigned(w);\n        var u = f.fromByteArrayUnsigned(t3);\n        return { r: v, s: u };\n      };\n      this.parseSigCompact = function(w) {\n        if (w.length !== 65) {\n          throw \"Signature has the wrong length\";\n        }\n        var t3 = w[0] - 27;\n        if (t3 < 0 || t3 > 7) {\n          throw \"Invalid signature type\";\n        }\n        var x = this.ecparams.n;\n        var v = f.fromByteArrayUnsigned(w.slice(1, 33)).mod(x);\n        var u = f.fromByteArrayUnsigned(w.slice(33, 65)).mod(x);\n        return { r: v, s: u, i: t3 };\n      };\n      this.readPKCS5PrvKeyHex = function(u) {\n        if (k(u) === false) {\n          throw new Error(\"not ASN.1 hex string\");\n        }\n        var r2, t3, v;\n        try {\n          r2 = n2(u, 0, [\"[0]\", 0], \"06\");\n          t3 = n2(u, 0, [1], \"04\");\n          try {\n            v = n2(u, 0, [\"[1]\", 0], \"03\");\n          } catch (s) {\n          }\n        } catch (s) {\n          throw new Error(\"malformed PKCS#1/5 plain ECC private key\");\n        }\n        this.curveName = d(r2);\n        if (this.curveName === void 0) {\n          throw \"unsupported curve name\";\n        }\n        this.setNamedCurve(this.curveName);\n        this.setPublicKeyHex(v);\n        this.setPrivateKeyHex(t3);\n        this.isPublic = false;\n      };\n      this.readPKCS8PrvKeyHex = function(v) {\n        if (k(v) === false) {\n          throw new j(\"not ASN.1 hex string\");\n        }\n        var t3, r2, u, w;\n        try {\n          t3 = n2(v, 0, [1, 0], \"06\");\n          r2 = n2(v, 0, [1, 1], \"06\");\n          u = n2(v, 0, [2, 0, 1], \"04\");\n          try {\n            w = n2(v, 0, [2, 0, \"[1]\", 0], \"03\");\n          } catch (s) {\n          }\n        } catch (s) {\n          throw new j(\"malformed PKCS#8 plain ECC private key\");\n        }\n        this.curveName = d(r2);\n        if (this.curveName === void 0) {\n          throw new j(\"unsupported curve name\");\n        }\n        this.setNamedCurve(this.curveName);\n        this.setPublicKeyHex(w);\n        this.setPrivateKeyHex(u);\n        this.isPublic = false;\n      };\n      this.readPKCS8PubKeyHex = function(u) {\n        if (k(u) === false) {\n          throw new j(\"not ASN.1 hex string\");\n        }\n        var t3, r2, v;\n        try {\n          t3 = n2(u, 0, [0, 0], \"06\");\n          r2 = n2(u, 0, [0, 1], \"06\");\n          v = n2(u, 0, [1], \"03\");\n        } catch (s) {\n          throw new j(\"malformed PKCS#8 ECC public key\");\n        }\n        this.curveName = d(r2);\n        if (this.curveName === null) {\n          throw new j(\"unsupported curve name\");\n        }\n        this.setNamedCurve(this.curveName);\n        this.setPublicKeyHex(v);\n      };\n      this.readCertPubKeyHex = function(t3, v) {\n        if (k(t3) === false) {\n          throw new j(\"not ASN.1 hex string\");\n        }\n        var r2, u;\n        try {\n          r2 = n2(t3, 0, [0, 5, 0, 1], \"06\");\n          u = n2(t3, 0, [0, 5, 1], \"03\");\n        } catch (s) {\n          throw new j(\"malformed X.509 certificate ECC public key\");\n        }\n        this.curveName = d(r2);\n        if (this.curveName === null) {\n          throw new j(\"unsupported curve name\");\n        }\n        this.setNamedCurve(this.curveName);\n        this.setPublicKeyHex(u);\n      };\n      if (e2 !== void 0) {\n        if (e2.curve !== void 0) {\n          this.curveName = e2.curve;\n        }\n      }\n      if (this.curveName === void 0) {\n        this.curveName = g;\n      }\n      this.setNamedCurve(this.curveName);\n      if (e2 !== void 0) {\n        if (e2.prv !== void 0) {\n          this.setPrivateKeyHex(e2.prv);\n        }\n        if (e2.pub !== void 0) {\n          this.setPublicKeyHex(e2.pub);\n        }\n      }\n    };\n    KJUR.crypto.ECDSA.parseSigHex = function(a) {\n      var b = KJUR.crypto.ECDSA.parseSigHexInHexRS(a);\n      var d = new BigInteger(b.r, 16);\n      var c = new BigInteger(b.s, 16);\n      return { r: d, s: c };\n    };\n    KJUR.crypto.ECDSA.parseSigHexInHexRS = function(f) {\n      var j = ASN1HEX, i = j.getChildIdx, g = j.getV;\n      j.checkStrictDER(f, 0);\n      if (f.substr(0, 2) != \"30\") {\n        throw new Error(\"signature is not a ASN.1 sequence\");\n      }\n      var h = i(f, 0);\n      if (h.length != 2) {\n        throw new Error(\"signature shall have two elements\");\n      }\n      var e2 = h[0];\n      var d = h[1];\n      if (f.substr(e2, 2) != \"02\") {\n        throw new Error(\"1st item not ASN.1 integer\");\n      }\n      if (f.substr(d, 2) != \"02\") {\n        throw new Error(\"2nd item not ASN.1 integer\");\n      }\n      var c = g(f, e2);\n      var b = g(f, d);\n      return { r: c, s: b };\n    };\n    KJUR.crypto.ECDSA.asn1SigToConcatSig = function(d) {\n      var e2 = KJUR.crypto.ECDSA.parseSigHexInHexRS(d);\n      var b = e2.r;\n      var a = e2.s;\n      if (b.length >= 130 && b.length <= 134) {\n        if (b.length % 2 != 0) {\n          throw Error(\"unknown ECDSA sig r length error\");\n        }\n        if (a.length % 2 != 0) {\n          throw Error(\"unknown ECDSA sig s length error\");\n        }\n        if (b.substr(0, 2) == \"00\") {\n          b = b.substr(2);\n        }\n        if (a.substr(0, 2) == \"00\") {\n          a = a.substr(2);\n        }\n        var c = Math.max(b.length, a.length);\n        b = (\"000000\" + b).slice(-c);\n        a = (\"000000\" + a).slice(-c);\n        return b + a;\n      }\n      if (b.substr(0, 2) == \"00\" && b.length % 32 == 2) {\n        b = b.substr(2);\n      }\n      if (a.substr(0, 2) == \"00\" && a.length % 32 == 2) {\n        a = a.substr(2);\n      }\n      if (b.length % 32 == 30) {\n        b = \"00\" + b;\n      }\n      if (a.length % 32 == 30) {\n        a = \"00\" + a;\n      }\n      if (b.length % 32 != 0) {\n        throw Error(\"unknown ECDSA sig r length error\");\n      }\n      if (a.length % 32 != 0) {\n        throw Error(\"unknown ECDSA sig s length error\");\n      }\n      return b + a;\n    };\n    KJUR.crypto.ECDSA.concatSigToASN1Sig = function(a) {\n      if (a.length % 4 != 0) {\n        throw Error(\"unknown ECDSA concatinated r-s sig length error\");\n      }\n      var c = a.substr(0, a.length / 2);\n      var b = a.substr(a.length / 2);\n      return KJUR.crypto.ECDSA.hexRSSigToASN1Sig(c, b);\n    };\n    KJUR.crypto.ECDSA.hexRSSigToASN1Sig = function(b, a) {\n      var d = new BigInteger(b, 16);\n      var c = new BigInteger(a, 16);\n      return KJUR.crypto.ECDSA.biRSSigToASN1Sig(d, c);\n    };\n    KJUR.crypto.ECDSA.biRSSigToASN1Sig = function(f, d) {\n      var c = KJUR.asn1;\n      var b = new c.DERInteger({ bigint: f });\n      var a = new c.DERInteger({ bigint: d });\n      var e2 = new c.DERSequence({ array: [b, a] });\n      return e2.tohex();\n    };\n    KJUR.crypto.ECDSA.getName = function(a) {\n      if (a === \"2b8104001f\") {\n        return \"secp192k1\";\n      }\n      if (a === \"2a8648ce3d030107\") {\n        return \"secp256r1\";\n      }\n      if (a === \"2b8104000a\") {\n        return \"secp256k1\";\n      }\n      if (a === \"2b81040021\") {\n        return \"secp224r1\";\n      }\n      if (a === \"2b81040022\") {\n        return \"secp384r1\";\n      }\n      if (a === \"2b81040023\") {\n        return \"secp521r1\";\n      }\n      if (\"|secp256r1|NIST P-256|P-256|prime256v1|\".indexOf(a) !== -1) {\n        return \"secp256r1\";\n      }\n      if (\"|secp256k1|\".indexOf(a) !== -1) {\n        return \"secp256k1\";\n      }\n      if (\"|secp224r1|NIST P-224|P-224|\".indexOf(a) !== -1) {\n        return \"secp224r1\";\n      }\n      if (\"|secp384r1|NIST P-384|P-384|\".indexOf(a) !== -1) {\n        return \"secp384r1\";\n      }\n      if (\"|secp521r1|NIST P-521|P-521|\".indexOf(a) !== -1) {\n        return \"secp521r1\";\n      }\n      return null;\n    };\n    if (typeof KJUR == \"undefined\" || !KJUR) {\n      KJUR = {};\n    }\n    if (typeof KJUR.crypto == \"undefined\" || !KJUR.crypto) {\n      KJUR.crypto = {};\n    }\n    KJUR.crypto.ECParameterDB = new function() {\n      var b = {};\n      var c = {};\n      function a(d) {\n        return new BigInteger(d, 16);\n      }\n      this.getByName = function(e2) {\n        var d = e2;\n        if (typeof c[d] != \"undefined\") {\n          d = c[e2];\n        }\n        if (typeof b[d] != \"undefined\") {\n          return b[d];\n        }\n        throw \"unregistered EC curve name: \" + d;\n      };\n      this.regist = function(A, l, o2, g, m, e2, j, f, k, u, d, x) {\n        b[A] = {};\n        var s = a(o2);\n        var z2 = a(g);\n        var y = a(m);\n        var t3 = a(e2);\n        var w = a(j);\n        var r2 = new ECCurveFp(s, z2, y);\n        var q = r2.decodePointHex(\"04\" + f + k);\n        b[A][\"name\"] = A;\n        b[A][\"keylen\"] = l;\n        b[A][\"keycharlen\"] = Math.ceil(l / 8) * 2;\n        b[A][\"curve\"] = r2;\n        b[A][\"G\"] = q;\n        b[A][\"n\"] = t3;\n        b[A][\"h\"] = w;\n        b[A][\"oid\"] = d;\n        b[A][\"info\"] = x;\n        for (var v = 0; v < u.length; v++) {\n          c[u[v]] = A;\n        }\n      };\n    }();\n    KJUR.crypto.ECParameterDB.regist(\"secp128r1\", 128, \"FFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFF\", \"FFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFC\", \"E87579C11079F43DD824993C2CEE5ED3\", \"FFFFFFFE0000000075A30D1B9038A115\", \"1\", \"161FF7528B899B2D0C28607CA52C5B86\", \"CF5AC8395BAFEB13C02DA292DDED7A83\", [], \"\", \"secp128r1 : SECG curve over a 128 bit prime field\");\n    KJUR.crypto.ECParameterDB.regist(\"secp160k1\", 160, \"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFAC73\", \"0\", \"7\", \"0100000000000000000001B8FA16DFAB9ACA16B6B3\", \"1\", \"3B4C382CE37AA192A4019E763036F4F5DD4D7EBB\", \"938CF935318FDCED6BC28286531733C3F03C4FEE\", [], \"\", \"secp160k1 : SECG curve over a 160 bit prime field\");\n    KJUR.crypto.ECParameterDB.regist(\"secp160r1\", 160, \"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7FFFFFFF\", \"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7FFFFFFC\", \"1C97BEFC54BD7A8B65ACF89F81D4D4ADC565FA45\", \"0100000000000000000001F4C8F927AED3CA752257\", \"1\", \"4A96B5688EF573284664698968C38BB913CBFC82\", \"23A628553168947D59DCC912042351377AC5FB32\", [], \"\", \"secp160r1 : SECG curve over a 160 bit prime field\");\n    KJUR.crypto.ECParameterDB.regist(\"secp192k1\", 192, \"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFEE37\", \"0\", \"3\", \"FFFFFFFFFFFFFFFFFFFFFFFE26F2FC170F69466A74DEFD8D\", \"1\", \"DB4FF10EC057E9AE26B07D0280B7F4341DA5D1B1EAE06C7D\", \"9B2F2F6D9C5628A7844163D015BE86344082AA88D95E2F9D\", []);\n    KJUR.crypto.ECParameterDB.regist(\"secp192r1\", 192, \"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFFFFF\", \"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFFFFC\", \"64210519E59C80E70FA7E9AB72243049FEB8DEECC146B9B1\", \"FFFFFFFFFFFFFFFFFFFFFFFF99DEF836146BC9B1B4D22831\", \"1\", \"188DA80EB03090F67CBF20EB43A18800F4FF0AFD82FF1012\", \"07192B95FFC8DA78631011ED6B24CDD573F977A11E794811\", []);\n    KJUR.crypto.ECParameterDB.regist(\"secp224r1\", 224, \"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000001\", \"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFFFFFFFFFFFFE\", \"B4050A850C04B3ABF54132565044B0B7D7BFD8BA270B39432355FFB4\", \"FFFFFFFFFFFFFFFFFFFFFFFFFFFF16A2E0B8F03E13DD29455C5C2A3D\", \"1\", \"B70E0CBD6BB4BF7F321390B94A03C1D356C21122343280D6115C1D21\", \"BD376388B5F723FB4C22DFE6CD4375A05A07476444D5819985007E34\", []);\n    KJUR.crypto.ECParameterDB.regist(\"secp256k1\", 256, \"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F\", \"0\", \"7\", \"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141\", \"1\", \"79BE667EF9DCBBAC55A06295CE870B07029BFCDB2DCE28D959F2815B16F81798\", \"483ADA7726A3C4655DA4FBFC0E1108A8FD17B448A68554199C47D08FFB10D4B8\", []);\n    KJUR.crypto.ECParameterDB.regist(\"secp256r1\", 256, \"FFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF\", \"FFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFC\", \"5AC635D8AA3A93E7B3EBBD55769886BC651D06B0CC53B0F63BCE3C3E27D2604B\", \"FFFFFFFF00000000FFFFFFFFFFFFFFFFBCE6FAADA7179E84F3B9CAC2FC632551\", \"1\", \"6B17D1F2E12C4247F8BCE6E563A440F277037D812DEB33A0F4A13945D898C296\", \"4FE342E2FE1A7F9B8EE7EB4A7C0F9E162BCE33576B315ECECBB6406837BF51F5\", [\"NIST P-256\", \"P-256\", \"prime256v1\"]);\n    KJUR.crypto.ECParameterDB.regist(\"secp384r1\", 384, \"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFF0000000000000000FFFFFFFF\", \"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFF0000000000000000FFFFFFFC\", \"B3312FA7E23EE7E4988E056BE3F82D19181D9C6EFE8141120314088F5013875AC656398D8A2ED19D2A85C8EDD3EC2AEF\", \"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC7634D81F4372DDF581A0DB248B0A77AECEC196ACCC52973\", \"1\", \"AA87CA22BE8B05378EB1C71EF320AD746E1D3B628BA79B9859F741E082542A385502F25DBF55296C3A545E3872760AB7\", \"3617de4a96262c6f5d9e98bf9292dc29f8f41dbd289a147ce9da3113b5f0b8c00a60b1ce1d7e819d7a431d7c90ea0e5f\", [\"NIST P-384\", \"P-384\"]);\n    KJUR.crypto.ECParameterDB.regist(\"secp521r1\", 521, \"1FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\", \"1FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC\", \"051953EB9618E1C9A1F929A21A0B68540EEA2DA725B99B315F3B8B489918EF109E156193951EC7E937B1652C0BD3BB1BF073573DF883D2C34F1EF451FD46B503F00\", \"1FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFA51868783BF2F966B7FCC0148F709A5D03BB5C9B8899C47AEBB6FB71E91386409\", \"1\", \"00C6858E06B70404E9CD9E3ECB662395B4429C648139053FB521F828AF606B4D3DBAA14B5E77EFE75928FE1DC127A2FFA8DE3348B3C1856A429BF97E7E31C2E5BD66\", \"011839296a789a3bc0045c8a5fb42c7d1bd998f54449579b446817afbd17273e662c97ee72995ef42640c550b9013fad0761353c7086a272c24088be94769fd16650\", [\"NIST P-521\", \"P-521\"]);\n    if (typeof KJUR == \"undefined\" || !KJUR) {\n      KJUR = {};\n    }\n    if (typeof KJUR.crypto == \"undefined\" || !KJUR.crypto) {\n      KJUR.crypto = {};\n    }\n    KJUR.crypto.DSA = function() {\n      var b = ASN1HEX, e2 = b.getVbyList, d = b.getVbyListEx, a = b.isASN1HEX, c = BigInteger;\n      this.p = null;\n      this.q = null;\n      this.g = null;\n      this.y = null;\n      this.x = null;\n      this.type = \"DSA\";\n      this.isPrivate = false;\n      this.isPublic = false;\n      this.setPrivate = function(j, i, h, k, f) {\n        this.isPrivate = true;\n        this.p = j;\n        this.q = i;\n        this.g = h;\n        this.y = k;\n        this.x = f;\n      };\n      this.setPrivateHex = function(i, g, k, n2, o2) {\n        var h, f, j, l, m;\n        h = new BigInteger(i, 16);\n        f = new BigInteger(g, 16);\n        j = new BigInteger(k, 16);\n        if (typeof n2 === \"string\" && n2.length > 1) {\n          l = new BigInteger(n2, 16);\n        } else {\n          l = null;\n        }\n        m = new BigInteger(o2, 16);\n        this.setPrivate(h, f, j, l, m);\n      };\n      this.setPublic = function(i, h, f, j) {\n        this.isPublic = true;\n        this.p = i;\n        this.q = h;\n        this.g = f;\n        this.y = j;\n        this.x = null;\n      };\n      this.setPublicHex = function(k, j, i, l) {\n        var g, f, m, h;\n        g = new BigInteger(k, 16);\n        f = new BigInteger(j, 16);\n        m = new BigInteger(i, 16);\n        h = new BigInteger(l, 16);\n        this.setPublic(g, f, m, h);\n      };\n      this.signWithMessageHash = function(j) {\n        var i = this.p;\n        var h = this.q;\n        var m = this.g;\n        var o2 = this.y;\n        var t3 = this.x;\n        var l = KJUR.crypto.Util.getRandomBigIntegerMinToMax(BigInteger.ONE.add(BigInteger.ONE), h.subtract(BigInteger.ONE));\n        var u = j.substr(0, h.bitLength() / 4);\n        var n2 = new BigInteger(u, 16);\n        var f = m.modPow(l, i).mod(h);\n        var w = l.modInverse(h).multiply(n2.add(t3.multiply(f))).mod(h);\n        var v = KJUR.asn1.ASN1Util.jsonToASN1HEX({ seq: [{ \"int\": { bigint: f } }, { \"int\": { bigint: w } }] });\n        return v;\n      };\n      this.verifyWithMessageHash = function(m, l) {\n        var j = this.p;\n        var h = this.q;\n        var o2 = this.g;\n        var u = this.y;\n        var n2 = this.parseASN1Signature(l);\n        var f = n2[0];\n        var C = n2[1];\n        var B = m.substr(0, h.bitLength() / 4);\n        var t3 = new BigInteger(B, 16);\n        if (BigInteger.ZERO.compareTo(f) > 0 || f.compareTo(h) > 0) {\n          throw \"invalid DSA signature\";\n        }\n        if (BigInteger.ZERO.compareTo(C) >= 0 || C.compareTo(h) > 0) {\n          throw \"invalid DSA signature\";\n        }\n        var x = C.modInverse(h);\n        var k = t3.multiply(x).mod(h);\n        var i = f.multiply(x).mod(h);\n        var A = o2.modPow(k, j).multiply(u.modPow(i, j)).mod(j).mod(h);\n        return A.compareTo(f) == 0;\n      };\n      this.parseASN1Signature = function(f) {\n        try {\n          var i = new c(d(f, 0, [0], \"02\"), 16);\n          var h = new c(d(f, 0, [1], \"02\"), 16);\n          return [i, h];\n        } catch (g) {\n          throw new Error(\"malformed ASN.1 DSA signature\");\n        }\n      };\n      this.readPKCS5PrvKeyHex = function(j) {\n        var k, i, g, l, m;\n        if (a(j) === false) {\n          throw new Error(\"not ASN.1 hex string\");\n        }\n        try {\n          k = d(j, 0, [1], \"02\");\n          i = d(j, 0, [2], \"02\");\n          g = d(j, 0, [3], \"02\");\n          l = d(j, 0, [4], \"02\");\n          m = d(j, 0, [5], \"02\");\n        } catch (f) {\n          throw new Error(\"malformed PKCS#1/5 plain DSA private key\");\n        }\n        this.setPrivateHex(k, i, g, l, m);\n      };\n      this.readPKCS8PrvKeyHex = function(j) {\n        var k, i, g, l;\n        if (a(j) === false) {\n          throw new Error(\"not ASN.1 hex string\");\n        }\n        try {\n          k = d(j, 0, [1, 1, 0], \"02\");\n          i = d(j, 0, [1, 1, 1], \"02\");\n          g = d(j, 0, [1, 1, 2], \"02\");\n          l = d(j, 0, [2, 0], \"02\");\n        } catch (f) {\n          throw new Error(\"malformed PKCS#8 plain DSA private key\");\n        }\n        this.setPrivateHex(k, i, g, null, l);\n      };\n      this.readPKCS8PubKeyHex = function(j) {\n        var k, i, g, l;\n        if (a(j) === false) {\n          throw new Error(\"not ASN.1 hex string\");\n        }\n        try {\n          k = d(j, 0, [0, 1, 0], \"02\");\n          i = d(j, 0, [0, 1, 1], \"02\");\n          g = d(j, 0, [0, 1, 2], \"02\");\n          l = d(j, 0, [1, 0], \"02\");\n        } catch (f) {\n          throw new Error(\"malformed PKCS#8 DSA public key\");\n        }\n        this.setPublicHex(k, i, g, l);\n      };\n      this.readCertPubKeyHex = function(j, m) {\n        var k, i, g, l;\n        if (a(j) === false) {\n          throw new Error(\"not ASN.1 hex string\");\n        }\n        try {\n          k = d(j, 0, [0, 5, 0, 1, 0], \"02\");\n          i = d(j, 0, [0, 5, 0, 1, 1], \"02\");\n          g = d(j, 0, [0, 5, 0, 1, 2], \"02\");\n          l = d(j, 0, [0, 5, 1, 0], \"02\");\n        } catch (f) {\n          throw new Error(\"malformed X.509 certificate DSA public key\");\n        }\n        this.setPublicHex(k, i, g, l);\n      };\n    };\n    var KEYUTIL = function() {\n      var d = function(p, r2, q) {\n        return k(CryptoJS.AES, p, r2, q);\n      };\n      var e2 = function(p, r2, q) {\n        return k(CryptoJS.TripleDES, p, r2, q);\n      };\n      var a = function(p, r2, q) {\n        return k(CryptoJS.DES, p, r2, q);\n      };\n      var k = function(s, x, u, q) {\n        var r2 = CryptoJS.enc.Hex.parse(x);\n        var w = CryptoJS.enc.Hex.parse(u);\n        var p = CryptoJS.enc.Hex.parse(q);\n        var t3 = {};\n        t3.key = w;\n        t3.iv = p;\n        t3.ciphertext = r2;\n        var v = s.decrypt(t3, w, { iv: p });\n        return CryptoJS.enc.Hex.stringify(v);\n      };\n      var l = function(p, r2, q) {\n        return g(CryptoJS.AES, p, r2, q);\n      };\n      var o2 = function(p, r2, q) {\n        return g(CryptoJS.TripleDES, p, r2, q);\n      };\n      var f = function(p, r2, q) {\n        return g(CryptoJS.DES, p, r2, q);\n      };\n      var g = function(t3, y, v, q) {\n        var s = CryptoJS.enc.Hex.parse(y);\n        var x = CryptoJS.enc.Hex.parse(v);\n        var p = CryptoJS.enc.Hex.parse(q);\n        var w = t3.encrypt(s, x, { iv: p });\n        var r2 = CryptoJS.enc.Hex.parse(w.toString());\n        var u = CryptoJS.enc.Base64.stringify(r2);\n        return u;\n      };\n      var i = { \"AES-256-CBC\": { proc: d, eproc: l, keylen: 32, ivlen: 16 }, \"AES-192-CBC\": { proc: d, eproc: l, keylen: 24, ivlen: 16 }, \"AES-128-CBC\": { proc: d, eproc: l, keylen: 16, ivlen: 16 }, \"DES-EDE3-CBC\": { proc: e2, eproc: o2, keylen: 24, ivlen: 8 }, \"DES-CBC\": { proc: a, eproc: f, keylen: 8, ivlen: 8 } };\n      var c = function(p) {\n        return i[p][\"proc\"];\n      };\n      var m = function(p) {\n        var r2 = CryptoJS.lib.WordArray.random(p);\n        var q = CryptoJS.enc.Hex.stringify(r2);\n        return q;\n      };\n      var n2 = function(v) {\n        var w = {};\n        var q = v.match(new RegExp(\"DEK-Info: ([^,]+),([0-9A-Fa-f]+)\", \"m\"));\n        if (q) {\n          w.cipher = q[1];\n          w.ivsalt = q[2];\n        }\n        var p = v.match(new RegExp(\"-----BEGIN ([A-Z]+) PRIVATE KEY-----\"));\n        if (p) {\n          w.type = p[1];\n        }\n        var u = -1;\n        var x = 0;\n        if (v.indexOf(\"\\r\\n\\r\\n\") != -1) {\n          u = v.indexOf(\"\\r\\n\\r\\n\");\n          x = 2;\n        }\n        if (v.indexOf(\"\\n\\n\") != -1) {\n          u = v.indexOf(\"\\n\\n\");\n          x = 1;\n        }\n        var t3 = v.indexOf(\"-----END\");\n        if (u != -1 && t3 != -1) {\n          var r2 = v.substring(u + x * 2, t3 - x);\n          r2 = r2.replace(/\\s+/g, \"\");\n          w.data = r2;\n        }\n        return w;\n      };\n      var j = function(q, y, p) {\n        var v = p.substring(0, 16);\n        var t3 = CryptoJS.enc.Hex.parse(v);\n        var r2 = CryptoJS.enc.Utf8.parse(y);\n        var u = i[q][\"keylen\"] + i[q][\"ivlen\"];\n        var x = \"\";\n        var w = null;\n        for (; ; ) {\n          var s = CryptoJS.algo.MD5.create();\n          if (w != null) {\n            s.update(w);\n          }\n          s.update(r2);\n          s.update(t3);\n          w = s.finalize();\n          x = x + CryptoJS.enc.Hex.stringify(w);\n          if (x.length >= u * 2) {\n            break;\n          }\n        }\n        var z2 = {};\n        z2.keyhex = x.substr(0, i[q][\"keylen\"] * 2);\n        z2.ivhex = x.substr(i[q][\"keylen\"] * 2, i[q][\"ivlen\"] * 2);\n        return z2;\n      };\n      var b = function(p, v, r2, w) {\n        var s = CryptoJS.enc.Base64.parse(p);\n        var q = CryptoJS.enc.Hex.stringify(s);\n        var u = i[v][\"proc\"];\n        var t3 = u(q, r2, w);\n        return t3;\n      };\n      var h = function(p, s, q, u) {\n        var r2 = i[s][\"eproc\"];\n        var t3 = r2(p, q, u);\n        return t3;\n      };\n      return { version: \"1.0.0\", parsePKCS5PEM: function(p) {\n        return n2(p);\n      }, getKeyAndUnusedIvByPasscodeAndIvsalt: function(q, p, r2) {\n        return j(q, p, r2);\n      }, decryptKeyB64: function(p, r2, q, s) {\n        return b(p, r2, q, s);\n      }, getDecryptedKeyHex: function(y, x) {\n        var q = n2(y);\n        var t3 = q.type;\n        var r2 = q.cipher;\n        var p = q.ivsalt;\n        var s = q.data;\n        var w = j(r2, x, p);\n        var v = w.keyhex;\n        var u = b(s, r2, v, p);\n        return u;\n      }, getEncryptedPKCS5PEMFromPrvKeyHex: function(x, s, A, t3, r2) {\n        var p = \"\";\n        if (typeof t3 == \"undefined\" || t3 == null) {\n          t3 = \"AES-256-CBC\";\n        }\n        if (typeof i[t3] == \"undefined\") {\n          throw new Error(\"KEYUTIL unsupported algorithm: \" + t3);\n        }\n        if (typeof r2 == \"undefined\" || r2 == null) {\n          var v = i[t3][\"ivlen\"];\n          var u = m(v);\n          r2 = u.toUpperCase();\n        }\n        var z2 = j(t3, A, r2);\n        var y = z2.keyhex;\n        var w = h(s, t3, y, r2);\n        var q = w.replace(/(.{64})/g, \"$1\\r\\n\");\n        var p = \"-----BEGIN \" + x + \" PRIVATE KEY-----\\r\\n\";\n        p += \"Proc-Type: 4,ENCRYPTED\\r\\n\";\n        p += \"DEK-Info: \" + t3 + \",\" + r2 + \"\\r\\n\";\n        p += \"\\r\\n\";\n        p += q;\n        p += \"\\r\\n-----END \" + x + \" PRIVATE KEY-----\\r\\n\";\n        return p;\n      }, parseHexOfEncryptedPKCS8: function(y) {\n        var B = ASN1HEX;\n        var z2 = B.getChildIdx;\n        var w = B.getV;\n        var t3 = {};\n        var r2 = z2(y, 0);\n        if (r2.length != 2) {\n          throw new Error(\"malformed format: SEQUENCE(0).items != 2: \" + r2.length);\n        }\n        t3.ciphertext = w(y, r2[1]);\n        var A = z2(y, r2[0]);\n        if (A.length != 2) {\n          throw new Error(\"malformed format: SEQUENCE(0.0).items != 2: \" + A.length);\n        }\n        if (w(y, A[0]) != \"2a864886f70d01050d\") {\n          throw new Error(\"this only supports pkcs5PBES2\");\n        }\n        var p = z2(y, A[1]);\n        if (A.length != 2) {\n          throw new Error(\"malformed format: SEQUENCE(0.0.1).items != 2: \" + p.length);\n        }\n        var q = z2(y, p[1]);\n        if (q.length != 2) {\n          throw new Error(\"malformed format: SEQUENCE(0.0.1.1).items != 2: \" + q.length);\n        }\n        if (w(y, q[0]) != \"2a864886f70d0307\") {\n          throw \"this only supports TripleDES\";\n        }\n        t3.encryptionSchemeAlg = \"TripleDES\";\n        t3.encryptionSchemeIV = w(y, q[1]);\n        var s = z2(y, p[0]);\n        if (s.length != 2) {\n          throw new Error(\"malformed format: SEQUENCE(0.0.1.0).items != 2: \" + s.length);\n        }\n        if (w(y, s[0]) != \"2a864886f70d01050c\") {\n          throw new Error(\"this only supports pkcs5PBKDF2\");\n        }\n        var x = z2(y, s[1]);\n        if (x.length < 2) {\n          throw new Error(\"malformed format: SEQUENCE(0.0.1.0.1).items < 2: \" + x.length);\n        }\n        t3.pbkdf2Salt = w(y, x[0]);\n        var u = w(y, x[1]);\n        try {\n          t3.pbkdf2Iter = parseInt(u, 16);\n        } catch (v) {\n          throw new Error(\"malformed format pbkdf2Iter: \" + u);\n        }\n        return t3;\n      }, getPBKDF2KeyHexFromParam: function(u, p) {\n        var t3 = CryptoJS.enc.Hex.parse(u.pbkdf2Salt);\n        var q = u.pbkdf2Iter;\n        var s = CryptoJS.PBKDF2(p, t3, { keySize: 192 / 32, iterations: q });\n        var r2 = CryptoJS.enc.Hex.stringify(s);\n        return r2;\n      }, _getPlainPKCS8HexFromEncryptedPKCS8PEM: function(x, y) {\n        var r2 = pemtohex(x, \"ENCRYPTED PRIVATE KEY\");\n        var p = this.parseHexOfEncryptedPKCS8(r2);\n        var u = KEYUTIL.getPBKDF2KeyHexFromParam(p, y);\n        var v = {};\n        v.ciphertext = CryptoJS.enc.Hex.parse(p.ciphertext);\n        var t3 = CryptoJS.enc.Hex.parse(u);\n        var s = CryptoJS.enc.Hex.parse(p.encryptionSchemeIV);\n        var w = CryptoJS.TripleDES.decrypt(v, t3, { iv: s });\n        var q = CryptoJS.enc.Hex.stringify(w);\n        return q;\n      }, getKeyFromEncryptedPKCS8PEM: function(s, q) {\n        var p = this._getPlainPKCS8HexFromEncryptedPKCS8PEM(s, q);\n        var r2 = this.getKeyFromPlainPrivatePKCS8Hex(p);\n        return r2;\n      }, parsePlainPrivatePKCS8Hex: function(s) {\n        var v = ASN1HEX;\n        var u = v.getChildIdx;\n        var t3 = v.getV;\n        var q = {};\n        q.algparam = null;\n        if (s.substr(0, 2) != \"30\") {\n          throw new Error(\"malformed plain PKCS8 private key(code:001)\");\n        }\n        var r2 = u(s, 0);\n        if (r2.length < 3) {\n          throw new Error(\"malformed plain PKCS8 private key(code:002)\");\n        }\n        if (s.substr(r2[1], 2) != \"30\") {\n          throw new Error(\"malformed PKCS8 private key(code:003)\");\n        }\n        var p = u(s, r2[1]);\n        if (p.length != 2) {\n          throw new Error(\"malformed PKCS8 private key(code:004)\");\n        }\n        if (s.substr(p[0], 2) != \"06\") {\n          throw new Error(\"malformed PKCS8 private key(code:005)\");\n        }\n        q.algoid = t3(s, p[0]);\n        if (s.substr(p[1], 2) == \"06\") {\n          q.algparam = t3(s, p[1]);\n        }\n        if (s.substr(r2[2], 2) != \"04\") {\n          throw new Error(\"malformed PKCS8 private key(code:006)\");\n        }\n        q.keyidx = v.getVidx(s, r2[2]);\n        return q;\n      }, getKeyFromPlainPrivatePKCS8PEM: function(q) {\n        var p = pemtohex(q, \"PRIVATE KEY\");\n        var r2 = this.getKeyFromPlainPrivatePKCS8Hex(p);\n        return r2;\n      }, getKeyFromPlainPrivatePKCS8Hex: function(p) {\n        var q = this.parsePlainPrivatePKCS8Hex(p);\n        var r2;\n        if (q.algoid == \"2a864886f70d010101\") {\n          r2 = new RSAKey();\n        } else {\n          if (q.algoid == \"2a8648ce380401\") {\n            r2 = new KJUR.crypto.DSA();\n          } else {\n            if (q.algoid == \"2a8648ce3d0201\") {\n              r2 = new KJUR.crypto.ECDSA();\n            } else {\n              throw new Error(\"unsupported private key algorithm\");\n            }\n          }\n        }\n        r2.readPKCS8PrvKeyHex(p);\n        return r2;\n      }, _getKeyFromPublicPKCS8Hex: function(q) {\n        var p;\n        var r2 = ASN1HEX.getVbyList(q, 0, [0, 0], \"06\");\n        if (r2 === \"2a864886f70d010101\") {\n          p = new RSAKey();\n        } else {\n          if (r2 === \"2a8648ce380401\") {\n            p = new KJUR.crypto.DSA();\n          } else {\n            if (r2 === \"2a8648ce3d0201\") {\n              p = new KJUR.crypto.ECDSA();\n            } else {\n              throw new Error(\"unsupported PKCS#8 public key hex\");\n            }\n          }\n        }\n        p.readPKCS8PubKeyHex(q);\n        return p;\n      }, parsePublicRawRSAKeyHex: function(r2) {\n        var u = ASN1HEX;\n        var t3 = u.getChildIdx;\n        var s = u.getV;\n        var p = {};\n        if (r2.substr(0, 2) != \"30\") {\n          throw new Error(\"malformed RSA key(code:001)\");\n        }\n        var q = t3(r2, 0);\n        if (q.length != 2) {\n          throw new Error(\"malformed RSA key(code:002)\");\n        }\n        if (r2.substr(q[0], 2) != \"02\") {\n          throw new Error(\"malformed RSA key(code:003)\");\n        }\n        p.n = s(r2, q[0]);\n        if (r2.substr(q[1], 2) != \"02\") {\n          throw new Error(\"malformed RSA key(code:004)\");\n        }\n        p.e = s(r2, q[1]);\n        return p;\n      }, parsePublicPKCS8Hex: function(t3) {\n        var v = ASN1HEX;\n        var u = v.getChildIdx;\n        var s = v.getV;\n        var q = {};\n        q.algparam = null;\n        var r2 = u(t3, 0);\n        if (r2.length != 2) {\n          throw new Error(\"outer DERSequence shall have 2 elements: \" + r2.length);\n        }\n        var w = r2[0];\n        if (t3.substr(w, 2) != \"30\") {\n          throw new Error(\"malformed PKCS8 public key(code:001)\");\n        }\n        var p = u(t3, w);\n        if (p.length != 2) {\n          throw new Error(\"malformed PKCS8 public key(code:002)\");\n        }\n        if (t3.substr(p[0], 2) != \"06\") {\n          throw new Error(\"malformed PKCS8 public key(code:003)\");\n        }\n        q.algoid = s(t3, p[0]);\n        if (t3.substr(p[1], 2) == \"06\") {\n          q.algparam = s(t3, p[1]);\n        } else {\n          if (t3.substr(p[1], 2) == \"30\") {\n            q.algparam = {};\n            q.algparam.p = v.getVbyList(t3, p[1], [0], \"02\");\n            q.algparam.q = v.getVbyList(t3, p[1], [1], \"02\");\n            q.algparam.g = v.getVbyList(t3, p[1], [2], \"02\");\n          }\n        }\n        if (t3.substr(r2[1], 2) != \"03\") {\n          throw new Error(\"malformed PKCS8 public key(code:004)\");\n        }\n        q.key = s(t3, r2[1]).substr(2);\n        return q;\n      } };\n    }();\n    KEYUTIL.getKey = function(l, k, n2) {\n      var G = ASN1HEX, L = G.getChildIdx, v = G.getV, d = G.getVbyList, c = KJUR.crypto, i = c.ECDSA, C = c.DSA, w = RSAKey, M = pemtohex, F = KEYUTIL;\n      if (typeof w != \"undefined\" && l instanceof w) {\n        return l;\n      }\n      if (typeof i != \"undefined\" && l instanceof i) {\n        return l;\n      }\n      if (typeof C != \"undefined\" && l instanceof C) {\n        return l;\n      }\n      if (l.curve !== void 0 && l.xy !== void 0 && l.d === void 0) {\n        return new i({ pub: l.xy, curve: l.curve });\n      }\n      if (l.curve !== void 0 && l.d !== void 0) {\n        return new i({ prv: l.d, curve: l.curve });\n      }\n      if (l.kty === void 0 && l.n !== void 0 && l.e !== void 0 && l.d === void 0) {\n        var P = new w();\n        P.setPublic(l.n, l.e);\n        return P;\n      }\n      if (l.kty === void 0 && l.n !== void 0 && l.e !== void 0 && l.d !== void 0 && l.p !== void 0 && l.q !== void 0 && l.dp !== void 0 && l.dq !== void 0 && l.co !== void 0 && l.qi === void 0) {\n        var P = new w();\n        P.setPrivateEx(l.n, l.e, l.d, l.p, l.q, l.dp, l.dq, l.co);\n        return P;\n      }\n      if (l.kty === void 0 && l.n !== void 0 && l.e !== void 0 && l.d !== void 0 && l.p === void 0) {\n        var P = new w();\n        P.setPrivate(l.n, l.e, l.d);\n        return P;\n      }\n      if (l.p !== void 0 && l.q !== void 0 && l.g !== void 0 && l.y !== void 0 && l.x === void 0) {\n        var P = new C();\n        P.setPublic(l.p, l.q, l.g, l.y);\n        return P;\n      }\n      if (l.p !== void 0 && l.q !== void 0 && l.g !== void 0 && l.y !== void 0 && l.x !== void 0) {\n        var P = new C();\n        P.setPrivate(l.p, l.q, l.g, l.y, l.x);\n        return P;\n      }\n      if (l.kty === \"RSA\" && l.n !== void 0 && l.e !== void 0 && l.d === void 0) {\n        var P = new w();\n        P.setPublic(b64utohex(l.n), b64utohex(l.e));\n        return P;\n      }\n      if (l.kty === \"RSA\" && l.n !== void 0 && l.e !== void 0 && l.d !== void 0 && l.p !== void 0 && l.q !== void 0 && l.dp !== void 0 && l.dq !== void 0 && l.qi !== void 0) {\n        var P = new w();\n        P.setPrivateEx(b64utohex(l.n), b64utohex(l.e), b64utohex(l.d), b64utohex(l.p), b64utohex(l.q), b64utohex(l.dp), b64utohex(l.dq), b64utohex(l.qi));\n        return P;\n      }\n      if (l.kty === \"RSA\" && l.n !== void 0 && l.e !== void 0 && l.d !== void 0) {\n        var P = new w();\n        P.setPrivate(b64utohex(l.n), b64utohex(l.e), b64utohex(l.d));\n        return P;\n      }\n      if (l.kty === \"EC\" && l.crv !== void 0 && l.x !== void 0 && l.y !== void 0 && l.d === void 0) {\n        var j = new i({ curve: l.crv });\n        var t3 = j.ecparams.keycharlen;\n        var B = (\"0000000000\" + b64utohex(l.x)).slice(-t3);\n        var z2 = (\"0000000000\" + b64utohex(l.y)).slice(-t3);\n        var u = \"04\" + B + z2;\n        j.setPublicKeyHex(u);\n        return j;\n      }\n      if (l.kty === \"EC\" && l.crv !== void 0 && l.x !== void 0 && l.y !== void 0 && l.d !== void 0) {\n        var j = new i({ curve: l.crv });\n        var t3 = j.ecparams.keycharlen;\n        var B = (\"0000000000\" + b64utohex(l.x)).slice(-t3);\n        var z2 = (\"0000000000\" + b64utohex(l.y)).slice(-t3);\n        var u = \"04\" + B + z2;\n        var b = (\"0000000000\" + b64utohex(l.d)).slice(-t3);\n        j.setPublicKeyHex(u);\n        j.setPrivateKeyHex(b);\n        return j;\n      }\n      if (n2 === \"pkcs5prv\") {\n        var J = l, G = ASN1HEX, N, P;\n        N = L(J, 0);\n        if (N.length === 9) {\n          P = new w();\n          P.readPKCS5PrvKeyHex(J);\n        } else {\n          if (N.length === 6) {\n            P = new C();\n            P.readPKCS5PrvKeyHex(J);\n          } else {\n            if (N.length > 2 && J.substr(N[1], 2) === \"04\") {\n              P = new i();\n              P.readPKCS5PrvKeyHex(J);\n            } else {\n              throw new Error(\"unsupported PKCS#1/5 hexadecimal key\");\n            }\n          }\n        }\n        return P;\n      }\n      if (n2 === \"pkcs8prv\") {\n        var P = F.getKeyFromPlainPrivatePKCS8Hex(l);\n        return P;\n      }\n      if (n2 === \"pkcs8pub\") {\n        return F._getKeyFromPublicPKCS8Hex(l);\n      }\n      if (n2 === \"x509pub\") {\n        return X509.getPublicKeyFromCertHex(l);\n      }\n      if (l.indexOf(\"-END CERTIFICATE-\", 0) != -1 || l.indexOf(\"-END X509 CERTIFICATE-\", 0) != -1 || l.indexOf(\"-END TRUSTED CERTIFICATE-\", 0) != -1) {\n        return X509.getPublicKeyFromCertPEM(l);\n      }\n      if (l.indexOf(\"-END PUBLIC KEY-\") != -1) {\n        var O = pemtohex(l, \"PUBLIC KEY\");\n        return F._getKeyFromPublicPKCS8Hex(O);\n      }\n      if (l.indexOf(\"-END RSA PRIVATE KEY-\") != -1 && l.indexOf(\"4,ENCRYPTED\") == -1) {\n        var m = M(l, \"RSA PRIVATE KEY\");\n        return F.getKey(m, null, \"pkcs5prv\");\n      }\n      if (l.indexOf(\"-END DSA PRIVATE KEY-\") != -1 && l.indexOf(\"4,ENCRYPTED\") == -1) {\n        var I = M(l, \"DSA PRIVATE KEY\");\n        var E = d(I, 0, [1], \"02\");\n        var D = d(I, 0, [2], \"02\");\n        var K = d(I, 0, [3], \"02\");\n        var r2 = d(I, 0, [4], \"02\");\n        var s = d(I, 0, [5], \"02\");\n        var P = new C();\n        P.setPrivate(new BigInteger(E, 16), new BigInteger(D, 16), new BigInteger(K, 16), new BigInteger(r2, 16), new BigInteger(s, 16));\n        return P;\n      }\n      if (l.indexOf(\"-END EC PRIVATE KEY-\") != -1 && l.indexOf(\"4,ENCRYPTED\") == -1) {\n        var m = M(l, \"EC PRIVATE KEY\");\n        return F.getKey(m, null, \"pkcs5prv\");\n      }\n      if (l.indexOf(\"-END PRIVATE KEY-\") != -1) {\n        return F.getKeyFromPlainPrivatePKCS8PEM(l);\n      }\n      if (l.indexOf(\"-END RSA PRIVATE KEY-\") != -1 && l.indexOf(\"4,ENCRYPTED\") != -1) {\n        var o2 = F.getDecryptedKeyHex(l, k);\n        var H = new RSAKey();\n        H.readPKCS5PrvKeyHex(o2);\n        return H;\n      }\n      if (l.indexOf(\"-END EC PRIVATE KEY-\") != -1 && l.indexOf(\"4,ENCRYPTED\") != -1) {\n        var I = F.getDecryptedKeyHex(l, k);\n        var P = d(I, 0, [1], \"04\");\n        var f = d(I, 0, [2, 0], \"06\");\n        var A = d(I, 0, [3, 0], \"03\").substr(2);\n        var e2 = \"\";\n        if (KJUR.crypto.OID.oidhex2name[f] !== void 0) {\n          e2 = KJUR.crypto.OID.oidhex2name[f];\n        } else {\n          throw new Error(\"undefined OID(hex) in KJUR.crypto.OID: \" + f);\n        }\n        var j = new i({ curve: e2 });\n        j.setPublicKeyHex(A);\n        j.setPrivateKeyHex(P);\n        j.isPublic = false;\n        return j;\n      }\n      if (l.indexOf(\"-END DSA PRIVATE KEY-\") != -1 && l.indexOf(\"4,ENCRYPTED\") != -1) {\n        var I = F.getDecryptedKeyHex(l, k);\n        var E = d(I, 0, [1], \"02\");\n        var D = d(I, 0, [2], \"02\");\n        var K = d(I, 0, [3], \"02\");\n        var r2 = d(I, 0, [4], \"02\");\n        var s = d(I, 0, [5], \"02\");\n        var P = new C();\n        P.setPrivate(new BigInteger(E, 16), new BigInteger(D, 16), new BigInteger(K, 16), new BigInteger(r2, 16), new BigInteger(s, 16));\n        return P;\n      }\n      if (l.indexOf(\"-END ENCRYPTED PRIVATE KEY-\") != -1) {\n        return F.getKeyFromEncryptedPKCS8PEM(l, k);\n      }\n      throw new Error(\"not supported argument\");\n    };\n    KEYUTIL.generateKeypair = function(a, c) {\n      if (a == \"RSA\") {\n        var b = c;\n        var h = new RSAKey();\n        h.generate(b, \"10001\");\n        h.isPrivate = true;\n        h.isPublic = true;\n        var f = new RSAKey();\n        var e2 = h.n.toString(16);\n        var i = h.e.toString(16);\n        f.setPublic(e2, i);\n        f.isPrivate = false;\n        f.isPublic = true;\n        var k = {};\n        k.prvKeyObj = h;\n        k.pubKeyObj = f;\n        return k;\n      } else {\n        if (a == \"EC\") {\n          var d = c;\n          var g = new KJUR.crypto.ECDSA({ curve: d });\n          var j = g.generateKeyPairHex();\n          var h = new KJUR.crypto.ECDSA({ curve: d });\n          h.setPublicKeyHex(j.ecpubhex);\n          h.setPrivateKeyHex(j.ecprvhex);\n          h.isPrivate = true;\n          h.isPublic = false;\n          var f = new KJUR.crypto.ECDSA({ curve: d });\n          f.setPublicKeyHex(j.ecpubhex);\n          f.isPrivate = false;\n          f.isPublic = true;\n          var k = {};\n          k.prvKeyObj = h;\n          k.pubKeyObj = f;\n          return k;\n        } else {\n          throw new Error(\"unknown algorithm: \" + a);\n        }\n      }\n    };\n    KEYUTIL.getPEM = function(b, D, y, m, q, j) {\n      var F = KJUR, k = F.asn1, z2 = k.DERObjectIdentifier, f = k.DERInteger, l = k.ASN1Util.newObject, a = k.x509, C = a.SubjectPublicKeyInfo, e2 = F.crypto, u = e2.DSA, r2 = e2.ECDSA, n2 = RSAKey;\n      function A(s) {\n        var H = l({ seq: [{ \"int\": 0 }, { \"int\": { bigint: s.n } }, { \"int\": s.e }, { \"int\": { bigint: s.d } }, { \"int\": { bigint: s.p } }, { \"int\": { bigint: s.q } }, { \"int\": { bigint: s.dmp1 } }, { \"int\": { bigint: s.dmq1 } }, { \"int\": { bigint: s.coeff } }] });\n        return H;\n      }\n      function B(H) {\n        var s = l({ seq: [{ \"int\": 1 }, { octstr: { hex: H.prvKeyHex } }, { tag: [\"a0\", true, { oid: { name: H.curveName } }] }, { tag: [\"a1\", true, { bitstr: { hex: \"00\" + H.pubKeyHex } }] }] });\n        return s;\n      }\n      function x(s) {\n        var H = l({ seq: [{ \"int\": 0 }, { \"int\": { bigint: s.p } }, { \"int\": { bigint: s.q } }, { \"int\": { bigint: s.g } }, { \"int\": { bigint: s.y } }, { \"int\": { bigint: s.x } }] });\n        return H;\n      }\n      if ((n2 !== void 0 && b instanceof n2 || u !== void 0 && b instanceof u || r2 !== void 0 && b instanceof r2) && b.isPublic == true && (D === void 0 || D == \"PKCS8PUB\")) {\n        var E = new C(b);\n        var w = E.tohex();\n        return hextopem(w, \"PUBLIC KEY\");\n      }\n      if (D == \"PKCS1PRV\" && n2 !== void 0 && b instanceof n2 && (y === void 0 || y == null) && b.isPrivate == true) {\n        var E = A(b);\n        var w = E.tohex();\n        return hextopem(w, \"RSA PRIVATE KEY\");\n      }\n      if (D == \"PKCS1PRV\" && r2 !== void 0 && b instanceof r2 && (y === void 0 || y == null) && b.isPrivate == true) {\n        var i = new z2({ name: b.curveName });\n        var v = i.tohex();\n        var h = B(b);\n        var t3 = h.tohex();\n        var p = \"\";\n        p += hextopem(v, \"EC PARAMETERS\");\n        p += hextopem(t3, \"EC PRIVATE KEY\");\n        return p;\n      }\n      if (D == \"PKCS1PRV\" && u !== void 0 && b instanceof u && (y === void 0 || y == null) && b.isPrivate == true) {\n        var E = x(b);\n        var w = E.tohex();\n        return hextopem(w, \"DSA PRIVATE KEY\");\n      }\n      if (D == \"PKCS5PRV\" && n2 !== void 0 && b instanceof n2 && (y !== void 0 && y != null) && b.isPrivate == true) {\n        var E = A(b);\n        var w = E.tohex();\n        if (m === void 0) {\n          m = \"DES-EDE3-CBC\";\n        }\n        return this.getEncryptedPKCS5PEMFromPrvKeyHex(\"RSA\", w, y, m, j);\n      }\n      if (D == \"PKCS5PRV\" && r2 !== void 0 && b instanceof r2 && (y !== void 0 && y != null) && b.isPrivate == true) {\n        var E = B(b);\n        var w = E.tohex();\n        if (m === void 0) {\n          m = \"DES-EDE3-CBC\";\n        }\n        return this.getEncryptedPKCS5PEMFromPrvKeyHex(\"EC\", w, y, m, j);\n      }\n      if (D == \"PKCS5PRV\" && u !== void 0 && b instanceof u && (y !== void 0 && y != null) && b.isPrivate == true) {\n        var E = x(b);\n        var w = E.tohex();\n        if (m === void 0) {\n          m = \"DES-EDE3-CBC\";\n        }\n        return this.getEncryptedPKCS5PEMFromPrvKeyHex(\"DSA\", w, y, m, j);\n      }\n      var o2 = function(H, s) {\n        var J = c(H, s);\n        var I = new l({ seq: [{ seq: [{ oid: { name: \"pkcs5PBES2\" } }, { seq: [{ seq: [{ oid: { name: \"pkcs5PBKDF2\" } }, { seq: [{ octstr: { hex: J.pbkdf2Salt } }, { \"int\": J.pbkdf2Iter }] }] }, { seq: [{ oid: { name: \"des-EDE3-CBC\" } }, { octstr: { hex: J.encryptionSchemeIV } }] }] }] }, { octstr: { hex: J.ciphertext } }] });\n        return I.tohex();\n      };\n      var c = function(O, P) {\n        var I = 100;\n        var N = CryptoJS.lib.WordArray.random(8);\n        var M = \"DES-EDE3-CBC\";\n        var s = CryptoJS.lib.WordArray.random(8);\n        var J = CryptoJS.PBKDF2(P, N, { keySize: 192 / 32, iterations: I });\n        var K = CryptoJS.enc.Hex.parse(O);\n        var L = CryptoJS.TripleDES.encrypt(K, J, { iv: s }) + \"\";\n        var H = {};\n        H.ciphertext = L;\n        H.pbkdf2Salt = CryptoJS.enc.Hex.stringify(N);\n        H.pbkdf2Iter = I;\n        H.encryptionSchemeAlg = M;\n        H.encryptionSchemeIV = CryptoJS.enc.Hex.stringify(s);\n        return H;\n      };\n      if (D == \"PKCS8PRV\" && n2 != void 0 && b instanceof n2 && b.isPrivate == true) {\n        var g = A(b);\n        var d = g.tohex();\n        var E = l({ seq: [{ \"int\": 0 }, { seq: [{ oid: { name: \"rsaEncryption\" } }, { \"null\": true }] }, { octstr: { hex: d } }] });\n        var w = E.tohex();\n        if (y === void 0 || y == null) {\n          return hextopem(w, \"PRIVATE KEY\");\n        } else {\n          var t3 = o2(w, y);\n          return hextopem(t3, \"ENCRYPTED PRIVATE KEY\");\n        }\n      }\n      if (D == \"PKCS8PRV\" && r2 !== void 0 && b instanceof r2 && b.isPrivate == true) {\n        var G = { seq: [{ \"int\": 1 }, { octstr: { hex: b.prvKeyHex } }] };\n        if (typeof b.pubKeyHex == \"string\") {\n          G.seq.push({ tag: [\"a1\", true, { bitstr: { hex: \"00\" + b.pubKeyHex } }] });\n        }\n        var g = new l(G);\n        var d = g.tohex();\n        var E = l({ seq: [{ \"int\": 0 }, { seq: [{ oid: { name: \"ecPublicKey\" } }, { oid: { name: b.curveName } }] }, { octstr: { hex: d } }] });\n        var w = E.tohex();\n        if (y === void 0 || y == null) {\n          return hextopem(w, \"PRIVATE KEY\");\n        } else {\n          var t3 = o2(w, y);\n          return hextopem(t3, \"ENCRYPTED PRIVATE KEY\");\n        }\n      }\n      if (D == \"PKCS8PRV\" && u !== void 0 && b instanceof u && b.isPrivate == true) {\n        var g = new f({ bigint: b.x });\n        var d = g.tohex();\n        var E = l({ seq: [{ \"int\": 0 }, { seq: [{ oid: { name: \"dsa\" } }, { seq: [{ \"int\": { bigint: b.p } }, { \"int\": { bigint: b.q } }, { \"int\": { bigint: b.g } }] }] }, { octstr: { hex: d } }] });\n        var w = E.tohex();\n        if (y === void 0 || y == null) {\n          return hextopem(w, \"PRIVATE KEY\");\n        } else {\n          var t3 = o2(w, y);\n          return hextopem(t3, \"ENCRYPTED PRIVATE KEY\");\n        }\n      }\n      throw new Error(\"unsupported object nor format\");\n    };\n    KEYUTIL.getKeyFromCSRPEM = function(b) {\n      var a = pemtohex(b, \"CERTIFICATE REQUEST\");\n      var c = KEYUTIL.getKeyFromCSRHex(a);\n      return c;\n    };\n    KEYUTIL.getKeyFromCSRHex = function(a) {\n      var c = KEYUTIL.parseCSRHex(a);\n      var b = KEYUTIL.getKey(c.p8pubkeyhex, null, \"pkcs8pub\");\n      return b;\n    };\n    KEYUTIL.parseCSRHex = function(d) {\n      var i = ASN1HEX;\n      var f = i.getChildIdx;\n      var c = i.getTLV;\n      var b = {};\n      var g = d;\n      if (g.substr(0, 2) != \"30\") {\n        throw new Error(\"malformed CSR(code:001)\");\n      }\n      var e2 = f(g, 0);\n      if (e2.length < 1) {\n        throw new Error(\"malformed CSR(code:002)\");\n      }\n      if (g.substr(e2[0], 2) != \"30\") {\n        throw new Error(\"malformed CSR(code:003)\");\n      }\n      var a = f(g, e2[0]);\n      if (a.length < 3) {\n        throw new Error(\"malformed CSR(code:004)\");\n      }\n      b.p8pubkeyhex = c(g, a[2]);\n      return b;\n    };\n    KEYUTIL.getKeyID = function(f) {\n      var c = KEYUTIL;\n      var e2 = ASN1HEX;\n      if (typeof f === \"string\" && f.indexOf(\"BEGIN \") != -1) {\n        f = c.getKey(f);\n      }\n      var d = pemtohex(c.getPEM(f));\n      var b = e2.getIdxbyList(d, 0, [1]);\n      var a = e2.getV(d, b).substring(2);\n      return KJUR.crypto.Util.hashHex(a, \"sha1\");\n    };\n    KEYUTIL.getJWK = function(d, h, g, b, f) {\n      var i;\n      var k = {};\n      var e2;\n      var c = KJUR.crypto.Util.hashHex;\n      if (typeof d == \"string\") {\n        i = KEYUTIL.getKey(d);\n        if (d.indexOf(\"CERTIFICATE\") != -1) {\n          e2 = pemtohex(d);\n        }\n      } else {\n        if (typeof d == \"object\") {\n          if (d instanceof X509) {\n            i = d.getPublicKey();\n            e2 = d.hex;\n          } else {\n            i = d;\n          }\n        } else {\n          throw new Error(\"unsupported keyinfo type\");\n        }\n      }\n      if (i instanceof RSAKey && i.isPrivate) {\n        k.kty = \"RSA\";\n        k.n = hextob64u(i.n.toString(16));\n        k.e = hextob64u(i.e.toString(16));\n        k.d = hextob64u(i.d.toString(16));\n        k.p = hextob64u(i.p.toString(16));\n        k.q = hextob64u(i.q.toString(16));\n        k.dp = hextob64u(i.dmp1.toString(16));\n        k.dq = hextob64u(i.dmq1.toString(16));\n        k.qi = hextob64u(i.coeff.toString(16));\n      } else {\n        if (i instanceof RSAKey && i.isPublic) {\n          k.kty = \"RSA\";\n          k.n = hextob64u(i.n.toString(16));\n          k.e = hextob64u(i.e.toString(16));\n        } else {\n          if (i instanceof KJUR.crypto.ECDSA && i.isPrivate) {\n            var a = i.getShortNISTPCurveName();\n            if (a !== \"P-256\" && a !== \"P-384\" && a !== \"P-521\") {\n              throw new Error(\"unsupported curve name for JWT: \" + a);\n            }\n            var j = i.getPublicKeyXYHex();\n            k.kty = \"EC\";\n            k.crv = a;\n            k.x = hextob64u(j.x);\n            k.y = hextob64u(j.y);\n            k.d = hextob64u(i.prvKeyHex);\n          } else {\n            if (i instanceof KJUR.crypto.ECDSA && i.isPublic) {\n              var a = i.getShortNISTPCurveName();\n              if (a !== \"P-256\" && a !== \"P-384\" && a !== \"P-521\") {\n                throw new Error(\"unsupported curve name for JWT: \" + a);\n              }\n              var j = i.getPublicKeyXYHex();\n              k.kty = \"EC\";\n              k.crv = a;\n              k.x = hextob64u(j.x);\n              k.y = hextob64u(j.y);\n            }\n          }\n        }\n      }\n      if (k.kty == void 0) {\n        throw new Error(\"unsupported keyinfo\");\n      }\n      if (!i.isPrivate && h != true) {\n        k.kid = KJUR.jws.JWS.getJWKthumbprint(k);\n      }\n      if (e2 != void 0 && g != true) {\n        k.x5c = [hex2b64(e2)];\n      }\n      if (e2 != void 0 && b != true) {\n        k.x5t = b64tob64u(hex2b64(c(e2, \"sha1\")));\n      }\n      if (e2 != void 0 && f != true) {\n        k[\"x5t#S256\"] = b64tob64u(hex2b64(c(e2, \"sha256\")));\n      }\n      return k;\n    };\n    KEYUTIL.getJWKFromKey = function(a) {\n      return KEYUTIL.getJWK(a, true, true, true, true);\n    };\n    RSAKey.getPosArrayOfChildrenFromHex = function(a) {\n      return ASN1HEX.getChildIdx(a, 0);\n    };\n    RSAKey.getHexValueArrayOfChildrenFromHex = function(f) {\n      var n2 = ASN1HEX;\n      var i = n2.getV;\n      var k = RSAKey.getPosArrayOfChildrenFromHex(f);\n      var e2 = i(f, k[0]);\n      var j = i(f, k[1]);\n      var b = i(f, k[2]);\n      var c = i(f, k[3]);\n      var h = i(f, k[4]);\n      var g = i(f, k[5]);\n      var m = i(f, k[6]);\n      var l = i(f, k[7]);\n      var d = i(f, k[8]);\n      var k = new Array();\n      k.push(e2, j, b, c, h, g, m, l, d);\n      return k;\n    };\n    RSAKey.prototype.readPrivateKeyFromPEMString = function(d) {\n      var c = pemtohex(d);\n      var b = RSAKey.getHexValueArrayOfChildrenFromHex(c);\n      this.setPrivateEx(b[1], b[2], b[3], b[4], b[5], b[6], b[7], b[8]);\n    };\n    RSAKey.prototype.readPKCS5PrvKeyHex = function(c) {\n      var b = RSAKey.getHexValueArrayOfChildrenFromHex(c);\n      this.setPrivateEx(b[1], b[2], b[3], b[4], b[5], b[6], b[7], b[8]);\n    };\n    RSAKey.prototype.readPKCS8PrvKeyHex = function(e2) {\n      var c, i, k, b, a, f, d, j;\n      var m = ASN1HEX;\n      var l = m.getVbyListEx;\n      if (m.isASN1HEX(e2) === false) {\n        throw new Error(\"not ASN.1 hex string\");\n      }\n      try {\n        c = l(e2, 0, [2, 0, 1], \"02\");\n        i = l(e2, 0, [2, 0, 2], \"02\");\n        k = l(e2, 0, [2, 0, 3], \"02\");\n        b = l(e2, 0, [2, 0, 4], \"02\");\n        a = l(e2, 0, [2, 0, 5], \"02\");\n        f = l(e2, 0, [2, 0, 6], \"02\");\n        d = l(e2, 0, [2, 0, 7], \"02\");\n        j = l(e2, 0, [2, 0, 8], \"02\");\n      } catch (g) {\n        throw new Error(\"malformed PKCS#8 plain RSA private key\");\n      }\n      this.setPrivateEx(c, i, k, b, a, f, d, j);\n    };\n    RSAKey.prototype.readPKCS5PubKeyHex = function(c) {\n      var e2 = ASN1HEX;\n      var b = e2.getV;\n      if (e2.isASN1HEX(c) === false) {\n        throw new Error(\"keyHex is not ASN.1 hex string\");\n      }\n      var a = e2.getChildIdx(c, 0);\n      if (a.length !== 2 || c.substr(a[0], 2) !== \"02\" || c.substr(a[1], 2) !== \"02\") {\n        throw new Error(\"wrong hex for PKCS#5 public key\");\n      }\n      var f = b(c, a[0]);\n      var d = b(c, a[1]);\n      this.setPublic(f, d);\n    };\n    RSAKey.prototype.readPKCS8PubKeyHex = function(b) {\n      var c = ASN1HEX;\n      if (c.isASN1HEX(b) === false) {\n        throw new Error(\"not ASN.1 hex string\");\n      }\n      if (c.getTLVbyListEx(b, 0, [0, 0]) !== \"06092a864886f70d010101\") {\n        throw new Error(\"not PKCS8 RSA public key\");\n      }\n      var a = c.getTLVbyListEx(b, 0, [1, 0]);\n      this.readPKCS5PubKeyHex(a);\n    };\n    RSAKey.prototype.readCertPubKeyHex = function(b, d) {\n      var a, c;\n      a = new X509();\n      a.readCertHex(b);\n      c = a.getPublicKeyHex();\n      this.readPKCS8PubKeyHex(c);\n    };\n    var _RE_HEXDECONLY = new RegExp(\"[^0-9a-f]\", \"gi\");\n    function _zeroPaddingOfSignature(e2, d) {\n      var c = \"\";\n      var a = d / 4 - e2.length;\n      for (var b = 0; b < a; b++) {\n        c = c + \"0\";\n      }\n      return c + e2;\n    }\n    RSAKey.prototype.sign = function(d, a) {\n      var b = function(e2) {\n        return KJUR.crypto.Util.hashString(e2, a);\n      };\n      var c = b(d);\n      return this.signWithMessageHash(c, a);\n    };\n    RSAKey.prototype.signWithMessageHash = function(e2, c) {\n      var f = KJUR.crypto.Util.getPaddedDigestInfoHex(e2, c, this.n.bitLength());\n      var b = parseBigInt(f, 16);\n      var d = this.doPrivate(b);\n      var a = d.toString(16);\n      return _zeroPaddingOfSignature(a, this.n.bitLength());\n    };\n    function pss_mgf1_str(c, a, e2) {\n      var b = \"\", d = 0;\n      while (b.length < a) {\n        b += hextorstr(e2(rstrtohex(c + String.fromCharCode.apply(String, [(d & 4278190080) >> 24, (d & 16711680) >> 16, (d & 65280) >> 8, d & 255]))));\n        d += 1;\n      }\n      return b;\n    }\n    RSAKey.prototype.signPSS = function(e2, a, d) {\n      var c = function(f) {\n        return KJUR.crypto.Util.hashHex(f, a);\n      };\n      var b = c(rstrtohex(e2));\n      if (d === void 0) {\n        d = -1;\n      }\n      return this.signWithMessageHashPSS(b, a, d);\n    };\n    RSAKey.prototype.signWithMessageHashPSS = function(l, a, k) {\n      var b = hextorstr(l);\n      var g = b.length;\n      var m = this.n.bitLength() - 1;\n      var c = Math.ceil(m / 8);\n      var d;\n      var o2 = function(i) {\n        return KJUR.crypto.Util.hashHex(i, a);\n      };\n      if (k === -1 || k === void 0) {\n        k = g;\n      } else {\n        if (k === -2) {\n          k = c - g - 2;\n        } else {\n          if (k < -2) {\n            throw new Error(\"invalid salt length\");\n          }\n        }\n      }\n      if (c < g + k + 2) {\n        throw new Error(\"data too long\");\n      }\n      var f = \"\";\n      if (k > 0) {\n        f = new Array(k);\n        new SecureRandom().nextBytes(f);\n        f = String.fromCharCode.apply(String, f);\n      }\n      var n2 = hextorstr(o2(rstrtohex(\"\\0\\0\\0\\0\\0\\0\\0\\0\" + b + f)));\n      var j = [];\n      for (d = 0; d < c - k - g - 2; d += 1) {\n        j[d] = 0;\n      }\n      var e2 = String.fromCharCode.apply(String, j) + \"\u0001\" + f;\n      var h = pss_mgf1_str(n2, e2.length, o2);\n      var q = [];\n      for (d = 0; d < e2.length; d += 1) {\n        q[d] = e2.charCodeAt(d) ^ h.charCodeAt(d);\n      }\n      var p = 65280 >> 8 * c - m & 255;\n      q[0] &= ~p;\n      for (d = 0; d < g; d++) {\n        q.push(n2.charCodeAt(d));\n      }\n      q.push(188);\n      return _zeroPaddingOfSignature(this.doPrivate(new BigInteger(q)).toString(16), this.n.bitLength());\n    };\n    function _rsasign_getAlgNameAndHashFromHexDisgestInfo(f) {\n      for (var e2 in KJUR.crypto.Util.DIGESTINFOHEAD) {\n        var d = KJUR.crypto.Util.DIGESTINFOHEAD[e2];\n        var b = d.length;\n        if (f.substring(0, b) == d) {\n          var c = [e2, f.substring(b)];\n          return c;\n        }\n      }\n      return [];\n    }\n    RSAKey.prototype.verify = function(f, l) {\n      l = l.toLowerCase();\n      if (l.match(/^[0-9a-f]+$/) == null) {\n        return false;\n      }\n      var b = parseBigInt(l, 16);\n      var k = this.n.bitLength();\n      if (b.bitLength() > k) {\n        return false;\n      }\n      var j = this.doPublic(b);\n      var i = j.toString(16);\n      if (i.length + 3 != k / 4) {\n        return false;\n      }\n      var e2 = i.replace(/^1f+00/, \"\");\n      var g = _rsasign_getAlgNameAndHashFromHexDisgestInfo(e2);\n      if (g.length == 0) {\n        return false;\n      }\n      var d = g[0];\n      var h = g[1];\n      var a = function(m) {\n        return KJUR.crypto.Util.hashString(m, d);\n      };\n      var c = a(f);\n      return h == c;\n    };\n    RSAKey.prototype.verifyWithMessageHash = function(e2, a) {\n      if (a.length != Math.ceil(this.n.bitLength() / 4)) {\n        return false;\n      }\n      var b = parseBigInt(a, 16);\n      if (b.bitLength() > this.n.bitLength()) {\n        return 0;\n      }\n      var h = this.doPublic(b);\n      var g = h.toString(16).replace(/^1f+00/, \"\");\n      var c = _rsasign_getAlgNameAndHashFromHexDisgestInfo(g);\n      if (c.length == 0) {\n        return false;\n      }\n      var d = c[0];\n      var f = c[1];\n      return f == e2;\n    };\n    RSAKey.prototype.verifyPSS = function(c, b, a, f) {\n      var e2 = function(g) {\n        return KJUR.crypto.Util.hashHex(g, a);\n      };\n      var d = e2(rstrtohex(c));\n      if (f === void 0) {\n        f = -1;\n      }\n      return this.verifyWithMessageHashPSS(d, b, a, f);\n    };\n    RSAKey.prototype.verifyWithMessageHashPSS = function(f, s, l, c) {\n      if (s.length != Math.ceil(this.n.bitLength() / 4)) {\n        return false;\n      }\n      var k = new BigInteger(s, 16);\n      var r2 = function(i) {\n        return KJUR.crypto.Util.hashHex(i, l);\n      };\n      var j = hextorstr(f);\n      var h = j.length;\n      var g = this.n.bitLength() - 1;\n      var m = Math.ceil(g / 8);\n      var q;\n      if (c === -1 || c === void 0) {\n        c = h;\n      } else {\n        if (c === -2) {\n          c = m - h - 2;\n        } else {\n          if (c < -2) {\n            throw new Error(\"invalid salt length\");\n          }\n        }\n      }\n      if (m < h + c + 2) {\n        throw new Error(\"data too long\");\n      }\n      var a = this.doPublic(k).toByteArray();\n      for (q = 0; q < a.length; q += 1) {\n        a[q] &= 255;\n      }\n      while (a.length < m) {\n        a.unshift(0);\n      }\n      if (a[m - 1] !== 188) {\n        throw new Error(\"encoded message does not end in 0xbc\");\n      }\n      a = String.fromCharCode.apply(String, a);\n      var d = a.substr(0, m - h - 1);\n      var e2 = a.substr(d.length, h);\n      var p = 65280 >> 8 * m - g & 255;\n      if ((d.charCodeAt(0) & p) !== 0) {\n        throw new Error(\"bits beyond keysize not zero\");\n      }\n      var n2 = pss_mgf1_str(e2, d.length, r2);\n      var o2 = [];\n      for (q = 0; q < d.length; q += 1) {\n        o2[q] = d.charCodeAt(q) ^ n2.charCodeAt(q);\n      }\n      o2[0] &= ~p;\n      var b = m - h - c - 2;\n      for (q = 0; q < b; q += 1) {\n        if (o2[q] !== 0) {\n          throw new Error(\"leftmost octets not zero\");\n        }\n      }\n      if (o2[b] !== 1) {\n        throw new Error(\"0x01 marker not found\");\n      }\n      return e2 === hextorstr(r2(rstrtohex(\"\\0\\0\\0\\0\\0\\0\\0\\0\" + j + String.fromCharCode.apply(String, o2.slice(-c)))));\n    };\n    RSAKey.SALT_LEN_HLEN = -1;\n    RSAKey.SALT_LEN_MAX = -2;\n    RSAKey.SALT_LEN_RECOVER = -2;\n    function X509(v) {\n      var o2 = ASN1HEX, s = o2.getChildIdx, k = o2.getV, y = o2.dump, j = o2.parse, b = o2.getTLV, c = o2.getVbyList, p = o2.getVbyListEx, a = o2.getTLVbyList, q = o2.getTLVbyListEx, l = o2.getIdxbyList, f = o2.getIdxbyListEx, n2 = o2.getVidx, x = o2.getInt, u = o2.oidname, r2 = o2.hextooidstr, d = X509, w = pemtohex, g, m = Error;\n      try {\n        g = KJUR.asn1.x509.AlgorithmIdentifier.PSSNAME2ASN1TLV;\n      } catch (t3) {\n      }\n      this.HEX2STAG = { \"0c\": \"utf8\", \"13\": \"prn\", \"16\": \"ia5\", \"1a\": \"vis\", \"1e\": \"bmp\" };\n      this.hex = null;\n      this.version = 0;\n      this.foffset = 0;\n      this.aExtInfo = null;\n      this.getVersion = function() {\n        if (this.hex === null || this.version !== 0) {\n          return this.version;\n        }\n        var A = a(this.hex, 0, [0, 0]);\n        if (A.substr(0, 2) == \"a0\") {\n          var B = a(A, 0, [0]);\n          var z2 = x(B, 0);\n          if (z2 < 0 || 2 < z2) {\n            throw new Error(\"malformed version field\");\n          }\n          this.version = z2 + 1;\n          return this.version;\n        } else {\n          this.version = 1;\n          this.foffset = -1;\n          return 1;\n        }\n      };\n      this.getSerialNumberHex = function() {\n        return p(this.hex, 0, [0, 0], \"02\");\n      };\n      this.getSignatureAlgorithmField = function() {\n        var z2 = q(this.hex, 0, [0, 1]);\n        return this.getAlgorithmIdentifierName(z2);\n      };\n      this.getAlgorithmIdentifierName = function(z2) {\n        for (var A in g) {\n          if (z2 === g[A]) {\n            return A;\n          }\n        }\n        return u(p(z2, 0, [0], \"06\"));\n      };\n      this.getIssuer = function(A, z2) {\n        return this.getX500Name(this.getIssuerHex(), A, z2);\n      };\n      this.getIssuerHex = function() {\n        return a(this.hex, 0, [0, 3 + this.foffset], \"30\");\n      };\n      this.getIssuerString = function() {\n        var z2 = this.getIssuer();\n        return z2.str;\n      };\n      this.getSubject = function(A, z2) {\n        return this.getX500Name(this.getSubjectHex(), A, z2);\n      };\n      this.getSubjectHex = function() {\n        return a(this.hex, 0, [0, 5 + this.foffset], \"30\");\n      };\n      this.getSubjectString = function() {\n        var z2 = this.getSubject();\n        return z2.str;\n      };\n      this.getNotBefore = function() {\n        var z2 = c(this.hex, 0, [0, 4 + this.foffset, 0]);\n        z2 = z2.replace(/(..)/g, \"%$1\");\n        z2 = decodeURIComponent(z2);\n        return z2;\n      };\n      this.getNotAfter = function() {\n        var z2 = c(this.hex, 0, [0, 4 + this.foffset, 1]);\n        z2 = z2.replace(/(..)/g, \"%$1\");\n        z2 = decodeURIComponent(z2);\n        return z2;\n      };\n      this.getPublicKeyHex = function() {\n        return this.getSPKI();\n      };\n      this.getSPKI = function() {\n        return a(this.hex, 0, [0, 6 + this.foffset], \"30\");\n      };\n      this.getSPKIValue = function() {\n        var z2 = this.getSPKI();\n        if (z2 == null) {\n          return null;\n        }\n        return c(z2, 0, [1], \"03\", true);\n      };\n      this.getPublicKeyIdx = function() {\n        return l(this.hex, 0, [0, 6 + this.foffset], \"30\");\n      };\n      this.getPublicKeyContentIdx = function() {\n        var z2 = this.getPublicKeyIdx();\n        return l(this.hex, z2, [1, 0], \"30\");\n      };\n      this.getPublicKey = function() {\n        return KEYUTIL.getKey(this.getPublicKeyHex(), null, \"pkcs8pub\");\n      };\n      this.getSignatureAlgorithmName = function() {\n        var z2 = a(this.hex, 0, [1], \"30\");\n        return this.getAlgorithmIdentifierName(z2);\n      };\n      this.getSignatureValueHex = function() {\n        return c(this.hex, 0, [2], \"03\", true);\n      };\n      this.verifySignature = function(B) {\n        var C = this.getSignatureAlgorithmField();\n        var z2 = this.getSignatureValueHex();\n        var A = a(this.hex, 0, [0], \"30\");\n        var D = new KJUR.crypto.Signature({ alg: C });\n        D.init(B);\n        D.updateHex(A);\n        return D.verify(z2);\n      };\n      this.parseExt = function(I) {\n        var B, z2, D;\n        if (I === void 0) {\n          D = this.hex;\n          if (this.version !== 3) {\n            return -1;\n          }\n          B = l(D, 0, [0, 7, 0], \"30\");\n          z2 = s(D, B);\n        } else {\n          D = pemtohex(I);\n          var E = l(D, 0, [0, 3, 0, 0], \"06\");\n          if (k(D, E) != \"2a864886f70d01090e\") {\n            this.aExtInfo = new Array();\n            return;\n          }\n          B = l(D, 0, [0, 3, 0, 1, 0], \"30\");\n          z2 = s(D, B);\n          this.hex = D;\n        }\n        this.aExtInfo = new Array();\n        for (var C = 0; C < z2.length; C++) {\n          var G = {};\n          G.critical = false;\n          var F = s(D, z2[C]);\n          var A = 0;\n          if (F.length === 3) {\n            G.critical = true;\n            A = 1;\n          }\n          G.oid = o2.hextooidstr(c(D, z2[C], [0], \"06\"));\n          var H = l(D, z2[C], [1 + A]);\n          G.vidx = n2(D, H);\n          this.aExtInfo.push(G);\n        }\n      };\n      this.getExtInfo = function(B) {\n        var z2 = this.aExtInfo;\n        var C = B;\n        if (!B.match(/^[0-9.]+$/)) {\n          C = KJUR.asn1.x509.OID.name2oid(B);\n        }\n        if (C === \"\") {\n          return void 0;\n        }\n        for (var A = 0; A < z2.length; A++) {\n          if (z2[A].oid === C) {\n            return z2[A];\n          }\n        }\n        return void 0;\n      };\n      this.getCriticalExtV = function(C, z2, B) {\n        if (z2 != void 0) {\n          return [z2, B];\n        }\n        var A = this.getExtInfo(C);\n        if (A == void 0) {\n          return [null, null];\n        }\n        return [b(this.hex, A.vidx), A.critical];\n      };\n      this.getExtBasicConstraints = function(A, E) {\n        if (A === void 0 && E === void 0) {\n          var C = this.getExtInfo(\"basicConstraints\");\n          if (C === void 0) {\n            return void 0;\n          }\n          A = b(this.hex, C.vidx);\n          E = C.critical;\n        }\n        var z2 = { extname: \"basicConstraints\" };\n        if (E) {\n          z2.critical = true;\n        }\n        if (A === \"3000\") {\n          return z2;\n        }\n        if (A === \"30030101ff\") {\n          z2.cA = true;\n          return z2;\n        }\n        if (A.substr(0, 12) === \"30060101ff02\") {\n          var D = k(A, 10);\n          var B = parseInt(D, 16);\n          z2.cA = true;\n          z2.pathLen = B;\n          return z2;\n        }\n        throw new Error(\"hExtV parse error: \" + A);\n      };\n      this.getExtNameConstraints = function(I, G) {\n        var A = this.getCriticalExtV(\"nameConstraints\", I, G);\n        I = A[0];\n        G = A[1];\n        if (I == null) {\n          return void 0;\n        }\n        var K = { extname: \"nameConstraints\" };\n        if (G) {\n          K.critical = true;\n        }\n        var F = s(I, 0);\n        for (var D = 0; D < F.length; D++) {\n          var E = [];\n          var B = s(I, F[D]);\n          for (var C = 0; C < B.length; C++) {\n            var H = b(I, B[C]);\n            var z2 = this.getGeneralSubtree(H);\n            E.push(z2);\n          }\n          var J = I.substr(F[D], 2);\n          if (J == \"a0\") {\n            K.permit = E;\n          } else {\n            if (J == \"a1\") {\n              K.exclude = E;\n            }\n          }\n        }\n        return K;\n      };\n      this.getGeneralSubtree = function(F) {\n        var D = s(F, 0);\n        var C = D.length;\n        if (C < 1 || 2 < C) {\n          throw new Error(\"wrong num elements\");\n        }\n        var B = this.getGeneralName(b(F, D[0]));\n        for (var E = 1; E < C; E++) {\n          var A = F.substr(D[E], 2);\n          var z2 = k(F, D[E]);\n          var G = parseInt(z2, 16);\n          if (A == \"80\") {\n            B.min = G;\n          }\n          if (A == \"81\") {\n            B.max = G;\n          }\n        }\n        return B;\n      };\n      this.getExtKeyUsage = function(A, C) {\n        var B = this.getCriticalExtV(\"keyUsage\", A, C);\n        A = B[0];\n        C = B[1];\n        if (A == null) {\n          return void 0;\n        }\n        var z2 = { extname: \"keyUsage\" };\n        if (C) {\n          z2.critical = true;\n        }\n        z2.names = this.getExtKeyUsageString(A).split(\",\");\n        return z2;\n      };\n      this.getExtKeyUsageBin = function(A) {\n        if (A === void 0) {\n          var B = this.getExtInfo(\"keyUsage\");\n          if (B === void 0) {\n            return \"\";\n          }\n          A = b(this.hex, B.vidx);\n        }\n        if (A.length != 8 && A.length != 10) {\n          throw new Error(\"malformed key usage value: \" + A);\n        }\n        var z2 = \"000000000000000\" + parseInt(A.substr(6), 16).toString(2);\n        if (A.length == 8) {\n          z2 = z2.slice(-8);\n        }\n        if (A.length == 10) {\n          z2 = z2.slice(-16);\n        }\n        z2 = z2.replace(/0+$/, \"\");\n        if (z2 == \"\") {\n          z2 = \"0\";\n        }\n        return z2;\n      };\n      this.getExtKeyUsageString = function(B) {\n        var C = this.getExtKeyUsageBin(B);\n        var z2 = new Array();\n        for (var A = 0; A < C.length; A++) {\n          if (C.substr(A, 1) == \"1\") {\n            z2.push(X509.KEYUSAGE_NAME[A]);\n          }\n        }\n        return z2.join(\",\");\n      };\n      this.getExtSubjectKeyIdentifier = function(B, D) {\n        if (B === void 0 && D === void 0) {\n          var C = this.getExtInfo(\"subjectKeyIdentifier\");\n          if (C === void 0) {\n            return void 0;\n          }\n          B = b(this.hex, C.vidx);\n          D = C.critical;\n        }\n        var z2 = { extname: \"subjectKeyIdentifier\" };\n        if (D) {\n          z2.critical = true;\n        }\n        var A = k(B, 0);\n        z2.kid = { hex: A };\n        return z2;\n      };\n      this.getExtAuthorityKeyIdentifier = function(F, D) {\n        if (F === void 0 && D === void 0) {\n          var z2 = this.getExtInfo(\"authorityKeyIdentifier\");\n          if (z2 === void 0) {\n            return void 0;\n          }\n          F = b(this.hex, z2.vidx);\n          D = z2.critical;\n        }\n        var G = { extname: \"authorityKeyIdentifier\" };\n        if (D) {\n          G.critical = true;\n        }\n        var E = s(F, 0);\n        for (var A = 0; A < E.length; A++) {\n          var H = F.substr(E[A], 2);\n          if (H === \"80\") {\n            G.kid = { hex: k(F, E[A]) };\n          }\n          if (H === \"a1\") {\n            var C = b(F, E[A]);\n            var B = this.getGeneralNames(C);\n            G.issuer = B[0][\"dn\"];\n          }\n          if (H === \"82\") {\n            G.sn = { hex: k(F, E[A]) };\n          }\n        }\n        return G;\n      };\n      this.getExtExtKeyUsage = function(C, E) {\n        if (C === void 0 && E === void 0) {\n          var D = this.getExtInfo(\"extKeyUsage\");\n          if (D === void 0) {\n            return void 0;\n          }\n          C = b(this.hex, D.vidx);\n          E = D.critical;\n        }\n        var z2 = { extname: \"extKeyUsage\", array: [] };\n        if (E) {\n          z2.critical = true;\n        }\n        var A = s(C, 0);\n        for (var B = 0; B < A.length; B++) {\n          z2.array.push(u(k(C, A[B])));\n        }\n        return z2;\n      };\n      this.getExtExtKeyUsageName = function() {\n        var D = this.getExtInfo(\"extKeyUsage\");\n        if (D === void 0) {\n          return D;\n        }\n        var z2 = new Array();\n        var C = b(this.hex, D.vidx);\n        if (C === \"\") {\n          return z2;\n        }\n        var A = s(C, 0);\n        for (var B = 0; B < A.length; B++) {\n          z2.push(u(k(C, A[B])));\n        }\n        return z2;\n      };\n      this.getExtSubjectAltName = function(A, C) {\n        if (A === void 0 && C === void 0) {\n          var B = this.getExtInfo(\"subjectAltName\");\n          if (B === void 0) {\n            return void 0;\n          }\n          A = b(this.hex, B.vidx);\n          C = B.critical;\n        }\n        var z2 = { extname: \"subjectAltName\", array: [] };\n        if (C) {\n          z2.critical = true;\n        }\n        z2.array = this.getGeneralNames(A);\n        return z2;\n      };\n      this.getExtIssuerAltName = function(A, C) {\n        if (A === void 0 && C === void 0) {\n          var B = this.getExtInfo(\"issuerAltName\");\n          if (B === void 0) {\n            return void 0;\n          }\n          A = b(this.hex, B.vidx);\n          C = B.critical;\n        }\n        var z2 = { extname: \"issuerAltName\", array: [] };\n        if (C) {\n          z2.critical = true;\n        }\n        z2.array = this.getGeneralNames(A);\n        return z2;\n      };\n      this.getGeneralNames = function(D) {\n        var B = s(D, 0);\n        var z2 = [];\n        for (var C = 0; C < B.length; C++) {\n          var A = this.getGeneralName(b(D, B[C]));\n          if (A !== void 0) {\n            z2.push(A);\n          }\n        }\n        return z2;\n      };\n      this.getGeneralName = function(A) {\n        var z2 = A.substr(0, 2);\n        var C = k(A, 0);\n        var B = hextorstr(C);\n        if (z2 == \"81\") {\n          return { rfc822: B };\n        }\n        if (z2 == \"82\") {\n          return { dns: B };\n        }\n        if (z2 == \"86\") {\n          return { uri: B };\n        }\n        if (z2 == \"87\") {\n          return { ip: hextoip(C) };\n        }\n        if (z2 == \"a4\") {\n          return { dn: this.getX500Name(C) };\n        }\n        if (z2 == \"a0\") {\n          return { other: this.getOtherName(A) };\n        }\n        return void 0;\n      };\n      this.getExtSubjectAltName2 = function() {\n        var D, G, F;\n        var E = this.getExtInfo(\"subjectAltName\");\n        if (E === void 0) {\n          return E;\n        }\n        var z2 = new Array();\n        var C = b(this.hex, E.vidx);\n        var A = s(C, 0);\n        for (var B = 0; B < A.length; B++) {\n          F = C.substr(A[B], 2);\n          D = k(C, A[B]);\n          if (F === \"81\") {\n            G = hextoutf8(D);\n            z2.push([\"MAIL\", G]);\n          }\n          if (F === \"82\") {\n            G = hextoutf8(D);\n            z2.push([\"DNS\", G]);\n          }\n          if (F === \"84\") {\n            G = X509.hex2dn(D, 0);\n            z2.push([\"DN\", G]);\n          }\n          if (F === \"86\") {\n            G = hextoutf8(D);\n            z2.push([\"URI\", G]);\n          }\n          if (F === \"87\") {\n            G = hextoip(D);\n            z2.push([\"IP\", G]);\n          }\n        }\n        return z2;\n      };\n      this.getExtCRLDistributionPoints = function(D, F) {\n        if (D === void 0 && F === void 0) {\n          var E = this.getExtInfo(\"cRLDistributionPoints\");\n          if (E === void 0) {\n            return void 0;\n          }\n          D = b(this.hex, E.vidx);\n          F = E.critical;\n        }\n        var A = { extname: \"cRLDistributionPoints\", array: [] };\n        if (F) {\n          A.critical = true;\n        }\n        var B = s(D, 0);\n        for (var C = 0; C < B.length; C++) {\n          var z2 = b(D, B[C]);\n          A.array.push(this.getDistributionPoint(z2));\n        }\n        return A;\n      };\n      this.getDistributionPoint = function(E) {\n        var B = {};\n        var C = s(E, 0);\n        for (var D = 0; D < C.length; D++) {\n          var A = E.substr(C[D], 2);\n          var z2 = b(E, C[D]);\n          if (A == \"a0\") {\n            B.dpname = this.getDistributionPointName(z2);\n          }\n        }\n        return B;\n      };\n      this.getDistributionPointName = function(E) {\n        var B = {};\n        var C = s(E, 0);\n        for (var D = 0; D < C.length; D++) {\n          var A = E.substr(C[D], 2);\n          var z2 = b(E, C[D]);\n          if (A == \"a0\") {\n            B.full = this.getGeneralNames(z2);\n          }\n        }\n        return B;\n      };\n      this.getExtCRLDistributionPointsURI = function() {\n        var D = this.getExtCRLDistributionPoints();\n        if (D == void 0) {\n          return D;\n        }\n        var A = D.array;\n        var z2 = [];\n        for (var C = 0; C < A.length; C++) {\n          try {\n            if (A[C].dpname.full[0].uri != void 0) {\n              z2.push(A[C].dpname.full[0].uri);\n            }\n          } catch (B) {\n          }\n        }\n        return z2;\n      };\n      this.getExtAIAInfo = function() {\n        var D = this.getExtInfo(\"authorityInfoAccess\");\n        if (D === void 0) {\n          return D;\n        }\n        var z2 = { ocsp: [], caissuer: [] };\n        var A = s(this.hex, D.vidx);\n        for (var B = 0; B < A.length; B++) {\n          var E = c(this.hex, A[B], [0], \"06\");\n          var C = c(this.hex, A[B], [1], \"86\");\n          if (E === \"2b06010505073001\") {\n            z2.ocsp.push(hextoutf8(C));\n          }\n          if (E === \"2b06010505073002\") {\n            z2.caissuer.push(hextoutf8(C));\n          }\n        }\n        return z2;\n      };\n      this.getExtAuthorityInfoAccess = function(G, E) {\n        if (G === void 0 && E === void 0) {\n          var z2 = this.getExtInfo(\"authorityInfoAccess\");\n          if (z2 === void 0) {\n            return void 0;\n          }\n          G = b(this.hex, z2.vidx);\n          E = z2.critical;\n        }\n        var H = { extname: \"authorityInfoAccess\", array: [] };\n        if (E) {\n          H.critical = true;\n        }\n        var F = s(G, 0);\n        for (var A = 0; A < F.length; A++) {\n          var D = p(G, F[A], [0], \"06\");\n          var B = c(G, F[A], [1], \"86\");\n          var C = hextoutf8(B);\n          if (D == \"2b06010505073001\") {\n            H.array.push({ ocsp: C });\n          } else {\n            if (D == \"2b06010505073002\") {\n              H.array.push({ caissuer: C });\n            } else {\n              throw new Error(\"unknown method: \" + D);\n            }\n          }\n        }\n        return H;\n      };\n      this.getExtCertificatePolicies = function(D, G) {\n        if (D === void 0 && G === void 0) {\n          var F = this.getExtInfo(\"certificatePolicies\");\n          if (F === void 0) {\n            return void 0;\n          }\n          D = b(this.hex, F.vidx);\n          G = F.critical;\n        }\n        var z2 = { extname: \"certificatePolicies\", array: [] };\n        if (G) {\n          z2.critical = true;\n        }\n        var A = s(D, 0);\n        for (var B = 0; B < A.length; B++) {\n          var E = b(D, A[B]);\n          var C = this.getPolicyInformation(E);\n          z2.array.push(C);\n        }\n        return z2;\n      };\n      this.getPolicyInformation = function(D) {\n        var z2 = {};\n        var F = c(D, 0, [0], \"06\");\n        z2.policyoid = u(F);\n        var G = f(D, 0, [1], \"30\");\n        if (G != -1) {\n          z2.array = [];\n          var A = s(D, G);\n          for (var B = 0; B < A.length; B++) {\n            var E = b(D, A[B]);\n            var C = this.getPolicyQualifierInfo(E);\n            z2.array.push(C);\n          }\n        }\n        return z2;\n      };\n      this.getOtherName = function(B) {\n        var z2 = {};\n        var A = s(B, 0);\n        var D = c(B, A[0], [], \"06\");\n        var C = c(B, A[1], []);\n        z2.oid = u(D);\n        z2.value = j(C);\n        return z2;\n      };\n      this.getPolicyQualifierInfo = function(A) {\n        var z2 = {};\n        var B = c(A, 0, [0], \"06\");\n        if (B === \"2b06010505070201\") {\n          var D = p(A, 0, [1], \"16\");\n          z2.cps = hextorstr(D);\n        } else {\n          if (B === \"2b06010505070202\") {\n            var C = a(A, 0, [1], \"30\");\n            z2.unotice = this.getUserNotice(C);\n          }\n        }\n        return z2;\n      };\n      this.getUserNotice = function(D) {\n        var A = {};\n        var B = s(D, 0);\n        for (var C = 0; C < B.length; C++) {\n          var z2 = b(D, B[C]);\n          if (z2.substr(0, 2) != \"30\") {\n            A.exptext = this.getDisplayText(z2);\n          }\n        }\n        return A;\n      };\n      this.getDisplayText = function(A) {\n        var B = { \"0c\": \"utf8\", \"16\": \"ia5\", \"1a\": \"vis\", \"1e\": \"bmp\" };\n        var z2 = {};\n        z2.type = B[A.substr(0, 2)];\n        z2.str = hextorstr(k(A, 0));\n        return z2;\n      };\n      this.getExtPolicyMappings = function(G, E) {\n        var z2 = this.getCriticalExtV(\"policyMappings\", G, E);\n        G = z2[0];\n        E = z2[1];\n        if (G == null) {\n          return void 0;\n        }\n        var I = { extname: \"policyMappings\" };\n        if (E) {\n          I.critical = true;\n        }\n        try {\n          var A = j(G);\n          var B = A.seq;\n          var F = [];\n          for (var C = 0; C < B.length; C++) {\n            var H = B[C].seq;\n            F.push([H[0].oid, H[1].oid]);\n          }\n          I.array = F;\n        } catch (D) {\n          throw new m(\"malformed policyMappings\");\n        }\n        return I;\n      };\n      this.getExtPolicyConstraints = function(G, D) {\n        var z2 = this.getCriticalExtV(\"policyConstraints\", G, D);\n        G = z2[0];\n        D = z2[1];\n        if (G == null) {\n          return void 0;\n        }\n        var H = { extname: \"policyConstraints\" };\n        if (D) {\n          H.critical = true;\n        }\n        var A = j(G);\n        try {\n          var F = A.seq;\n          for (var B = 0; B < F.length; B++) {\n            var E = F[B].tag;\n            if (E.explicit != false) {\n              continue;\n            }\n            if (E.tag == \"80\") {\n              H.reqexp = parseInt(E.hex, 16);\n            }\n            if (E.tag == \"81\") {\n              H.inhibit = parseInt(E.hex, 16);\n            }\n          }\n        } catch (C) {\n          return new m(\"malformed policyConstraints value\");\n        }\n        return H;\n      };\n      this.getExtInhibitAnyPolicy = function(A, D) {\n        var C = this.getCriticalExtV(\"inhibitAnyPolicy\", A, D);\n        A = C[0];\n        D = C[1];\n        if (A == null) {\n          return void 0;\n        }\n        var z2 = { extname: \"inhibitAnyPolicy\" };\n        if (D) {\n          z2.critical = true;\n        }\n        var B = x(A, 0);\n        if (B == -1) {\n          return new m(\"wrong value\");\n        }\n        z2.skip = B;\n        return z2;\n      };\n      this.getExtCRLNumber = function(A, B) {\n        var z2 = { extname: \"cRLNumber\" };\n        if (B) {\n          z2.critical = true;\n        }\n        if (A.substr(0, 2) == \"02\") {\n          z2.num = { hex: k(A, 0) };\n          return z2;\n        }\n        throw new m(\"hExtV parse error: \" + A);\n      };\n      this.getExtCRLReason = function(A, B) {\n        var z2 = { extname: \"cRLReason\" };\n        if (B) {\n          z2.critical = true;\n        }\n        if (A.substr(0, 2) == \"0a\") {\n          z2.code = parseInt(k(A, 0), 16);\n          return z2;\n        }\n        throw new Error(\"hExtV parse error: \" + A);\n      };\n      this.getExtOcspNonce = function(A, C) {\n        var z2 = { extname: \"ocspNonce\" };\n        if (C) {\n          z2.critical = true;\n        }\n        var B = k(A, 0);\n        z2.hex = B;\n        return z2;\n      };\n      this.getExtOcspNoCheck = function(A, B) {\n        var z2 = { extname: \"ocspNoCheck\" };\n        if (B) {\n          z2.critical = true;\n        }\n        return z2;\n      };\n      this.getExtAdobeTimeStamp = function(C, F) {\n        if (C === void 0 && F === void 0) {\n          var E = this.getExtInfo(\"adobeTimeStamp\");\n          if (E === void 0) {\n            return void 0;\n          }\n          C = b(this.hex, E.vidx);\n          F = E.critical;\n        }\n        var z2 = { extname: \"adobeTimeStamp\" };\n        if (F) {\n          z2.critical = true;\n        }\n        var B = s(C, 0);\n        if (B.length > 1) {\n          var G = b(C, B[1]);\n          var A = this.getGeneralName(G);\n          if (A.uri != void 0) {\n            z2.uri = A.uri;\n          }\n        }\n        if (B.length > 2) {\n          var D = b(C, B[2]);\n          if (D == \"0101ff\") {\n            z2.reqauth = true;\n          }\n          if (D == \"010100\") {\n            z2.reqauth = false;\n          }\n        }\n        return z2;\n      };\n      var e2 = function(E) {\n        var z2 = {};\n        try {\n          var B = E.seq[0].oid;\n          var D = KJUR.asn1.x509.OID.name2oid(B);\n          z2.type = KJUR.asn1.x509.OID.oid2atype(D);\n          var A = E.seq[1];\n          if (A.utf8str != void 0) {\n            z2.ds = \"utf8\";\n            z2.value = A.utf8str.str;\n          } else {\n            if (A.numstr != void 0) {\n              z2.ds = \"num\";\n              z2.value = A.numstr.str;\n            } else {\n              if (A.telstr != void 0) {\n                z2.ds = \"tel\";\n                z2.value = A.telstr.str;\n              } else {\n                if (A.prnstr != void 0) {\n                  z2.ds = \"prn\";\n                  z2.value = A.prnstr.str;\n                } else {\n                  if (A.ia5str != void 0) {\n                    z2.ds = \"ia5\";\n                    z2.value = A.ia5str.str;\n                  } else {\n                    if (A.visstr != void 0) {\n                      z2.ds = \"vis\";\n                      z2.value = A.visstr.str;\n                    } else {\n                      if (A.bmpstr != void 0) {\n                        z2.ds = \"bmp\";\n                        z2.value = A.bmpstr.str;\n                      } else {\n                        throw \"error\";\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n          return z2;\n        } catch (C) {\n          throw new Erorr(\"improper ASN.1 parsed AttrTypeAndValue\");\n        }\n      };\n      var i = function(A) {\n        try {\n          return A.set.map(function(B) {\n            return e2(B);\n          });\n        } catch (z2) {\n          throw new Error(\"improper ASN.1 parsed RDN: \" + z2);\n        }\n      };\n      var h = function(A) {\n        try {\n          return A.seq.map(function(B) {\n            return i(B);\n          });\n        } catch (z2) {\n          throw new Error(\"improper ASN.1 parsed X500Name: \" + z2);\n        }\n      };\n      this.getX500NameRule = function(z2) {\n        var G = true;\n        var K = true;\n        var J = false;\n        var A = \"\";\n        var D = \"\";\n        var M = null;\n        var H = [];\n        for (var C = 0; C < z2.length; C++) {\n          var E = z2[C];\n          for (var B = 0; B < E.length; B++) {\n            H.push(E[B]);\n          }\n        }\n        for (var C = 0; C < H.length; C++) {\n          var L = H[C];\n          var N = L.ds;\n          var I = L.value;\n          var F = L.type;\n          A += \":\" + N;\n          if (N != \"prn\" && N != \"utf8\" && N != \"ia5\") {\n            return \"mixed\";\n          }\n          if (N == \"ia5\") {\n            if (F != \"CN\") {\n              return \"mixed\";\n            } else {\n              if (!KJUR.lang.String.isMail(I)) {\n                return \"mixed\";\n              } else {\n                continue;\n              }\n            }\n          }\n          if (F == \"C\") {\n            if (N == \"prn\") {\n              continue;\n            } else {\n              return \"mixed\";\n            }\n          }\n          D += \":\" + N;\n          if (M == null) {\n            M = N;\n          } else {\n            if (M !== N) {\n              return \"mixed\";\n            }\n          }\n        }\n        if (M == null) {\n          return \"prn\";\n        } else {\n          return M;\n        }\n      };\n      this.getAttrTypeAndValue = function(z2) {\n        var A = j(z2);\n        return e2(A);\n      };\n      this.getRDN = function(z2) {\n        var A = j(z2);\n        return i(A);\n      };\n      this.getX500NameArray = function(z2) {\n        var A = j(z2);\n        return h(A);\n      };\n      this.getX500Name = function(C, E, D) {\n        var A = this.getX500NameArray(C);\n        var B = this.dnarraytostr(A);\n        var z2 = { str: B };\n        z2.array = A;\n        if (D == true) {\n          z2.hex = C;\n        }\n        if (E == true) {\n          z2.canon = this.c14nRDNArray(A);\n        }\n        return z2;\n      };\n      this.readCertPEM = function(z2) {\n        this.readCertHex(w(z2));\n      };\n      this.readCertHex = function(z2) {\n        this.hex = z2;\n        this.getVersion();\n        try {\n          l(this.hex, 0, [0, 7], \"a3\");\n          this.parseExt();\n        } catch (A) {\n        }\n      };\n      this.getParam = function(A) {\n        var z2 = {};\n        if (A == void 0) {\n          A = {};\n        }\n        z2.version = this.getVersion();\n        z2.serial = { hex: this.getSerialNumberHex() };\n        z2.sigalg = this.getSignatureAlgorithmField();\n        z2.issuer = this.getIssuer(A.dncanon, A.dnhex);\n        z2.notbefore = this.getNotBefore();\n        z2.notafter = this.getNotAfter();\n        z2.subject = this.getSubject(A.dncanon, A.dnhex);\n        z2.sbjpubkey = hextopem(this.getPublicKeyHex(), \"PUBLIC KEY\");\n        if (this.aExtInfo != void 0 && this.aExtInfo.length > 0) {\n          z2.ext = this.getExtParamArray();\n        }\n        z2.sighex = this.getSignatureValueHex();\n        if (A.tbshex == true) {\n          z2.tbshex = a(this.hex, 0, [0]);\n        }\n        if (A.nodnarray == true) {\n          delete z2.issuer.array;\n          delete z2.subject.array;\n        }\n        return z2;\n      };\n      this.getExtParamArray = function(A) {\n        if (A == void 0) {\n          var C = f(this.hex, 0, [0, \"[3]\"]);\n          if (C != -1) {\n            A = q(this.hex, 0, [0, \"[3]\", 0], \"30\");\n          }\n        }\n        var z2 = [];\n        var B = s(A, 0);\n        for (var D = 0; D < B.length; D++) {\n          var F = b(A, B[D]);\n          var E = this.getExtParam(F);\n          if (E != null) {\n            z2.push(E);\n          }\n        }\n        return z2;\n      };\n      this.getExtParam = function(A) {\n        var H = {};\n        var C = s(A, 0);\n        var D = C.length;\n        if (D != 2 && D != 3) {\n          throw new Error(\"wrong number elements in Extension: \" + D + \" \" + A);\n        }\n        var B = r2(c(A, 0, [0], \"06\"));\n        var F = false;\n        if (D == 3 && a(A, 0, [1]) == \"0101ff\") {\n          F = true;\n        }\n        var G = a(A, 0, [D - 1, 0]);\n        var E = void 0;\n        if (B == \"2.5.29.14\") {\n          E = this.getExtSubjectKeyIdentifier(G, F);\n        } else {\n          if (B == \"2.5.29.15\") {\n            E = this.getExtKeyUsage(G, F);\n          } else {\n            if (B == \"2.5.29.17\") {\n              E = this.getExtSubjectAltName(G, F);\n            } else {\n              if (B == \"2.5.29.18\") {\n                E = this.getExtIssuerAltName(G, F);\n              } else {\n                if (B == \"2.5.29.19\") {\n                  E = this.getExtBasicConstraints(G, F);\n                } else {\n                  if (B == \"2.5.29.30\") {\n                    E = this.getExtNameConstraints(G, F);\n                  } else {\n                    if (B == \"2.5.29.31\") {\n                      E = this.getExtCRLDistributionPoints(G, F);\n                    } else {\n                      if (B == \"2.5.29.32\") {\n                        E = this.getExtCertificatePolicies(G, F);\n                      } else {\n                        if (B == \"2.5.29.33\") {\n                          E = this.getExtPolicyMappings(G, F);\n                        } else {\n                          if (B == \"2.5.29.35\") {\n                            E = this.getExtAuthorityKeyIdentifier(G, F);\n                          } else {\n                            if (B == \"2.5.29.36\") {\n                              E = this.getExtPolicyConstraints(G, F);\n                            } else {\n                              if (B == \"2.5.29.37\") {\n                                E = this.getExtExtKeyUsage(G, F);\n                              } else {\n                                if (B == \"2.5.29.54\") {\n                                  E = this.getExtInhibitAnyPolicy(G, F);\n                                } else {\n                                  if (B == \"1.3.6.1.5.5.7.1.1\") {\n                                    E = this.getExtAuthorityInfoAccess(G, F);\n                                  } else {\n                                    if (B == \"2.5.29.20\") {\n                                      E = this.getExtCRLNumber(G, F);\n                                    } else {\n                                      if (B == \"2.5.29.21\") {\n                                        E = this.getExtCRLReason(G, F);\n                                      } else {\n                                        if (B == \"1.3.6.1.5.5.7.48.1.2\") {\n                                          E = this.getExtOcspNonce(G, F);\n                                        } else {\n                                          if (B == \"1.3.6.1.5.5.7.48.1.5\") {\n                                            E = this.getExtOcspNoCheck(G, F);\n                                          } else {\n                                            if (B == \"1.2.840.113583.1.1.9.1\") {\n                                              E = this.getExtAdobeTimeStamp(G, F);\n                                            }\n                                          }\n                                        }\n                                      }\n                                    }\n                                  }\n                                }\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n        if (E != void 0) {\n          return E;\n        }\n        var z2 = { extname: B, extn: G };\n        if (F) {\n          z2.critical = true;\n        }\n        return z2;\n      };\n      this.findExt = function(A, B) {\n        for (var z2 = 0; z2 < A.length; z2++) {\n          if (A[z2].extname == B) {\n            return A[z2];\n          }\n        }\n        return null;\n      };\n      this.updateExtCDPFullURI = function(D, z2) {\n        var C = this.findExt(D, \"cRLDistributionPoints\");\n        if (C == null) {\n          return;\n        }\n        if (C.array == void 0) {\n          return;\n        }\n        var F = C.array;\n        for (var B = 0; B < F.length; B++) {\n          if (F[B].dpname == void 0) {\n            continue;\n          }\n          if (F[B].dpname.full == void 0) {\n            continue;\n          }\n          var G = F[B].dpname.full;\n          for (var A = 0; A < G.length; A++) {\n            var E = G[B];\n            if (E.uri == void 0) {\n              continue;\n            }\n            E.uri = z2;\n          }\n        }\n      };\n      this.updateExtAIAOCSP = function(D, A) {\n        var C = this.findExt(D, \"authorityInfoAccess\");\n        if (C == null) {\n          return;\n        }\n        if (C.array == void 0) {\n          return;\n        }\n        var z2 = C.array;\n        for (var B = 0; B < z2.length; B++) {\n          if (z2[B].ocsp != void 0) {\n            z2[B].ocsp = A;\n          }\n        }\n      };\n      this.updateExtAIACAIssuer = function(D, A) {\n        var C = this.findExt(D, \"authorityInfoAccess\");\n        if (C == null) {\n          return;\n        }\n        if (C.array == void 0) {\n          return;\n        }\n        var z2 = C.array;\n        for (var B = 0; B < z2.length; B++) {\n          if (z2[B].caissuer != void 0) {\n            z2[B].caissuer = A;\n          }\n        }\n      };\n      this.dnarraytostr = function(B) {\n        function z2(C) {\n          return C.map(function(D) {\n            return A(D).replace(/\\+/, \"\\\\+\");\n          }).join(\"+\");\n        }\n        function A(C) {\n          return C.type + \"=\" + C.value;\n        }\n        return \"/\" + B.map(function(C) {\n          return z2(C).replace(/\\//, \"\\\\/\");\n        }).join(\"/\");\n      };\n      this.setCanonicalizedDN = function(A) {\n        var C;\n        if (A.str != void 0 && A.array == void 0) {\n          var B = new KJUR.asn1.x509.X500Name({ str: A.str });\n          var z2 = B.tohex();\n          C = this.getX500NameArray(z2);\n        } else {\n          C = A.array;\n        }\n        if (A.canon == void 0) {\n          A.canon = this.c14nRDNArray(C);\n        }\n      };\n      this.c14nRDNArray = function(G) {\n        var A = [];\n        for (var C = 0; C < G.length; C++) {\n          var E = G[C];\n          var z2 = [];\n          for (var B = 0; B < E.length; B++) {\n            var D = E[B];\n            var F = D.value;\n            F = F.replace(/^\\s*/, \"\");\n            F = F.replace(/\\s*$/, \"\");\n            F = F.replace(/\\s+/g, \" \");\n            F = F.toLowerCase();\n            z2.push(D.type.toLowerCase() + \"=\" + F);\n          }\n          A.push(z2.join(\"+\"));\n        }\n        return \"/\" + A.join(\"/\");\n      };\n      this.getInfo = function() {\n        var A = function(W) {\n          var ac = \"\";\n          var U = \"    \";\n          var Y = \"\\n\";\n          var Z = W.array;\n          for (var X = 0; X < Z.length; X++) {\n            var V = Z[X];\n            if (V.dn != void 0) {\n              ac += U + \"dn: \" + V.dn.str + Y;\n            }\n            if (V.ip != void 0) {\n              ac += U + \"ip: \" + V.ip + Y;\n            }\n            if (V.rfc822 != void 0) {\n              ac += U + \"rfc822: \" + V.rfc822 + Y;\n            }\n            if (V.dns != void 0) {\n              ac += U + \"dns: \" + V.dns + Y;\n            }\n            if (V.uri != void 0) {\n              ac += U + \"uri: \" + V.uri + Y;\n            }\n            if (V.other != void 0) {\n              var ab = V.other.oid;\n              var aa = JSON.stringify(V.other.value).replace(/\\\"/g, \"\");\n              ac += U + \"other: \" + ab + \"=\" + aa + Y;\n            }\n          }\n          ac = ac.replace(/\\n$/, \"\");\n          return ac;\n        };\n        var H = function(aa) {\n          var Y = \"\";\n          var U = aa.array;\n          for (var X = 0; X < U.length; X++) {\n            var Z = U[X];\n            Y += \"    policy oid: \" + Z.policyoid + \"\\n\";\n            if (Z.array === void 0) {\n              continue;\n            }\n            for (var W = 0; W < Z.array.length; W++) {\n              var V = Z.array[W];\n              if (V.cps !== void 0) {\n                Y += \"    cps: \" + V.cps + \"\\n\";\n              }\n            }\n          }\n          return Y;\n        };\n        var K = function(Y) {\n          var X = \"\";\n          var U = Y.array;\n          for (var W = 0; W < U.length; W++) {\n            var Z = U[W];\n            try {\n              if (Z.dpname.full[0].uri !== void 0) {\n                X += \"    \" + Z.dpname.full[0].uri + \"\\n\";\n              }\n            } catch (V) {\n            }\n            try {\n              if (Z.dname.full[0].dn.hex !== void 0) {\n                X += \"    \" + X509.hex2dn(Z.dpname.full[0].dn.hex) + \"\\n\";\n              }\n            } catch (V) {\n            }\n          }\n          return X;\n        };\n        var I = function(Y) {\n          var X = \"\";\n          var U = Y.array;\n          for (var V = 0; V < U.length; V++) {\n            var W = U[V];\n            if (W.caissuer !== void 0) {\n              X += \"    caissuer: \" + W.caissuer + \"\\n\";\n            }\n            if (W.ocsp !== void 0) {\n              X += \"    ocsp: \" + W.ocsp + \"\\n\";\n            }\n          }\n          return X;\n        };\n        var B = X509;\n        var M, L, T;\n        M = \"Basic Fields\\n\";\n        M += \"  serial number: \" + this.getSerialNumberHex() + \"\\n\";\n        M += \"  signature algorithm: \" + this.getSignatureAlgorithmField() + \"\\n\";\n        M += \"  issuer: \" + this.getIssuerString() + \"\\n\";\n        M += \"  notBefore: \" + this.getNotBefore() + \"\\n\";\n        M += \"  notAfter: \" + this.getNotAfter() + \"\\n\";\n        M += \"  subject: \" + this.getSubjectString() + \"\\n\";\n        M += \"  subject public key info: \\n\";\n        L = this.getPublicKey();\n        M += \"    key algorithm: \" + L.type + \"\\n\";\n        if (L.type === \"RSA\") {\n          M += \"    n=\" + hextoposhex(L.n.toString(16)).substr(0, 16) + \"...\\n\";\n          M += \"    e=\" + hextoposhex(L.e.toString(16)) + \"\\n\";\n        }\n        T = this.aExtInfo;\n        if (T !== void 0 && T !== null) {\n          M += \"X509v3 Extensions:\\n\";\n          for (var P = 0; P < T.length; P++) {\n            var R = T[P];\n            var z2 = KJUR.asn1.x509.OID.oid2name(R.oid);\n            if (z2 === \"\") {\n              z2 = R.oid;\n            }\n            var O = \"\";\n            if (R.critical === true) {\n              O = \"CRITICAL\";\n            }\n            M += \"  \" + z2 + \" \" + O + \":\\n\";\n            if (z2 === \"basicConstraints\") {\n              var C = this.getExtBasicConstraints();\n              if (C.cA === void 0) {\n                M += \"    {}\\n\";\n              } else {\n                M += \"    cA=true\";\n                if (C.pathLen !== void 0) {\n                  M += \", pathLen=\" + C.pathLen;\n                }\n                M += \"\\n\";\n              }\n            } else {\n              if (z2 == \"policyMappings\") {\n                var S = this.getExtPolicyMappings().array;\n                var G = S.map(function(U) {\n                  var V = U;\n                  return V[0] + \":\" + V[1];\n                }).join(\", \");\n                M += \"    \" + G + \"\\n\";\n              } else {\n                if (z2 == \"policyConstraints\") {\n                  var N = this.getExtPolicyConstraints();\n                  M += \"    \";\n                  if (N.reqexp != void 0) {\n                    M += \" reqexp=\" + N.reqexp;\n                  }\n                  if (N.inhibit != void 0) {\n                    M += \" inhibit=\" + N.inhibit;\n                  }\n                  M += \"\\n\";\n                } else {\n                  if (z2 == \"inhibitAnyPolicy\") {\n                    var N = this.getExtInhibitAnyPolicy();\n                    M += \"    skip=\" + N.skip + \"\\n\";\n                  } else {\n                    if (z2 == \"keyUsage\") {\n                      M += \"    \" + this.getExtKeyUsageString() + \"\\n\";\n                    } else {\n                      if (z2 == \"subjectKeyIdentifier\") {\n                        M += \"    \" + this.getExtSubjectKeyIdentifier().kid.hex + \"\\n\";\n                      } else {\n                        if (z2 == \"authorityKeyIdentifier\") {\n                          var D = this.getExtAuthorityKeyIdentifier();\n                          if (D.kid !== void 0) {\n                            M += \"    kid=\" + D.kid.hex + \"\\n\";\n                          }\n                        } else {\n                          if (z2 == \"extKeyUsage\") {\n                            var Q = this.getExtExtKeyUsage().array;\n                            M += \"    \" + Q.join(\", \") + \"\\n\";\n                          } else {\n                            if (z2 == \"subjectAltName\") {\n                              var E = A(this.getExtSubjectAltName());\n                              M += E + \"\\n\";\n                            } else {\n                              if (z2 == \"cRLDistributionPoints\") {\n                                var J = this.getExtCRLDistributionPoints();\n                                M += K(J);\n                              } else {\n                                if (z2 == \"authorityInfoAccess\") {\n                                  var F = this.getExtAuthorityInfoAccess();\n                                  M += I(F);\n                                } else {\n                                  if (z2 == \"certificatePolicies\") {\n                                    M += H(this.getExtCertificatePolicies());\n                                  }\n                                }\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n        M += \"signature algorithm: \" + this.getSignatureAlgorithmName() + \"\\n\";\n        M += \"signature: \" + this.getSignatureValueHex().substr(0, 16) + \"...\\n\";\n        return M;\n      };\n      if (typeof v == \"string\") {\n        if (v.indexOf(\"-----BEGIN\") != -1) {\n          this.readCertPEM(v);\n        } else {\n          if (KJUR.lang.String.isHex(v)) {\n            this.readCertHex(v);\n          }\n        }\n      }\n    }\n    X509.hex2dn = function(e2, b) {\n      if (b === void 0) {\n        b = 0;\n      }\n      var a = new X509();\n      var c = ASN1HEX.getTLV(e2, b);\n      var d = a.getX500Name(e2);\n      return d.str;\n    };\n    X509.hex2rdn = function(f, b) {\n      if (b === void 0) {\n        b = 0;\n      }\n      if (f.substr(b, 2) !== \"31\") {\n        throw new Error(\"malformed RDN\");\n      }\n      var c = new Array();\n      var d = ASN1HEX.getChildIdx(f, b);\n      for (var e2 = 0; e2 < d.length; e2++) {\n        c.push(X509.hex2attrTypeValue(f, d[e2]));\n      }\n      c = c.map(function(a) {\n        return a.replace(\"+\", \"\\\\+\");\n      });\n      return c.join(\"+\");\n    };\n    X509.hex2attrTypeValue = function(d, i) {\n      var j = ASN1HEX;\n      var h = j.getV;\n      if (i === void 0) {\n        i = 0;\n      }\n      if (d.substr(i, 2) !== \"30\") {\n        throw new Error(\"malformed attribute type and value\");\n      }\n      var g = j.getChildIdx(d, i);\n      if (g.length !== 2 || d.substr(g[0], 2) !== \"06\") {\n        \"malformed attribute type and value\";\n      }\n      var b = h(d, g[0]);\n      var f = KJUR.asn1.ASN1Util.oidHexToInt(b);\n      var e2 = KJUR.asn1.x509.OID.oid2atype(f);\n      var a = h(d, g[1]);\n      var c = hextorstr(a);\n      return e2 + \"=\" + c;\n    };\n    X509.getPublicKeyFromCertHex = function(b) {\n      var a = new X509();\n      a.readCertHex(b);\n      return a.getPublicKey();\n    };\n    X509.getPublicKeyFromCertPEM = function(b) {\n      var a = new X509();\n      a.readCertPEM(b);\n      return a.getPublicKey();\n    };\n    X509.getPublicKeyInfoPropOfCertPEM = function(c) {\n      var e2 = ASN1HEX;\n      var g = e2.getVbyList;\n      var b = {};\n      var a, f, d;\n      b.algparam = null;\n      a = new X509();\n      a.readCertPEM(c);\n      f = a.getPublicKeyHex();\n      b.keyhex = g(f, 0, [1], \"03\").substr(2);\n      b.algoid = g(f, 0, [0, 0], \"06\");\n      if (b.algoid === \"2a8648ce3d0201\") {\n        b.algparam = g(f, 0, [0, 1], \"06\");\n      }\n      return b;\n    };\n    X509.KEYUSAGE_NAME = [\"digitalSignature\", \"nonRepudiation\", \"keyEncipherment\", \"dataEncipherment\", \"keyAgreement\", \"keyCertSign\", \"cRLSign\", \"encipherOnly\", \"decipherOnly\"];\n    var X509CRL = function(e2) {\n      var a = KJUR, f = a.lang.String.isHex, m = ASN1HEX, k = m.getV, b = m.getTLV, h = m.getVbyList, c = m.getTLVbyList, d = m.getTLVbyListEx, i = m.getIdxbyList, g = m.getIdxbyListEx, l = m.getChildIdx, j = new X509();\n      this.hex = null;\n      this.posSigAlg = null;\n      this.posRevCert = null;\n      this.parsed = null;\n      this._setPos = function() {\n        var o2 = i(this.hex, 0, [0, 0]);\n        var n2 = this.hex.substr(o2, 2);\n        if (n2 == \"02\") {\n          this.posSigAlg = 1;\n        } else {\n          if (n2 == \"30\") {\n            this.posSigAlg = 0;\n          } else {\n            throw new Error(\"malformed 1st item of TBSCertList: \" + n2);\n          }\n        }\n        var s = i(this.hex, 0, [0, this.posSigAlg + 3]);\n        var r2 = this.hex.substr(s, 2);\n        if (r2 == \"17\" || r2 == \"18\") {\n          var q, p;\n          q = i(this.hex, 0, [0, this.posSigAlg + 4]);\n          this.posRevCert = null;\n          if (q != -1) {\n            p = this.hex.substr(q, 2);\n            if (p == \"30\") {\n              this.posRevCert = this.posSigAlg + 4;\n            }\n          }\n        } else {\n          if (r2 == \"30\") {\n            this.posRevCert = this.posSigAlg + 3;\n          } else {\n            if (r2 == \"a0\") {\n              this.posRevCert = null;\n            } else {\n              throw new Error(\"malformed nextUpdate or revCert tag: \" + r2);\n            }\n          }\n        }\n      };\n      this.getVersion = function() {\n        if (this.posSigAlg == 0) {\n          return null;\n        }\n        return parseInt(h(this.hex, 0, [0, 0], \"02\"), 16) + 1;\n      };\n      this.getSignatureAlgorithmField = function() {\n        var n2 = c(this.hex, 0, [0, this.posSigAlg], \"30\");\n        return j.getAlgorithmIdentifierName(n2);\n      };\n      this.getIssuer = function() {\n        return j.getX500Name(this.getIssuerHex());\n      };\n      this.getIssuerHex = function() {\n        return c(this.hex, 0, [0, this.posSigAlg + 1], \"30\");\n      };\n      this.getThisUpdate = function() {\n        var n2 = h(this.hex, 0, [0, this.posSigAlg + 2]);\n        return result = hextorstr(n2);\n      };\n      this.getNextUpdate = function() {\n        var o2 = i(this.hex, 0, [0, this.posSigAlg + 3]);\n        var n2 = this.hex.substr(o2, 2);\n        if (n2 != \"17\" && n2 != \"18\") {\n          return null;\n        }\n        return hextorstr(k(this.hex, o2));\n      };\n      this.getRevCertArray = function() {\n        if (this.posRevCert == null) {\n          return null;\n        }\n        var o2 = [];\n        var n2 = i(this.hex, 0, [0, this.posRevCert]);\n        var p = l(this.hex, n2);\n        for (var q = 0; q < p.length; q++) {\n          var r2 = b(this.hex, p[q]);\n          o2.push(this.getRevCert(r2));\n        }\n        return o2;\n      };\n      this.getRevCert = function(p) {\n        var o2 = {};\n        var n2 = l(p, 0);\n        o2.sn = { hex: h(p, 0, [0], \"02\") };\n        o2.date = hextorstr(h(p, 0, [1]));\n        if (n2.length == 3) {\n          o2.ext = j.getExtParamArray(c(p, 0, [2]));\n        }\n        return o2;\n      };\n      this.findRevCert = function(p) {\n        var n2 = new X509(p);\n        var o2 = n2.getSerialNumberHex();\n        return this.findRevCertBySN(o2);\n      };\n      this.findRevCertBySN = function(o2) {\n        if (this.parsed == null) {\n          this.getParam();\n        }\n        if (this.parsed.revcert == null) {\n          return null;\n        }\n        var n2 = this.parsed.revcert;\n        for (var p = 0; p < n2.length; p++) {\n          if (o2 == n2[p].sn.hex) {\n            return n2[p];\n          }\n        }\n        return null;\n      };\n      this.getSignatureValueHex = function() {\n        return h(this.hex, 0, [2], \"03\", true);\n      };\n      this.verifySignature = function(o2) {\n        var p = this.getSignatureAlgorithmField();\n        var n2 = this.getSignatureValueHex();\n        var q = c(this.hex, 0, [0], \"30\");\n        var r2 = new KJUR.crypto.Signature({ alg: p });\n        r2.init(o2);\n        r2.updateHex(q);\n        return r2.verify(n2);\n      };\n      this.getParam = function(r2) {\n        var n2 = {};\n        var p = this.getVersion();\n        if (p != null) {\n          n2.version = p;\n        }\n        n2.sigalg = this.getSignatureAlgorithmField();\n        n2.issuer = this.getIssuer();\n        n2.thisupdate = this.getThisUpdate();\n        var q = this.getNextUpdate();\n        if (q != null) {\n          n2.nextupdate = q;\n        }\n        var t3 = this.getRevCertArray();\n        if (t3 != null) {\n          n2.revcert = t3;\n        }\n        var s = g(this.hex, 0, [0, \"[0]\"]);\n        if (s != -1) {\n          var o2 = d(this.hex, 0, [0, \"[0]\", 0]);\n          n2.ext = j.getExtParamArray(o2);\n        }\n        n2.sighex = this.getSignatureValueHex();\n        this.parsed = n2;\n        if (typeof r2 == \"object\") {\n          if (r2.tbshex == true) {\n            n2.tbshex = c(this.hex, 0, [0]);\n          }\n          if (r2.nodnarray == true) {\n            delete n2.issuer.array;\n          }\n        }\n        return n2;\n      };\n      if (typeof e2 == \"string\") {\n        if (f(e2)) {\n          this.hex = e2;\n        } else {\n          if (e2.match(/-----BEGIN X509 CRL/)) {\n            this.hex = pemtohex(e2);\n          }\n        }\n        this._setPos();\n      }\n    };\n    if (typeof KJUR == \"undefined\" || !KJUR) {\n      KJUR = {};\n    }\n    if (typeof KJUR.jws == \"undefined\" || !KJUR.jws) {\n      KJUR.jws = {};\n    }\n    KJUR.jws.JWS = function() {\n      var b = KJUR, a = b.jws.JWS, c = a.isSafeJSONString;\n      this.parseJWS = function(g, j) {\n        if (this.parsedJWS !== void 0 && (j || this.parsedJWS.sigvalH !== void 0)) {\n          return;\n        }\n        var i = g.match(/^([^.]+)\\.([^.]+)\\.([^.]+)$/);\n        if (i == null) {\n          throw \"JWS signature is not a form of 'Head.Payload.SigValue'.\";\n        }\n        var k = i[1];\n        var e2 = i[2];\n        var l = i[3];\n        var n2 = k + \".\" + e2;\n        this.parsedJWS = {};\n        this.parsedJWS.headB64U = k;\n        this.parsedJWS.payloadB64U = e2;\n        this.parsedJWS.sigvalB64U = l;\n        this.parsedJWS.si = n2;\n        if (!j) {\n          var h = b64utohex(l);\n          var f = parseBigInt(h, 16);\n          this.parsedJWS.sigvalH = h;\n          this.parsedJWS.sigvalBI = f;\n        }\n        var d = b64utoutf8(k);\n        var m = b64utoutf8(e2);\n        this.parsedJWS.headS = d;\n        this.parsedJWS.payloadS = m;\n        if (!c(d, this.parsedJWS, \"headP\")) {\n          throw \"malformed JSON string for JWS Head: \" + d;\n        }\n      };\n    };\n    KJUR.jws.JWS.sign = function(j, w, z2, A, a) {\n      var x = KJUR, n2 = x.jws, r2 = n2.JWS, h = r2.readSafeJSONString, q = r2.isSafeJSONString, d = x.crypto, l = d.ECDSA, p = d.Mac, c = d.Signature, u = JSON;\n      var t3, k, o2;\n      if (typeof w != \"string\" && typeof w != \"object\") {\n        throw \"spHeader must be JSON string or object: \" + w;\n      }\n      if (typeof w == \"object\") {\n        k = w;\n        t3 = u.stringify(k);\n      }\n      if (typeof w == \"string\") {\n        t3 = w;\n        if (!q(t3)) {\n          throw \"JWS Head is not safe JSON string: \" + t3;\n        }\n        k = h(t3);\n      }\n      o2 = z2;\n      if (typeof z2 == \"object\") {\n        o2 = u.stringify(z2);\n      }\n      if ((j == \"\" || j == null) && k.alg !== void 0) {\n        j = k.alg;\n      }\n      if (j != \"\" && j != null && k.alg === void 0) {\n        k.alg = j;\n        t3 = u.stringify(k);\n      }\n      if (j !== k.alg) {\n        throw \"alg and sHeader.alg doesn't match: \" + j + \"!=\" + k.alg;\n      }\n      var s = null;\n      if (r2.jwsalg2sigalg[j] === void 0) {\n        throw \"unsupported alg name: \" + j;\n      } else {\n        s = r2.jwsalg2sigalg[j];\n      }\n      var e2 = utf8tob64u(t3);\n      var m = utf8tob64u(o2);\n      var b = e2 + \".\" + m;\n      var y = \"\";\n      if (s.substr(0, 4) == \"Hmac\") {\n        if (A === void 0) {\n          throw \"mac key shall be specified for HS* alg\";\n        }\n        var i = new p({ alg: s, prov: \"cryptojs\", pass: A });\n        i.updateString(b);\n        y = i.doFinal();\n      } else {\n        if (s.indexOf(\"withECDSA\") != -1) {\n          var f = new c({ alg: s });\n          f.init(A, a);\n          f.updateString(b);\n          var g = f.sign();\n          y = KJUR.crypto.ECDSA.asn1SigToConcatSig(g);\n        } else {\n          if (s != \"none\") {\n            var f = new c({ alg: s });\n            f.init(A, a);\n            f.updateString(b);\n            y = f.sign();\n          }\n        }\n      }\n      var v = hextob64u(y);\n      return b + \".\" + v;\n    };\n    KJUR.jws.JWS.verify = function(w, B, n2) {\n      var x = KJUR, q = x.jws, t3 = q.JWS, i = t3.readSafeJSONString, e2 = x.crypto, p = e2.ECDSA, s = e2.Mac, d = e2.Signature, m;\n      if (typeof RSAKey !== void 0) {\n        m = RSAKey;\n      }\n      if (!isBase64URLDot(w)) {\n        return false;\n      }\n      var y = w.split(\".\");\n      if (y.length !== 3) {\n        return false;\n      }\n      var f = y[0];\n      var r2 = y[1];\n      var c = f + \".\" + r2;\n      var A = b64utohex(y[2]);\n      var l = i(b64utoutf8(y[0]));\n      var k = null;\n      var z2 = null;\n      if (l.alg === void 0) {\n        throw \"algorithm not specified in header\";\n      } else {\n        k = l.alg;\n        z2 = k.substr(0, 2);\n      }\n      if (n2 != null && Object.prototype.toString.call(n2) === \"[object Array]\" && n2.length > 0) {\n        var b = \":\" + n2.join(\":\") + \":\";\n        if (b.indexOf(\":\" + k + \":\") == -1) {\n          throw \"algorithm '\" + k + \"' not accepted in the list\";\n        }\n      }\n      if (k != \"none\" && B === null) {\n        throw \"key shall be specified to verify.\";\n      }\n      if (typeof B == \"string\" && B.indexOf(\"-----BEGIN \") != -1) {\n        B = KEYUTIL.getKey(B);\n      }\n      if (z2 == \"RS\" || z2 == \"PS\") {\n        if (!(B instanceof m)) {\n          throw \"key shall be a RSAKey obj for RS* and PS* algs\";\n        }\n      }\n      if (z2 == \"ES\") {\n        if (!(B instanceof p)) {\n          throw \"key shall be a ECDSA obj for ES* algs\";\n        }\n      }\n      if (k == \"none\") {\n      }\n      var u = null;\n      if (t3.jwsalg2sigalg[l.alg] === void 0) {\n        throw \"unsupported alg name: \" + k;\n      } else {\n        u = t3.jwsalg2sigalg[k];\n      }\n      if (u == \"none\") {\n        throw \"not supported\";\n      } else {\n        if (u.substr(0, 4) == \"Hmac\") {\n          var o2 = null;\n          if (B === void 0) {\n            throw \"hexadecimal key shall be specified for HMAC\";\n          }\n          var j = new s({ alg: u, pass: B });\n          j.updateString(c);\n          o2 = j.doFinal();\n          return A == o2;\n        } else {\n          if (u.indexOf(\"withECDSA\") != -1) {\n            var h = null;\n            try {\n              h = p.concatSigToASN1Sig(A);\n            } catch (v) {\n              return false;\n            }\n            var g = new d({ alg: u });\n            g.init(B);\n            g.updateString(c);\n            return g.verify(h);\n          } else {\n            var g = new d({ alg: u });\n            g.init(B);\n            g.updateString(c);\n            return g.verify(A);\n          }\n        }\n      }\n    };\n    KJUR.jws.JWS.parse = function(g) {\n      var c = g.split(\".\");\n      var b = {};\n      var f, e2, d;\n      if (c.length != 2 && c.length != 3) {\n        throw \"malformed sJWS: wrong number of '.' splitted elements\";\n      }\n      f = c[0];\n      e2 = c[1];\n      if (c.length == 3) {\n        d = c[2];\n      }\n      b.headerObj = KJUR.jws.JWS.readSafeJSONString(b64utoutf8(f));\n      b.payloadObj = KJUR.jws.JWS.readSafeJSONString(b64utoutf8(e2));\n      b.headerPP = JSON.stringify(b.headerObj, null, \"  \");\n      if (b.payloadObj == null) {\n        b.payloadPP = b64utoutf8(e2);\n      } else {\n        b.payloadPP = JSON.stringify(b.payloadObj, null, \"  \");\n      }\n      if (d !== void 0) {\n        b.sigHex = b64utohex(d);\n      }\n      return b;\n    };\n    KJUR.jws.JWS.verifyJWT = function(e2, l, r2) {\n      var d = KJUR, j = d.jws, o2 = j.JWS, n2 = o2.readSafeJSONString, p = o2.inArray, f = o2.includedArray;\n      if (!isBase64URLDot(e2)) {\n        return false;\n      }\n      var k = e2.split(\".\");\n      if (k.length != 3) {\n        return false;\n      }\n      var c = k[0];\n      var i = k[1];\n      var q = c + \".\" + i;\n      var m = b64utohex(k[2]);\n      var h = n2(b64utoutf8(c));\n      var g = n2(b64utoutf8(i));\n      if (h.alg === void 0) {\n        return false;\n      }\n      if (r2.alg === void 0) {\n        throw \"acceptField.alg shall be specified\";\n      }\n      if (!p(h.alg, r2.alg)) {\n        return false;\n      }\n      if (g.iss !== void 0 && typeof r2.iss === \"object\") {\n        if (!p(g.iss, r2.iss)) {\n          return false;\n        }\n      }\n      if (g.sub !== void 0 && typeof r2.sub === \"object\") {\n        if (!p(g.sub, r2.sub)) {\n          return false;\n        }\n      }\n      if (g.aud !== void 0 && typeof r2.aud === \"object\") {\n        if (typeof g.aud == \"string\") {\n          if (!p(g.aud, r2.aud)) {\n            return false;\n          }\n        } else {\n          if (typeof g.aud == \"object\") {\n            if (!f(g.aud, r2.aud)) {\n              return false;\n            }\n          }\n        }\n      }\n      var b = j.IntDate.getNow();\n      if (r2.verifyAt !== void 0 && typeof r2.verifyAt === \"number\") {\n        b = r2.verifyAt;\n      }\n      if (r2.gracePeriod === void 0 || typeof r2.gracePeriod !== \"number\") {\n        r2.gracePeriod = 0;\n      }\n      if (g.exp !== void 0 && typeof g.exp == \"number\") {\n        if (g.exp + r2.gracePeriod < b) {\n          return false;\n        }\n      }\n      if (g.nbf !== void 0 && typeof g.nbf == \"number\") {\n        if (b < g.nbf - r2.gracePeriod) {\n          return false;\n        }\n      }\n      if (g.iat !== void 0 && typeof g.iat == \"number\") {\n        if (b < g.iat - r2.gracePeriod) {\n          return false;\n        }\n      }\n      if (g.jti !== void 0 && r2.jti !== void 0) {\n        if (g.jti !== r2.jti) {\n          return false;\n        }\n      }\n      if (!o2.verify(e2, l, r2.alg)) {\n        return false;\n      }\n      return true;\n    };\n    KJUR.jws.JWS.includedArray = function(b, a) {\n      var c = KJUR.jws.JWS.inArray;\n      if (b === null) {\n        return false;\n      }\n      if (typeof b !== \"object\") {\n        return false;\n      }\n      if (typeof b.length !== \"number\") {\n        return false;\n      }\n      for (var d = 0; d < b.length; d++) {\n        if (!c(b[d], a)) {\n          return false;\n        }\n      }\n      return true;\n    };\n    KJUR.jws.JWS.inArray = function(d, b) {\n      if (b === null) {\n        return false;\n      }\n      if (typeof b !== \"object\") {\n        return false;\n      }\n      if (typeof b.length !== \"number\") {\n        return false;\n      }\n      for (var c = 0; c < b.length; c++) {\n        if (b[c] == d) {\n          return true;\n        }\n      }\n      return false;\n    };\n    KJUR.jws.JWS.jwsalg2sigalg = { HS256: \"HmacSHA256\", HS384: \"HmacSHA384\", HS512: \"HmacSHA512\", RS256: \"SHA256withRSA\", RS384: \"SHA384withRSA\", RS512: \"SHA512withRSA\", ES256: \"SHA256withECDSA\", ES384: \"SHA384withECDSA\", ES512: \"SHA512withECDSA\", PS256: \"SHA256withRSAandMGF1\", PS384: \"SHA384withRSAandMGF1\", PS512: \"SHA512withRSAandMGF1\", none: \"none\" };\n    KJUR.jws.JWS.isSafeJSONString = function(c, b, d) {\n      var e2 = null;\n      try {\n        e2 = jsonParse(c);\n        if (typeof e2 != \"object\") {\n          return 0;\n        }\n        if (e2.constructor === Array) {\n          return 0;\n        }\n        if (b) {\n          b[d] = e2;\n        }\n        return 1;\n      } catch (a) {\n        return 0;\n      }\n    };\n    KJUR.jws.JWS.readSafeJSONString = function(b) {\n      var c = null;\n      try {\n        c = jsonParse(b);\n        if (typeof c != \"object\") {\n          return null;\n        }\n        if (c.constructor === Array) {\n          return null;\n        }\n        return c;\n      } catch (a) {\n        return null;\n      }\n    };\n    KJUR.jws.JWS.getEncodedSignatureValueFromJWS = function(b) {\n      var a = b.match(/^[^.]+\\.[^.]+\\.([^.]+)$/);\n      if (a == null) {\n        throw \"JWS signature is not a form of 'Head.Payload.SigValue'.\";\n      }\n      return a[1];\n    };\n    KJUR.jws.JWS.getJWKthumbprint = function(d) {\n      if (d.kty !== \"RSA\" && d.kty !== \"EC\" && d.kty !== \"oct\") {\n        throw \"unsupported algorithm for JWK Thumprint\";\n      }\n      var a = \"{\";\n      if (d.kty === \"RSA\") {\n        if (typeof d.n != \"string\" || typeof d.e != \"string\") {\n          throw \"wrong n and e value for RSA key\";\n        }\n        a += '\"e\":\"' + d.e + '\",';\n        a += '\"kty\":\"' + d.kty + '\",';\n        a += '\"n\":\"' + d.n + '\"}';\n      } else {\n        if (d.kty === \"EC\") {\n          if (typeof d.crv != \"string\" || typeof d.x != \"string\" || typeof d.y != \"string\") {\n            throw \"wrong crv, x and y value for EC key\";\n          }\n          a += '\"crv\":\"' + d.crv + '\",';\n          a += '\"kty\":\"' + d.kty + '\",';\n          a += '\"x\":\"' + d.x + '\",';\n          a += '\"y\":\"' + d.y + '\"}';\n        } else {\n          if (d.kty === \"oct\") {\n            if (typeof d.k != \"string\") {\n              throw \"wrong k value for oct(symmetric) key\";\n            }\n            a += '\"kty\":\"' + d.kty + '\",';\n            a += '\"k\":\"' + d.k + '\"}';\n          }\n        }\n      }\n      var b = rstrtohex(a);\n      var c = KJUR.crypto.Util.hashHex(b, \"sha256\");\n      var e2 = hextob64u(c);\n      return e2;\n    };\n    KJUR.jws.IntDate = {};\n    KJUR.jws.IntDate.get = function(c) {\n      var b = KJUR.jws.IntDate, d = b.getNow, a = b.getZulu;\n      if (c == \"now\") {\n        return d();\n      } else {\n        if (c == \"now + 1hour\") {\n          return d() + 60 * 60;\n        } else {\n          if (c == \"now + 1day\") {\n            return d() + 60 * 60 * 24;\n          } else {\n            if (c == \"now + 1month\") {\n              return d() + 60 * 60 * 24 * 30;\n            } else {\n              if (c == \"now + 1year\") {\n                return d() + 60 * 60 * 24 * 365;\n              } else {\n                if (c.match(/Z$/)) {\n                  return a(c);\n                } else {\n                  if (c.match(/^[0-9]+$/)) {\n                    return parseInt(c);\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n      throw \"unsupported format: \" + c;\n    };\n    KJUR.jws.IntDate.getZulu = function(a) {\n      return zulutosec(a);\n    };\n    KJUR.jws.IntDate.getNow = function() {\n      var a = ~~(new Date() / 1e3);\n      return a;\n    };\n    KJUR.jws.IntDate.intDate2UTCString = function(a) {\n      var b = new Date(a * 1e3);\n      return b.toUTCString();\n    };\n    KJUR.jws.IntDate.intDate2Zulu = function(e2) {\n      var i = new Date(e2 * 1e3), h = (\"0000\" + i.getUTCFullYear()).slice(-4), g = (\"00\" + (i.getUTCMonth() + 1)).slice(-2), b = (\"00\" + i.getUTCDate()).slice(-2), a = (\"00\" + i.getUTCHours()).slice(-2), c = (\"00\" + i.getUTCMinutes()).slice(-2), f = (\"00\" + i.getUTCSeconds()).slice(-2);\n      return h + g + b + a + c + f + \"Z\";\n    };\n    if (typeof KJUR == \"undefined\" || !KJUR) {\n      KJUR = {};\n    }\n    if (typeof KJUR.jws == \"undefined\" || !KJUR.jws) {\n      KJUR.jws = {};\n    }\n    KJUR.jws.JWSJS = function() {\n      var c = KJUR, b = c.jws, a = b.JWS, d = a.readSafeJSONString;\n      this.aHeader = [];\n      this.sPayload = \"\";\n      this.aSignature = [];\n      this.init = function() {\n        this.aHeader = [];\n        this.sPayload = void 0;\n        this.aSignature = [];\n      };\n      this.initWithJWS = function(f) {\n        this.init();\n        var e2 = f.split(\".\");\n        if (e2.length != 3) {\n          throw \"malformed input JWS\";\n        }\n        this.aHeader.push(e2[0]);\n        this.sPayload = e2[1];\n        this.aSignature.push(e2[2]);\n      };\n      this.addSignature = function(e2, h, m, k) {\n        if (this.sPayload === void 0 || this.sPayload === null) {\n          throw \"there's no JSON-JS signature to add.\";\n        }\n        var l = this.aHeader.length;\n        if (this.aHeader.length != this.aSignature.length) {\n          throw \"aHeader.length != aSignature.length\";\n        }\n        try {\n          var f = KJUR.jws.JWS.sign(e2, h, this.sPayload, m, k);\n          var j = f.split(\".\");\n          var n2 = j[0];\n          var g = j[2];\n          this.aHeader.push(j[0]);\n          this.aSignature.push(j[2]);\n        } catch (i) {\n          if (this.aHeader.length > l) {\n            this.aHeader.pop();\n          }\n          if (this.aSignature.length > l) {\n            this.aSignature.pop();\n          }\n          throw \"addSignature failed: \" + i;\n        }\n      };\n      this.verifyAll = function(h) {\n        if (this.aHeader.length !== h.length || this.aSignature.length !== h.length) {\n          return false;\n        }\n        for (var g = 0; g < h.length; g++) {\n          var f = h[g];\n          if (f.length !== 2) {\n            return false;\n          }\n          var e2 = this.verifyNth(g, f[0], f[1]);\n          if (e2 === false) {\n            return false;\n          }\n        }\n        return true;\n      };\n      this.verifyNth = function(f, j, g) {\n        if (this.aHeader.length <= f || this.aSignature.length <= f) {\n          return false;\n        }\n        var h = this.aHeader[f];\n        var k = this.aSignature[f];\n        var l = h + \".\" + this.sPayload + \".\" + k;\n        var e2 = false;\n        try {\n          e2 = a.verify(l, j, g);\n        } catch (i) {\n          return false;\n        }\n        return e2;\n      };\n      this.readJWSJS = function(g) {\n        if (typeof g === \"string\") {\n          var f = d(g);\n          if (f == null) {\n            throw \"argument is not safe JSON object string\";\n          }\n          this.aHeader = f.headers;\n          this.sPayload = f.payload;\n          this.aSignature = f.signatures;\n        } else {\n          try {\n            if (g.headers.length > 0) {\n              this.aHeader = g.headers;\n            } else {\n              throw \"malformed header\";\n            }\n            if (typeof g.payload === \"string\") {\n              this.sPayload = g.payload;\n            } else {\n              throw \"malformed signatures\";\n            }\n            if (g.signatures.length > 0) {\n              this.aSignature = g.signatures;\n            } else {\n              throw \"malformed signatures\";\n            }\n          } catch (e2) {\n            throw \"malformed JWS-JS JSON object: \" + e2;\n          }\n        }\n      };\n      this.getJSON = function() {\n        return { headers: this.aHeader, payload: this.sPayload, signatures: this.aSignature };\n      };\n      this.isEmpty = function() {\n        if (this.aHeader.length == 0) {\n          return 1;\n        }\n        return 0;\n      };\n    };\n    exports.SecureRandom = SecureRandom;\n    exports.rng_seed_time = rng_seed_time;\n    exports.BigInteger = BigInteger;\n    exports.RSAKey = RSAKey;\n    exports.ECDSA = KJUR.crypto.ECDSA;\n    exports.DSA = KJUR.crypto.DSA;\n    exports.Signature = KJUR.crypto.Signature;\n    exports.MessageDigest = KJUR.crypto.MessageDigest;\n    exports.Mac = KJUR.crypto.Mac;\n    exports.Cipher = KJUR.crypto.Cipher;\n    exports.KEYUTIL = KEYUTIL;\n    exports.ASN1HEX = ASN1HEX;\n    exports.X509 = X509;\n    exports.X509CRL = X509CRL;\n    exports.CryptoJS = CryptoJS;\n    exports.b64tohex = b64tohex;\n    exports.b64toBA = b64toBA;\n    exports.ECFieldElementFp = ECFieldElementFp;\n    exports.ECPointFp = ECPointFp;\n    exports.ECCurveFp = ECCurveFp;\n    exports.stoBA = stoBA;\n    exports.BAtos = BAtos;\n    exports.BAtohex = BAtohex;\n    exports.stohex = stohex;\n    exports.stob64 = stob64;\n    exports.stob64u = stob64u;\n    exports.b64utos = b64utos;\n    exports.b64tob64u = b64tob64u;\n    exports.b64utob64 = b64utob64;\n    exports.hex2b64 = hex2b64;\n    exports.hextob64u = hextob64u;\n    exports.b64utohex = b64utohex;\n    exports.utf8tob64u = utf8tob64u;\n    exports.b64utoutf8 = b64utoutf8;\n    exports.utf8tob64 = utf8tob64;\n    exports.b64toutf8 = b64toutf8;\n    exports.utf8tohex = utf8tohex;\n    exports.hextoutf8 = hextoutf8;\n    exports.hextorstr = hextorstr;\n    exports.rstrtohex = rstrtohex;\n    exports.hextob64 = hextob64;\n    exports.hextob64nl = hextob64nl;\n    exports.b64nltohex = b64nltohex;\n    exports.hextopem = hextopem;\n    exports.pemtohex = pemtohex;\n    exports.hextoArrayBuffer = hextoArrayBuffer;\n    exports.ArrayBuffertohex = ArrayBuffertohex;\n    exports.zulutomsec = zulutomsec;\n    exports.zulutosec = zulutosec;\n    exports.zulutodate = zulutodate;\n    exports.datetozulu = datetozulu;\n    exports.uricmptohex = uricmptohex;\n    exports.hextouricmp = hextouricmp;\n    exports.ipv6tohex = ipv6tohex;\n    exports.hextoipv6 = hextoipv6;\n    exports.hextoip = hextoip;\n    exports.iptohex = iptohex;\n    exports.ucs2hextoutf8 = ucs2hextoutf8;\n    exports.encodeURIComponentAll = encodeURIComponentAll;\n    exports.newline_toUnix = newline_toUnix;\n    exports.newline_toDos = newline_toDos;\n    exports.hextoposhex = hextoposhex;\n    exports.intarystrtohex = intarystrtohex;\n    exports.strdiffidx = strdiffidx;\n    exports.oidtohex = oidtohex;\n    exports.hextooid = hextooid;\n    exports.strpad = strpad;\n    exports.bitstrtoint = bitstrtoint;\n    exports.inttobitstr = inttobitstr;\n    exports.bitstrtobinstr = bitstrtobinstr;\n    exports.binstrtobitstr = binstrtobitstr;\n    exports.isBase64URLDot = isBase64URLDot;\n    exports.namearraytobinstr = namearraytobinstr;\n    exports.extendClass = extendClass;\n    exports.KJUR = KJUR;\n    exports.crypto = KJUR.crypto;\n    exports.asn1 = KJUR.asn1;\n    exports.jws = KJUR.jws;\n    exports.lang = KJUR.lang;\n  }\n});\n\n// ../../node_modules/deepmerge/dist/cjs.js\nvar require_cjs = __commonJS({\n  \"../../node_modules/deepmerge/dist/cjs.js\"(exports, module) {\n    \"use strict\";\n    init_process();\n    var isMergeableObject = function isMergeableObject2(value) {\n      return isNonNullObject(value) && !isSpecial(value);\n    };\n    function isNonNullObject(value) {\n      return !!value && typeof value === \"object\";\n    }\n    function isSpecial(value) {\n      var stringValue = Object.prototype.toString.call(value);\n      return stringValue === \"[object RegExp]\" || stringValue === \"[object Date]\" || isReactElement(value);\n    }\n    var canUseSymbol = typeof Symbol === \"function\" && Symbol.for;\n    var REACT_ELEMENT_TYPE = canUseSymbol ? Symbol.for(\"react.element\") : 60103;\n    function isReactElement(value) {\n      return value.$$typeof === REACT_ELEMENT_TYPE;\n    }\n    function emptyTarget(val) {\n      return Array.isArray(val) ? [] : {};\n    }\n    function cloneUnlessOtherwiseSpecified(value, options) {\n      return options.clone !== false && options.isMergeableObject(value) ? deepmerge3(emptyTarget(value), value, options) : value;\n    }\n    function defaultArrayMerge(target, source, options) {\n      return target.concat(source).map(function(element) {\n        return cloneUnlessOtherwiseSpecified(element, options);\n      });\n    }\n    function getMergeFunction(key, options) {\n      if (!options.customMerge) {\n        return deepmerge3;\n      }\n      var customMerge = options.customMerge(key);\n      return typeof customMerge === \"function\" ? customMerge : deepmerge3;\n    }\n    function getEnumerableOwnPropertySymbols(target) {\n      return Object.getOwnPropertySymbols ? Object.getOwnPropertySymbols(target).filter(function(symbol) {\n        return Object.propertyIsEnumerable.call(target, symbol);\n      }) : [];\n    }\n    function getKeys(target) {\n      return Object.keys(target).concat(getEnumerableOwnPropertySymbols(target));\n    }\n    function propertyIsOnObject(object, property) {\n      try {\n        return property in object;\n      } catch (_) {\n        return false;\n      }\n    }\n    function propertyIsUnsafe(target, key) {\n      return propertyIsOnObject(target, key) && !(Object.hasOwnProperty.call(target, key) && Object.propertyIsEnumerable.call(target, key));\n    }\n    function mergeObject(target, source, options) {\n      var destination = {};\n      if (options.isMergeableObject(target)) {\n        getKeys(target).forEach(function(key) {\n          destination[key] = cloneUnlessOtherwiseSpecified(target[key], options);\n        });\n      }\n      getKeys(source).forEach(function(key) {\n        if (propertyIsUnsafe(target, key)) {\n          return;\n        }\n        if (propertyIsOnObject(target, key) && options.isMergeableObject(source[key])) {\n          destination[key] = getMergeFunction(key, options)(target[key], source[key], options);\n        } else {\n          destination[key] = cloneUnlessOtherwiseSpecified(source[key], options);\n        }\n      });\n      return destination;\n    }\n    function deepmerge3(target, source, options) {\n      options = options || {};\n      options.arrayMerge = options.arrayMerge || defaultArrayMerge;\n      options.isMergeableObject = options.isMergeableObject || isMergeableObject;\n      options.cloneUnlessOtherwiseSpecified = cloneUnlessOtherwiseSpecified;\n      var sourceIsArray = Array.isArray(source);\n      var targetIsArray = Array.isArray(target);\n      var sourceAndTargetTypesMatch = sourceIsArray === targetIsArray;\n      if (!sourceAndTargetTypesMatch) {\n        return cloneUnlessOtherwiseSpecified(source, options);\n      } else if (sourceIsArray) {\n        return options.arrayMerge(target, source, options);\n      } else {\n        return mergeObject(target, source, options);\n      }\n    }\n    deepmerge3.all = function deepmergeAll(array, options) {\n      if (!Array.isArray(array)) {\n        throw new Error(\"first argument should be an array\");\n      }\n      return array.reduce(function(prev, next) {\n        return deepmerge3(prev, next, options);\n      }, {});\n    };\n    var deepmerge_1 = deepmerge3;\n    module.exports = deepmerge_1;\n  }\n});\n\n// ../../node_modules/lodash/_listCacheClear.js\nvar require_listCacheClear = __commonJS({\n  \"../../node_modules/lodash/_listCacheClear.js\"(exports, module) {\n    init_process();\n    function listCacheClear() {\n      this.__data__ = [];\n      this.size = 0;\n    }\n    module.exports = listCacheClear;\n  }\n});\n\n// ../../node_modules/lodash/eq.js\nvar require_eq = __commonJS({\n  \"../../node_modules/lodash/eq.js\"(exports, module) {\n    init_process();\n    function eq(value, other) {\n      return value === other || value !== value && other !== other;\n    }\n    module.exports = eq;\n  }\n});\n\n// ../../node_modules/lodash/_assocIndexOf.js\nvar require_assocIndexOf = __commonJS({\n  \"../../node_modules/lodash/_assocIndexOf.js\"(exports, module) {\n    init_process();\n    var eq = require_eq();\n    function assocIndexOf(array, key) {\n      var length = array.length;\n      while (length--) {\n        if (eq(array[length][0], key)) {\n          return length;\n        }\n      }\n      return -1;\n    }\n    module.exports = assocIndexOf;\n  }\n});\n\n// ../../node_modules/lodash/_listCacheDelete.js\nvar require_listCacheDelete = __commonJS({\n  \"../../node_modules/lodash/_listCacheDelete.js\"(exports, module) {\n    init_process();\n    var assocIndexOf = require_assocIndexOf();\n    var arrayProto = Array.prototype;\n    var splice = arrayProto.splice;\n    function listCacheDelete(key) {\n      var data = this.__data__, index = assocIndexOf(data, key);\n      if (index < 0) {\n        return false;\n      }\n      var lastIndex = data.length - 1;\n      if (index == lastIndex) {\n        data.pop();\n      } else {\n        splice.call(data, index, 1);\n      }\n      --this.size;\n      return true;\n    }\n    module.exports = listCacheDelete;\n  }\n});\n\n// ../../node_modules/lodash/_listCacheGet.js\nvar require_listCacheGet = __commonJS({\n  \"../../node_modules/lodash/_listCacheGet.js\"(exports, module) {\n    init_process();\n    var assocIndexOf = require_assocIndexOf();\n    function listCacheGet(key) {\n      var data = this.__data__, index = assocIndexOf(data, key);\n      return index < 0 ? void 0 : data[index][1];\n    }\n    module.exports = listCacheGet;\n  }\n});\n\n// ../../node_modules/lodash/_listCacheHas.js\nvar require_listCacheHas = __commonJS({\n  \"../../node_modules/lodash/_listCacheHas.js\"(exports, module) {\n    init_process();\n    var assocIndexOf = require_assocIndexOf();\n    function listCacheHas(key) {\n      return assocIndexOf(this.__data__, key) > -1;\n    }\n    module.exports = listCacheHas;\n  }\n});\n\n// ../../node_modules/lodash/_listCacheSet.js\nvar require_listCacheSet = __commonJS({\n  \"../../node_modules/lodash/_listCacheSet.js\"(exports, module) {\n    init_process();\n    var assocIndexOf = require_assocIndexOf();\n    function listCacheSet(key, value) {\n      var data = this.__data__, index = assocIndexOf(data, key);\n      if (index < 0) {\n        ++this.size;\n        data.push([key, value]);\n      } else {\n        data[index][1] = value;\n      }\n      return this;\n    }\n    module.exports = listCacheSet;\n  }\n});\n\n// ../../node_modules/lodash/_ListCache.js\nvar require_ListCache = __commonJS({\n  \"../../node_modules/lodash/_ListCache.js\"(exports, module) {\n    init_process();\n    var listCacheClear = require_listCacheClear();\n    var listCacheDelete = require_listCacheDelete();\n    var listCacheGet = require_listCacheGet();\n    var listCacheHas = require_listCacheHas();\n    var listCacheSet = require_listCacheSet();\n    function ListCache(entries) {\n      var index = -1, length = entries == null ? 0 : entries.length;\n      this.clear();\n      while (++index < length) {\n        var entry = entries[index];\n        this.set(entry[0], entry[1]);\n      }\n    }\n    ListCache.prototype.clear = listCacheClear;\n    ListCache.prototype[\"delete\"] = listCacheDelete;\n    ListCache.prototype.get = listCacheGet;\n    ListCache.prototype.has = listCacheHas;\n    ListCache.prototype.set = listCacheSet;\n    module.exports = ListCache;\n  }\n});\n\n// ../../node_modules/lodash/_stackClear.js\nvar require_stackClear = __commonJS({\n  \"../../node_modules/lodash/_stackClear.js\"(exports, module) {\n    init_process();\n    var ListCache = require_ListCache();\n    function stackClear() {\n      this.__data__ = new ListCache();\n      this.size = 0;\n    }\n    module.exports = stackClear;\n  }\n});\n\n// ../../node_modules/lodash/_stackDelete.js\nvar require_stackDelete = __commonJS({\n  \"../../node_modules/lodash/_stackDelete.js\"(exports, module) {\n    init_process();\n    function stackDelete(key) {\n      var data = this.__data__, result2 = data[\"delete\"](key);\n      this.size = data.size;\n      return result2;\n    }\n    module.exports = stackDelete;\n  }\n});\n\n// ../../node_modules/lodash/_stackGet.js\nvar require_stackGet = __commonJS({\n  \"../../node_modules/lodash/_stackGet.js\"(exports, module) {\n    init_process();\n    function stackGet(key) {\n      return this.__data__.get(key);\n    }\n    module.exports = stackGet;\n  }\n});\n\n// ../../node_modules/lodash/_stackHas.js\nvar require_stackHas = __commonJS({\n  \"../../node_modules/lodash/_stackHas.js\"(exports, module) {\n    init_process();\n    function stackHas(key) {\n      return this.__data__.has(key);\n    }\n    module.exports = stackHas;\n  }\n});\n\n// ../../node_modules/lodash/_freeGlobal.js\nvar require_freeGlobal = __commonJS({\n  \"../../node_modules/lodash/_freeGlobal.js\"(exports, module) {\n    init_process();\n    var freeGlobal = typeof global == \"object\" && global && global.Object === Object && global;\n    module.exports = freeGlobal;\n  }\n});\n\n// ../../node_modules/lodash/_root.js\nvar require_root = __commonJS({\n  \"../../node_modules/lodash/_root.js\"(exports, module) {\n    init_process();\n    var freeGlobal = require_freeGlobal();\n    var freeSelf = typeof self == \"object\" && self && self.Object === Object && self;\n    var root = freeGlobal || freeSelf || Function(\"return this\")();\n    module.exports = root;\n  }\n});\n\n// ../../node_modules/lodash/_Symbol.js\nvar require_Symbol = __commonJS({\n  \"../../node_modules/lodash/_Symbol.js\"(exports, module) {\n    init_process();\n    var root = require_root();\n    var Symbol2 = root.Symbol;\n    module.exports = Symbol2;\n  }\n});\n\n// ../../node_modules/lodash/_getRawTag.js\nvar require_getRawTag = __commonJS({\n  \"../../node_modules/lodash/_getRawTag.js\"(exports, module) {\n    init_process();\n    var Symbol2 = require_Symbol();\n    var objectProto = Object.prototype;\n    var hasOwnProperty = objectProto.hasOwnProperty;\n    var nativeObjectToString = objectProto.toString;\n    var symToStringTag = Symbol2 ? Symbol2.toStringTag : void 0;\n    function getRawTag(value) {\n      var isOwn = hasOwnProperty.call(value, symToStringTag), tag = value[symToStringTag];\n      try {\n        value[symToStringTag] = void 0;\n        var unmasked = true;\n      } catch (e2) {\n      }\n      var result2 = nativeObjectToString.call(value);\n      if (unmasked) {\n        if (isOwn) {\n          value[symToStringTag] = tag;\n        } else {\n          delete value[symToStringTag];\n        }\n      }\n      return result2;\n    }\n    module.exports = getRawTag;\n  }\n});\n\n// ../../node_modules/lodash/_objectToString.js\nvar require_objectToString = __commonJS({\n  \"../../node_modules/lodash/_objectToString.js\"(exports, module) {\n    init_process();\n    var objectProto = Object.prototype;\n    var nativeObjectToString = objectProto.toString;\n    function objectToString(value) {\n      return nativeObjectToString.call(value);\n    }\n    module.exports = objectToString;\n  }\n});\n\n// ../../node_modules/lodash/_baseGetTag.js\nvar require_baseGetTag = __commonJS({\n  \"../../node_modules/lodash/_baseGetTag.js\"(exports, module) {\n    init_process();\n    var Symbol2 = require_Symbol();\n    var getRawTag = require_getRawTag();\n    var objectToString = require_objectToString();\n    var nullTag = \"[object Null]\";\n    var undefinedTag = \"[object Undefined]\";\n    var symToStringTag = Symbol2 ? Symbol2.toStringTag : void 0;\n    function baseGetTag(value) {\n      if (value == null) {\n        return value === void 0 ? undefinedTag : nullTag;\n      }\n      return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value);\n    }\n    module.exports = baseGetTag;\n  }\n});\n\n// ../../node_modules/lodash/isObject.js\nvar require_isObject = __commonJS({\n  \"../../node_modules/lodash/isObject.js\"(exports, module) {\n    init_process();\n    function isObject(value) {\n      var type = typeof value;\n      return value != null && (type == \"object\" || type == \"function\");\n    }\n    module.exports = isObject;\n  }\n});\n\n// ../../node_modules/lodash/isFunction.js\nvar require_isFunction = __commonJS({\n  \"../../node_modules/lodash/isFunction.js\"(exports, module) {\n    init_process();\n    var baseGetTag = require_baseGetTag();\n    var isObject = require_isObject();\n    var asyncTag = \"[object AsyncFunction]\";\n    var funcTag = \"[object Function]\";\n    var genTag = \"[object GeneratorFunction]\";\n    var proxyTag = \"[object Proxy]\";\n    function isFunction(value) {\n      if (!isObject(value)) {\n        return false;\n      }\n      var tag = baseGetTag(value);\n      return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;\n    }\n    module.exports = isFunction;\n  }\n});\n\n// ../../node_modules/lodash/_coreJsData.js\nvar require_coreJsData = __commonJS({\n  \"../../node_modules/lodash/_coreJsData.js\"(exports, module) {\n    init_process();\n    var root = require_root();\n    var coreJsData = root[\"__core-js_shared__\"];\n    module.exports = coreJsData;\n  }\n});\n\n// ../../node_modules/lodash/_isMasked.js\nvar require_isMasked = __commonJS({\n  \"../../node_modules/lodash/_isMasked.js\"(exports, module) {\n    init_process();\n    var coreJsData = require_coreJsData();\n    var maskSrcKey = function() {\n      var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || \"\");\n      return uid ? \"Symbol(src)_1.\" + uid : \"\";\n    }();\n    function isMasked(func) {\n      return !!maskSrcKey && maskSrcKey in func;\n    }\n    module.exports = isMasked;\n  }\n});\n\n// ../../node_modules/lodash/_toSource.js\nvar require_toSource = __commonJS({\n  \"../../node_modules/lodash/_toSource.js\"(exports, module) {\n    init_process();\n    var funcProto = Function.prototype;\n    var funcToString = funcProto.toString;\n    function toSource(func) {\n      if (func != null) {\n        try {\n          return funcToString.call(func);\n        } catch (e2) {\n        }\n        try {\n          return func + \"\";\n        } catch (e2) {\n        }\n      }\n      return \"\";\n    }\n    module.exports = toSource;\n  }\n});\n\n// ../../node_modules/lodash/_baseIsNative.js\nvar require_baseIsNative = __commonJS({\n  \"../../node_modules/lodash/_baseIsNative.js\"(exports, module) {\n    init_process();\n    var isFunction = require_isFunction();\n    var isMasked = require_isMasked();\n    var isObject = require_isObject();\n    var toSource = require_toSource();\n    var reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n    var reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n    var funcProto = Function.prototype;\n    var objectProto = Object.prototype;\n    var funcToString = funcProto.toString;\n    var hasOwnProperty = objectProto.hasOwnProperty;\n    var reIsNative = RegExp(\n      \"^\" + funcToString.call(hasOwnProperty).replace(reRegExpChar, \"\\\\$&\").replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, \"$1.*?\") + \"$\"\n    );\n    function baseIsNative(value) {\n      if (!isObject(value) || isMasked(value)) {\n        return false;\n      }\n      var pattern = isFunction(value) ? reIsNative : reIsHostCtor;\n      return pattern.test(toSource(value));\n    }\n    module.exports = baseIsNative;\n  }\n});\n\n// ../../node_modules/lodash/_getValue.js\nvar require_getValue = __commonJS({\n  \"../../node_modules/lodash/_getValue.js\"(exports, module) {\n    init_process();\n    function getValue(object, key) {\n      return object == null ? void 0 : object[key];\n    }\n    module.exports = getValue;\n  }\n});\n\n// ../../node_modules/lodash/_getNative.js\nvar require_getNative = __commonJS({\n  \"../../node_modules/lodash/_getNative.js\"(exports, module) {\n    init_process();\n    var baseIsNative = require_baseIsNative();\n    var getValue = require_getValue();\n    function getNative(object, key) {\n      var value = getValue(object, key);\n      return baseIsNative(value) ? value : void 0;\n    }\n    module.exports = getNative;\n  }\n});\n\n// ../../node_modules/lodash/_Map.js\nvar require_Map = __commonJS({\n  \"../../node_modules/lodash/_Map.js\"(exports, module) {\n    init_process();\n    var getNative = require_getNative();\n    var root = require_root();\n    var Map2 = getNative(root, \"Map\");\n    module.exports = Map2;\n  }\n});\n\n// ../../node_modules/lodash/_nativeCreate.js\nvar require_nativeCreate = __commonJS({\n  \"../../node_modules/lodash/_nativeCreate.js\"(exports, module) {\n    init_process();\n    var getNative = require_getNative();\n    var nativeCreate = getNative(Object, \"create\");\n    module.exports = nativeCreate;\n  }\n});\n\n// ../../node_modules/lodash/_hashClear.js\nvar require_hashClear = __commonJS({\n  \"../../node_modules/lodash/_hashClear.js\"(exports, module) {\n    init_process();\n    var nativeCreate = require_nativeCreate();\n    function hashClear() {\n      this.__data__ = nativeCreate ? nativeCreate(null) : {};\n      this.size = 0;\n    }\n    module.exports = hashClear;\n  }\n});\n\n// ../../node_modules/lodash/_hashDelete.js\nvar require_hashDelete = __commonJS({\n  \"../../node_modules/lodash/_hashDelete.js\"(exports, module) {\n    init_process();\n    function hashDelete(key) {\n      var result2 = this.has(key) && delete this.__data__[key];\n      this.size -= result2 ? 1 : 0;\n      return result2;\n    }\n    module.exports = hashDelete;\n  }\n});\n\n// ../../node_modules/lodash/_hashGet.js\nvar require_hashGet = __commonJS({\n  \"../../node_modules/lodash/_hashGet.js\"(exports, module) {\n    init_process();\n    var nativeCreate = require_nativeCreate();\n    var HASH_UNDEFINED = \"__lodash_hash_undefined__\";\n    var objectProto = Object.prototype;\n    var hasOwnProperty = objectProto.hasOwnProperty;\n    function hashGet(key) {\n      var data = this.__data__;\n      if (nativeCreate) {\n        var result2 = data[key];\n        return result2 === HASH_UNDEFINED ? void 0 : result2;\n      }\n      return hasOwnProperty.call(data, key) ? data[key] : void 0;\n    }\n    module.exports = hashGet;\n  }\n});\n\n// ../../node_modules/lodash/_hashHas.js\nvar require_hashHas = __commonJS({\n  \"../../node_modules/lodash/_hashHas.js\"(exports, module) {\n    init_process();\n    var nativeCreate = require_nativeCreate();\n    var objectProto = Object.prototype;\n    var hasOwnProperty = objectProto.hasOwnProperty;\n    function hashHas(key) {\n      var data = this.__data__;\n      return nativeCreate ? data[key] !== void 0 : hasOwnProperty.call(data, key);\n    }\n    module.exports = hashHas;\n  }\n});\n\n// ../../node_modules/lodash/_hashSet.js\nvar require_hashSet = __commonJS({\n  \"../../node_modules/lodash/_hashSet.js\"(exports, module) {\n    init_process();\n    var nativeCreate = require_nativeCreate();\n    var HASH_UNDEFINED = \"__lodash_hash_undefined__\";\n    function hashSet(key, value) {\n      var data = this.__data__;\n      this.size += this.has(key) ? 0 : 1;\n      data[key] = nativeCreate && value === void 0 ? HASH_UNDEFINED : value;\n      return this;\n    }\n    module.exports = hashSet;\n  }\n});\n\n// ../../node_modules/lodash/_Hash.js\nvar require_Hash = __commonJS({\n  \"../../node_modules/lodash/_Hash.js\"(exports, module) {\n    init_process();\n    var hashClear = require_hashClear();\n    var hashDelete = require_hashDelete();\n    var hashGet = require_hashGet();\n    var hashHas = require_hashHas();\n    var hashSet = require_hashSet();\n    function Hash(entries) {\n      var index = -1, length = entries == null ? 0 : entries.length;\n      this.clear();\n      while (++index < length) {\n        var entry = entries[index];\n        this.set(entry[0], entry[1]);\n      }\n    }\n    Hash.prototype.clear = hashClear;\n    Hash.prototype[\"delete\"] = hashDelete;\n    Hash.prototype.get = hashGet;\n    Hash.prototype.has = hashHas;\n    Hash.prototype.set = hashSet;\n    module.exports = Hash;\n  }\n});\n\n// ../../node_modules/lodash/_mapCacheClear.js\nvar require_mapCacheClear = __commonJS({\n  \"../../node_modules/lodash/_mapCacheClear.js\"(exports, module) {\n    init_process();\n    var Hash = require_Hash();\n    var ListCache = require_ListCache();\n    var Map2 = require_Map();\n    function mapCacheClear() {\n      this.size = 0;\n      this.__data__ = {\n        \"hash\": new Hash(),\n        \"map\": new (Map2 || ListCache)(),\n        \"string\": new Hash()\n      };\n    }\n    module.exports = mapCacheClear;\n  }\n});\n\n// ../../node_modules/lodash/_isKeyable.js\nvar require_isKeyable = __commonJS({\n  \"../../node_modules/lodash/_isKeyable.js\"(exports, module) {\n    init_process();\n    function isKeyable(value) {\n      var type = typeof value;\n      return type == \"string\" || type == \"number\" || type == \"symbol\" || type == \"boolean\" ? value !== \"__proto__\" : value === null;\n    }\n    module.exports = isKeyable;\n  }\n});\n\n// ../../node_modules/lodash/_getMapData.js\nvar require_getMapData = __commonJS({\n  \"../../node_modules/lodash/_getMapData.js\"(exports, module) {\n    init_process();\n    var isKeyable = require_isKeyable();\n    function getMapData(map, key) {\n      var data = map.__data__;\n      return isKeyable(key) ? data[typeof key == \"string\" ? \"string\" : \"hash\"] : data.map;\n    }\n    module.exports = getMapData;\n  }\n});\n\n// ../../node_modules/lodash/_mapCacheDelete.js\nvar require_mapCacheDelete = __commonJS({\n  \"../../node_modules/lodash/_mapCacheDelete.js\"(exports, module) {\n    init_process();\n    var getMapData = require_getMapData();\n    function mapCacheDelete(key) {\n      var result2 = getMapData(this, key)[\"delete\"](key);\n      this.size -= result2 ? 1 : 0;\n      return result2;\n    }\n    module.exports = mapCacheDelete;\n  }\n});\n\n// ../../node_modules/lodash/_mapCacheGet.js\nvar require_mapCacheGet = __commonJS({\n  \"../../node_modules/lodash/_mapCacheGet.js\"(exports, module) {\n    init_process();\n    var getMapData = require_getMapData();\n    function mapCacheGet(key) {\n      return getMapData(this, key).get(key);\n    }\n    module.exports = mapCacheGet;\n  }\n});\n\n// ../../node_modules/lodash/_mapCacheHas.js\nvar require_mapCacheHas = __commonJS({\n  \"../../node_modules/lodash/_mapCacheHas.js\"(exports, module) {\n    init_process();\n    var getMapData = require_getMapData();\n    function mapCacheHas(key) {\n      return getMapData(this, key).has(key);\n    }\n    module.exports = mapCacheHas;\n  }\n});\n\n// ../../node_modules/lodash/_mapCacheSet.js\nvar require_mapCacheSet = __commonJS({\n  \"../../node_modules/lodash/_mapCacheSet.js\"(exports, module) {\n    init_process();\n    var getMapData = require_getMapData();\n    function mapCacheSet(key, value) {\n      var data = getMapData(this, key), size = data.size;\n      data.set(key, value);\n      this.size += data.size == size ? 0 : 1;\n      return this;\n    }\n    module.exports = mapCacheSet;\n  }\n});\n\n// ../../node_modules/lodash/_MapCache.js\nvar require_MapCache = __commonJS({\n  \"../../node_modules/lodash/_MapCache.js\"(exports, module) {\n    init_process();\n    var mapCacheClear = require_mapCacheClear();\n    var mapCacheDelete = require_mapCacheDelete();\n    var mapCacheGet = require_mapCacheGet();\n    var mapCacheHas = require_mapCacheHas();\n    var mapCacheSet = require_mapCacheSet();\n    function MapCache(entries) {\n      var index = -1, length = entries == null ? 0 : entries.length;\n      this.clear();\n      while (++index < length) {\n        var entry = entries[index];\n        this.set(entry[0], entry[1]);\n      }\n    }\n    MapCache.prototype.clear = mapCacheClear;\n    MapCache.prototype[\"delete\"] = mapCacheDelete;\n    MapCache.prototype.get = mapCacheGet;\n    MapCache.prototype.has = mapCacheHas;\n    MapCache.prototype.set = mapCacheSet;\n    module.exports = MapCache;\n  }\n});\n\n// ../../node_modules/lodash/_stackSet.js\nvar require_stackSet = __commonJS({\n  \"../../node_modules/lodash/_stackSet.js\"(exports, module) {\n    init_process();\n    var ListCache = require_ListCache();\n    var Map2 = require_Map();\n    var MapCache = require_MapCache();\n    var LARGE_ARRAY_SIZE = 200;\n    function stackSet(key, value) {\n      var data = this.__data__;\n      if (data instanceof ListCache) {\n        var pairs = data.__data__;\n        if (!Map2 || pairs.length < LARGE_ARRAY_SIZE - 1) {\n          pairs.push([key, value]);\n          this.size = ++data.size;\n          return this;\n        }\n        data = this.__data__ = new MapCache(pairs);\n      }\n      data.set(key, value);\n      this.size = data.size;\n      return this;\n    }\n    module.exports = stackSet;\n  }\n});\n\n// ../../node_modules/lodash/_Stack.js\nvar require_Stack = __commonJS({\n  \"../../node_modules/lodash/_Stack.js\"(exports, module) {\n    init_process();\n    var ListCache = require_ListCache();\n    var stackClear = require_stackClear();\n    var stackDelete = require_stackDelete();\n    var stackGet = require_stackGet();\n    var stackHas = require_stackHas();\n    var stackSet = require_stackSet();\n    function Stack(entries) {\n      var data = this.__data__ = new ListCache(entries);\n      this.size = data.size;\n    }\n    Stack.prototype.clear = stackClear;\n    Stack.prototype[\"delete\"] = stackDelete;\n    Stack.prototype.get = stackGet;\n    Stack.prototype.has = stackHas;\n    Stack.prototype.set = stackSet;\n    module.exports = Stack;\n  }\n});\n\n// ../../node_modules/lodash/_setCacheAdd.js\nvar require_setCacheAdd = __commonJS({\n  \"../../node_modules/lodash/_setCacheAdd.js\"(exports, module) {\n    init_process();\n    var HASH_UNDEFINED = \"__lodash_hash_undefined__\";\n    function setCacheAdd(value) {\n      this.__data__.set(value, HASH_UNDEFINED);\n      return this;\n    }\n    module.exports = setCacheAdd;\n  }\n});\n\n// ../../node_modules/lodash/_setCacheHas.js\nvar require_setCacheHas = __commonJS({\n  \"../../node_modules/lodash/_setCacheHas.js\"(exports, module) {\n    init_process();\n    function setCacheHas(value) {\n      return this.__data__.has(value);\n    }\n    module.exports = setCacheHas;\n  }\n});\n\n// ../../node_modules/lodash/_SetCache.js\nvar require_SetCache = __commonJS({\n  \"../../node_modules/lodash/_SetCache.js\"(exports, module) {\n    init_process();\n    var MapCache = require_MapCache();\n    var setCacheAdd = require_setCacheAdd();\n    var setCacheHas = require_setCacheHas();\n    function SetCache(values) {\n      var index = -1, length = values == null ? 0 : values.length;\n      this.__data__ = new MapCache();\n      while (++index < length) {\n        this.add(values[index]);\n      }\n    }\n    SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;\n    SetCache.prototype.has = setCacheHas;\n    module.exports = SetCache;\n  }\n});\n\n// ../../node_modules/lodash/_arraySome.js\nvar require_arraySome = __commonJS({\n  \"../../node_modules/lodash/_arraySome.js\"(exports, module) {\n    init_process();\n    function arraySome(array, predicate) {\n      var index = -1, length = array == null ? 0 : array.length;\n      while (++index < length) {\n        if (predicate(array[index], index, array)) {\n          return true;\n        }\n      }\n      return false;\n    }\n    module.exports = arraySome;\n  }\n});\n\n// ../../node_modules/lodash/_cacheHas.js\nvar require_cacheHas = __commonJS({\n  \"../../node_modules/lodash/_cacheHas.js\"(exports, module) {\n    init_process();\n    function cacheHas(cache, key) {\n      return cache.has(key);\n    }\n    module.exports = cacheHas;\n  }\n});\n\n// ../../node_modules/lodash/_equalArrays.js\nvar require_equalArrays = __commonJS({\n  \"../../node_modules/lodash/_equalArrays.js\"(exports, module) {\n    init_process();\n    var SetCache = require_SetCache();\n    var arraySome = require_arraySome();\n    var cacheHas = require_cacheHas();\n    var COMPARE_PARTIAL_FLAG = 1;\n    var COMPARE_UNORDERED_FLAG = 2;\n    function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {\n      var isPartial = bitmask & COMPARE_PARTIAL_FLAG, arrLength = array.length, othLength = other.length;\n      if (arrLength != othLength && !(isPartial && othLength > arrLength)) {\n        return false;\n      }\n      var arrStacked = stack.get(array);\n      var othStacked = stack.get(other);\n      if (arrStacked && othStacked) {\n        return arrStacked == other && othStacked == array;\n      }\n      var index = -1, result2 = true, seen = bitmask & COMPARE_UNORDERED_FLAG ? new SetCache() : void 0;\n      stack.set(array, other);\n      stack.set(other, array);\n      while (++index < arrLength) {\n        var arrValue = array[index], othValue = other[index];\n        if (customizer) {\n          var compared = isPartial ? customizer(othValue, arrValue, index, other, array, stack) : customizer(arrValue, othValue, index, array, other, stack);\n        }\n        if (compared !== void 0) {\n          if (compared) {\n            continue;\n          }\n          result2 = false;\n          break;\n        }\n        if (seen) {\n          if (!arraySome(other, function(othValue2, othIndex) {\n            if (!cacheHas(seen, othIndex) && (arrValue === othValue2 || equalFunc(arrValue, othValue2, bitmask, customizer, stack))) {\n              return seen.push(othIndex);\n            }\n          })) {\n            result2 = false;\n            break;\n          }\n        } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {\n          result2 = false;\n          break;\n        }\n      }\n      stack[\"delete\"](array);\n      stack[\"delete\"](other);\n      return result2;\n    }\n    module.exports = equalArrays;\n  }\n});\n\n// ../../node_modules/lodash/_Uint8Array.js\nvar require_Uint8Array = __commonJS({\n  \"../../node_modules/lodash/_Uint8Array.js\"(exports, module) {\n    init_process();\n    var root = require_root();\n    var Uint8Array2 = root.Uint8Array;\n    module.exports = Uint8Array2;\n  }\n});\n\n// ../../node_modules/lodash/_mapToArray.js\nvar require_mapToArray = __commonJS({\n  \"../../node_modules/lodash/_mapToArray.js\"(exports, module) {\n    init_process();\n    function mapToArray(map) {\n      var index = -1, result2 = Array(map.size);\n      map.forEach(function(value, key) {\n        result2[++index] = [key, value];\n      });\n      return result2;\n    }\n    module.exports = mapToArray;\n  }\n});\n\n// ../../node_modules/lodash/_setToArray.js\nvar require_setToArray = __commonJS({\n  \"../../node_modules/lodash/_setToArray.js\"(exports, module) {\n    init_process();\n    function setToArray(set) {\n      var index = -1, result2 = Array(set.size);\n      set.forEach(function(value) {\n        result2[++index] = value;\n      });\n      return result2;\n    }\n    module.exports = setToArray;\n  }\n});\n\n// ../../node_modules/lodash/_equalByTag.js\nvar require_equalByTag = __commonJS({\n  \"../../node_modules/lodash/_equalByTag.js\"(exports, module) {\n    init_process();\n    var Symbol2 = require_Symbol();\n    var Uint8Array2 = require_Uint8Array();\n    var eq = require_eq();\n    var equalArrays = require_equalArrays();\n    var mapToArray = require_mapToArray();\n    var setToArray = require_setToArray();\n    var COMPARE_PARTIAL_FLAG = 1;\n    var COMPARE_UNORDERED_FLAG = 2;\n    var boolTag = \"[object Boolean]\";\n    var dateTag = \"[object Date]\";\n    var errorTag = \"[object Error]\";\n    var mapTag = \"[object Map]\";\n    var numberTag = \"[object Number]\";\n    var regexpTag = \"[object RegExp]\";\n    var setTag = \"[object Set]\";\n    var stringTag = \"[object String]\";\n    var symbolTag = \"[object Symbol]\";\n    var arrayBufferTag = \"[object ArrayBuffer]\";\n    var dataViewTag = \"[object DataView]\";\n    var symbolProto = Symbol2 ? Symbol2.prototype : void 0;\n    var symbolValueOf = symbolProto ? symbolProto.valueOf : void 0;\n    function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {\n      switch (tag) {\n        case dataViewTag:\n          if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) {\n            return false;\n          }\n          object = object.buffer;\n          other = other.buffer;\n        case arrayBufferTag:\n          if (object.byteLength != other.byteLength || !equalFunc(new Uint8Array2(object), new Uint8Array2(other))) {\n            return false;\n          }\n          return true;\n        case boolTag:\n        case dateTag:\n        case numberTag:\n          return eq(+object, +other);\n        case errorTag:\n          return object.name == other.name && object.message == other.message;\n        case regexpTag:\n        case stringTag:\n          return object == other + \"\";\n        case mapTag:\n          var convert = mapToArray;\n        case setTag:\n          var isPartial = bitmask & COMPARE_PARTIAL_FLAG;\n          convert || (convert = setToArray);\n          if (object.size != other.size && !isPartial) {\n            return false;\n          }\n          var stacked = stack.get(object);\n          if (stacked) {\n            return stacked == other;\n          }\n          bitmask |= COMPARE_UNORDERED_FLAG;\n          stack.set(object, other);\n          var result2 = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);\n          stack[\"delete\"](object);\n          return result2;\n        case symbolTag:\n          if (symbolValueOf) {\n            return symbolValueOf.call(object) == symbolValueOf.call(other);\n          }\n      }\n      return false;\n    }\n    module.exports = equalByTag;\n  }\n});\n\n// ../../node_modules/lodash/_arrayPush.js\nvar require_arrayPush = __commonJS({\n  \"../../node_modules/lodash/_arrayPush.js\"(exports, module) {\n    init_process();\n    function arrayPush(array, values) {\n      var index = -1, length = values.length, offset = array.length;\n      while (++index < length) {\n        array[offset + index] = values[index];\n      }\n      return array;\n    }\n    module.exports = arrayPush;\n  }\n});\n\n// ../../node_modules/lodash/isArray.js\nvar require_isArray = __commonJS({\n  \"../../node_modules/lodash/isArray.js\"(exports, module) {\n    init_process();\n    var isArray = Array.isArray;\n    module.exports = isArray;\n  }\n});\n\n// ../../node_modules/lodash/_baseGetAllKeys.js\nvar require_baseGetAllKeys = __commonJS({\n  \"../../node_modules/lodash/_baseGetAllKeys.js\"(exports, module) {\n    init_process();\n    var arrayPush = require_arrayPush();\n    var isArray = require_isArray();\n    function baseGetAllKeys(object, keysFunc, symbolsFunc) {\n      var result2 = keysFunc(object);\n      return isArray(object) ? result2 : arrayPush(result2, symbolsFunc(object));\n    }\n    module.exports = baseGetAllKeys;\n  }\n});\n\n// ../../node_modules/lodash/_arrayFilter.js\nvar require_arrayFilter = __commonJS({\n  \"../../node_modules/lodash/_arrayFilter.js\"(exports, module) {\n    init_process();\n    function arrayFilter(array, predicate) {\n      var index = -1, length = array == null ? 0 : array.length, resIndex = 0, result2 = [];\n      while (++index < length) {\n        var value = array[index];\n        if (predicate(value, index, array)) {\n          result2[resIndex++] = value;\n        }\n      }\n      return result2;\n    }\n    module.exports = arrayFilter;\n  }\n});\n\n// ../../node_modules/lodash/stubArray.js\nvar require_stubArray = __commonJS({\n  \"../../node_modules/lodash/stubArray.js\"(exports, module) {\n    init_process();\n    function stubArray() {\n      return [];\n    }\n    module.exports = stubArray;\n  }\n});\n\n// ../../node_modules/lodash/_getSymbols.js\nvar require_getSymbols = __commonJS({\n  \"../../node_modules/lodash/_getSymbols.js\"(exports, module) {\n    init_process();\n    var arrayFilter = require_arrayFilter();\n    var stubArray = require_stubArray();\n    var objectProto = Object.prototype;\n    var propertyIsEnumerable = objectProto.propertyIsEnumerable;\n    var nativeGetSymbols = Object.getOwnPropertySymbols;\n    var getSymbols = !nativeGetSymbols ? stubArray : function(object) {\n      if (object == null) {\n        return [];\n      }\n      object = Object(object);\n      return arrayFilter(nativeGetSymbols(object), function(symbol) {\n        return propertyIsEnumerable.call(object, symbol);\n      });\n    };\n    module.exports = getSymbols;\n  }\n});\n\n// ../../node_modules/lodash/_baseTimes.js\nvar require_baseTimes = __commonJS({\n  \"../../node_modules/lodash/_baseTimes.js\"(exports, module) {\n    init_process();\n    function baseTimes(n2, iteratee) {\n      var index = -1, result2 = Array(n2);\n      while (++index < n2) {\n        result2[index] = iteratee(index);\n      }\n      return result2;\n    }\n    module.exports = baseTimes;\n  }\n});\n\n// ../../node_modules/lodash/isObjectLike.js\nvar require_isObjectLike = __commonJS({\n  \"../../node_modules/lodash/isObjectLike.js\"(exports, module) {\n    init_process();\n    function isObjectLike(value) {\n      return value != null && typeof value == \"object\";\n    }\n    module.exports = isObjectLike;\n  }\n});\n\n// ../../node_modules/lodash/_baseIsArguments.js\nvar require_baseIsArguments = __commonJS({\n  \"../../node_modules/lodash/_baseIsArguments.js\"(exports, module) {\n    init_process();\n    var baseGetTag = require_baseGetTag();\n    var isObjectLike = require_isObjectLike();\n    var argsTag = \"[object Arguments]\";\n    function baseIsArguments(value) {\n      return isObjectLike(value) && baseGetTag(value) == argsTag;\n    }\n    module.exports = baseIsArguments;\n  }\n});\n\n// ../../node_modules/lodash/isArguments.js\nvar require_isArguments = __commonJS({\n  \"../../node_modules/lodash/isArguments.js\"(exports, module) {\n    init_process();\n    var baseIsArguments = require_baseIsArguments();\n    var isObjectLike = require_isObjectLike();\n    var objectProto = Object.prototype;\n    var hasOwnProperty = objectProto.hasOwnProperty;\n    var propertyIsEnumerable = objectProto.propertyIsEnumerable;\n    var isArguments = baseIsArguments(function() {\n      return arguments;\n    }()) ? baseIsArguments : function(value) {\n      return isObjectLike(value) && hasOwnProperty.call(value, \"callee\") && !propertyIsEnumerable.call(value, \"callee\");\n    };\n    module.exports = isArguments;\n  }\n});\n\n// ../../node_modules/lodash/stubFalse.js\nvar require_stubFalse = __commonJS({\n  \"../../node_modules/lodash/stubFalse.js\"(exports, module) {\n    init_process();\n    function stubFalse() {\n      return false;\n    }\n    module.exports = stubFalse;\n  }\n});\n\n// ../../node_modules/lodash/isBuffer.js\nvar require_isBuffer = __commonJS({\n  \"../../node_modules/lodash/isBuffer.js\"(exports, module) {\n    init_process();\n    var root = require_root();\n    var stubFalse = require_stubFalse();\n    var freeExports = typeof exports == \"object\" && exports && !exports.nodeType && exports;\n    var freeModule = freeExports && typeof module == \"object\" && module && !module.nodeType && module;\n    var moduleExports = freeModule && freeModule.exports === freeExports;\n    var Buffer2 = moduleExports ? root.Buffer : void 0;\n    var nativeIsBuffer = Buffer2 ? Buffer2.isBuffer : void 0;\n    var isBuffer = nativeIsBuffer || stubFalse;\n    module.exports = isBuffer;\n  }\n});\n\n// ../../node_modules/lodash/_isIndex.js\nvar require_isIndex = __commonJS({\n  \"../../node_modules/lodash/_isIndex.js\"(exports, module) {\n    init_process();\n    var MAX_SAFE_INTEGER = 9007199254740991;\n    var reIsUint = /^(?:0|[1-9]\\d*)$/;\n    function isIndex(value, length) {\n      var type = typeof value;\n      length = length == null ? MAX_SAFE_INTEGER : length;\n      return !!length && (type == \"number\" || type != \"symbol\" && reIsUint.test(value)) && (value > -1 && value % 1 == 0 && value < length);\n    }\n    module.exports = isIndex;\n  }\n});\n\n// ../../node_modules/lodash/isLength.js\nvar require_isLength = __commonJS({\n  \"../../node_modules/lodash/isLength.js\"(exports, module) {\n    init_process();\n    var MAX_SAFE_INTEGER = 9007199254740991;\n    function isLength(value) {\n      return typeof value == \"number\" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n    }\n    module.exports = isLength;\n  }\n});\n\n// ../../node_modules/lodash/_baseIsTypedArray.js\nvar require_baseIsTypedArray = __commonJS({\n  \"../../node_modules/lodash/_baseIsTypedArray.js\"(exports, module) {\n    init_process();\n    var baseGetTag = require_baseGetTag();\n    var isLength = require_isLength();\n    var isObjectLike = require_isObjectLike();\n    var argsTag = \"[object Arguments]\";\n    var arrayTag = \"[object Array]\";\n    var boolTag = \"[object Boolean]\";\n    var dateTag = \"[object Date]\";\n    var errorTag = \"[object Error]\";\n    var funcTag = \"[object Function]\";\n    var mapTag = \"[object Map]\";\n    var numberTag = \"[object Number]\";\n    var objectTag = \"[object Object]\";\n    var regexpTag = \"[object RegExp]\";\n    var setTag = \"[object Set]\";\n    var stringTag = \"[object String]\";\n    var weakMapTag = \"[object WeakMap]\";\n    var arrayBufferTag = \"[object ArrayBuffer]\";\n    var dataViewTag = \"[object DataView]\";\n    var float32Tag = \"[object Float32Array]\";\n    var float64Tag = \"[object Float64Array]\";\n    var int8Tag = \"[object Int8Array]\";\n    var int16Tag = \"[object Int16Array]\";\n    var int32Tag = \"[object Int32Array]\";\n    var uint8Tag = \"[object Uint8Array]\";\n    var uint8ClampedTag = \"[object Uint8ClampedArray]\";\n    var uint16Tag = \"[object Uint16Array]\";\n    var uint32Tag = \"[object Uint32Array]\";\n    var typedArrayTags = {};\n    typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;\n    typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;\n    function baseIsTypedArray(value) {\n      return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)];\n    }\n    module.exports = baseIsTypedArray;\n  }\n});\n\n// ../../node_modules/lodash/_baseUnary.js\nvar require_baseUnary = __commonJS({\n  \"../../node_modules/lodash/_baseUnary.js\"(exports, module) {\n    init_process();\n    function baseUnary(func) {\n      return function(value) {\n        return func(value);\n      };\n    }\n    module.exports = baseUnary;\n  }\n});\n\n// ../../node_modules/lodash/_nodeUtil.js\nvar require_nodeUtil = __commonJS({\n  \"../../node_modules/lodash/_nodeUtil.js\"(exports, module) {\n    init_process();\n    var freeGlobal = require_freeGlobal();\n    var freeExports = typeof exports == \"object\" && exports && !exports.nodeType && exports;\n    var freeModule = freeExports && typeof module == \"object\" && module && !module.nodeType && module;\n    var moduleExports = freeModule && freeModule.exports === freeExports;\n    var freeProcess = moduleExports && freeGlobal.process;\n    var nodeUtil = function() {\n      try {\n        var types = freeModule && freeModule.require && freeModule.require(\"util\").types;\n        if (types) {\n          return types;\n        }\n        return freeProcess && freeProcess.binding && freeProcess.binding(\"util\");\n      } catch (e2) {\n      }\n    }();\n    module.exports = nodeUtil;\n  }\n});\n\n// ../../node_modules/lodash/isTypedArray.js\nvar require_isTypedArray = __commonJS({\n  \"../../node_modules/lodash/isTypedArray.js\"(exports, module) {\n    init_process();\n    var baseIsTypedArray = require_baseIsTypedArray();\n    var baseUnary = require_baseUnary();\n    var nodeUtil = require_nodeUtil();\n    var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;\n    var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;\n    module.exports = isTypedArray;\n  }\n});\n\n// ../../node_modules/lodash/_arrayLikeKeys.js\nvar require_arrayLikeKeys = __commonJS({\n  \"../../node_modules/lodash/_arrayLikeKeys.js\"(exports, module) {\n    init_process();\n    var baseTimes = require_baseTimes();\n    var isArguments = require_isArguments();\n    var isArray = require_isArray();\n    var isBuffer = require_isBuffer();\n    var isIndex = require_isIndex();\n    var isTypedArray = require_isTypedArray();\n    var objectProto = Object.prototype;\n    var hasOwnProperty = objectProto.hasOwnProperty;\n    function arrayLikeKeys(value, inherited) {\n      var isArr = isArray(value), isArg = !isArr && isArguments(value), isBuff = !isArr && !isArg && isBuffer(value), isType = !isArr && !isArg && !isBuff && isTypedArray(value), skipIndexes = isArr || isArg || isBuff || isType, result2 = skipIndexes ? baseTimes(value.length, String) : [], length = result2.length;\n      for (var key in value) {\n        if ((inherited || hasOwnProperty.call(value, key)) && !(skipIndexes && (key == \"length\" || isBuff && (key == \"offset\" || key == \"parent\") || isType && (key == \"buffer\" || key == \"byteLength\" || key == \"byteOffset\") || isIndex(key, length)))) {\n          result2.push(key);\n        }\n      }\n      return result2;\n    }\n    module.exports = arrayLikeKeys;\n  }\n});\n\n// ../../node_modules/lodash/_isPrototype.js\nvar require_isPrototype = __commonJS({\n  \"../../node_modules/lodash/_isPrototype.js\"(exports, module) {\n    init_process();\n    var objectProto = Object.prototype;\n    function isPrototype(value) {\n      var Ctor = value && value.constructor, proto = typeof Ctor == \"function\" && Ctor.prototype || objectProto;\n      return value === proto;\n    }\n    module.exports = isPrototype;\n  }\n});\n\n// ../../node_modules/lodash/_overArg.js\nvar require_overArg = __commonJS({\n  \"../../node_modules/lodash/_overArg.js\"(exports, module) {\n    init_process();\n    function overArg(func, transform) {\n      return function(arg) {\n        return func(transform(arg));\n      };\n    }\n    module.exports = overArg;\n  }\n});\n\n// ../../node_modules/lodash/_nativeKeys.js\nvar require_nativeKeys = __commonJS({\n  \"../../node_modules/lodash/_nativeKeys.js\"(exports, module) {\n    init_process();\n    var overArg = require_overArg();\n    var nativeKeys = overArg(Object.keys, Object);\n    module.exports = nativeKeys;\n  }\n});\n\n// ../../node_modules/lodash/_baseKeys.js\nvar require_baseKeys = __commonJS({\n  \"../../node_modules/lodash/_baseKeys.js\"(exports, module) {\n    init_process();\n    var isPrototype = require_isPrototype();\n    var nativeKeys = require_nativeKeys();\n    var objectProto = Object.prototype;\n    var hasOwnProperty = objectProto.hasOwnProperty;\n    function baseKeys(object) {\n      if (!isPrototype(object)) {\n        return nativeKeys(object);\n      }\n      var result2 = [];\n      for (var key in Object(object)) {\n        if (hasOwnProperty.call(object, key) && key != \"constructor\") {\n          result2.push(key);\n        }\n      }\n      return result2;\n    }\n    module.exports = baseKeys;\n  }\n});\n\n// ../../node_modules/lodash/isArrayLike.js\nvar require_isArrayLike = __commonJS({\n  \"../../node_modules/lodash/isArrayLike.js\"(exports, module) {\n    init_process();\n    var isFunction = require_isFunction();\n    var isLength = require_isLength();\n    function isArrayLike(value) {\n      return value != null && isLength(value.length) && !isFunction(value);\n    }\n    module.exports = isArrayLike;\n  }\n});\n\n// ../../node_modules/lodash/keys.js\nvar require_keys = __commonJS({\n  \"../../node_modules/lodash/keys.js\"(exports, module) {\n    init_process();\n    var arrayLikeKeys = require_arrayLikeKeys();\n    var baseKeys = require_baseKeys();\n    var isArrayLike = require_isArrayLike();\n    function keys(object) {\n      return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\n    }\n    module.exports = keys;\n  }\n});\n\n// ../../node_modules/lodash/_getAllKeys.js\nvar require_getAllKeys = __commonJS({\n  \"../../node_modules/lodash/_getAllKeys.js\"(exports, module) {\n    init_process();\n    var baseGetAllKeys = require_baseGetAllKeys();\n    var getSymbols = require_getSymbols();\n    var keys = require_keys();\n    function getAllKeys(object) {\n      return baseGetAllKeys(object, keys, getSymbols);\n    }\n    module.exports = getAllKeys;\n  }\n});\n\n// ../../node_modules/lodash/_equalObjects.js\nvar require_equalObjects = __commonJS({\n  \"../../node_modules/lodash/_equalObjects.js\"(exports, module) {\n    init_process();\n    var getAllKeys = require_getAllKeys();\n    var COMPARE_PARTIAL_FLAG = 1;\n    var objectProto = Object.prototype;\n    var hasOwnProperty = objectProto.hasOwnProperty;\n    function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {\n      var isPartial = bitmask & COMPARE_PARTIAL_FLAG, objProps = getAllKeys(object), objLength = objProps.length, othProps = getAllKeys(other), othLength = othProps.length;\n      if (objLength != othLength && !isPartial) {\n        return false;\n      }\n      var index = objLength;\n      while (index--) {\n        var key = objProps[index];\n        if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {\n          return false;\n        }\n      }\n      var objStacked = stack.get(object);\n      var othStacked = stack.get(other);\n      if (objStacked && othStacked) {\n        return objStacked == other && othStacked == object;\n      }\n      var result2 = true;\n      stack.set(object, other);\n      stack.set(other, object);\n      var skipCtor = isPartial;\n      while (++index < objLength) {\n        key = objProps[index];\n        var objValue = object[key], othValue = other[key];\n        if (customizer) {\n          var compared = isPartial ? customizer(othValue, objValue, key, other, object, stack) : customizer(objValue, othValue, key, object, other, stack);\n        }\n        if (!(compared === void 0 ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {\n          result2 = false;\n          break;\n        }\n        skipCtor || (skipCtor = key == \"constructor\");\n      }\n      if (result2 && !skipCtor) {\n        var objCtor = object.constructor, othCtor = other.constructor;\n        if (objCtor != othCtor && (\"constructor\" in object && \"constructor\" in other) && !(typeof objCtor == \"function\" && objCtor instanceof objCtor && typeof othCtor == \"function\" && othCtor instanceof othCtor)) {\n          result2 = false;\n        }\n      }\n      stack[\"delete\"](object);\n      stack[\"delete\"](other);\n      return result2;\n    }\n    module.exports = equalObjects;\n  }\n});\n\n// ../../node_modules/lodash/_DataView.js\nvar require_DataView = __commonJS({\n  \"../../node_modules/lodash/_DataView.js\"(exports, module) {\n    init_process();\n    var getNative = require_getNative();\n    var root = require_root();\n    var DataView2 = getNative(root, \"DataView\");\n    module.exports = DataView2;\n  }\n});\n\n// ../../node_modules/lodash/_Promise.js\nvar require_Promise = __commonJS({\n  \"../../node_modules/lodash/_Promise.js\"(exports, module) {\n    init_process();\n    var getNative = require_getNative();\n    var root = require_root();\n    var Promise2 = getNative(root, \"Promise\");\n    module.exports = Promise2;\n  }\n});\n\n// ../../node_modules/lodash/_Set.js\nvar require_Set = __commonJS({\n  \"../../node_modules/lodash/_Set.js\"(exports, module) {\n    init_process();\n    var getNative = require_getNative();\n    var root = require_root();\n    var Set2 = getNative(root, \"Set\");\n    module.exports = Set2;\n  }\n});\n\n// ../../node_modules/lodash/_WeakMap.js\nvar require_WeakMap = __commonJS({\n  \"../../node_modules/lodash/_WeakMap.js\"(exports, module) {\n    init_process();\n    var getNative = require_getNative();\n    var root = require_root();\n    var WeakMap = getNative(root, \"WeakMap\");\n    module.exports = WeakMap;\n  }\n});\n\n// ../../node_modules/lodash/_getTag.js\nvar require_getTag = __commonJS({\n  \"../../node_modules/lodash/_getTag.js\"(exports, module) {\n    init_process();\n    var DataView2 = require_DataView();\n    var Map2 = require_Map();\n    var Promise2 = require_Promise();\n    var Set2 = require_Set();\n    var WeakMap = require_WeakMap();\n    var baseGetTag = require_baseGetTag();\n    var toSource = require_toSource();\n    var mapTag = \"[object Map]\";\n    var objectTag = \"[object Object]\";\n    var promiseTag = \"[object Promise]\";\n    var setTag = \"[object Set]\";\n    var weakMapTag = \"[object WeakMap]\";\n    var dataViewTag = \"[object DataView]\";\n    var dataViewCtorString = toSource(DataView2);\n    var mapCtorString = toSource(Map2);\n    var promiseCtorString = toSource(Promise2);\n    var setCtorString = toSource(Set2);\n    var weakMapCtorString = toSource(WeakMap);\n    var getTag = baseGetTag;\n    if (DataView2 && getTag(new DataView2(new ArrayBuffer(1))) != dataViewTag || Map2 && getTag(new Map2()) != mapTag || Promise2 && getTag(Promise2.resolve()) != promiseTag || Set2 && getTag(new Set2()) != setTag || WeakMap && getTag(new WeakMap()) != weakMapTag) {\n      getTag = function(value) {\n        var result2 = baseGetTag(value), Ctor = result2 == objectTag ? value.constructor : void 0, ctorString = Ctor ? toSource(Ctor) : \"\";\n        if (ctorString) {\n          switch (ctorString) {\n            case dataViewCtorString:\n              return dataViewTag;\n            case mapCtorString:\n              return mapTag;\n            case promiseCtorString:\n              return promiseTag;\n            case setCtorString:\n              return setTag;\n            case weakMapCtorString:\n              return weakMapTag;\n          }\n        }\n        return result2;\n      };\n    }\n    module.exports = getTag;\n  }\n});\n\n// ../../node_modules/lodash/_baseIsEqualDeep.js\nvar require_baseIsEqualDeep = __commonJS({\n  \"../../node_modules/lodash/_baseIsEqualDeep.js\"(exports, module) {\n    init_process();\n    var Stack = require_Stack();\n    var equalArrays = require_equalArrays();\n    var equalByTag = require_equalByTag();\n    var equalObjects = require_equalObjects();\n    var getTag = require_getTag();\n    var isArray = require_isArray();\n    var isBuffer = require_isBuffer();\n    var isTypedArray = require_isTypedArray();\n    var COMPARE_PARTIAL_FLAG = 1;\n    var argsTag = \"[object Arguments]\";\n    var arrayTag = \"[object Array]\";\n    var objectTag = \"[object Object]\";\n    var objectProto = Object.prototype;\n    var hasOwnProperty = objectProto.hasOwnProperty;\n    function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {\n      var objIsArr = isArray(object), othIsArr = isArray(other), objTag = objIsArr ? arrayTag : getTag(object), othTag = othIsArr ? arrayTag : getTag(other);\n      objTag = objTag == argsTag ? objectTag : objTag;\n      othTag = othTag == argsTag ? objectTag : othTag;\n      var objIsObj = objTag == objectTag, othIsObj = othTag == objectTag, isSameTag = objTag == othTag;\n      if (isSameTag && isBuffer(object)) {\n        if (!isBuffer(other)) {\n          return false;\n        }\n        objIsArr = true;\n        objIsObj = false;\n      }\n      if (isSameTag && !objIsObj) {\n        stack || (stack = new Stack());\n        return objIsArr || isTypedArray(object) ? equalArrays(object, other, bitmask, customizer, equalFunc, stack) : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);\n      }\n      if (!(bitmask & COMPARE_PARTIAL_FLAG)) {\n        var objIsWrapped = objIsObj && hasOwnProperty.call(object, \"__wrapped__\"), othIsWrapped = othIsObj && hasOwnProperty.call(other, \"__wrapped__\");\n        if (objIsWrapped || othIsWrapped) {\n          var objUnwrapped = objIsWrapped ? object.value() : object, othUnwrapped = othIsWrapped ? other.value() : other;\n          stack || (stack = new Stack());\n          return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);\n        }\n      }\n      if (!isSameTag) {\n        return false;\n      }\n      stack || (stack = new Stack());\n      return equalObjects(object, other, bitmask, customizer, equalFunc, stack);\n    }\n    module.exports = baseIsEqualDeep;\n  }\n});\n\n// ../../node_modules/lodash/_baseIsEqual.js\nvar require_baseIsEqual = __commonJS({\n  \"../../node_modules/lodash/_baseIsEqual.js\"(exports, module) {\n    init_process();\n    var baseIsEqualDeep = require_baseIsEqualDeep();\n    var isObjectLike = require_isObjectLike();\n    function baseIsEqual(value, other, bitmask, customizer, stack) {\n      if (value === other) {\n        return true;\n      }\n      if (value == null || other == null || !isObjectLike(value) && !isObjectLike(other)) {\n        return value !== value && other !== other;\n      }\n      return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);\n    }\n    module.exports = baseIsEqual;\n  }\n});\n\n// ../../node_modules/lodash/isEqual.js\nvar require_isEqual = __commonJS({\n  \"../../node_modules/lodash/isEqual.js\"(exports, module) {\n    init_process();\n    var baseIsEqual = require_baseIsEqual();\n    function isEqual3(value, other) {\n      return baseIsEqual(value, other);\n    }\n    module.exports = isEqual3;\n  }\n});\n\n// ../../node_modules/ms/index.js\nvar require_ms = __commonJS({\n  \"../../node_modules/ms/index.js\"(exports, module) {\n    init_process();\n    var s = 1e3;\n    var m = s * 60;\n    var h = m * 60;\n    var d = h * 24;\n    var w = d * 7;\n    var y = d * 365.25;\n    module.exports = function(val, options) {\n      options = options || {};\n      var type = typeof val;\n      if (type === \"string\" && val.length > 0) {\n        return parse3(val);\n      } else if (type === \"number\" && isFinite(val)) {\n        return options.long ? fmtLong(val) : fmtShort(val);\n      }\n      throw new Error(\n        \"val is not a non-empty string or a valid number. val=\" + JSON.stringify(val)\n      );\n    };\n    function parse3(str) {\n      str = String(str);\n      if (str.length > 100) {\n        return;\n      }\n      var match = /^(-?(?:\\d+)?\\.?\\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(\n        str\n      );\n      if (!match) {\n        return;\n      }\n      var n2 = parseFloat(match[1]);\n      var type = (match[2] || \"ms\").toLowerCase();\n      switch (type) {\n        case \"years\":\n        case \"year\":\n        case \"yrs\":\n        case \"yr\":\n        case \"y\":\n          return n2 * y;\n        case \"weeks\":\n        case \"week\":\n        case \"w\":\n          return n2 * w;\n        case \"days\":\n        case \"day\":\n        case \"d\":\n          return n2 * d;\n        case \"hours\":\n        case \"hour\":\n        case \"hrs\":\n        case \"hr\":\n        case \"h\":\n          return n2 * h;\n        case \"minutes\":\n        case \"minute\":\n        case \"mins\":\n        case \"min\":\n        case \"m\":\n          return n2 * m;\n        case \"seconds\":\n        case \"second\":\n        case \"secs\":\n        case \"sec\":\n        case \"s\":\n          return n2 * s;\n        case \"milliseconds\":\n        case \"millisecond\":\n        case \"msecs\":\n        case \"msec\":\n        case \"ms\":\n          return n2;\n        default:\n          return void 0;\n      }\n    }\n    function fmtShort(ms) {\n      var msAbs = Math.abs(ms);\n      if (msAbs >= d) {\n        return Math.round(ms / d) + \"d\";\n      }\n      if (msAbs >= h) {\n        return Math.round(ms / h) + \"h\";\n      }\n      if (msAbs >= m) {\n        return Math.round(ms / m) + \"m\";\n      }\n      if (msAbs >= s) {\n        return Math.round(ms / s) + \"s\";\n      }\n      return ms + \"ms\";\n    }\n    function fmtLong(ms) {\n      var msAbs = Math.abs(ms);\n      if (msAbs >= d) {\n        return plural(ms, msAbs, d, \"day\");\n      }\n      if (msAbs >= h) {\n        return plural(ms, msAbs, h, \"hour\");\n      }\n      if (msAbs >= m) {\n        return plural(ms, msAbs, m, \"minute\");\n      }\n      if (msAbs >= s) {\n        return plural(ms, msAbs, s, \"second\");\n      }\n      return ms + \" ms\";\n    }\n    function plural(ms, msAbs, n2, name) {\n      var isPlural = msAbs >= n2 * 1.5;\n      return Math.round(ms / n2) + \" \" + name + (isPlural ? \"s\" : \"\");\n    }\n  }\n});\n\n// ../../node_modules/debug/src/common.js\nvar require_common = __commonJS({\n  \"../../node_modules/debug/src/common.js\"(exports, module) {\n    init_process();\n    function setup(env) {\n      createDebug.debug = createDebug;\n      createDebug.default = createDebug;\n      createDebug.coerce = coerce;\n      createDebug.disable = disable;\n      createDebug.enable = enable;\n      createDebug.enabled = enabled;\n      createDebug.humanize = require_ms();\n      createDebug.destroy = destroy;\n      Object.keys(env).forEach((key) => {\n        createDebug[key] = env[key];\n      });\n      createDebug.names = [];\n      createDebug.skips = [];\n      createDebug.formatters = {};\n      function selectColor(namespace) {\n        let hash = 0;\n        for (let i = 0; i < namespace.length; i++) {\n          hash = (hash << 5) - hash + namespace.charCodeAt(i);\n          hash |= 0;\n        }\n        return createDebug.colors[Math.abs(hash) % createDebug.colors.length];\n      }\n      createDebug.selectColor = selectColor;\n      function createDebug(namespace) {\n        let prevTime;\n        let enableOverride = null;\n        let namespacesCache;\n        let enabledCache;\n        function debug(...args) {\n          if (!debug.enabled) {\n            return;\n          }\n          const self2 = debug;\n          const curr = Number(new Date());\n          const ms = curr - (prevTime || curr);\n          self2.diff = ms;\n          self2.prev = prevTime;\n          self2.curr = curr;\n          prevTime = curr;\n          args[0] = createDebug.coerce(args[0]);\n          if (typeof args[0] !== \"string\") {\n            args.unshift(\"%O\");\n          }\n          let index = 0;\n          args[0] = args[0].replace(/%([a-zA-Z%])/g, (match, format) => {\n            if (match === \"%%\") {\n              return \"%\";\n            }\n            index++;\n            const formatter = createDebug.formatters[format];\n            if (typeof formatter === \"function\") {\n              const val = args[index];\n              match = formatter.call(self2, val);\n              args.splice(index, 1);\n              index--;\n            }\n            return match;\n          });\n          createDebug.formatArgs.call(self2, args);\n          const logFn = self2.log || createDebug.log;\n          logFn.apply(self2, args);\n        }\n        debug.namespace = namespace;\n        debug.useColors = createDebug.useColors();\n        debug.color = createDebug.selectColor(namespace);\n        debug.extend = extend;\n        debug.destroy = createDebug.destroy;\n        Object.defineProperty(debug, \"enabled\", {\n          enumerable: true,\n          configurable: false,\n          get: () => {\n            if (enableOverride !== null) {\n              return enableOverride;\n            }\n            if (namespacesCache !== createDebug.namespaces) {\n              namespacesCache = createDebug.namespaces;\n              enabledCache = createDebug.enabled(namespace);\n            }\n            return enabledCache;\n          },\n          set: (v) => {\n            enableOverride = v;\n          }\n        });\n        if (typeof createDebug.init === \"function\") {\n          createDebug.init(debug);\n        }\n        return debug;\n      }\n      function extend(namespace, delimiter) {\n        const newDebug = createDebug(this.namespace + (typeof delimiter === \"undefined\" ? \":\" : delimiter) + namespace);\n        newDebug.log = this.log;\n        return newDebug;\n      }\n      function enable(namespaces) {\n        createDebug.save(namespaces);\n        createDebug.namespaces = namespaces;\n        createDebug.names = [];\n        createDebug.skips = [];\n        let i;\n        const split = (typeof namespaces === \"string\" ? namespaces : \"\").split(/[\\s,]+/);\n        const len = split.length;\n        for (i = 0; i < len; i++) {\n          if (!split[i]) {\n            continue;\n          }\n          namespaces = split[i].replace(/\\*/g, \".*?\");\n          if (namespaces[0] === \"-\") {\n            createDebug.skips.push(new RegExp(\"^\" + namespaces.slice(1) + \"$\"));\n          } else {\n            createDebug.names.push(new RegExp(\"^\" + namespaces + \"$\"));\n          }\n        }\n      }\n      function disable() {\n        const namespaces = [\n          ...createDebug.names.map(toNamespace),\n          ...createDebug.skips.map(toNamespace).map((namespace) => \"-\" + namespace)\n        ].join(\",\");\n        createDebug.enable(\"\");\n        return namespaces;\n      }\n      function enabled(name) {\n        if (name[name.length - 1] === \"*\") {\n          return true;\n        }\n        let i;\n        let len;\n        for (i = 0, len = createDebug.skips.length; i < len; i++) {\n          if (createDebug.skips[i].test(name)) {\n            return false;\n          }\n        }\n        for (i = 0, len = createDebug.names.length; i < len; i++) {\n          if (createDebug.names[i].test(name)) {\n            return true;\n          }\n        }\n        return false;\n      }\n      function toNamespace(regexp) {\n        return regexp.toString().substring(2, regexp.toString().length - 2).replace(/\\.\\*\\?$/, \"*\");\n      }\n      function coerce(val) {\n        if (val instanceof Error) {\n          return val.stack || val.message;\n        }\n        return val;\n      }\n      function destroy() {\n        console.warn(\"Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.\");\n      }\n      createDebug.enable(createDebug.load());\n      return createDebug;\n    }\n    module.exports = setup;\n  }\n});\n\n// ../../node_modules/debug/src/browser.js\nvar require_browser2 = __commonJS({\n  \"../../node_modules/debug/src/browser.js\"(exports, module) {\n    init_process();\n    exports.formatArgs = formatArgs;\n    exports.save = save;\n    exports.load = load;\n    exports.useColors = useColors;\n    exports.storage = localstorage();\n    exports.destroy = (() => {\n      let warned = false;\n      return () => {\n        if (!warned) {\n          warned = true;\n          console.warn(\"Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.\");\n        }\n      };\n    })();\n    exports.colors = [\n      \"#0000CC\",\n      \"#0000FF\",\n      \"#0033CC\",\n      \"#0033FF\",\n      \"#0066CC\",\n      \"#0066FF\",\n      \"#0099CC\",\n      \"#0099FF\",\n      \"#00CC00\",\n      \"#00CC33\",\n      \"#00CC66\",\n      \"#00CC99\",\n      \"#00CCCC\",\n      \"#00CCFF\",\n      \"#3300CC\",\n      \"#3300FF\",\n      \"#3333CC\",\n      \"#3333FF\",\n      \"#3366CC\",\n      \"#3366FF\",\n      \"#3399CC\",\n      \"#3399FF\",\n      \"#33CC00\",\n      \"#33CC33\",\n      \"#33CC66\",\n      \"#33CC99\",\n      \"#33CCCC\",\n      \"#33CCFF\",\n      \"#6600CC\",\n      \"#6600FF\",\n      \"#6633CC\",\n      \"#6633FF\",\n      \"#66CC00\",\n      \"#66CC33\",\n      \"#9900CC\",\n      \"#9900FF\",\n      \"#9933CC\",\n      \"#9933FF\",\n      \"#99CC00\",\n      \"#99CC33\",\n      \"#CC0000\",\n      \"#CC0033\",\n      \"#CC0066\",\n      \"#CC0099\",\n      \"#CC00CC\",\n      \"#CC00FF\",\n      \"#CC3300\",\n      \"#CC3333\",\n      \"#CC3366\",\n      \"#CC3399\",\n      \"#CC33CC\",\n      \"#CC33FF\",\n      \"#CC6600\",\n      \"#CC6633\",\n      \"#CC9900\",\n      \"#CC9933\",\n      \"#CCCC00\",\n      \"#CCCC33\",\n      \"#FF0000\",\n      \"#FF0033\",\n      \"#FF0066\",\n      \"#FF0099\",\n      \"#FF00CC\",\n      \"#FF00FF\",\n      \"#FF3300\",\n      \"#FF3333\",\n      \"#FF3366\",\n      \"#FF3399\",\n      \"#FF33CC\",\n      \"#FF33FF\",\n      \"#FF6600\",\n      \"#FF6633\",\n      \"#FF9900\",\n      \"#FF9933\",\n      \"#FFCC00\",\n      \"#FFCC33\"\n    ];\n    function useColors() {\n      if (typeof window !== \"undefined\" && window.process && (window.process.type === \"renderer\" || window.process.__nwjs)) {\n        return true;\n      }\n      if (typeof navigator !== \"undefined\" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\\/(\\d+)/)) {\n        return false;\n      }\n      return typeof document !== \"undefined\" && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance || typeof window !== \"undefined\" && window.console && (window.console.firebug || window.console.exception && window.console.table) || typeof navigator !== \"undefined\" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\\/(\\d+)/) && parseInt(RegExp.$1, 10) >= 31 || typeof navigator !== \"undefined\" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\\/(\\d+)/);\n    }\n    function formatArgs(args) {\n      args[0] = (this.useColors ? \"%c\" : \"\") + this.namespace + (this.useColors ? \" %c\" : \" \") + args[0] + (this.useColors ? \"%c \" : \" \") + \"+\" + module.exports.humanize(this.diff);\n      if (!this.useColors) {\n        return;\n      }\n      const c = \"color: \" + this.color;\n      args.splice(1, 0, c, \"color: inherit\");\n      let index = 0;\n      let lastC = 0;\n      args[0].replace(/%[a-zA-Z%]/g, (match) => {\n        if (match === \"%%\") {\n          return;\n        }\n        index++;\n        if (match === \"%c\") {\n          lastC = index;\n        }\n      });\n      args.splice(lastC, 0, c);\n    }\n    exports.log = console.debug || console.log || (() => {\n    });\n    function save(namespaces) {\n      try {\n        if (namespaces) {\n          exports.storage.setItem(\"debug\", namespaces);\n        } else {\n          exports.storage.removeItem(\"debug\");\n        }\n      } catch (error) {\n      }\n    }\n    function load() {\n      let r2;\n      try {\n        r2 = exports.storage.getItem(\"debug\");\n      } catch (error) {\n      }\n      if (!r2 && typeof process !== \"undefined\" && \"env\" in process) {\n        r2 = process.env.DEBUG;\n      }\n      return r2;\n    }\n    function localstorage() {\n      try {\n        return localStorage;\n      } catch (error) {\n      }\n    }\n    module.exports = require_common()(exports);\n    var { formatters } = module.exports;\n    formatters.j = function(v) {\n      try {\n        return JSON.stringify(v);\n      } catch (error) {\n        return \"[UnexpectedJSONParseError]: \" + error.message;\n      }\n    };\n  }\n});\n\n// ../../node_modules/mediasoup-client/lib/Logger.js\nvar require_Logger = __commonJS({\n  \"../../node_modules/mediasoup-client/lib/Logger.js\"(exports) {\n    \"use strict\";\n    init_process();\n    var __importDefault = exports && exports.__importDefault || function(mod) {\n      return mod && mod.__esModule ? mod : { \"default\": mod };\n    };\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.Logger = void 0;\n    var debug_1 = __importDefault(require_browser2());\n    var APP_NAME = \"mediasoup-client\";\n    var Logger3 = class {\n      constructor(prefix) {\n        if (prefix) {\n          this._debug = (0, debug_1.default)(`${APP_NAME}:${prefix}`);\n          this._warn = (0, debug_1.default)(`${APP_NAME}:WARN:${prefix}`);\n          this._error = (0, debug_1.default)(`${APP_NAME}:ERROR:${prefix}`);\n        } else {\n          this._debug = (0, debug_1.default)(APP_NAME);\n          this._warn = (0, debug_1.default)(`${APP_NAME}:WARN`);\n          this._error = (0, debug_1.default)(`${APP_NAME}:ERROR`);\n        }\n        this._debug.log = console.info.bind(console);\n        this._warn.log = console.warn.bind(console);\n        this._error.log = console.error.bind(console);\n      }\n      get debug() {\n        return this._debug;\n      }\n      get warn() {\n        return this._warn;\n      }\n      get error() {\n        return this._error;\n      }\n    };\n    exports.Logger = Logger3;\n  }\n});\n\n// ../../node_modules/events/events.js\nvar require_events = __commonJS({\n  \"../../node_modules/events/events.js\"(exports, module) {\n    \"use strict\";\n    init_process();\n    var R = typeof Reflect === \"object\" ? Reflect : null;\n    var ReflectApply = R && typeof R.apply === \"function\" ? R.apply : function ReflectApply2(target, receiver, args) {\n      return Function.prototype.apply.call(target, receiver, args);\n    };\n    var ReflectOwnKeys;\n    if (R && typeof R.ownKeys === \"function\") {\n      ReflectOwnKeys = R.ownKeys;\n    } else if (Object.getOwnPropertySymbols) {\n      ReflectOwnKeys = function ReflectOwnKeys2(target) {\n        return Object.getOwnPropertyNames(target).concat(Object.getOwnPropertySymbols(target));\n      };\n    } else {\n      ReflectOwnKeys = function ReflectOwnKeys2(target) {\n        return Object.getOwnPropertyNames(target);\n      };\n    }\n    function ProcessEmitWarning(warning) {\n      if (console && console.warn)\n        console.warn(warning);\n    }\n    var NumberIsNaN = Number.isNaN || function NumberIsNaN2(value) {\n      return value !== value;\n    };\n    function EventEmitter() {\n      EventEmitter.init.call(this);\n    }\n    module.exports = EventEmitter;\n    module.exports.once = once;\n    EventEmitter.EventEmitter = EventEmitter;\n    EventEmitter.prototype._events = void 0;\n    EventEmitter.prototype._eventsCount = 0;\n    EventEmitter.prototype._maxListeners = void 0;\n    var defaultMaxListeners = 10;\n    function checkListener(listener) {\n      if (typeof listener !== \"function\") {\n        throw new TypeError('The \"listener\" argument must be of type Function. Received type ' + typeof listener);\n      }\n    }\n    Object.defineProperty(EventEmitter, \"defaultMaxListeners\", {\n      enumerable: true,\n      get: function() {\n        return defaultMaxListeners;\n      },\n      set: function(arg) {\n        if (typeof arg !== \"number\" || arg < 0 || NumberIsNaN(arg)) {\n          throw new RangeError('The value of \"defaultMaxListeners\" is out of range. It must be a non-negative number. Received ' + arg + \".\");\n        }\n        defaultMaxListeners = arg;\n      }\n    });\n    EventEmitter.init = function() {\n      if (this._events === void 0 || this._events === Object.getPrototypeOf(this)._events) {\n        this._events = /* @__PURE__ */ Object.create(null);\n        this._eventsCount = 0;\n      }\n      this._maxListeners = this._maxListeners || void 0;\n    };\n    EventEmitter.prototype.setMaxListeners = function setMaxListeners(n2) {\n      if (typeof n2 !== \"number\" || n2 < 0 || NumberIsNaN(n2)) {\n        throw new RangeError('The value of \"n\" is out of range. It must be a non-negative number. Received ' + n2 + \".\");\n      }\n      this._maxListeners = n2;\n      return this;\n    };\n    function _getMaxListeners(that) {\n      if (that._maxListeners === void 0)\n        return EventEmitter.defaultMaxListeners;\n      return that._maxListeners;\n    }\n    EventEmitter.prototype.getMaxListeners = function getMaxListeners() {\n      return _getMaxListeners(this);\n    };\n    EventEmitter.prototype.emit = function emit(type) {\n      var args = [];\n      for (var i = 1; i < arguments.length; i++)\n        args.push(arguments[i]);\n      var doError = type === \"error\";\n      var events = this._events;\n      if (events !== void 0)\n        doError = doError && events.error === void 0;\n      else if (!doError)\n        return false;\n      if (doError) {\n        var er;\n        if (args.length > 0)\n          er = args[0];\n        if (er instanceof Error) {\n          throw er;\n        }\n        var err = new Error(\"Unhandled error.\" + (er ? \" (\" + er.message + \")\" : \"\"));\n        err.context = er;\n        throw err;\n      }\n      var handler = events[type];\n      if (handler === void 0)\n        return false;\n      if (typeof handler === \"function\") {\n        ReflectApply(handler, this, args);\n      } else {\n        var len = handler.length;\n        var listeners = arrayClone(handler, len);\n        for (var i = 0; i < len; ++i)\n          ReflectApply(listeners[i], this, args);\n      }\n      return true;\n    };\n    function _addListener(target, type, listener, prepend) {\n      var m;\n      var events;\n      var existing;\n      checkListener(listener);\n      events = target._events;\n      if (events === void 0) {\n        events = target._events = /* @__PURE__ */ Object.create(null);\n        target._eventsCount = 0;\n      } else {\n        if (events.newListener !== void 0) {\n          target.emit(\n            \"newListener\",\n            type,\n            listener.listener ? listener.listener : listener\n          );\n          events = target._events;\n        }\n        existing = events[type];\n      }\n      if (existing === void 0) {\n        existing = events[type] = listener;\n        ++target._eventsCount;\n      } else {\n        if (typeof existing === \"function\") {\n          existing = events[type] = prepend ? [listener, existing] : [existing, listener];\n        } else if (prepend) {\n          existing.unshift(listener);\n        } else {\n          existing.push(listener);\n        }\n        m = _getMaxListeners(target);\n        if (m > 0 && existing.length > m && !existing.warned) {\n          existing.warned = true;\n          var w = new Error(\"Possible EventEmitter memory leak detected. \" + existing.length + \" \" + String(type) + \" listeners added. Use emitter.setMaxListeners() to increase limit\");\n          w.name = \"MaxListenersExceededWarning\";\n          w.emitter = target;\n          w.type = type;\n          w.count = existing.length;\n          ProcessEmitWarning(w);\n        }\n      }\n      return target;\n    }\n    EventEmitter.prototype.addListener = function addListener(type, listener) {\n      return _addListener(this, type, listener, false);\n    };\n    EventEmitter.prototype.on = EventEmitter.prototype.addListener;\n    EventEmitter.prototype.prependListener = function prependListener(type, listener) {\n      return _addListener(this, type, listener, true);\n    };\n    function onceWrapper() {\n      if (!this.fired) {\n        this.target.removeListener(this.type, this.wrapFn);\n        this.fired = true;\n        if (arguments.length === 0)\n          return this.listener.call(this.target);\n        return this.listener.apply(this.target, arguments);\n      }\n    }\n    function _onceWrap(target, type, listener) {\n      var state = { fired: false, wrapFn: void 0, target, type, listener };\n      var wrapped = onceWrapper.bind(state);\n      wrapped.listener = listener;\n      state.wrapFn = wrapped;\n      return wrapped;\n    }\n    EventEmitter.prototype.once = function once2(type, listener) {\n      checkListener(listener);\n      this.on(type, _onceWrap(this, type, listener));\n      return this;\n    };\n    EventEmitter.prototype.prependOnceListener = function prependOnceListener(type, listener) {\n      checkListener(listener);\n      this.prependListener(type, _onceWrap(this, type, listener));\n      return this;\n    };\n    EventEmitter.prototype.removeListener = function removeListener(type, listener) {\n      var list, events, position, i, originalListener;\n      checkListener(listener);\n      events = this._events;\n      if (events === void 0)\n        return this;\n      list = events[type];\n      if (list === void 0)\n        return this;\n      if (list === listener || list.listener === listener) {\n        if (--this._eventsCount === 0)\n          this._events = /* @__PURE__ */ Object.create(null);\n        else {\n          delete events[type];\n          if (events.removeListener)\n            this.emit(\"removeListener\", type, list.listener || listener);\n        }\n      } else if (typeof list !== \"function\") {\n        position = -1;\n        for (i = list.length - 1; i >= 0; i--) {\n          if (list[i] === listener || list[i].listener === listener) {\n            originalListener = list[i].listener;\n            position = i;\n            break;\n          }\n        }\n        if (position < 0)\n          return this;\n        if (position === 0)\n          list.shift();\n        else {\n          spliceOne(list, position);\n        }\n        if (list.length === 1)\n          events[type] = list[0];\n        if (events.removeListener !== void 0)\n          this.emit(\"removeListener\", type, originalListener || listener);\n      }\n      return this;\n    };\n    EventEmitter.prototype.off = EventEmitter.prototype.removeListener;\n    EventEmitter.prototype.removeAllListeners = function removeAllListeners(type) {\n      var listeners, events, i;\n      events = this._events;\n      if (events === void 0)\n        return this;\n      if (events.removeListener === void 0) {\n        if (arguments.length === 0) {\n          this._events = /* @__PURE__ */ Object.create(null);\n          this._eventsCount = 0;\n        } else if (events[type] !== void 0) {\n          if (--this._eventsCount === 0)\n            this._events = /* @__PURE__ */ Object.create(null);\n          else\n            delete events[type];\n        }\n        return this;\n      }\n      if (arguments.length === 0) {\n        var keys = Object.keys(events);\n        var key;\n        for (i = 0; i < keys.length; ++i) {\n          key = keys[i];\n          if (key === \"removeListener\")\n            continue;\n          this.removeAllListeners(key);\n        }\n        this.removeAllListeners(\"removeListener\");\n        this._events = /* @__PURE__ */ Object.create(null);\n        this._eventsCount = 0;\n        return this;\n      }\n      listeners = events[type];\n      if (typeof listeners === \"function\") {\n        this.removeListener(type, listeners);\n      } else if (listeners !== void 0) {\n        for (i = listeners.length - 1; i >= 0; i--) {\n          this.removeListener(type, listeners[i]);\n        }\n      }\n      return this;\n    };\n    function _listeners(target, type, unwrap) {\n      var events = target._events;\n      if (events === void 0)\n        return [];\n      var evlistener = events[type];\n      if (evlistener === void 0)\n        return [];\n      if (typeof evlistener === \"function\")\n        return unwrap ? [evlistener.listener || evlistener] : [evlistener];\n      return unwrap ? unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);\n    }\n    EventEmitter.prototype.listeners = function listeners(type) {\n      return _listeners(this, type, true);\n    };\n    EventEmitter.prototype.rawListeners = function rawListeners(type) {\n      return _listeners(this, type, false);\n    };\n    EventEmitter.listenerCount = function(emitter, type) {\n      if (typeof emitter.listenerCount === \"function\") {\n        return emitter.listenerCount(type);\n      } else {\n        return listenerCount.call(emitter, type);\n      }\n    };\n    EventEmitter.prototype.listenerCount = listenerCount;\n    function listenerCount(type) {\n      var events = this._events;\n      if (events !== void 0) {\n        var evlistener = events[type];\n        if (typeof evlistener === \"function\") {\n          return 1;\n        } else if (evlistener !== void 0) {\n          return evlistener.length;\n        }\n      }\n      return 0;\n    }\n    EventEmitter.prototype.eventNames = function eventNames() {\n      return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];\n    };\n    function arrayClone(arr, n2) {\n      var copy = new Array(n2);\n      for (var i = 0; i < n2; ++i)\n        copy[i] = arr[i];\n      return copy;\n    }\n    function spliceOne(list, index) {\n      for (; index + 1 < list.length; index++)\n        list[index] = list[index + 1];\n      list.pop();\n    }\n    function unwrapListeners(arr) {\n      var ret = new Array(arr.length);\n      for (var i = 0; i < ret.length; ++i) {\n        ret[i] = arr[i].listener || arr[i];\n      }\n      return ret;\n    }\n    function once(emitter, name) {\n      return new Promise(function(resolve, reject) {\n        function errorListener(err) {\n          emitter.removeListener(name, resolver);\n          reject(err);\n        }\n        function resolver() {\n          if (typeof emitter.removeListener === \"function\") {\n            emitter.removeListener(\"error\", errorListener);\n          }\n          resolve([].slice.call(arguments));\n        }\n        ;\n        eventTargetAgnosticAddListener(emitter, name, resolver, { once: true });\n        if (name !== \"error\") {\n          addErrorHandlerIfEventEmitter(emitter, errorListener, { once: true });\n        }\n      });\n    }\n    function addErrorHandlerIfEventEmitter(emitter, handler, flags) {\n      if (typeof emitter.on === \"function\") {\n        eventTargetAgnosticAddListener(emitter, \"error\", handler, flags);\n      }\n    }\n    function eventTargetAgnosticAddListener(emitter, name, listener, flags) {\n      if (typeof emitter.on === \"function\") {\n        if (flags.once) {\n          emitter.once(name, listener);\n        } else {\n          emitter.on(name, listener);\n        }\n      } else if (typeof emitter.addEventListener === \"function\") {\n        emitter.addEventListener(name, function wrapListener(arg) {\n          if (flags.once) {\n            emitter.removeEventListener(name, wrapListener);\n          }\n          listener(arg);\n        });\n      } else {\n        throw new TypeError('The \"emitter\" argument must be of type EventEmitter. Received type ' + typeof emitter);\n      }\n    }\n  }\n});\n\n// ../../node_modules/mediasoup-client/lib/EnhancedEventEmitter.js\nvar require_EnhancedEventEmitter = __commonJS({\n  \"../../node_modules/mediasoup-client/lib/EnhancedEventEmitter.js\"(exports) {\n    \"use strict\";\n    init_process();\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.EnhancedEventEmitter = void 0;\n    var events_1 = require_events();\n    var Logger_1 = require_Logger();\n    var logger2 = new Logger_1.Logger(\"EnhancedEventEmitter\");\n    var EnhancedEventEmitter = class extends events_1.EventEmitter {\n      constructor() {\n        super();\n        this.setMaxListeners(Infinity);\n      }\n      emit(eventName, ...args) {\n        return super.emit(eventName, ...args);\n      }\n      safeEmit(eventName, ...args) {\n        const numListeners = super.listenerCount(eventName);\n        try {\n          return super.emit(eventName, ...args);\n        } catch (error) {\n          logger2.error(\"safeEmit() | event listener threw an error [eventName:%s]:%o\", eventName, error);\n          return Boolean(numListeners);\n        }\n      }\n      on(eventName, listener) {\n        super.on(eventName, listener);\n        return this;\n      }\n      off(eventName, listener) {\n        super.off(eventName, listener);\n        return this;\n      }\n      addListener(eventName, listener) {\n        super.on(eventName, listener);\n        return this;\n      }\n      prependListener(eventName, listener) {\n        super.prependListener(eventName, listener);\n        return this;\n      }\n      once(eventName, listener) {\n        super.once(eventName, listener);\n        return this;\n      }\n      prependOnceListener(eventName, listener) {\n        super.prependOnceListener(eventName, listener);\n        return this;\n      }\n      removeListener(eventName, listener) {\n        super.off(eventName, listener);\n        return this;\n      }\n      removeAllListeners(eventName) {\n        super.removeAllListeners(eventName);\n        return this;\n      }\n      listenerCount(eventName) {\n        return super.listenerCount(eventName);\n      }\n      listeners(eventName) {\n        return super.listeners(eventName);\n      }\n      rawListeners(eventName) {\n        return super.rawListeners(eventName);\n      }\n    };\n    exports.EnhancedEventEmitter = EnhancedEventEmitter;\n  }\n});\n\n// ../../node_modules/mediasoup-client/lib/errors.js\nvar require_errors = __commonJS({\n  \"../../node_modules/mediasoup-client/lib/errors.js\"(exports) {\n    \"use strict\";\n    init_process();\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.InvalidStateError = exports.UnsupportedError = void 0;\n    var UnsupportedError = class extends Error {\n      constructor(message) {\n        super(message);\n        this.name = \"UnsupportedError\";\n        if (Error.hasOwnProperty(\"captureStackTrace\")) {\n          Error.captureStackTrace(this, UnsupportedError);\n        } else {\n          this.stack = new Error(message).stack;\n        }\n      }\n    };\n    exports.UnsupportedError = UnsupportedError;\n    var InvalidStateError = class extends Error {\n      constructor(message) {\n        super(message);\n        this.name = \"InvalidStateError\";\n        if (Error.hasOwnProperty(\"captureStackTrace\")) {\n          Error.captureStackTrace(this, InvalidStateError);\n        } else {\n          this.stack = new Error(message).stack;\n        }\n      }\n    };\n    exports.InvalidStateError = InvalidStateError;\n  }\n});\n\n// ../../node_modules/mediasoup-client/lib/utils.js\nvar require_utils2 = __commonJS({\n  \"../../node_modules/mediasoup-client/lib/utils.js\"(exports) {\n    \"use strict\";\n    init_process();\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.generateRandomNumber = exports.clone = void 0;\n    function clone(data, defaultValue) {\n      if (typeof data === \"undefined\") {\n        return defaultValue;\n      }\n      return JSON.parse(JSON.stringify(data));\n    }\n    exports.clone = clone;\n    function generateRandomNumber() {\n      return Math.round(Math.random() * 1e7);\n    }\n    exports.generateRandomNumber = generateRandomNumber;\n  }\n});\n\n// ../../node_modules/h264-profile-level-id/index.js\nvar require_h264_profile_level_id = __commonJS({\n  \"../../node_modules/h264-profile-level-id/index.js\"(exports) {\n    init_process();\n    var debug = require_browser2()(\"h264-profile-level-id\");\n    debug.log = console.info.bind(console);\n    var ProfileConstrainedBaseline = 1;\n    var ProfileBaseline = 2;\n    var ProfileMain = 3;\n    var ProfileConstrainedHigh = 4;\n    var ProfileHigh = 5;\n    exports.ProfileConstrainedBaseline = ProfileConstrainedBaseline;\n    exports.ProfileBaseline = ProfileBaseline;\n    exports.ProfileMain = ProfileMain;\n    exports.ProfileConstrainedHigh = ProfileConstrainedHigh;\n    exports.ProfileHigh = ProfileHigh;\n    var Level1_b = 0;\n    var Level1 = 10;\n    var Level1_1 = 11;\n    var Level1_2 = 12;\n    var Level1_3 = 13;\n    var Level2 = 20;\n    var Level2_1 = 21;\n    var Level2_2 = 22;\n    var Level3 = 30;\n    var Level3_1 = 31;\n    var Level3_2 = 32;\n    var Level4 = 40;\n    var Level4_1 = 41;\n    var Level4_2 = 42;\n    var Level5 = 50;\n    var Level5_1 = 51;\n    var Level5_2 = 52;\n    exports.Level1_b = Level1_b;\n    exports.Level1 = Level1;\n    exports.Level1_1 = Level1_1;\n    exports.Level1_2 = Level1_2;\n    exports.Level1_3 = Level1_3;\n    exports.Level2 = Level2;\n    exports.Level2_1 = Level2_1;\n    exports.Level2_2 = Level2_2;\n    exports.Level3 = Level3;\n    exports.Level3_1 = Level3_1;\n    exports.Level3_2 = Level3_2;\n    exports.Level4 = Level4;\n    exports.Level4_1 = Level4_1;\n    exports.Level4_2 = Level4_2;\n    exports.Level5 = Level5;\n    exports.Level5_1 = Level5_1;\n    exports.Level5_2 = Level5_2;\n    var ProfileLevelId = class {\n      constructor(profile, level) {\n        this.profile = profile;\n        this.level = level;\n      }\n    };\n    exports.ProfileLevelId = ProfileLevelId;\n    var DefaultProfileLevelId = new ProfileLevelId(ProfileConstrainedBaseline, Level3_1);\n    var ConstraintSet3Flag = 16;\n    var BitPattern = class {\n      constructor(str) {\n        this._mask = ~byteMaskString(\"x\", str);\n        this._maskedValue = byteMaskString(\"1\", str);\n      }\n      isMatch(value) {\n        return this._maskedValue === (value & this._mask);\n      }\n    };\n    var ProfilePattern = class {\n      constructor(profile_idc, profile_iop, profile) {\n        this.profile_idc = profile_idc;\n        this.profile_iop = profile_iop;\n        this.profile = profile;\n      }\n    };\n    var ProfilePatterns = [\n      new ProfilePattern(66, new BitPattern(\"x1xx0000\"), ProfileConstrainedBaseline),\n      new ProfilePattern(77, new BitPattern(\"1xxx0000\"), ProfileConstrainedBaseline),\n      new ProfilePattern(88, new BitPattern(\"11xx0000\"), ProfileConstrainedBaseline),\n      new ProfilePattern(66, new BitPattern(\"x0xx0000\"), ProfileBaseline),\n      new ProfilePattern(88, new BitPattern(\"10xx0000\"), ProfileBaseline),\n      new ProfilePattern(77, new BitPattern(\"0x0x0000\"), ProfileMain),\n      new ProfilePattern(100, new BitPattern(\"00000000\"), ProfileHigh),\n      new ProfilePattern(100, new BitPattern(\"00001100\"), ProfileConstrainedHigh)\n    ];\n    exports.parseProfileLevelId = function(str) {\n      if (typeof str !== \"string\" || str.length !== 6)\n        return null;\n      const profile_level_id_numeric = parseInt(str, 16);\n      if (profile_level_id_numeric === 0)\n        return null;\n      const level_idc = profile_level_id_numeric & 255;\n      const profile_iop = profile_level_id_numeric >> 8 & 255;\n      const profile_idc = profile_level_id_numeric >> 16 & 255;\n      let level;\n      switch (level_idc) {\n        case Level1_1: {\n          level = (profile_iop & ConstraintSet3Flag) !== 0 ? Level1_b : Level1_1;\n          break;\n        }\n        case Level1:\n        case Level1_2:\n        case Level1_3:\n        case Level2:\n        case Level2_1:\n        case Level2_2:\n        case Level3:\n        case Level3_1:\n        case Level3_2:\n        case Level4:\n        case Level4_1:\n        case Level4_2:\n        case Level5:\n        case Level5_1:\n        case Level5_2: {\n          level = level_idc;\n          break;\n        }\n        default: {\n          debug(\"parseProfileLevelId() | unrecognized level_idc:%s\", level_idc);\n          return null;\n        }\n      }\n      for (const pattern of ProfilePatterns) {\n        if (profile_idc === pattern.profile_idc && pattern.profile_iop.isMatch(profile_iop)) {\n          return new ProfileLevelId(pattern.profile, level);\n        }\n      }\n      debug(\"parseProfileLevelId() | unrecognized profile_idc/profile_iop combination\");\n      return null;\n    };\n    exports.profileLevelIdToString = function(profile_level_id) {\n      if (profile_level_id.level == Level1_b) {\n        switch (profile_level_id.profile) {\n          case ProfileConstrainedBaseline: {\n            return \"42f00b\";\n          }\n          case ProfileBaseline: {\n            return \"42100b\";\n          }\n          case ProfileMain: {\n            return \"4d100b\";\n          }\n          default: {\n            debug(\n              \"profileLevelIdToString() | Level 1_b not is allowed for profile:%s\",\n              profile_level_id.profile\n            );\n            return null;\n          }\n        }\n      }\n      let profile_idc_iop_string;\n      switch (profile_level_id.profile) {\n        case ProfileConstrainedBaseline: {\n          profile_idc_iop_string = \"42e0\";\n          break;\n        }\n        case ProfileBaseline: {\n          profile_idc_iop_string = \"4200\";\n          break;\n        }\n        case ProfileMain: {\n          profile_idc_iop_string = \"4d00\";\n          break;\n        }\n        case ProfileConstrainedHigh: {\n          profile_idc_iop_string = \"640c\";\n          break;\n        }\n        case ProfileHigh: {\n          profile_idc_iop_string = \"6400\";\n          break;\n        }\n        default: {\n          debug(\n            \"profileLevelIdToString() | unrecognized profile:%s\",\n            profile_level_id.profile\n          );\n          return null;\n        }\n      }\n      let levelStr = profile_level_id.level.toString(16);\n      if (levelStr.length === 1)\n        levelStr = `0${levelStr}`;\n      return `${profile_idc_iop_string}${levelStr}`;\n    };\n    exports.parseSdpProfileLevelId = function(params = {}) {\n      const profile_level_id = params[\"profile-level-id\"];\n      return !profile_level_id ? DefaultProfileLevelId : exports.parseProfileLevelId(profile_level_id);\n    };\n    exports.isSameProfile = function(params1 = {}, params2 = {}) {\n      const profile_level_id_1 = exports.parseSdpProfileLevelId(params1);\n      const profile_level_id_2 = exports.parseSdpProfileLevelId(params2);\n      return Boolean(\n        profile_level_id_1 && profile_level_id_2 && profile_level_id_1.profile === profile_level_id_2.profile\n      );\n    };\n    exports.generateProfileLevelIdForAnswer = function(local_supported_params = {}, remote_offered_params = {}) {\n      if (!local_supported_params[\"profile-level-id\"] && !remote_offered_params[\"profile-level-id\"]) {\n        debug(\n          \"generateProfileLevelIdForAnswer() | no profile-level-id in local and remote params\"\n        );\n        return null;\n      }\n      const local_profile_level_id = exports.parseSdpProfileLevelId(local_supported_params);\n      const remote_profile_level_id = exports.parseSdpProfileLevelId(remote_offered_params);\n      if (!local_profile_level_id)\n        throw new TypeError(\"invalid local_profile_level_id\");\n      if (!remote_profile_level_id)\n        throw new TypeError(\"invalid remote_profile_level_id\");\n      if (local_profile_level_id.profile !== remote_profile_level_id.profile)\n        throw new TypeError(\"H264 Profile mismatch\");\n      const level_asymmetry_allowed = isLevelAsymmetryAllowed(local_supported_params) && isLevelAsymmetryAllowed(remote_offered_params);\n      const local_level = local_profile_level_id.level;\n      const remote_level = remote_profile_level_id.level;\n      const min_level = minLevel(local_level, remote_level);\n      const answer_level = level_asymmetry_allowed ? local_level : min_level;\n      debug(\n        \"generateProfileLevelIdForAnswer() | result: [profile:%s, level:%s]\",\n        local_profile_level_id.profile,\n        answer_level\n      );\n      return exports.profileLevelIdToString(\n        new ProfileLevelId(local_profile_level_id.profile, answer_level)\n      );\n    };\n    function byteMaskString(c, str) {\n      return (str[0] === c) << 7 | (str[1] === c) << 6 | (str[2] === c) << 5 | (str[3] === c) << 4 | (str[4] === c) << 3 | (str[5] === c) << 2 | (str[6] === c) << 1 | (str[7] === c) << 0;\n    }\n    function isLessLevel(a, b) {\n      if (a === Level1_b)\n        return b !== Level1 && b !== Level1_b;\n      if (b === Level1_b)\n        return a !== Level1;\n      return a < b;\n    }\n    function minLevel(a, b) {\n      return isLessLevel(a, b) ? a : b;\n    }\n    function isLevelAsymmetryAllowed(params = {}) {\n      const level_asymmetry_allowed = params[\"level-asymmetry-allowed\"];\n      return level_asymmetry_allowed === 1 || level_asymmetry_allowed === \"1\";\n    }\n  }\n});\n\n// ../../node_modules/mediasoup-client/lib/ortc.js\nvar require_ortc = __commonJS({\n  \"../../node_modules/mediasoup-client/lib/ortc.js\"(exports) {\n    \"use strict\";\n    init_process();\n    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {\n      if (k2 === void 0)\n        k2 = k;\n      var desc = Object.getOwnPropertyDescriptor(m, k);\n      if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n        desc = { enumerable: true, get: function() {\n          return m[k];\n        } };\n      }\n      Object.defineProperty(o2, k2, desc);\n    } : function(o2, m, k, k2) {\n      if (k2 === void 0)\n        k2 = k;\n      o2[k2] = m[k];\n    });\n    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {\n      Object.defineProperty(o2, \"default\", { enumerable: true, value: v });\n    } : function(o2, v) {\n      o2[\"default\"] = v;\n    });\n    var __importStar = exports && exports.__importStar || function(mod) {\n      if (mod && mod.__esModule)\n        return mod;\n      var result2 = {};\n      if (mod != null) {\n        for (var k in mod)\n          if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k))\n            __createBinding(result2, mod, k);\n      }\n      __setModuleDefault(result2, mod);\n      return result2;\n    };\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.canReceive = exports.canSend = exports.generateProbatorRtpParameters = exports.reduceCodecs = exports.getSendingRemoteRtpParameters = exports.getSendingRtpParameters = exports.getRecvRtpCapabilities = exports.getExtendedRtpCapabilities = exports.validateSctpStreamParameters = exports.validateSctpParameters = exports.validateNumSctpStreams = exports.validateSctpCapabilities = exports.validateRtcpParameters = exports.validateRtpEncodingParameters = exports.validateRtpHeaderExtensionParameters = exports.validateRtpCodecParameters = exports.validateRtpParameters = exports.validateRtpHeaderExtension = exports.validateRtcpFeedback = exports.validateRtpCodecCapability = exports.validateRtpCapabilities = void 0;\n    var h264 = __importStar(require_h264_profile_level_id());\n    var utils = __importStar(require_utils2());\n    var RTP_PROBATOR_MID = \"probator\";\n    var RTP_PROBATOR_SSRC = 1234;\n    var RTP_PROBATOR_CODEC_PAYLOAD_TYPE = 127;\n    function validateRtpCapabilities(caps) {\n      if (typeof caps !== \"object\") {\n        throw new TypeError(\"caps is not an object\");\n      }\n      if (caps.codecs && !Array.isArray(caps.codecs)) {\n        throw new TypeError(\"caps.codecs is not an array\");\n      } else if (!caps.codecs) {\n        caps.codecs = [];\n      }\n      for (const codec of caps.codecs) {\n        validateRtpCodecCapability(codec);\n      }\n      if (caps.headerExtensions && !Array.isArray(caps.headerExtensions)) {\n        throw new TypeError(\"caps.headerExtensions is not an array\");\n      } else if (!caps.headerExtensions) {\n        caps.headerExtensions = [];\n      }\n      for (const ext of caps.headerExtensions) {\n        validateRtpHeaderExtension(ext);\n      }\n    }\n    exports.validateRtpCapabilities = validateRtpCapabilities;\n    function validateRtpCodecCapability(codec) {\n      const MimeTypeRegex = new RegExp(\"^(audio|video)/(.+)\", \"i\");\n      if (typeof codec !== \"object\") {\n        throw new TypeError(\"codec is not an object\");\n      }\n      if (!codec.mimeType || typeof codec.mimeType !== \"string\") {\n        throw new TypeError(\"missing codec.mimeType\");\n      }\n      const mimeTypeMatch = MimeTypeRegex.exec(codec.mimeType);\n      if (!mimeTypeMatch) {\n        throw new TypeError(\"invalid codec.mimeType\");\n      }\n      codec.kind = mimeTypeMatch[1].toLowerCase();\n      if (codec.preferredPayloadType && typeof codec.preferredPayloadType !== \"number\") {\n        throw new TypeError(\"invalid codec.preferredPayloadType\");\n      }\n      if (typeof codec.clockRate !== \"number\") {\n        throw new TypeError(\"missing codec.clockRate\");\n      }\n      if (codec.kind === \"audio\") {\n        if (typeof codec.channels !== \"number\") {\n          codec.channels = 1;\n        }\n      } else {\n        delete codec.channels;\n      }\n      if (!codec.parameters || typeof codec.parameters !== \"object\") {\n        codec.parameters = {};\n      }\n      for (const key of Object.keys(codec.parameters)) {\n        let value = codec.parameters[key];\n        if (value === void 0) {\n          codec.parameters[key] = \"\";\n          value = \"\";\n        }\n        if (typeof value !== \"string\" && typeof value !== \"number\") {\n          throw new TypeError(`invalid codec parameter [key:${key}s, value:${value}]`);\n        }\n        if (key === \"apt\") {\n          if (typeof value !== \"number\") {\n            throw new TypeError(\"invalid codec apt parameter\");\n          }\n        }\n      }\n      if (!codec.rtcpFeedback || !Array.isArray(codec.rtcpFeedback)) {\n        codec.rtcpFeedback = [];\n      }\n      for (const fb of codec.rtcpFeedback) {\n        validateRtcpFeedback(fb);\n      }\n    }\n    exports.validateRtpCodecCapability = validateRtpCodecCapability;\n    function validateRtcpFeedback(fb) {\n      if (typeof fb !== \"object\") {\n        throw new TypeError(\"fb is not an object\");\n      }\n      if (!fb.type || typeof fb.type !== \"string\") {\n        throw new TypeError(\"missing fb.type\");\n      }\n      if (!fb.parameter || typeof fb.parameter !== \"string\") {\n        fb.parameter = \"\";\n      }\n    }\n    exports.validateRtcpFeedback = validateRtcpFeedback;\n    function validateRtpHeaderExtension(ext) {\n      if (typeof ext !== \"object\") {\n        throw new TypeError(\"ext is not an object\");\n      }\n      if (ext.kind !== \"audio\" && ext.kind !== \"video\") {\n        throw new TypeError(\"invalid ext.kind\");\n      }\n      if (!ext.uri || typeof ext.uri !== \"string\") {\n        throw new TypeError(\"missing ext.uri\");\n      }\n      if (typeof ext.preferredId !== \"number\") {\n        throw new TypeError(\"missing ext.preferredId\");\n      }\n      if (ext.preferredEncrypt && typeof ext.preferredEncrypt !== \"boolean\") {\n        throw new TypeError(\"invalid ext.preferredEncrypt\");\n      } else if (!ext.preferredEncrypt) {\n        ext.preferredEncrypt = false;\n      }\n      if (ext.direction && typeof ext.direction !== \"string\") {\n        throw new TypeError(\"invalid ext.direction\");\n      } else if (!ext.direction) {\n        ext.direction = \"sendrecv\";\n      }\n    }\n    exports.validateRtpHeaderExtension = validateRtpHeaderExtension;\n    function validateRtpParameters(params) {\n      if (typeof params !== \"object\") {\n        throw new TypeError(\"params is not an object\");\n      }\n      if (params.mid && typeof params.mid !== \"string\") {\n        throw new TypeError(\"params.mid is not a string\");\n      }\n      if (!Array.isArray(params.codecs)) {\n        throw new TypeError(\"missing params.codecs\");\n      }\n      for (const codec of params.codecs) {\n        validateRtpCodecParameters(codec);\n      }\n      if (params.headerExtensions && !Array.isArray(params.headerExtensions)) {\n        throw new TypeError(\"params.headerExtensions is not an array\");\n      } else if (!params.headerExtensions) {\n        params.headerExtensions = [];\n      }\n      for (const ext of params.headerExtensions) {\n        validateRtpHeaderExtensionParameters(ext);\n      }\n      if (params.encodings && !Array.isArray(params.encodings)) {\n        throw new TypeError(\"params.encodings is not an array\");\n      } else if (!params.encodings) {\n        params.encodings = [];\n      }\n      for (const encoding of params.encodings) {\n        validateRtpEncodingParameters(encoding);\n      }\n      if (params.rtcp && typeof params.rtcp !== \"object\") {\n        throw new TypeError(\"params.rtcp is not an object\");\n      } else if (!params.rtcp) {\n        params.rtcp = {};\n      }\n      validateRtcpParameters(params.rtcp);\n    }\n    exports.validateRtpParameters = validateRtpParameters;\n    function validateRtpCodecParameters(codec) {\n      const MimeTypeRegex = new RegExp(\"^(audio|video)/(.+)\", \"i\");\n      if (typeof codec !== \"object\") {\n        throw new TypeError(\"codec is not an object\");\n      }\n      if (!codec.mimeType || typeof codec.mimeType !== \"string\") {\n        throw new TypeError(\"missing codec.mimeType\");\n      }\n      const mimeTypeMatch = MimeTypeRegex.exec(codec.mimeType);\n      if (!mimeTypeMatch) {\n        throw new TypeError(\"invalid codec.mimeType\");\n      }\n      if (typeof codec.payloadType !== \"number\") {\n        throw new TypeError(\"missing codec.payloadType\");\n      }\n      if (typeof codec.clockRate !== \"number\") {\n        throw new TypeError(\"missing codec.clockRate\");\n      }\n      const kind = mimeTypeMatch[1].toLowerCase();\n      if (kind === \"audio\") {\n        if (typeof codec.channels !== \"number\") {\n          codec.channels = 1;\n        }\n      } else {\n        delete codec.channels;\n      }\n      if (!codec.parameters || typeof codec.parameters !== \"object\") {\n        codec.parameters = {};\n      }\n      for (const key of Object.keys(codec.parameters)) {\n        let value = codec.parameters[key];\n        if (value === void 0) {\n          codec.parameters[key] = \"\";\n          value = \"\";\n        }\n        if (typeof value !== \"string\" && typeof value !== \"number\") {\n          throw new TypeError(`invalid codec parameter [key:${key}s, value:${value}]`);\n        }\n        if (key === \"apt\") {\n          if (typeof value !== \"number\") {\n            throw new TypeError(\"invalid codec apt parameter\");\n          }\n        }\n      }\n      if (!codec.rtcpFeedback || !Array.isArray(codec.rtcpFeedback)) {\n        codec.rtcpFeedback = [];\n      }\n      for (const fb of codec.rtcpFeedback) {\n        validateRtcpFeedback(fb);\n      }\n    }\n    exports.validateRtpCodecParameters = validateRtpCodecParameters;\n    function validateRtpHeaderExtensionParameters(ext) {\n      if (typeof ext !== \"object\") {\n        throw new TypeError(\"ext is not an object\");\n      }\n      if (!ext.uri || typeof ext.uri !== \"string\") {\n        throw new TypeError(\"missing ext.uri\");\n      }\n      if (typeof ext.id !== \"number\") {\n        throw new TypeError(\"missing ext.id\");\n      }\n      if (ext.encrypt && typeof ext.encrypt !== \"boolean\") {\n        throw new TypeError(\"invalid ext.encrypt\");\n      } else if (!ext.encrypt) {\n        ext.encrypt = false;\n      }\n      if (!ext.parameters || typeof ext.parameters !== \"object\") {\n        ext.parameters = {};\n      }\n      for (const key of Object.keys(ext.parameters)) {\n        let value = ext.parameters[key];\n        if (value === void 0) {\n          ext.parameters[key] = \"\";\n          value = \"\";\n        }\n        if (typeof value !== \"string\" && typeof value !== \"number\") {\n          throw new TypeError(\"invalid header extension parameter\");\n        }\n      }\n    }\n    exports.validateRtpHeaderExtensionParameters = validateRtpHeaderExtensionParameters;\n    function validateRtpEncodingParameters(encoding) {\n      if (typeof encoding !== \"object\") {\n        throw new TypeError(\"encoding is not an object\");\n      }\n      if (encoding.ssrc && typeof encoding.ssrc !== \"number\") {\n        throw new TypeError(\"invalid encoding.ssrc\");\n      }\n      if (encoding.rid && typeof encoding.rid !== \"string\") {\n        throw new TypeError(\"invalid encoding.rid\");\n      }\n      if (encoding.rtx && typeof encoding.rtx !== \"object\") {\n        throw new TypeError(\"invalid encoding.rtx\");\n      } else if (encoding.rtx) {\n        if (typeof encoding.rtx.ssrc !== \"number\") {\n          throw new TypeError(\"missing encoding.rtx.ssrc\");\n        }\n      }\n      if (!encoding.dtx || typeof encoding.dtx !== \"boolean\") {\n        encoding.dtx = false;\n      }\n      if (encoding.scalabilityMode && typeof encoding.scalabilityMode !== \"string\") {\n        throw new TypeError(\"invalid encoding.scalabilityMode\");\n      }\n    }\n    exports.validateRtpEncodingParameters = validateRtpEncodingParameters;\n    function validateRtcpParameters(rtcp) {\n      if (typeof rtcp !== \"object\") {\n        throw new TypeError(\"rtcp is not an object\");\n      }\n      if (rtcp.cname && typeof rtcp.cname !== \"string\") {\n        throw new TypeError(\"invalid rtcp.cname\");\n      }\n      if (!rtcp.reducedSize || typeof rtcp.reducedSize !== \"boolean\") {\n        rtcp.reducedSize = true;\n      }\n    }\n    exports.validateRtcpParameters = validateRtcpParameters;\n    function validateSctpCapabilities(caps) {\n      if (typeof caps !== \"object\") {\n        throw new TypeError(\"caps is not an object\");\n      }\n      if (!caps.numStreams || typeof caps.numStreams !== \"object\") {\n        throw new TypeError(\"missing caps.numStreams\");\n      }\n      validateNumSctpStreams(caps.numStreams);\n    }\n    exports.validateSctpCapabilities = validateSctpCapabilities;\n    function validateNumSctpStreams(numStreams) {\n      if (typeof numStreams !== \"object\") {\n        throw new TypeError(\"numStreams is not an object\");\n      }\n      if (typeof numStreams.OS !== \"number\") {\n        throw new TypeError(\"missing numStreams.OS\");\n      }\n      if (typeof numStreams.MIS !== \"number\") {\n        throw new TypeError(\"missing numStreams.MIS\");\n      }\n    }\n    exports.validateNumSctpStreams = validateNumSctpStreams;\n    function validateSctpParameters(params) {\n      if (typeof params !== \"object\") {\n        throw new TypeError(\"params is not an object\");\n      }\n      if (typeof params.port !== \"number\") {\n        throw new TypeError(\"missing params.port\");\n      }\n      if (typeof params.OS !== \"number\") {\n        throw new TypeError(\"missing params.OS\");\n      }\n      if (typeof params.MIS !== \"number\") {\n        throw new TypeError(\"missing params.MIS\");\n      }\n      if (typeof params.maxMessageSize !== \"number\") {\n        throw new TypeError(\"missing params.maxMessageSize\");\n      }\n    }\n    exports.validateSctpParameters = validateSctpParameters;\n    function validateSctpStreamParameters(params) {\n      if (typeof params !== \"object\") {\n        throw new TypeError(\"params is not an object\");\n      }\n      if (typeof params.streamId !== \"number\") {\n        throw new TypeError(\"missing params.streamId\");\n      }\n      let orderedGiven = false;\n      if (typeof params.ordered === \"boolean\") {\n        orderedGiven = true;\n      } else {\n        params.ordered = true;\n      }\n      if (params.maxPacketLifeTime && typeof params.maxPacketLifeTime !== \"number\") {\n        throw new TypeError(\"invalid params.maxPacketLifeTime\");\n      }\n      if (params.maxRetransmits && typeof params.maxRetransmits !== \"number\") {\n        throw new TypeError(\"invalid params.maxRetransmits\");\n      }\n      if (params.maxPacketLifeTime && params.maxRetransmits) {\n        throw new TypeError(\"cannot provide both maxPacketLifeTime and maxRetransmits\");\n      }\n      if (orderedGiven && params.ordered && (params.maxPacketLifeTime || params.maxRetransmits)) {\n        throw new TypeError(\"cannot be ordered with maxPacketLifeTime or maxRetransmits\");\n      } else if (!orderedGiven && (params.maxPacketLifeTime || params.maxRetransmits)) {\n        params.ordered = false;\n      }\n      if (params.label && typeof params.label !== \"string\") {\n        throw new TypeError(\"invalid params.label\");\n      }\n      if (params.protocol && typeof params.protocol !== \"string\") {\n        throw new TypeError(\"invalid params.protocol\");\n      }\n    }\n    exports.validateSctpStreamParameters = validateSctpStreamParameters;\n    function getExtendedRtpCapabilities(localCaps, remoteCaps) {\n      const extendedRtpCapabilities = {\n        codecs: [],\n        headerExtensions: []\n      };\n      for (const remoteCodec of remoteCaps.codecs || []) {\n        if (isRtxCodec(remoteCodec)) {\n          continue;\n        }\n        const matchingLocalCodec = (localCaps.codecs || []).find((localCodec) => matchCodecs(localCodec, remoteCodec, { strict: true, modify: true }));\n        if (!matchingLocalCodec) {\n          continue;\n        }\n        const extendedCodec = {\n          mimeType: matchingLocalCodec.mimeType,\n          kind: matchingLocalCodec.kind,\n          clockRate: matchingLocalCodec.clockRate,\n          channels: matchingLocalCodec.channels,\n          localPayloadType: matchingLocalCodec.preferredPayloadType,\n          localRtxPayloadType: void 0,\n          remotePayloadType: remoteCodec.preferredPayloadType,\n          remoteRtxPayloadType: void 0,\n          localParameters: matchingLocalCodec.parameters,\n          remoteParameters: remoteCodec.parameters,\n          rtcpFeedback: reduceRtcpFeedback(matchingLocalCodec, remoteCodec)\n        };\n        extendedRtpCapabilities.codecs.push(extendedCodec);\n      }\n      for (const extendedCodec of extendedRtpCapabilities.codecs) {\n        const matchingLocalRtxCodec = localCaps.codecs.find((localCodec) => isRtxCodec(localCodec) && localCodec.parameters.apt === extendedCodec.localPayloadType);\n        const matchingRemoteRtxCodec = remoteCaps.codecs.find((remoteCodec) => isRtxCodec(remoteCodec) && remoteCodec.parameters.apt === extendedCodec.remotePayloadType);\n        if (matchingLocalRtxCodec && matchingRemoteRtxCodec) {\n          extendedCodec.localRtxPayloadType = matchingLocalRtxCodec.preferredPayloadType;\n          extendedCodec.remoteRtxPayloadType = matchingRemoteRtxCodec.preferredPayloadType;\n        }\n      }\n      for (const remoteExt of remoteCaps.headerExtensions) {\n        const matchingLocalExt = localCaps.headerExtensions.find((localExt) => matchHeaderExtensions(localExt, remoteExt));\n        if (!matchingLocalExt) {\n          continue;\n        }\n        const extendedExt = {\n          kind: remoteExt.kind,\n          uri: remoteExt.uri,\n          sendId: matchingLocalExt.preferredId,\n          recvId: remoteExt.preferredId,\n          encrypt: matchingLocalExt.preferredEncrypt,\n          direction: \"sendrecv\"\n        };\n        switch (remoteExt.direction) {\n          case \"sendrecv\":\n            extendedExt.direction = \"sendrecv\";\n            break;\n          case \"recvonly\":\n            extendedExt.direction = \"sendonly\";\n            break;\n          case \"sendonly\":\n            extendedExt.direction = \"recvonly\";\n            break;\n          case \"inactive\":\n            extendedExt.direction = \"inactive\";\n            break;\n        }\n        extendedRtpCapabilities.headerExtensions.push(extendedExt);\n      }\n      return extendedRtpCapabilities;\n    }\n    exports.getExtendedRtpCapabilities = getExtendedRtpCapabilities;\n    function getRecvRtpCapabilities(extendedRtpCapabilities) {\n      const rtpCapabilities = {\n        codecs: [],\n        headerExtensions: []\n      };\n      for (const extendedCodec of extendedRtpCapabilities.codecs) {\n        const codec = {\n          mimeType: extendedCodec.mimeType,\n          kind: extendedCodec.kind,\n          preferredPayloadType: extendedCodec.remotePayloadType,\n          clockRate: extendedCodec.clockRate,\n          channels: extendedCodec.channels,\n          parameters: extendedCodec.localParameters,\n          rtcpFeedback: extendedCodec.rtcpFeedback\n        };\n        rtpCapabilities.codecs.push(codec);\n        if (!extendedCodec.remoteRtxPayloadType) {\n          continue;\n        }\n        const rtxCodec = {\n          mimeType: `${extendedCodec.kind}/rtx`,\n          kind: extendedCodec.kind,\n          preferredPayloadType: extendedCodec.remoteRtxPayloadType,\n          clockRate: extendedCodec.clockRate,\n          parameters: {\n            apt: extendedCodec.remotePayloadType\n          },\n          rtcpFeedback: []\n        };\n        rtpCapabilities.codecs.push(rtxCodec);\n      }\n      for (const extendedExtension of extendedRtpCapabilities.headerExtensions) {\n        if (extendedExtension.direction !== \"sendrecv\" && extendedExtension.direction !== \"recvonly\") {\n          continue;\n        }\n        const ext = {\n          kind: extendedExtension.kind,\n          uri: extendedExtension.uri,\n          preferredId: extendedExtension.recvId,\n          preferredEncrypt: extendedExtension.encrypt,\n          direction: extendedExtension.direction\n        };\n        rtpCapabilities.headerExtensions.push(ext);\n      }\n      return rtpCapabilities;\n    }\n    exports.getRecvRtpCapabilities = getRecvRtpCapabilities;\n    function getSendingRtpParameters(kind, extendedRtpCapabilities) {\n      const rtpParameters = {\n        mid: void 0,\n        codecs: [],\n        headerExtensions: [],\n        encodings: [],\n        rtcp: {}\n      };\n      for (const extendedCodec of extendedRtpCapabilities.codecs) {\n        if (extendedCodec.kind !== kind) {\n          continue;\n        }\n        const codec = {\n          mimeType: extendedCodec.mimeType,\n          payloadType: extendedCodec.localPayloadType,\n          clockRate: extendedCodec.clockRate,\n          channels: extendedCodec.channels,\n          parameters: extendedCodec.localParameters,\n          rtcpFeedback: extendedCodec.rtcpFeedback\n        };\n        rtpParameters.codecs.push(codec);\n        if (extendedCodec.localRtxPayloadType) {\n          const rtxCodec = {\n            mimeType: `${extendedCodec.kind}/rtx`,\n            payloadType: extendedCodec.localRtxPayloadType,\n            clockRate: extendedCodec.clockRate,\n            parameters: {\n              apt: extendedCodec.localPayloadType\n            },\n            rtcpFeedback: []\n          };\n          rtpParameters.codecs.push(rtxCodec);\n        }\n      }\n      for (const extendedExtension of extendedRtpCapabilities.headerExtensions) {\n        if (extendedExtension.kind && extendedExtension.kind !== kind || extendedExtension.direction !== \"sendrecv\" && extendedExtension.direction !== \"sendonly\") {\n          continue;\n        }\n        const ext = {\n          uri: extendedExtension.uri,\n          id: extendedExtension.sendId,\n          encrypt: extendedExtension.encrypt,\n          parameters: {}\n        };\n        rtpParameters.headerExtensions.push(ext);\n      }\n      return rtpParameters;\n    }\n    exports.getSendingRtpParameters = getSendingRtpParameters;\n    function getSendingRemoteRtpParameters(kind, extendedRtpCapabilities) {\n      const rtpParameters = {\n        mid: void 0,\n        codecs: [],\n        headerExtensions: [],\n        encodings: [],\n        rtcp: {}\n      };\n      for (const extendedCodec of extendedRtpCapabilities.codecs) {\n        if (extendedCodec.kind !== kind) {\n          continue;\n        }\n        const codec = {\n          mimeType: extendedCodec.mimeType,\n          payloadType: extendedCodec.localPayloadType,\n          clockRate: extendedCodec.clockRate,\n          channels: extendedCodec.channels,\n          parameters: extendedCodec.remoteParameters,\n          rtcpFeedback: extendedCodec.rtcpFeedback\n        };\n        rtpParameters.codecs.push(codec);\n        if (extendedCodec.localRtxPayloadType) {\n          const rtxCodec = {\n            mimeType: `${extendedCodec.kind}/rtx`,\n            payloadType: extendedCodec.localRtxPayloadType,\n            clockRate: extendedCodec.clockRate,\n            parameters: {\n              apt: extendedCodec.localPayloadType\n            },\n            rtcpFeedback: []\n          };\n          rtpParameters.codecs.push(rtxCodec);\n        }\n      }\n      for (const extendedExtension of extendedRtpCapabilities.headerExtensions) {\n        if (extendedExtension.kind && extendedExtension.kind !== kind || extendedExtension.direction !== \"sendrecv\" && extendedExtension.direction !== \"sendonly\") {\n          continue;\n        }\n        const ext = {\n          uri: extendedExtension.uri,\n          id: extendedExtension.sendId,\n          encrypt: extendedExtension.encrypt,\n          parameters: {}\n        };\n        rtpParameters.headerExtensions.push(ext);\n      }\n      if (rtpParameters.headerExtensions.some((ext) => ext.uri === \"http://www.ietf.org/id/draft-holmer-rmcat-transport-wide-cc-extensions-01\")) {\n        for (const codec of rtpParameters.codecs) {\n          codec.rtcpFeedback = (codec.rtcpFeedback || []).filter((fb) => fb.type !== \"goog-remb\");\n        }\n      } else if (rtpParameters.headerExtensions.some((ext) => ext.uri === \"http://www.webrtc.org/experiments/rtp-hdrext/abs-send-time\")) {\n        for (const codec of rtpParameters.codecs) {\n          codec.rtcpFeedback = (codec.rtcpFeedback || []).filter((fb) => fb.type !== \"transport-cc\");\n        }\n      } else {\n        for (const codec of rtpParameters.codecs) {\n          codec.rtcpFeedback = (codec.rtcpFeedback || []).filter((fb) => fb.type !== \"transport-cc\" && fb.type !== \"goog-remb\");\n        }\n      }\n      return rtpParameters;\n    }\n    exports.getSendingRemoteRtpParameters = getSendingRemoteRtpParameters;\n    function reduceCodecs(codecs, capCodec) {\n      const filteredCodecs = [];\n      if (!capCodec) {\n        filteredCodecs.push(codecs[0]);\n        if (isRtxCodec(codecs[1])) {\n          filteredCodecs.push(codecs[1]);\n        }\n      } else {\n        for (let idx = 0; idx < codecs.length; ++idx) {\n          if (matchCodecs(codecs[idx], capCodec)) {\n            filteredCodecs.push(codecs[idx]);\n            if (isRtxCodec(codecs[idx + 1])) {\n              filteredCodecs.push(codecs[idx + 1]);\n            }\n            break;\n          }\n        }\n        if (filteredCodecs.length === 0) {\n          throw new TypeError(\"no matching codec found\");\n        }\n      }\n      return filteredCodecs;\n    }\n    exports.reduceCodecs = reduceCodecs;\n    function generateProbatorRtpParameters(videoRtpParameters) {\n      videoRtpParameters = utils.clone(videoRtpParameters, {});\n      validateRtpParameters(videoRtpParameters);\n      const rtpParameters = {\n        mid: RTP_PROBATOR_MID,\n        codecs: [],\n        headerExtensions: [],\n        encodings: [{ ssrc: RTP_PROBATOR_SSRC }],\n        rtcp: { cname: \"probator\" }\n      };\n      rtpParameters.codecs.push(videoRtpParameters.codecs[0]);\n      rtpParameters.codecs[0].payloadType = RTP_PROBATOR_CODEC_PAYLOAD_TYPE;\n      rtpParameters.headerExtensions = videoRtpParameters.headerExtensions;\n      return rtpParameters;\n    }\n    exports.generateProbatorRtpParameters = generateProbatorRtpParameters;\n    function canSend(kind, extendedRtpCapabilities) {\n      return extendedRtpCapabilities.codecs.some((codec) => codec.kind === kind);\n    }\n    exports.canSend = canSend;\n    function canReceive(rtpParameters, extendedRtpCapabilities) {\n      validateRtpParameters(rtpParameters);\n      if (rtpParameters.codecs.length === 0) {\n        return false;\n      }\n      const firstMediaCodec = rtpParameters.codecs[0];\n      return extendedRtpCapabilities.codecs.some((codec) => codec.remotePayloadType === firstMediaCodec.payloadType);\n    }\n    exports.canReceive = canReceive;\n    function isRtxCodec(codec) {\n      if (!codec) {\n        return false;\n      }\n      return /.+\\/rtx$/i.test(codec.mimeType);\n    }\n    function matchCodecs(aCodec, bCodec, { strict = false, modify = false } = {}) {\n      const aMimeType = aCodec.mimeType.toLowerCase();\n      const bMimeType = bCodec.mimeType.toLowerCase();\n      if (aMimeType !== bMimeType) {\n        return false;\n      }\n      if (aCodec.clockRate !== bCodec.clockRate) {\n        return false;\n      }\n      if (aCodec.channels !== bCodec.channels) {\n        return false;\n      }\n      switch (aMimeType) {\n        case \"video/h264\": {\n          if (strict) {\n            const aPacketizationMode = aCodec.parameters[\"packetization-mode\"] || 0;\n            const bPacketizationMode = bCodec.parameters[\"packetization-mode\"] || 0;\n            if (aPacketizationMode !== bPacketizationMode) {\n              return false;\n            }\n            if (!h264.isSameProfile(aCodec.parameters, bCodec.parameters)) {\n              return false;\n            }\n            let selectedProfileLevelId;\n            try {\n              selectedProfileLevelId = h264.generateProfileLevelIdForAnswer(aCodec.parameters, bCodec.parameters);\n            } catch (error) {\n              return false;\n            }\n            if (modify) {\n              if (selectedProfileLevelId) {\n                aCodec.parameters[\"profile-level-id\"] = selectedProfileLevelId;\n                bCodec.parameters[\"profile-level-id\"] = selectedProfileLevelId;\n              } else {\n                delete aCodec.parameters[\"profile-level-id\"];\n                delete bCodec.parameters[\"profile-level-id\"];\n              }\n            }\n          }\n          break;\n        }\n        case \"video/vp9\": {\n          if (strict) {\n            const aProfileId = aCodec.parameters[\"profile-id\"] || 0;\n            const bProfileId = bCodec.parameters[\"profile-id\"] || 0;\n            if (aProfileId !== bProfileId) {\n              return false;\n            }\n          }\n          break;\n        }\n      }\n      return true;\n    }\n    function matchHeaderExtensions(aExt, bExt) {\n      if (aExt.kind && bExt.kind && aExt.kind !== bExt.kind) {\n        return false;\n      }\n      if (aExt.uri !== bExt.uri) {\n        return false;\n      }\n      return true;\n    }\n    function reduceRtcpFeedback(codecA, codecB) {\n      const reducedRtcpFeedback = [];\n      for (const aFb of codecA.rtcpFeedback || []) {\n        const matchingBFb = (codecB.rtcpFeedback || []).find((bFb) => bFb.type === aFb.type && (bFb.parameter === aFb.parameter || !bFb.parameter && !aFb.parameter));\n        if (matchingBFb) {\n          reducedRtcpFeedback.push(matchingBFb);\n        }\n      }\n      return reducedRtcpFeedback;\n    }\n  }\n});\n\n// ../../node_modules/awaitqueue/lib/Logger.js\nvar require_Logger2 = __commonJS({\n  \"../../node_modules/awaitqueue/lib/Logger.js\"(exports) {\n    \"use strict\";\n    init_process();\n    var __importDefault = exports && exports.__importDefault || function(mod) {\n      return mod && mod.__esModule ? mod : { \"default\": mod };\n    };\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.Logger = void 0;\n    var debug_1 = __importDefault(require_browser2());\n    var LIB_NAME = \"awaitqueue\";\n    var Logger3 = class {\n      constructor(prefix) {\n        if (prefix) {\n          this._debug = (0, debug_1.default)(`${LIB_NAME}:${prefix}`);\n          this._warn = (0, debug_1.default)(`${LIB_NAME}:WARN:${prefix}`);\n          this._error = (0, debug_1.default)(`${LIB_NAME}:ERROR:${prefix}`);\n        } else {\n          this._debug = (0, debug_1.default)(LIB_NAME);\n          this._warn = (0, debug_1.default)(`${LIB_NAME}:WARN`);\n          this._error = (0, debug_1.default)(`${LIB_NAME}:ERROR`);\n        }\n        this._debug.log = console.info.bind(console);\n        this._warn.log = console.warn.bind(console);\n        this._error.log = console.error.bind(console);\n      }\n      get debug() {\n        return this._debug;\n      }\n      get warn() {\n        return this._warn;\n      }\n      get error() {\n        return this._error;\n      }\n    };\n    exports.Logger = Logger3;\n  }\n});\n\n// ../../node_modules/awaitqueue/lib/index.js\nvar require_lib2 = __commonJS({\n  \"../../node_modules/awaitqueue/lib/index.js\"(exports) {\n    \"use strict\";\n    init_process();\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.AwaitQueue = exports.AwaitQueueRemovedTaskError = exports.AwaitQueueStoppedError = void 0;\n    var Logger_1 = require_Logger2();\n    var logger2 = new Logger_1.Logger();\n    var AwaitQueueStoppedError = class extends Error {\n      constructor(message) {\n        super(message !== null && message !== void 0 ? message : \"AwaitQueue stopped\");\n        this.name = \"AwaitQueueStoppedError\";\n        if (typeof Error.captureStackTrace === \"function\") {\n          Error.captureStackTrace(this, AwaitQueueStoppedError);\n        }\n      }\n    };\n    exports.AwaitQueueStoppedError = AwaitQueueStoppedError;\n    var AwaitQueueRemovedTaskError = class extends Error {\n      constructor(message) {\n        super(message !== null && message !== void 0 ? message : \"AwaitQueue task removed\");\n        this.name = \"AwaitQueueRemovedTaskError\";\n        if (typeof Error.captureStackTrace === \"function\") {\n          Error.captureStackTrace(this, AwaitQueueRemovedTaskError);\n        }\n      }\n    };\n    exports.AwaitQueueRemovedTaskError = AwaitQueueRemovedTaskError;\n    var AwaitQueue = class {\n      constructor() {\n        this.pendingTasks = /* @__PURE__ */ new Map();\n        this.nextTaskId = 0;\n        this.stopping = false;\n      }\n      get size() {\n        return this.pendingTasks.size;\n      }\n      push(task, name) {\n        return __async(this, null, function* () {\n          name = name !== null && name !== void 0 ? name : task.name;\n          logger2.debug(`push() [name:${name}]`);\n          if (typeof task !== \"function\") {\n            throw new TypeError(\"given task is not a function\");\n          }\n          if (name) {\n            try {\n              Object.defineProperty(task, \"name\", { value: name });\n            } catch (error) {\n            }\n          }\n          return new Promise((resolve, reject) => {\n            const pendingTask = {\n              id: this.nextTaskId++,\n              task,\n              name,\n              enqueuedAt: Date.now(),\n              executedAt: void 0,\n              completed: false,\n              resolve: (result2) => {\n                if (pendingTask.completed) {\n                  return;\n                }\n                pendingTask.completed = true;\n                this.pendingTasks.delete(pendingTask.id);\n                logger2.debug(`resolving task [name:${pendingTask.name}]`);\n                resolve(result2);\n                const [nextPendingTask] = this.pendingTasks.values();\n                if (nextPendingTask && !nextPendingTask.executedAt) {\n                  void this.execute(nextPendingTask);\n                }\n              },\n              reject: (error) => {\n                if (pendingTask.completed) {\n                  return;\n                }\n                pendingTask.completed = true;\n                this.pendingTasks.delete(pendingTask.id);\n                logger2.debug(`rejecting task [name:${pendingTask.name}]: %s`, String(error));\n                reject(error);\n                if (!this.stopping) {\n                  const [nextPendingTask] = this.pendingTasks.values();\n                  if (nextPendingTask && !nextPendingTask.executedAt) {\n                    void this.execute(nextPendingTask);\n                  }\n                }\n              }\n            };\n            this.pendingTasks.set(pendingTask.id, pendingTask);\n            if (this.pendingTasks.size === 1) {\n              void this.execute(pendingTask);\n            }\n          });\n        });\n      }\n      stop() {\n        logger2.debug(\"stop()\");\n        this.stopping = true;\n        for (const pendingTask of this.pendingTasks.values()) {\n          logger2.debug(`stop() | stopping task [name:${pendingTask.name}]`);\n          pendingTask.reject(new AwaitQueueStoppedError());\n        }\n        this.stopping = false;\n      }\n      remove(taskIdx) {\n        logger2.debug(`remove() [taskIdx:${taskIdx}]`);\n        const pendingTask = Array.from(this.pendingTasks.values())[taskIdx];\n        if (!pendingTask) {\n          logger2.debug(`stop() | no task with given idx [taskIdx:${taskIdx}]`);\n          return;\n        }\n        pendingTask.reject(new AwaitQueueRemovedTaskError());\n      }\n      dump() {\n        const now = Date.now();\n        let idx = 0;\n        return Array.from(this.pendingTasks.values()).map((pendingTask) => ({\n          idx: idx++,\n          task: pendingTask.task,\n          name: pendingTask.name,\n          enqueuedTime: pendingTask.executedAt ? pendingTask.executedAt - pendingTask.enqueuedAt : now - pendingTask.enqueuedAt,\n          executionTime: pendingTask.executedAt ? now - pendingTask.executedAt : 0\n        }));\n      }\n      execute(pendingTask) {\n        return __async(this, null, function* () {\n          logger2.debug(`execute() [name:${pendingTask.name}]`);\n          if (pendingTask.executedAt) {\n            throw new Error(\"task already being executed\");\n          }\n          pendingTask.executedAt = Date.now();\n          try {\n            const result2 = yield pendingTask.task();\n            pendingTask.resolve(result2);\n          } catch (error) {\n            pendingTask.reject(error);\n          }\n        });\n      }\n    };\n    exports.AwaitQueue = AwaitQueue;\n  }\n});\n\n// ../../node_modules/queue-microtask/index.js\nvar require_queue_microtask = __commonJS({\n  \"../../node_modules/queue-microtask/index.js\"(exports, module) {\n    init_process();\n    var promise;\n    module.exports = typeof queueMicrotask === \"function\" ? queueMicrotask.bind(typeof window !== \"undefined\" ? window : global) : (cb) => (promise || (promise = Promise.resolve())).then(cb).catch((err) => setTimeout(() => {\n      throw err;\n    }, 0));\n  }\n});\n\n// ../../node_modules/mediasoup-client/lib/Producer.js\nvar require_Producer = __commonJS({\n  \"../../node_modules/mediasoup-client/lib/Producer.js\"(exports) {\n    \"use strict\";\n    init_process();\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.Producer = void 0;\n    var Logger_1 = require_Logger();\n    var EnhancedEventEmitter_1 = require_EnhancedEventEmitter();\n    var errors_1 = require_errors();\n    var logger2 = new Logger_1.Logger(\"Producer\");\n    var Producer = class extends EnhancedEventEmitter_1.EnhancedEventEmitter {\n      constructor({ id, localId, rtpSender, track, rtpParameters, stopTracks, disableTrackOnPause, zeroRtpOnPause, appData }) {\n        super();\n        this._closed = false;\n        this._observer = new EnhancedEventEmitter_1.EnhancedEventEmitter();\n        logger2.debug(\"constructor()\");\n        this._id = id;\n        this._localId = localId;\n        this._rtpSender = rtpSender;\n        this._track = track;\n        this._kind = track.kind;\n        this._rtpParameters = rtpParameters;\n        this._paused = disableTrackOnPause ? !track.enabled : false;\n        this._maxSpatialLayer = void 0;\n        this._stopTracks = stopTracks;\n        this._disableTrackOnPause = disableTrackOnPause;\n        this._zeroRtpOnPause = zeroRtpOnPause;\n        this._appData = appData || {};\n        this.onTrackEnded = this.onTrackEnded.bind(this);\n        this.handleTrack();\n      }\n      get id() {\n        return this._id;\n      }\n      get localId() {\n        return this._localId;\n      }\n      get closed() {\n        return this._closed;\n      }\n      get kind() {\n        return this._kind;\n      }\n      get rtpSender() {\n        return this._rtpSender;\n      }\n      get track() {\n        return this._track;\n      }\n      get rtpParameters() {\n        return this._rtpParameters;\n      }\n      get paused() {\n        return this._paused;\n      }\n      get maxSpatialLayer() {\n        return this._maxSpatialLayer;\n      }\n      get appData() {\n        return this._appData;\n      }\n      set appData(appData) {\n        throw new Error(\"cannot override appData object\");\n      }\n      get observer() {\n        return this._observer;\n      }\n      close() {\n        if (this._closed) {\n          return;\n        }\n        logger2.debug(\"close()\");\n        this._closed = true;\n        this.destroyTrack();\n        this.emit(\"@close\");\n        this._observer.safeEmit(\"close\");\n      }\n      transportClosed() {\n        if (this._closed) {\n          return;\n        }\n        logger2.debug(\"transportClosed()\");\n        this._closed = true;\n        this.destroyTrack();\n        this.safeEmit(\"transportclose\");\n        this._observer.safeEmit(\"close\");\n      }\n      getStats() {\n        return __async(this, null, function* () {\n          if (this._closed) {\n            throw new errors_1.InvalidStateError(\"closed\");\n          }\n          return new Promise((resolve, reject) => {\n            this.safeEmit(\"@getstats\", resolve, reject);\n          });\n        });\n      }\n      pause() {\n        logger2.debug(\"pause()\");\n        if (this._closed) {\n          logger2.error(\"pause() | Producer closed\");\n          return;\n        }\n        this._paused = true;\n        if (this._track && this._disableTrackOnPause) {\n          this._track.enabled = false;\n        }\n        if (this._zeroRtpOnPause) {\n          new Promise((resolve, reject) => {\n            this.safeEmit(\"@pause\", resolve, reject);\n          }).catch(() => {\n          });\n        }\n        this._observer.safeEmit(\"pause\");\n      }\n      resume() {\n        logger2.debug(\"resume()\");\n        if (this._closed) {\n          logger2.error(\"resume() | Producer closed\");\n          return;\n        }\n        this._paused = false;\n        if (this._track && this._disableTrackOnPause) {\n          this._track.enabled = true;\n        }\n        if (this._zeroRtpOnPause) {\n          new Promise((resolve, reject) => {\n            this.safeEmit(\"@resume\", resolve, reject);\n          }).catch(() => {\n          });\n        }\n        this._observer.safeEmit(\"resume\");\n      }\n      replaceTrack(_0) {\n        return __async(this, arguments, function* ({ track }) {\n          logger2.debug(\"replaceTrack() [track:%o]\", track);\n          if (this._closed) {\n            if (track && this._stopTracks) {\n              try {\n                track.stop();\n              } catch (error) {\n              }\n            }\n            throw new errors_1.InvalidStateError(\"closed\");\n          } else if (track && track.readyState === \"ended\") {\n            throw new errors_1.InvalidStateError(\"track ended\");\n          }\n          if (track === this._track) {\n            logger2.debug(\"replaceTrack() | same track, ignored\");\n            return;\n          }\n          yield new Promise((resolve, reject) => {\n            this.safeEmit(\"@replacetrack\", track, resolve, reject);\n          });\n          this.destroyTrack();\n          this._track = track;\n          if (this._track && this._disableTrackOnPause) {\n            if (!this._paused) {\n              this._track.enabled = true;\n            } else if (this._paused) {\n              this._track.enabled = false;\n            }\n          }\n          this.handleTrack();\n        });\n      }\n      setMaxSpatialLayer(spatialLayer) {\n        return __async(this, null, function* () {\n          if (this._closed) {\n            throw new errors_1.InvalidStateError(\"closed\");\n          } else if (this._kind !== \"video\") {\n            throw new errors_1.UnsupportedError(\"not a video Producer\");\n          } else if (typeof spatialLayer !== \"number\") {\n            throw new TypeError(\"invalid spatialLayer\");\n          }\n          if (spatialLayer === this._maxSpatialLayer) {\n            return;\n          }\n          yield new Promise((resolve, reject) => {\n            this.safeEmit(\"@setmaxspatiallayer\", spatialLayer, resolve, reject);\n          }).catch(() => {\n          });\n          this._maxSpatialLayer = spatialLayer;\n        });\n      }\n      setRtpEncodingParameters(params) {\n        return __async(this, null, function* () {\n          if (this._closed) {\n            throw new errors_1.InvalidStateError(\"closed\");\n          } else if (typeof params !== \"object\") {\n            throw new TypeError(\"invalid params\");\n          }\n          yield new Promise((resolve, reject) => {\n            this.safeEmit(\"@setrtpencodingparameters\", params, resolve, reject);\n          });\n        });\n      }\n      onTrackEnded() {\n        logger2.debug('track \"ended\" event');\n        this.safeEmit(\"trackended\");\n        this._observer.safeEmit(\"trackended\");\n      }\n      handleTrack() {\n        if (!this._track) {\n          return;\n        }\n        this._track.addEventListener(\"ended\", this.onTrackEnded);\n      }\n      destroyTrack() {\n        if (!this._track) {\n          return;\n        }\n        try {\n          this._track.removeEventListener(\"ended\", this.onTrackEnded);\n          if (this._stopTracks) {\n            this._track.stop();\n          }\n        } catch (error) {\n        }\n      }\n    };\n    exports.Producer = Producer;\n  }\n});\n\n// ../../node_modules/mediasoup-client/lib/Consumer.js\nvar require_Consumer = __commonJS({\n  \"../../node_modules/mediasoup-client/lib/Consumer.js\"(exports) {\n    \"use strict\";\n    init_process();\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.Consumer = void 0;\n    var Logger_1 = require_Logger();\n    var EnhancedEventEmitter_1 = require_EnhancedEventEmitter();\n    var errors_1 = require_errors();\n    var logger2 = new Logger_1.Logger(\"Consumer\");\n    var Consumer = class extends EnhancedEventEmitter_1.EnhancedEventEmitter {\n      constructor({ id, localId, producerId, rtpReceiver, track, rtpParameters, appData }) {\n        super();\n        this._closed = false;\n        this._observer = new EnhancedEventEmitter_1.EnhancedEventEmitter();\n        logger2.debug(\"constructor()\");\n        this._id = id;\n        this._localId = localId;\n        this._producerId = producerId;\n        this._rtpReceiver = rtpReceiver;\n        this._track = track;\n        this._rtpParameters = rtpParameters;\n        this._paused = !track.enabled;\n        this._appData = appData || {};\n        this.onTrackEnded = this.onTrackEnded.bind(this);\n        this.handleTrack();\n      }\n      get id() {\n        return this._id;\n      }\n      get localId() {\n        return this._localId;\n      }\n      get producerId() {\n        return this._producerId;\n      }\n      get closed() {\n        return this._closed;\n      }\n      get kind() {\n        return this._track.kind;\n      }\n      get rtpReceiver() {\n        return this._rtpReceiver;\n      }\n      get track() {\n        return this._track;\n      }\n      get rtpParameters() {\n        return this._rtpParameters;\n      }\n      get paused() {\n        return this._paused;\n      }\n      get appData() {\n        return this._appData;\n      }\n      set appData(appData) {\n        throw new Error(\"cannot override appData object\");\n      }\n      get observer() {\n        return this._observer;\n      }\n      close() {\n        if (this._closed) {\n          return;\n        }\n        logger2.debug(\"close()\");\n        this._closed = true;\n        this.destroyTrack();\n        this.emit(\"@close\");\n        this._observer.safeEmit(\"close\");\n      }\n      transportClosed() {\n        if (this._closed) {\n          return;\n        }\n        logger2.debug(\"transportClosed()\");\n        this._closed = true;\n        this.destroyTrack();\n        this.safeEmit(\"transportclose\");\n        this._observer.safeEmit(\"close\");\n      }\n      getStats() {\n        return __async(this, null, function* () {\n          if (this._closed) {\n            throw new errors_1.InvalidStateError(\"closed\");\n          }\n          return new Promise((resolve, reject) => {\n            this.safeEmit(\"@getstats\", resolve, reject);\n          });\n        });\n      }\n      pause() {\n        logger2.debug(\"pause()\");\n        if (this._closed) {\n          logger2.error(\"pause() | Consumer closed\");\n          return;\n        }\n        if (this._paused) {\n          logger2.debug(\"pause() | Consumer is already paused\");\n          return;\n        }\n        this._paused = true;\n        this._track.enabled = false;\n        this.emit(\"@pause\");\n        this._observer.safeEmit(\"pause\");\n      }\n      resume() {\n        logger2.debug(\"resume()\");\n        if (this._closed) {\n          logger2.error(\"resume() | Consumer closed\");\n          return;\n        }\n        if (!this._paused) {\n          logger2.debug(\"resume() | Consumer is already resumed\");\n          return;\n        }\n        this._paused = false;\n        this._track.enabled = true;\n        this.emit(\"@resume\");\n        this._observer.safeEmit(\"resume\");\n      }\n      onTrackEnded() {\n        logger2.debug('track \"ended\" event');\n        this.safeEmit(\"trackended\");\n        this._observer.safeEmit(\"trackended\");\n      }\n      handleTrack() {\n        this._track.addEventListener(\"ended\", this.onTrackEnded);\n      }\n      destroyTrack() {\n        try {\n          this._track.removeEventListener(\"ended\", this.onTrackEnded);\n          this._track.stop();\n        } catch (error) {\n        }\n      }\n    };\n    exports.Consumer = Consumer;\n  }\n});\n\n// ../../node_modules/mediasoup-client/lib/DataProducer.js\nvar require_DataProducer = __commonJS({\n  \"../../node_modules/mediasoup-client/lib/DataProducer.js\"(exports) {\n    \"use strict\";\n    init_process();\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.DataProducer = void 0;\n    var Logger_1 = require_Logger();\n    var EnhancedEventEmitter_1 = require_EnhancedEventEmitter();\n    var errors_1 = require_errors();\n    var logger2 = new Logger_1.Logger(\"DataProducer\");\n    var DataProducer = class extends EnhancedEventEmitter_1.EnhancedEventEmitter {\n      constructor({ id, dataChannel, sctpStreamParameters, appData }) {\n        super();\n        this._closed = false;\n        this._observer = new EnhancedEventEmitter_1.EnhancedEventEmitter();\n        logger2.debug(\"constructor()\");\n        this._id = id;\n        this._dataChannel = dataChannel;\n        this._sctpStreamParameters = sctpStreamParameters;\n        this._appData = appData || {};\n        this.handleDataChannel();\n      }\n      get id() {\n        return this._id;\n      }\n      get closed() {\n        return this._closed;\n      }\n      get sctpStreamParameters() {\n        return this._sctpStreamParameters;\n      }\n      get readyState() {\n        return this._dataChannel.readyState;\n      }\n      get label() {\n        return this._dataChannel.label;\n      }\n      get protocol() {\n        return this._dataChannel.protocol;\n      }\n      get bufferedAmount() {\n        return this._dataChannel.bufferedAmount;\n      }\n      get bufferedAmountLowThreshold() {\n        return this._dataChannel.bufferedAmountLowThreshold;\n      }\n      set bufferedAmountLowThreshold(bufferedAmountLowThreshold) {\n        this._dataChannel.bufferedAmountLowThreshold = bufferedAmountLowThreshold;\n      }\n      get appData() {\n        return this._appData;\n      }\n      set appData(appData) {\n        throw new Error(\"cannot override appData object\");\n      }\n      get observer() {\n        return this._observer;\n      }\n      close() {\n        if (this._closed) {\n          return;\n        }\n        logger2.debug(\"close()\");\n        this._closed = true;\n        this._dataChannel.close();\n        this.emit(\"@close\");\n        this._observer.safeEmit(\"close\");\n      }\n      transportClosed() {\n        if (this._closed) {\n          return;\n        }\n        logger2.debug(\"transportClosed()\");\n        this._closed = true;\n        this._dataChannel.close();\n        this.safeEmit(\"transportclose\");\n        this._observer.safeEmit(\"close\");\n      }\n      send(data) {\n        logger2.debug(\"send()\");\n        if (this._closed) {\n          throw new errors_1.InvalidStateError(\"closed\");\n        }\n        this._dataChannel.send(data);\n      }\n      handleDataChannel() {\n        this._dataChannel.addEventListener(\"open\", () => {\n          if (this._closed) {\n            return;\n          }\n          logger2.debug('DataChannel \"open\" event');\n          this.safeEmit(\"open\");\n        });\n        this._dataChannel.addEventListener(\"error\", (event) => {\n          if (this._closed) {\n            return;\n          }\n          let { error } = event;\n          if (!error) {\n            error = new Error(\"unknown DataChannel error\");\n          }\n          if (error.errorDetail === \"sctp-failure\") {\n            logger2.error(\"DataChannel SCTP error [sctpCauseCode:%s]: %s\", error.sctpCauseCode, error.message);\n          } else {\n            logger2.error('DataChannel \"error\" event: %o', error);\n          }\n          this.safeEmit(\"error\", error);\n        });\n        this._dataChannel.addEventListener(\"close\", () => {\n          if (this._closed) {\n            return;\n          }\n          logger2.warn('DataChannel \"close\" event');\n          this._closed = true;\n          this.emit(\"@close\");\n          this.safeEmit(\"close\");\n          this._observer.safeEmit(\"close\");\n        });\n        this._dataChannel.addEventListener(\"message\", () => {\n          if (this._closed) {\n            return;\n          }\n          logger2.warn('DataChannel \"message\" event in a DataProducer, message discarded');\n        });\n        this._dataChannel.addEventListener(\"bufferedamountlow\", () => {\n          if (this._closed) {\n            return;\n          }\n          this.safeEmit(\"bufferedamountlow\");\n        });\n      }\n    };\n    exports.DataProducer = DataProducer;\n  }\n});\n\n// ../../node_modules/mediasoup-client/lib/DataConsumer.js\nvar require_DataConsumer = __commonJS({\n  \"../../node_modules/mediasoup-client/lib/DataConsumer.js\"(exports) {\n    \"use strict\";\n    init_process();\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.DataConsumer = void 0;\n    var Logger_1 = require_Logger();\n    var EnhancedEventEmitter_1 = require_EnhancedEventEmitter();\n    var logger2 = new Logger_1.Logger(\"DataConsumer\");\n    var DataConsumer = class extends EnhancedEventEmitter_1.EnhancedEventEmitter {\n      constructor({ id, dataProducerId, dataChannel, sctpStreamParameters, appData }) {\n        super();\n        this._closed = false;\n        this._observer = new EnhancedEventEmitter_1.EnhancedEventEmitter();\n        logger2.debug(\"constructor()\");\n        this._id = id;\n        this._dataProducerId = dataProducerId;\n        this._dataChannel = dataChannel;\n        this._sctpStreamParameters = sctpStreamParameters;\n        this._appData = appData || {};\n        this.handleDataChannel();\n      }\n      get id() {\n        return this._id;\n      }\n      get dataProducerId() {\n        return this._dataProducerId;\n      }\n      get closed() {\n        return this._closed;\n      }\n      get sctpStreamParameters() {\n        return this._sctpStreamParameters;\n      }\n      get readyState() {\n        return this._dataChannel.readyState;\n      }\n      get label() {\n        return this._dataChannel.label;\n      }\n      get protocol() {\n        return this._dataChannel.protocol;\n      }\n      get binaryType() {\n        return this._dataChannel.binaryType;\n      }\n      set binaryType(binaryType) {\n        this._dataChannel.binaryType = binaryType;\n      }\n      get appData() {\n        return this._appData;\n      }\n      set appData(appData) {\n        throw new Error(\"cannot override appData object\");\n      }\n      get observer() {\n        return this._observer;\n      }\n      close() {\n        if (this._closed) {\n          return;\n        }\n        logger2.debug(\"close()\");\n        this._closed = true;\n        this._dataChannel.close();\n        this.emit(\"@close\");\n        this._observer.safeEmit(\"close\");\n      }\n      transportClosed() {\n        if (this._closed) {\n          return;\n        }\n        logger2.debug(\"transportClosed()\");\n        this._closed = true;\n        this._dataChannel.close();\n        this.safeEmit(\"transportclose\");\n        this._observer.safeEmit(\"close\");\n      }\n      handleDataChannel() {\n        this._dataChannel.addEventListener(\"open\", () => {\n          if (this._closed) {\n            return;\n          }\n          logger2.debug('DataChannel \"open\" event');\n          this.safeEmit(\"open\");\n        });\n        this._dataChannel.addEventListener(\"error\", (event) => {\n          if (this._closed) {\n            return;\n          }\n          let { error } = event;\n          if (!error) {\n            error = new Error(\"unknown DataChannel error\");\n          }\n          if (error.errorDetail === \"sctp-failure\") {\n            logger2.error(\"DataChannel SCTP error [sctpCauseCode:%s]: %s\", error.sctpCauseCode, error.message);\n          } else {\n            logger2.error('DataChannel \"error\" event: %o', error);\n          }\n          this.safeEmit(\"error\", error);\n        });\n        this._dataChannel.addEventListener(\"close\", () => {\n          if (this._closed) {\n            return;\n          }\n          logger2.warn('DataChannel \"close\" event');\n          this._closed = true;\n          this.emit(\"@close\");\n          this.safeEmit(\"close\");\n          this._observer.safeEmit(\"close\");\n        });\n        this._dataChannel.addEventListener(\"message\", (event) => {\n          if (this._closed) {\n            return;\n          }\n          this.safeEmit(\"message\", event.data);\n        });\n      }\n    };\n    exports.DataConsumer = DataConsumer;\n  }\n});\n\n// ../../node_modules/mediasoup-client/lib/Transport.js\nvar require_Transport = __commonJS({\n  \"../../node_modules/mediasoup-client/lib/Transport.js\"(exports) {\n    \"use strict\";\n    init_process();\n    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {\n      if (k2 === void 0)\n        k2 = k;\n      var desc = Object.getOwnPropertyDescriptor(m, k);\n      if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n        desc = { enumerable: true, get: function() {\n          return m[k];\n        } };\n      }\n      Object.defineProperty(o2, k2, desc);\n    } : function(o2, m, k, k2) {\n      if (k2 === void 0)\n        k2 = k;\n      o2[k2] = m[k];\n    });\n    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {\n      Object.defineProperty(o2, \"default\", { enumerable: true, value: v });\n    } : function(o2, v) {\n      o2[\"default\"] = v;\n    });\n    var __importStar = exports && exports.__importStar || function(mod) {\n      if (mod && mod.__esModule)\n        return mod;\n      var result2 = {};\n      if (mod != null) {\n        for (var k in mod)\n          if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k))\n            __createBinding(result2, mod, k);\n      }\n      __setModuleDefault(result2, mod);\n      return result2;\n    };\n    var __importDefault = exports && exports.__importDefault || function(mod) {\n      return mod && mod.__esModule ? mod : { \"default\": mod };\n    };\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.Transport = void 0;\n    var awaitqueue_1 = require_lib2();\n    var queue_microtask_1 = __importDefault(require_queue_microtask());\n    var Logger_1 = require_Logger();\n    var EnhancedEventEmitter_1 = require_EnhancedEventEmitter();\n    var errors_1 = require_errors();\n    var utils = __importStar(require_utils2());\n    var ortc = __importStar(require_ortc());\n    var Producer_1 = require_Producer();\n    var Consumer_1 = require_Consumer();\n    var DataProducer_1 = require_DataProducer();\n    var DataConsumer_1 = require_DataConsumer();\n    var logger2 = new Logger_1.Logger(\"Transport\");\n    var ConsumerCreationTask = class {\n      constructor(consumerOptions) {\n        this.consumerOptions = consumerOptions;\n        this.promise = new Promise((resolve, reject) => {\n          this.resolve = resolve;\n          this.reject = reject;\n        });\n      }\n    };\n    var Transport = class extends EnhancedEventEmitter_1.EnhancedEventEmitter {\n      constructor({ direction, id, iceParameters, iceCandidates, dtlsParameters, sctpParameters, iceServers, iceTransportPolicy, additionalSettings, proprietaryConstraints, appData, handlerFactory, extendedRtpCapabilities, canProduceByKind }) {\n        super();\n        this._closed = false;\n        this._connectionState = \"new\";\n        this._producers = /* @__PURE__ */ new Map();\n        this._consumers = /* @__PURE__ */ new Map();\n        this._dataProducers = /* @__PURE__ */ new Map();\n        this._dataConsumers = /* @__PURE__ */ new Map();\n        this._probatorConsumerCreated = false;\n        this._awaitQueue = new awaitqueue_1.AwaitQueue();\n        this._pendingConsumerTasks = [];\n        this._consumerCreationInProgress = false;\n        this._pendingPauseConsumers = /* @__PURE__ */ new Map();\n        this._consumerPauseInProgress = false;\n        this._pendingResumeConsumers = /* @__PURE__ */ new Map();\n        this._consumerResumeInProgress = false;\n        this._pendingCloseConsumers = /* @__PURE__ */ new Map();\n        this._consumerCloseInProgress = false;\n        this._observer = new EnhancedEventEmitter_1.EnhancedEventEmitter();\n        logger2.debug(\"constructor() [id:%s, direction:%s]\", id, direction);\n        this._id = id;\n        this._direction = direction;\n        this._extendedRtpCapabilities = extendedRtpCapabilities;\n        this._canProduceByKind = canProduceByKind;\n        this._maxSctpMessageSize = sctpParameters ? sctpParameters.maxMessageSize : null;\n        additionalSettings = utils.clone(additionalSettings, {});\n        delete additionalSettings.iceServers;\n        delete additionalSettings.iceTransportPolicy;\n        delete additionalSettings.bundlePolicy;\n        delete additionalSettings.rtcpMuxPolicy;\n        delete additionalSettings.sdpSemantics;\n        this._handler = handlerFactory();\n        this._handler.run({\n          direction,\n          iceParameters,\n          iceCandidates,\n          dtlsParameters,\n          sctpParameters,\n          iceServers,\n          iceTransportPolicy,\n          additionalSettings,\n          proprietaryConstraints,\n          extendedRtpCapabilities\n        });\n        this._appData = appData || {};\n        this.handleHandler();\n      }\n      get id() {\n        return this._id;\n      }\n      get closed() {\n        return this._closed;\n      }\n      get direction() {\n        return this._direction;\n      }\n      get handler() {\n        return this._handler;\n      }\n      get connectionState() {\n        return this._connectionState;\n      }\n      get appData() {\n        return this._appData;\n      }\n      set appData(appData) {\n        throw new Error(\"cannot override appData object\");\n      }\n      get observer() {\n        return this._observer;\n      }\n      close() {\n        if (this._closed) {\n          return;\n        }\n        logger2.debug(\"close()\");\n        this._closed = true;\n        this._awaitQueue.stop();\n        this._handler.close();\n        for (const producer of this._producers.values()) {\n          producer.transportClosed();\n        }\n        this._producers.clear();\n        for (const consumer of this._consumers.values()) {\n          consumer.transportClosed();\n        }\n        this._consumers.clear();\n        for (const dataProducer of this._dataProducers.values()) {\n          dataProducer.transportClosed();\n        }\n        this._dataProducers.clear();\n        for (const dataConsumer of this._dataConsumers.values()) {\n          dataConsumer.transportClosed();\n        }\n        this._dataConsumers.clear();\n        this._observer.safeEmit(\"close\");\n      }\n      getStats() {\n        return __async(this, null, function* () {\n          if (this._closed) {\n            throw new errors_1.InvalidStateError(\"closed\");\n          }\n          return this._handler.getTransportStats();\n        });\n      }\n      restartIce(_0) {\n        return __async(this, arguments, function* ({ iceParameters }) {\n          logger2.debug(\"restartIce()\");\n          if (this._closed) {\n            throw new errors_1.InvalidStateError(\"closed\");\n          } else if (!iceParameters) {\n            throw new TypeError(\"missing iceParameters\");\n          }\n          return this._awaitQueue.push(() => __async(this, null, function* () {\n            return this._handler.restartIce(iceParameters);\n          }), \"transport.restartIce()\");\n        });\n      }\n      updateIceServers() {\n        return __async(this, arguments, function* ({ iceServers } = {}) {\n          logger2.debug(\"updateIceServers()\");\n          if (this._closed) {\n            throw new errors_1.InvalidStateError(\"closed\");\n          } else if (!Array.isArray(iceServers)) {\n            throw new TypeError(\"missing iceServers\");\n          }\n          return this._awaitQueue.push(() => __async(this, null, function* () {\n            return this._handler.updateIceServers(iceServers);\n          }), \"transport.updateIceServers()\");\n        });\n      }\n      produce() {\n        return __async(this, arguments, function* ({ track, encodings, codecOptions, codec, stopTracks = true, disableTrackOnPause = true, zeroRtpOnPause = false, appData = {} } = {}) {\n          logger2.debug(\"produce() [track:%o]\", track);\n          if (this._closed) {\n            throw new errors_1.InvalidStateError(\"closed\");\n          } else if (!track) {\n            throw new TypeError(\"missing track\");\n          } else if (this._direction !== \"send\") {\n            throw new errors_1.UnsupportedError(\"not a sending Transport\");\n          } else if (!this._canProduceByKind[track.kind]) {\n            throw new errors_1.UnsupportedError(`cannot produce ${track.kind}`);\n          } else if (track.readyState === \"ended\") {\n            throw new errors_1.InvalidStateError(\"track ended\");\n          } else if (this.listenerCount(\"connect\") === 0 && this._connectionState === \"new\") {\n            throw new TypeError('no \"connect\" listener set into this transport');\n          } else if (this.listenerCount(\"produce\") === 0) {\n            throw new TypeError('no \"produce\" listener set into this transport');\n          } else if (appData && typeof appData !== \"object\") {\n            throw new TypeError(\"if given, appData must be an object\");\n          }\n          return this._awaitQueue.push(() => __async(this, null, function* () {\n            let normalizedEncodings;\n            if (encodings && !Array.isArray(encodings)) {\n              throw TypeError(\"encodings must be an array\");\n            } else if (encodings && encodings.length === 0) {\n              normalizedEncodings = void 0;\n            } else if (encodings) {\n              normalizedEncodings = encodings.map((encoding) => {\n                const normalizedEncoding = { active: true };\n                if (encoding.active === false) {\n                  normalizedEncoding.active = false;\n                }\n                if (typeof encoding.dtx === \"boolean\") {\n                  normalizedEncoding.dtx = encoding.dtx;\n                }\n                if (typeof encoding.scalabilityMode === \"string\") {\n                  normalizedEncoding.scalabilityMode = encoding.scalabilityMode;\n                }\n                if (typeof encoding.scaleResolutionDownBy === \"number\") {\n                  normalizedEncoding.scaleResolutionDownBy = encoding.scaleResolutionDownBy;\n                }\n                if (typeof encoding.maxBitrate === \"number\") {\n                  normalizedEncoding.maxBitrate = encoding.maxBitrate;\n                }\n                if (typeof encoding.maxFramerate === \"number\") {\n                  normalizedEncoding.maxFramerate = encoding.maxFramerate;\n                }\n                if (typeof encoding.adaptivePtime === \"boolean\") {\n                  normalizedEncoding.adaptivePtime = encoding.adaptivePtime;\n                }\n                if (typeof encoding.priority === \"string\") {\n                  normalizedEncoding.priority = encoding.priority;\n                }\n                if (typeof encoding.networkPriority === \"string\") {\n                  normalizedEncoding.networkPriority = encoding.networkPriority;\n                }\n                return normalizedEncoding;\n              });\n            }\n            const { localId, rtpParameters, rtpSender } = yield this._handler.send({\n              track,\n              encodings: normalizedEncodings,\n              codecOptions,\n              codec\n            });\n            try {\n              ortc.validateRtpParameters(rtpParameters);\n              const { id } = yield new Promise((resolve, reject) => {\n                this.safeEmit(\"produce\", {\n                  kind: track.kind,\n                  rtpParameters,\n                  appData\n                }, resolve, reject);\n              });\n              const producer = new Producer_1.Producer({\n                id,\n                localId,\n                rtpSender,\n                track,\n                rtpParameters,\n                stopTracks,\n                disableTrackOnPause,\n                zeroRtpOnPause,\n                appData\n              });\n              this._producers.set(producer.id, producer);\n              this.handleProducer(producer);\n              this._observer.safeEmit(\"newproducer\", producer);\n              return producer;\n            } catch (error) {\n              this._handler.stopSending(localId).catch(() => {\n              });\n              throw error;\n            }\n          }), \"transport.produce()\").catch((error) => {\n            if (stopTracks) {\n              try {\n                track.stop();\n              } catch (error2) {\n              }\n            }\n            throw error;\n          });\n        });\n      }\n      consume(_0) {\n        return __async(this, arguments, function* ({ id, producerId, kind, rtpParameters, streamId, appData = {} }) {\n          logger2.debug(\"consume()\");\n          rtpParameters = utils.clone(rtpParameters, void 0);\n          if (this._closed) {\n            throw new errors_1.InvalidStateError(\"closed\");\n          } else if (this._direction !== \"recv\") {\n            throw new errors_1.UnsupportedError(\"not a receiving Transport\");\n          } else if (typeof id !== \"string\") {\n            throw new TypeError(\"missing id\");\n          } else if (typeof producerId !== \"string\") {\n            throw new TypeError(\"missing producerId\");\n          } else if (kind !== \"audio\" && kind !== \"video\") {\n            throw new TypeError(`invalid kind '${kind}'`);\n          } else if (this.listenerCount(\"connect\") === 0 && this._connectionState === \"new\") {\n            throw new TypeError('no \"connect\" listener set into this transport');\n          } else if (appData && typeof appData !== \"object\") {\n            throw new TypeError(\"if given, appData must be an object\");\n          }\n          const canConsume = ortc.canReceive(rtpParameters, this._extendedRtpCapabilities);\n          if (!canConsume) {\n            throw new errors_1.UnsupportedError(\"cannot consume this Producer\");\n          }\n          const consumerCreationTask = new ConsumerCreationTask({\n            id,\n            producerId,\n            kind,\n            rtpParameters,\n            streamId,\n            appData\n          });\n          this._pendingConsumerTasks.push(consumerCreationTask);\n          (0, queue_microtask_1.default)(() => {\n            if (this._closed) {\n              throw new errors_1.InvalidStateError(\"closed\");\n            }\n            if (this._consumerCreationInProgress === false) {\n              this.createPendingConsumers();\n            }\n          });\n          return consumerCreationTask.promise;\n        });\n      }\n      produceData() {\n        return __async(this, arguments, function* ({ ordered = true, maxPacketLifeTime, maxRetransmits, label = \"\", protocol = \"\", appData = {} } = {}) {\n          logger2.debug(\"produceData()\");\n          if (this._closed) {\n            throw new errors_1.InvalidStateError(\"closed\");\n          } else if (this._direction !== \"send\") {\n            throw new errors_1.UnsupportedError(\"not a sending Transport\");\n          } else if (!this._maxSctpMessageSize) {\n            throw new errors_1.UnsupportedError(\"SCTP not enabled by remote Transport\");\n          } else if (this.listenerCount(\"connect\") === 0 && this._connectionState === \"new\") {\n            throw new TypeError('no \"connect\" listener set into this transport');\n          } else if (this.listenerCount(\"producedata\") === 0) {\n            throw new TypeError('no \"producedata\" listener set into this transport');\n          } else if (appData && typeof appData !== \"object\") {\n            throw new TypeError(\"if given, appData must be an object\");\n          }\n          if (maxPacketLifeTime || maxRetransmits) {\n            ordered = false;\n          }\n          return this._awaitQueue.push(() => __async(this, null, function* () {\n            const { dataChannel, sctpStreamParameters } = yield this._handler.sendDataChannel({\n              ordered,\n              maxPacketLifeTime,\n              maxRetransmits,\n              label,\n              protocol\n            });\n            ortc.validateSctpStreamParameters(sctpStreamParameters);\n            const { id } = yield new Promise((resolve, reject) => {\n              this.safeEmit(\"producedata\", {\n                sctpStreamParameters,\n                label,\n                protocol,\n                appData\n              }, resolve, reject);\n            });\n            const dataProducer = new DataProducer_1.DataProducer({ id, dataChannel, sctpStreamParameters, appData });\n            this._dataProducers.set(dataProducer.id, dataProducer);\n            this.handleDataProducer(dataProducer);\n            this._observer.safeEmit(\"newdataproducer\", dataProducer);\n            return dataProducer;\n          }), \"transport.produceData()\");\n        });\n      }\n      consumeData(_0) {\n        return __async(this, arguments, function* ({ id, dataProducerId, sctpStreamParameters, label = \"\", protocol = \"\", appData = {} }) {\n          logger2.debug(\"consumeData()\");\n          sctpStreamParameters = utils.clone(sctpStreamParameters, void 0);\n          if (this._closed) {\n            throw new errors_1.InvalidStateError(\"closed\");\n          } else if (this._direction !== \"recv\") {\n            throw new errors_1.UnsupportedError(\"not a receiving Transport\");\n          } else if (!this._maxSctpMessageSize) {\n            throw new errors_1.UnsupportedError(\"SCTP not enabled by remote Transport\");\n          } else if (typeof id !== \"string\") {\n            throw new TypeError(\"missing id\");\n          } else if (typeof dataProducerId !== \"string\") {\n            throw new TypeError(\"missing dataProducerId\");\n          } else if (this.listenerCount(\"connect\") === 0 && this._connectionState === \"new\") {\n            throw new TypeError('no \"connect\" listener set into this transport');\n          } else if (appData && typeof appData !== \"object\") {\n            throw new TypeError(\"if given, appData must be an object\");\n          }\n          ortc.validateSctpStreamParameters(sctpStreamParameters);\n          return this._awaitQueue.push(() => __async(this, null, function* () {\n            const { dataChannel } = yield this._handler.receiveDataChannel({\n              sctpStreamParameters,\n              label,\n              protocol\n            });\n            const dataConsumer = new DataConsumer_1.DataConsumer({\n              id,\n              dataProducerId,\n              dataChannel,\n              sctpStreamParameters,\n              appData\n            });\n            this._dataConsumers.set(dataConsumer.id, dataConsumer);\n            this.handleDataConsumer(dataConsumer);\n            this._observer.safeEmit(\"newdataconsumer\", dataConsumer);\n            return dataConsumer;\n          }), \"transport.consumeData()\");\n        });\n      }\n      createPendingConsumers() {\n        return __async(this, null, function* () {\n          this._consumerCreationInProgress = true;\n          this._awaitQueue.push(() => __async(this, null, function* () {\n            if (this._pendingConsumerTasks.length === 0) {\n              logger2.debug(\"createPendingConsumers() | there is no Consumer to be created\");\n              return;\n            }\n            const pendingConsumerTasks = [...this._pendingConsumerTasks];\n            this._pendingConsumerTasks = [];\n            let videoConsumerForProbator = void 0;\n            const optionsList = [];\n            for (const task of pendingConsumerTasks) {\n              const { id, kind, rtpParameters, streamId } = task.consumerOptions;\n              optionsList.push({\n                trackId: id,\n                kind,\n                rtpParameters,\n                streamId\n              });\n            }\n            try {\n              const results = yield this._handler.receive(optionsList);\n              for (let idx = 0; idx < results.length; idx++) {\n                const task = pendingConsumerTasks[idx];\n                const result2 = results[idx];\n                const { id, producerId, kind, rtpParameters, appData } = task.consumerOptions;\n                const { localId, rtpReceiver, track } = result2;\n                const consumer = new Consumer_1.Consumer({\n                  id,\n                  localId,\n                  producerId,\n                  rtpReceiver,\n                  track,\n                  rtpParameters,\n                  appData\n                });\n                this._consumers.set(consumer.id, consumer);\n                this.handleConsumer(consumer);\n                if (!this._probatorConsumerCreated && !videoConsumerForProbator && kind === \"video\") {\n                  videoConsumerForProbator = consumer;\n                }\n                this._observer.safeEmit(\"newconsumer\", consumer);\n                task.resolve(consumer);\n              }\n            } catch (error) {\n              for (const task of pendingConsumerTasks) {\n                task.reject(error);\n              }\n            }\n            if (videoConsumerForProbator) {\n              try {\n                const probatorRtpParameters = ortc.generateProbatorRtpParameters(videoConsumerForProbator.rtpParameters);\n                yield this._handler.receive([{\n                  trackId: \"probator\",\n                  kind: \"video\",\n                  rtpParameters: probatorRtpParameters\n                }]);\n                logger2.debug(\"createPendingConsumers() | Consumer for RTP probation created\");\n                this._probatorConsumerCreated = true;\n              } catch (error) {\n                logger2.error(\"createPendingConsumers() | failed to create Consumer for RTP probation:%o\", error);\n              }\n            }\n          }), \"transport.createPendingConsumers()\").then(() => {\n            this._consumerCreationInProgress = false;\n            if (this._pendingConsumerTasks.length > 0) {\n              this.createPendingConsumers();\n            }\n          }).catch(() => {\n          });\n        });\n      }\n      pausePendingConsumers() {\n        this._consumerPauseInProgress = true;\n        this._awaitQueue.push(() => __async(this, null, function* () {\n          if (this._pendingPauseConsumers.size === 0) {\n            logger2.debug(\"pausePendingConsumers() | there is no Consumer to be paused\");\n            return;\n          }\n          const pendingPauseConsumers = Array.from(this._pendingPauseConsumers.values());\n          this._pendingPauseConsumers.clear();\n          try {\n            const localIds = pendingPauseConsumers.map((consumer) => consumer.localId);\n            yield this._handler.pauseReceiving(localIds);\n          } catch (error) {\n            logger2.error(\"pausePendingConsumers() | failed to pause Consumers:\", error);\n          }\n        }), \"transport.pausePendingConsumers\").then(() => {\n          this._consumerPauseInProgress = false;\n          if (this._pendingPauseConsumers.size > 0) {\n            this.pausePendingConsumers();\n          }\n        }).catch(() => {\n        });\n      }\n      resumePendingConsumers() {\n        this._consumerResumeInProgress = true;\n        this._awaitQueue.push(() => __async(this, null, function* () {\n          if (this._pendingResumeConsumers.size === 0) {\n            logger2.debug(\"resumePendingConsumers() | there is no Consumer to be resumed\");\n            return;\n          }\n          const pendingResumeConsumers = Array.from(this._pendingResumeConsumers.values());\n          this._pendingResumeConsumers.clear();\n          try {\n            const localIds = pendingResumeConsumers.map((consumer) => consumer.localId);\n            yield this._handler.resumeReceiving(localIds);\n          } catch (error) {\n            logger2.error(\"resumePendingConsumers() | failed to resume Consumers:\", error);\n          }\n        }), \"transport.resumePendingConsumers\").then(() => {\n          this._consumerResumeInProgress = false;\n          if (this._pendingResumeConsumers.size > 0) {\n            this.resumePendingConsumers();\n          }\n        }).catch(() => {\n        });\n      }\n      closePendingConsumers() {\n        this._consumerCloseInProgress = true;\n        this._awaitQueue.push(() => __async(this, null, function* () {\n          if (this._pendingCloseConsumers.size === 0) {\n            logger2.debug(\"closePendingConsumers() | there is no Consumer to be closed\");\n            return;\n          }\n          const pendingCloseConsumers = Array.from(this._pendingCloseConsumers.values());\n          this._pendingCloseConsumers.clear();\n          try {\n            yield this._handler.stopReceiving(pendingCloseConsumers.map((consumer) => consumer.localId));\n          } catch (error) {\n            logger2.error(\"closePendingConsumers() | failed to close Consumers:\", error);\n          }\n        }), \"transport.closePendingConsumers\").then(() => {\n          this._consumerCloseInProgress = false;\n          if (this._pendingCloseConsumers.size > 0) {\n            this.closePendingConsumers();\n          }\n        }).catch(() => {\n        });\n      }\n      handleHandler() {\n        const handler = this._handler;\n        handler.on(\"@connect\", ({ dtlsParameters }, callback, errback) => {\n          if (this._closed) {\n            errback(new errors_1.InvalidStateError(\"closed\"));\n            return;\n          }\n          this.safeEmit(\"connect\", { dtlsParameters }, callback, errback);\n        });\n        handler.on(\"@connectionstatechange\", (connectionState) => {\n          if (connectionState === this._connectionState) {\n            return;\n          }\n          logger2.debug(\"connection state changed to %s\", connectionState);\n          this._connectionState = connectionState;\n          if (!this._closed) {\n            this.safeEmit(\"connectionstatechange\", connectionState);\n          }\n        });\n      }\n      handleProducer(producer) {\n        producer.on(\"@close\", () => {\n          this._producers.delete(producer.id);\n          if (this._closed) {\n            return;\n          }\n          this._awaitQueue.push(() => __async(this, null, function* () {\n            return this._handler.stopSending(producer.localId);\n          }), \"producer @close event\").catch((error) => logger2.warn(\"producer.close() failed:%o\", error));\n        });\n        producer.on(\"@pause\", (callback, errback) => {\n          this._awaitQueue.push(() => __async(this, null, function* () {\n            return this._handler.pauseSending(producer.localId);\n          }), \"producer @pause event\").then(callback).catch(errback);\n        });\n        producer.on(\"@resume\", (callback, errback) => {\n          this._awaitQueue.push(() => __async(this, null, function* () {\n            return this._handler.resumeSending(producer.localId);\n          }), \"producer @resume event\").then(callback).catch(errback);\n        });\n        producer.on(\"@replacetrack\", (track, callback, errback) => {\n          this._awaitQueue.push(() => __async(this, null, function* () {\n            return this._handler.replaceTrack(producer.localId, track);\n          }), \"producer @replacetrack event\").then(callback).catch(errback);\n        });\n        producer.on(\"@setmaxspatiallayer\", (spatialLayer, callback, errback) => {\n          this._awaitQueue.push(() => __async(this, null, function* () {\n            return this._handler.setMaxSpatialLayer(producer.localId, spatialLayer);\n          }), \"producer @setmaxspatiallayer event\").then(callback).catch(errback);\n        });\n        producer.on(\"@setrtpencodingparameters\", (params, callback, errback) => {\n          this._awaitQueue.push(() => __async(this, null, function* () {\n            return this._handler.setRtpEncodingParameters(producer.localId, params);\n          }), \"producer @setrtpencodingparameters event\").then(callback).catch(errback);\n        });\n        producer.on(\"@getstats\", (callback, errback) => {\n          if (this._closed) {\n            return errback(new errors_1.InvalidStateError(\"closed\"));\n          }\n          this._handler.getSenderStats(producer.localId).then(callback).catch(errback);\n        });\n      }\n      handleConsumer(consumer) {\n        consumer.on(\"@close\", () => {\n          this._consumers.delete(consumer.id);\n          this._pendingPauseConsumers.delete(consumer.id);\n          this._pendingResumeConsumers.delete(consumer.id);\n          if (this._closed) {\n            return;\n          }\n          this._pendingCloseConsumers.set(consumer.id, consumer);\n          if (this._consumerCloseInProgress === false) {\n            this.closePendingConsumers();\n          }\n        });\n        consumer.on(\"@pause\", () => {\n          if (this._pendingResumeConsumers.has(consumer.id)) {\n            this._pendingResumeConsumers.delete(consumer.id);\n          }\n          this._pendingPauseConsumers.set(consumer.id, consumer);\n          (0, queue_microtask_1.default)(() => {\n            if (this._closed) {\n              return;\n            }\n            if (this._consumerPauseInProgress === false) {\n              this.pausePendingConsumers();\n            }\n          });\n        });\n        consumer.on(\"@resume\", () => {\n          if (this._pendingPauseConsumers.has(consumer.id)) {\n            this._pendingPauseConsumers.delete(consumer.id);\n          }\n          this._pendingResumeConsumers.set(consumer.id, consumer);\n          (0, queue_microtask_1.default)(() => {\n            if (this._closed) {\n              return;\n            }\n            if (this._consumerResumeInProgress === false) {\n              this.resumePendingConsumers();\n            }\n          });\n        });\n        consumer.on(\"@getstats\", (callback, errback) => {\n          if (this._closed) {\n            return errback(new errors_1.InvalidStateError(\"closed\"));\n          }\n          this._handler.getReceiverStats(consumer.localId).then(callback).catch(errback);\n        });\n      }\n      handleDataProducer(dataProducer) {\n        dataProducer.on(\"@close\", () => {\n          this._dataProducers.delete(dataProducer.id);\n        });\n      }\n      handleDataConsumer(dataConsumer) {\n        dataConsumer.on(\"@close\", () => {\n          this._dataConsumers.delete(dataConsumer.id);\n        });\n      }\n    };\n    exports.Transport = Transport;\n  }\n});\n\n// ../../node_modules/mediasoup-client/lib/handlers/sdp/commonUtils.js\nvar require_commonUtils = __commonJS({\n  \"../../node_modules/mediasoup-client/lib/handlers/sdp/commonUtils.js\"(exports) {\n    \"use strict\";\n    init_process();\n    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {\n      if (k2 === void 0)\n        k2 = k;\n      var desc = Object.getOwnPropertyDescriptor(m, k);\n      if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n        desc = { enumerable: true, get: function() {\n          return m[k];\n        } };\n      }\n      Object.defineProperty(o2, k2, desc);\n    } : function(o2, m, k, k2) {\n      if (k2 === void 0)\n        k2 = k;\n      o2[k2] = m[k];\n    });\n    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {\n      Object.defineProperty(o2, \"default\", { enumerable: true, value: v });\n    } : function(o2, v) {\n      o2[\"default\"] = v;\n    });\n    var __importStar = exports && exports.__importStar || function(mod) {\n      if (mod && mod.__esModule)\n        return mod;\n      var result2 = {};\n      if (mod != null) {\n        for (var k in mod)\n          if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k))\n            __createBinding(result2, mod, k);\n      }\n      __setModuleDefault(result2, mod);\n      return result2;\n    };\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.applyCodecParameters = exports.getCname = exports.extractDtlsParameters = exports.extractRtpCapabilities = void 0;\n    var sdpTransform4 = __importStar(require_lib());\n    function extractRtpCapabilities({ sdpObject }) {\n      const codecsMap = /* @__PURE__ */ new Map();\n      const headerExtensions = [];\n      let gotAudio = false;\n      let gotVideo = false;\n      for (const m of sdpObject.media) {\n        const kind = m.type;\n        switch (kind) {\n          case \"audio\": {\n            if (gotAudio) {\n              continue;\n            }\n            gotAudio = true;\n            break;\n          }\n          case \"video\": {\n            if (gotVideo) {\n              continue;\n            }\n            gotVideo = true;\n            break;\n          }\n          default: {\n            continue;\n          }\n        }\n        for (const rtp of m.rtp) {\n          const codec = {\n            kind,\n            mimeType: `${kind}/${rtp.codec}`,\n            preferredPayloadType: rtp.payload,\n            clockRate: rtp.rate,\n            channels: rtp.encoding,\n            parameters: {},\n            rtcpFeedback: []\n          };\n          codecsMap.set(codec.preferredPayloadType, codec);\n        }\n        for (const fmtp of m.fmtp || []) {\n          const parameters = sdpTransform4.parseParams(fmtp.config);\n          const codec = codecsMap.get(fmtp.payload);\n          if (!codec) {\n            continue;\n          }\n          if (parameters && parameters.hasOwnProperty(\"profile-level-id\")) {\n            parameters[\"profile-level-id\"] = String(parameters[\"profile-level-id\"]);\n          }\n          codec.parameters = parameters;\n        }\n        for (const fb of m.rtcpFb || []) {\n          const feedback = {\n            type: fb.type,\n            parameter: fb.subtype\n          };\n          if (!feedback.parameter) {\n            delete feedback.parameter;\n          }\n          if (fb.payload !== \"*\") {\n            const codec = codecsMap.get(fb.payload);\n            if (!codec) {\n              continue;\n            }\n            codec.rtcpFeedback.push(feedback);\n          } else {\n            for (const codec of codecsMap.values()) {\n              if (codec.kind === kind && !/.+\\/rtx$/i.test(codec.mimeType)) {\n                codec.rtcpFeedback.push(feedback);\n              }\n            }\n          }\n        }\n        for (const ext of m.ext || []) {\n          if (ext[\"encrypt-uri\"]) {\n            continue;\n          }\n          const headerExtension = {\n            kind,\n            uri: ext.uri,\n            preferredId: ext.value\n          };\n          headerExtensions.push(headerExtension);\n        }\n      }\n      const rtpCapabilities = {\n        codecs: Array.from(codecsMap.values()),\n        headerExtensions\n      };\n      return rtpCapabilities;\n    }\n    exports.extractRtpCapabilities = extractRtpCapabilities;\n    function extractDtlsParameters({ sdpObject }) {\n      const mediaObject = (sdpObject.media || []).find((m) => m.iceUfrag && m.port !== 0);\n      if (!mediaObject) {\n        throw new Error(\"no active media section found\");\n      }\n      const fingerprint = mediaObject.fingerprint || sdpObject.fingerprint;\n      let role;\n      switch (mediaObject.setup) {\n        case \"active\":\n          role = \"client\";\n          break;\n        case \"passive\":\n          role = \"server\";\n          break;\n        case \"actpass\":\n          role = \"auto\";\n          break;\n      }\n      const dtlsParameters = {\n        role,\n        fingerprints: [\n          {\n            algorithm: fingerprint.type,\n            value: fingerprint.hash\n          }\n        ]\n      };\n      return dtlsParameters;\n    }\n    exports.extractDtlsParameters = extractDtlsParameters;\n    function getCname({ offerMediaObject }) {\n      const ssrcCnameLine = (offerMediaObject.ssrcs || []).find((line) => line.attribute === \"cname\");\n      if (!ssrcCnameLine) {\n        return \"\";\n      }\n      return ssrcCnameLine.value;\n    }\n    exports.getCname = getCname;\n    function applyCodecParameters({ offerRtpParameters, answerMediaObject }) {\n      for (const codec of offerRtpParameters.codecs) {\n        const mimeType = codec.mimeType.toLowerCase();\n        if (mimeType !== \"audio/opus\") {\n          continue;\n        }\n        const rtp = (answerMediaObject.rtp || []).find((r2) => r2.payload === codec.payloadType);\n        if (!rtp) {\n          continue;\n        }\n        answerMediaObject.fmtp = answerMediaObject.fmtp || [];\n        let fmtp = answerMediaObject.fmtp.find((f) => f.payload === codec.payloadType);\n        if (!fmtp) {\n          fmtp = { payload: codec.payloadType, config: \"\" };\n          answerMediaObject.fmtp.push(fmtp);\n        }\n        const parameters = sdpTransform4.parseParams(fmtp.config);\n        switch (mimeType) {\n          case \"audio/opus\": {\n            const spropStereo = codec.parameters[\"sprop-stereo\"];\n            if (spropStereo !== void 0) {\n              parameters.stereo = spropStereo ? 1 : 0;\n            }\n            break;\n          }\n        }\n        fmtp.config = \"\";\n        for (const key of Object.keys(parameters)) {\n          if (fmtp.config) {\n            fmtp.config += \";\";\n          }\n          fmtp.config += `${key}=${parameters[key]}`;\n        }\n      }\n    }\n    exports.applyCodecParameters = applyCodecParameters;\n  }\n});\n\n// ../../node_modules/mediasoup-client/lib/handlers/sdp/unifiedPlanUtils.js\nvar require_unifiedPlanUtils = __commonJS({\n  \"../../node_modules/mediasoup-client/lib/handlers/sdp/unifiedPlanUtils.js\"(exports) {\n    \"use strict\";\n    init_process();\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.addLegacySimulcast = exports.getRtpEncodings = void 0;\n    function getRtpEncodings({ offerMediaObject }) {\n      const ssrcs = /* @__PURE__ */ new Set();\n      for (const line of offerMediaObject.ssrcs || []) {\n        const ssrc = line.id;\n        ssrcs.add(ssrc);\n      }\n      if (ssrcs.size === 0) {\n        throw new Error(\"no a=ssrc lines found\");\n      }\n      const ssrcToRtxSsrc = /* @__PURE__ */ new Map();\n      for (const line of offerMediaObject.ssrcGroups || []) {\n        if (line.semantics !== \"FID\") {\n          continue;\n        }\n        let [ssrc, rtxSsrc] = line.ssrcs.split(/\\s+/);\n        ssrc = Number(ssrc);\n        rtxSsrc = Number(rtxSsrc);\n        if (ssrcs.has(ssrc)) {\n          ssrcs.delete(ssrc);\n          ssrcs.delete(rtxSsrc);\n          ssrcToRtxSsrc.set(ssrc, rtxSsrc);\n        }\n      }\n      for (const ssrc of ssrcs) {\n        ssrcToRtxSsrc.set(ssrc, null);\n      }\n      const encodings = [];\n      for (const [ssrc, rtxSsrc] of ssrcToRtxSsrc) {\n        const encoding = { ssrc };\n        if (rtxSsrc) {\n          encoding.rtx = { ssrc: rtxSsrc };\n        }\n        encodings.push(encoding);\n      }\n      return encodings;\n    }\n    exports.getRtpEncodings = getRtpEncodings;\n    function addLegacySimulcast({ offerMediaObject, numStreams }) {\n      if (numStreams <= 1) {\n        throw new TypeError(\"numStreams must be greater than 1\");\n      }\n      const ssrcMsidLine = (offerMediaObject.ssrcs || []).find((line) => line.attribute === \"msid\");\n      if (!ssrcMsidLine) {\n        throw new Error(\"a=ssrc line with msid information not found\");\n      }\n      const [streamId, trackId] = ssrcMsidLine.value.split(\" \");\n      const firstSsrc = ssrcMsidLine.id;\n      let firstRtxSsrc;\n      (offerMediaObject.ssrcGroups || []).some((line) => {\n        if (line.semantics !== \"FID\") {\n          return false;\n        }\n        const ssrcs2 = line.ssrcs.split(/\\s+/);\n        if (Number(ssrcs2[0]) === firstSsrc) {\n          firstRtxSsrc = Number(ssrcs2[1]);\n          return true;\n        } else {\n          return false;\n        }\n      });\n      const ssrcCnameLine = offerMediaObject.ssrcs.find((line) => line.attribute === \"cname\");\n      if (!ssrcCnameLine) {\n        throw new Error(\"a=ssrc line with cname information not found\");\n      }\n      const cname = ssrcCnameLine.value;\n      const ssrcs = [];\n      const rtxSsrcs = [];\n      for (let i = 0; i < numStreams; ++i) {\n        ssrcs.push(firstSsrc + i);\n        if (firstRtxSsrc) {\n          rtxSsrcs.push(firstRtxSsrc + i);\n        }\n      }\n      offerMediaObject.ssrcGroups = [];\n      offerMediaObject.ssrcs = [];\n      offerMediaObject.ssrcGroups.push({\n        semantics: \"SIM\",\n        ssrcs: ssrcs.join(\" \")\n      });\n      for (let i = 0; i < ssrcs.length; ++i) {\n        const ssrc = ssrcs[i];\n        offerMediaObject.ssrcs.push({\n          id: ssrc,\n          attribute: \"cname\",\n          value: cname\n        });\n        offerMediaObject.ssrcs.push({\n          id: ssrc,\n          attribute: \"msid\",\n          value: `${streamId} ${trackId}`\n        });\n      }\n      for (let i = 0; i < rtxSsrcs.length; ++i) {\n        const ssrc = ssrcs[i];\n        const rtxSsrc = rtxSsrcs[i];\n        offerMediaObject.ssrcs.push({\n          id: rtxSsrc,\n          attribute: \"cname\",\n          value: cname\n        });\n        offerMediaObject.ssrcs.push({\n          id: rtxSsrc,\n          attribute: \"msid\",\n          value: `${streamId} ${trackId}`\n        });\n        offerMediaObject.ssrcGroups.push({\n          semantics: \"FID\",\n          ssrcs: `${ssrc} ${rtxSsrc}`\n        });\n      }\n    }\n    exports.addLegacySimulcast = addLegacySimulcast;\n  }\n});\n\n// ../../node_modules/mediasoup-client/lib/handlers/ortc/utils.js\nvar require_utils3 = __commonJS({\n  \"../../node_modules/mediasoup-client/lib/handlers/ortc/utils.js\"(exports) {\n    \"use strict\";\n    init_process();\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.addNackSuppportForOpus = void 0;\n    function addNackSuppportForOpus(rtpCapabilities) {\n      var _a2;\n      for (const codec of rtpCapabilities.codecs || []) {\n        if ((codec.mimeType.toLowerCase() === \"audio/opus\" || codec.mimeType.toLowerCase() === \"audio/multiopus\") && !((_a2 = codec.rtcpFeedback) === null || _a2 === void 0 ? void 0 : _a2.some((fb) => fb.type === \"nack\" && !fb.parameter))) {\n          if (!codec.rtcpFeedback) {\n            codec.rtcpFeedback = [];\n          }\n          codec.rtcpFeedback.push({ type: \"nack\" });\n        }\n      }\n    }\n    exports.addNackSuppportForOpus = addNackSuppportForOpus;\n  }\n});\n\n// ../../node_modules/mediasoup-client/lib/handlers/HandlerInterface.js\nvar require_HandlerInterface = __commonJS({\n  \"../../node_modules/mediasoup-client/lib/handlers/HandlerInterface.js\"(exports) {\n    \"use strict\";\n    init_process();\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.HandlerInterface = void 0;\n    var EnhancedEventEmitter_1 = require_EnhancedEventEmitter();\n    var HandlerInterface = class extends EnhancedEventEmitter_1.EnhancedEventEmitter {\n      constructor() {\n        super();\n      }\n    };\n    exports.HandlerInterface = HandlerInterface;\n  }\n});\n\n// ../../node_modules/mediasoup-client/lib/handlers/sdp/MediaSection.js\nvar require_MediaSection = __commonJS({\n  \"../../node_modules/mediasoup-client/lib/handlers/sdp/MediaSection.js\"(exports) {\n    \"use strict\";\n    init_process();\n    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {\n      if (k2 === void 0)\n        k2 = k;\n      var desc = Object.getOwnPropertyDescriptor(m, k);\n      if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n        desc = { enumerable: true, get: function() {\n          return m[k];\n        } };\n      }\n      Object.defineProperty(o2, k2, desc);\n    } : function(o2, m, k, k2) {\n      if (k2 === void 0)\n        k2 = k;\n      o2[k2] = m[k];\n    });\n    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {\n      Object.defineProperty(o2, \"default\", { enumerable: true, value: v });\n    } : function(o2, v) {\n      o2[\"default\"] = v;\n    });\n    var __importStar = exports && exports.__importStar || function(mod) {\n      if (mod && mod.__esModule)\n        return mod;\n      var result2 = {};\n      if (mod != null) {\n        for (var k in mod)\n          if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k))\n            __createBinding(result2, mod, k);\n      }\n      __setModuleDefault(result2, mod);\n      return result2;\n    };\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.OfferMediaSection = exports.AnswerMediaSection = exports.MediaSection = void 0;\n    var sdpTransform4 = __importStar(require_lib());\n    var utils = __importStar(require_utils2());\n    var MediaSection = class {\n      constructor({ iceParameters, iceCandidates, dtlsParameters, planB = false }) {\n        this._mediaObject = {};\n        this._planB = planB;\n        if (iceParameters) {\n          this.setIceParameters(iceParameters);\n        }\n        if (iceCandidates) {\n          this._mediaObject.candidates = [];\n          for (const candidate of iceCandidates) {\n            const candidateObject = {};\n            candidateObject.component = 1;\n            candidateObject.foundation = candidate.foundation;\n            candidateObject.ip = candidate.ip;\n            candidateObject.port = candidate.port;\n            candidateObject.priority = candidate.priority;\n            candidateObject.transport = candidate.protocol;\n            candidateObject.type = candidate.type;\n            if (candidate.tcpType) {\n              candidateObject.tcptype = candidate.tcpType;\n            }\n            this._mediaObject.candidates.push(candidateObject);\n          }\n          this._mediaObject.endOfCandidates = \"end-of-candidates\";\n          this._mediaObject.iceOptions = \"renomination\";\n        }\n        if (dtlsParameters) {\n          this.setDtlsRole(dtlsParameters.role);\n        }\n      }\n      get mid() {\n        return String(this._mediaObject.mid);\n      }\n      get closed() {\n        return this._mediaObject.port === 0;\n      }\n      getObject() {\n        return this._mediaObject;\n      }\n      setIceParameters(iceParameters) {\n        this._mediaObject.iceUfrag = iceParameters.usernameFragment;\n        this._mediaObject.icePwd = iceParameters.password;\n      }\n      pause() {\n        this._mediaObject.direction = \"inactive\";\n      }\n      disable() {\n        this.pause();\n        delete this._mediaObject.ext;\n        delete this._mediaObject.ssrcs;\n        delete this._mediaObject.ssrcGroups;\n        delete this._mediaObject.simulcast;\n        delete this._mediaObject.simulcast_03;\n        delete this._mediaObject.rids;\n        delete this._mediaObject.extmapAllowMixed;\n      }\n      close() {\n        this.disable();\n        this._mediaObject.port = 0;\n      }\n    };\n    exports.MediaSection = MediaSection;\n    var AnswerMediaSection = class extends MediaSection {\n      constructor({ iceParameters, iceCandidates, dtlsParameters, sctpParameters, plainRtpParameters, planB = false, offerMediaObject, offerRtpParameters, answerRtpParameters, codecOptions, extmapAllowMixed = false }) {\n        super({ iceParameters, iceCandidates, dtlsParameters, planB });\n        this._mediaObject.mid = String(offerMediaObject.mid);\n        this._mediaObject.type = offerMediaObject.type;\n        this._mediaObject.protocol = offerMediaObject.protocol;\n        if (!plainRtpParameters) {\n          this._mediaObject.connection = { ip: \"127.0.0.1\", version: 4 };\n          this._mediaObject.port = 7;\n        } else {\n          this._mediaObject.connection = {\n            ip: plainRtpParameters.ip,\n            version: plainRtpParameters.ipVersion\n          };\n          this._mediaObject.port = plainRtpParameters.port;\n        }\n        switch (offerMediaObject.type) {\n          case \"audio\":\n          case \"video\": {\n            this._mediaObject.direction = \"recvonly\";\n            this._mediaObject.rtp = [];\n            this._mediaObject.rtcpFb = [];\n            this._mediaObject.fmtp = [];\n            for (const codec of answerRtpParameters.codecs) {\n              const rtp = {\n                payload: codec.payloadType,\n                codec: getCodecName(codec),\n                rate: codec.clockRate\n              };\n              if (codec.channels > 1) {\n                rtp.encoding = codec.channels;\n              }\n              this._mediaObject.rtp.push(rtp);\n              const codecParameters = utils.clone(codec.parameters, {});\n              let codecRtcpFeedback = utils.clone(codec.rtcpFeedback, []);\n              if (codecOptions) {\n                const { opusStereo, opusFec, opusDtx, opusMaxPlaybackRate, opusMaxAverageBitrate, opusPtime, opusNack, videoGoogleStartBitrate, videoGoogleMaxBitrate, videoGoogleMinBitrate } = codecOptions;\n                const offerCodec = offerRtpParameters.codecs.find((c) => c.payloadType === codec.payloadType);\n                switch (codec.mimeType.toLowerCase()) {\n                  case \"audio/opus\":\n                  case \"audio/multiopus\": {\n                    if (opusStereo !== void 0) {\n                      offerCodec.parameters[\"sprop-stereo\"] = opusStereo ? 1 : 0;\n                      codecParameters.stereo = opusStereo ? 1 : 0;\n                    }\n                    if (opusFec !== void 0) {\n                      offerCodec.parameters.useinbandfec = opusFec ? 1 : 0;\n                      codecParameters.useinbandfec = opusFec ? 1 : 0;\n                    }\n                    if (opusDtx !== void 0) {\n                      offerCodec.parameters.usedtx = opusDtx ? 1 : 0;\n                      codecParameters.usedtx = opusDtx ? 1 : 0;\n                    }\n                    if (opusMaxPlaybackRate !== void 0) {\n                      codecParameters.maxplaybackrate = opusMaxPlaybackRate;\n                    }\n                    if (opusMaxAverageBitrate !== void 0) {\n                      codecParameters.maxaveragebitrate = opusMaxAverageBitrate;\n                    }\n                    if (opusPtime !== void 0) {\n                      offerCodec.parameters.ptime = opusPtime;\n                      codecParameters.ptime = opusPtime;\n                    }\n                    if (!opusNack) {\n                      offerCodec.rtcpFeedback = offerCodec.rtcpFeedback.filter((fb) => fb.type !== \"nack\" || fb.parameter);\n                      codecRtcpFeedback = codecRtcpFeedback.filter((fb) => fb.type !== \"nack\" || fb.parameter);\n                    }\n                    break;\n                  }\n                  case \"video/vp8\":\n                  case \"video/vp9\":\n                  case \"video/h264\":\n                  case \"video/h265\": {\n                    if (videoGoogleStartBitrate !== void 0) {\n                      codecParameters[\"x-google-start-bitrate\"] = videoGoogleStartBitrate;\n                    }\n                    if (videoGoogleMaxBitrate !== void 0) {\n                      codecParameters[\"x-google-max-bitrate\"] = videoGoogleMaxBitrate;\n                    }\n                    if (videoGoogleMinBitrate !== void 0) {\n                      codecParameters[\"x-google-min-bitrate\"] = videoGoogleMinBitrate;\n                    }\n                    break;\n                  }\n                }\n              }\n              const fmtp = {\n                payload: codec.payloadType,\n                config: \"\"\n              };\n              for (const key of Object.keys(codecParameters)) {\n                if (fmtp.config) {\n                  fmtp.config += \";\";\n                }\n                fmtp.config += `${key}=${codecParameters[key]}`;\n              }\n              if (fmtp.config) {\n                this._mediaObject.fmtp.push(fmtp);\n              }\n              for (const fb of codecRtcpFeedback) {\n                this._mediaObject.rtcpFb.push({\n                  payload: codec.payloadType,\n                  type: fb.type,\n                  subtype: fb.parameter\n                });\n              }\n            }\n            this._mediaObject.payloads = answerRtpParameters.codecs.map((codec) => codec.payloadType).join(\" \");\n            this._mediaObject.ext = [];\n            for (const ext of answerRtpParameters.headerExtensions) {\n              const found = (offerMediaObject.ext || []).some((localExt) => localExt.uri === ext.uri);\n              if (!found) {\n                continue;\n              }\n              this._mediaObject.ext.push({\n                uri: ext.uri,\n                value: ext.id\n              });\n            }\n            if (extmapAllowMixed && offerMediaObject.extmapAllowMixed === \"extmap-allow-mixed\") {\n              this._mediaObject.extmapAllowMixed = \"extmap-allow-mixed\";\n            }\n            if (offerMediaObject.simulcast) {\n              this._mediaObject.simulcast = {\n                dir1: \"recv\",\n                list1: offerMediaObject.simulcast.list1\n              };\n              this._mediaObject.rids = [];\n              for (const rid of offerMediaObject.rids || []) {\n                if (rid.direction !== \"send\") {\n                  continue;\n                }\n                this._mediaObject.rids.push({\n                  id: rid.id,\n                  direction: \"recv\"\n                });\n              }\n            } else if (offerMediaObject.simulcast_03) {\n              this._mediaObject.simulcast_03 = {\n                value: offerMediaObject.simulcast_03.value.replace(/send/g, \"recv\")\n              };\n              this._mediaObject.rids = [];\n              for (const rid of offerMediaObject.rids || []) {\n                if (rid.direction !== \"send\") {\n                  continue;\n                }\n                this._mediaObject.rids.push({\n                  id: rid.id,\n                  direction: \"recv\"\n                });\n              }\n            }\n            this._mediaObject.rtcpMux = \"rtcp-mux\";\n            this._mediaObject.rtcpRsize = \"rtcp-rsize\";\n            if (this._planB && this._mediaObject.type === \"video\") {\n              this._mediaObject.xGoogleFlag = \"conference\";\n            }\n            break;\n          }\n          case \"application\": {\n            if (typeof offerMediaObject.sctpPort === \"number\") {\n              this._mediaObject.payloads = \"webrtc-datachannel\";\n              this._mediaObject.sctpPort = sctpParameters.port;\n              this._mediaObject.maxMessageSize = sctpParameters.maxMessageSize;\n            } else if (offerMediaObject.sctpmap) {\n              this._mediaObject.payloads = sctpParameters.port;\n              this._mediaObject.sctpmap = {\n                app: \"webrtc-datachannel\",\n                sctpmapNumber: sctpParameters.port,\n                maxMessageSize: sctpParameters.maxMessageSize\n              };\n            }\n            break;\n          }\n        }\n      }\n      setDtlsRole(role) {\n        switch (role) {\n          case \"client\":\n            this._mediaObject.setup = \"active\";\n            break;\n          case \"server\":\n            this._mediaObject.setup = \"passive\";\n            break;\n          case \"auto\":\n            this._mediaObject.setup = \"actpass\";\n            break;\n        }\n      }\n      resume() {\n        this._mediaObject.direction = \"recvonly\";\n      }\n      muxSimulcastStreams(encodings) {\n        var _a2;\n        if (!this._mediaObject.simulcast || !this._mediaObject.simulcast.list1) {\n          return;\n        }\n        const layers = {};\n        for (const encoding of encodings) {\n          if (encoding.rid) {\n            layers[encoding.rid] = encoding;\n          }\n        }\n        const raw = this._mediaObject.simulcast.list1;\n        const simulcastStreams = sdpTransform4.parseSimulcastStreamList(raw);\n        for (const simulcastStream of simulcastStreams) {\n          for (const simulcastFormat of simulcastStream) {\n            simulcastFormat.paused = !((_a2 = layers[simulcastFormat.scid]) === null || _a2 === void 0 ? void 0 : _a2.active);\n          }\n        }\n        this._mediaObject.simulcast.list1 = simulcastStreams.map((simulcastFormats) => simulcastFormats.map((f) => `${f.paused ? \"~\" : \"\"}${f.scid}`).join(\",\")).join(\";\");\n      }\n    };\n    exports.AnswerMediaSection = AnswerMediaSection;\n    var OfferMediaSection = class extends MediaSection {\n      constructor({ iceParameters, iceCandidates, dtlsParameters, sctpParameters, plainRtpParameters, planB = false, mid, kind, offerRtpParameters, streamId, trackId, oldDataChannelSpec = false }) {\n        super({ iceParameters, iceCandidates, dtlsParameters, planB });\n        this._mediaObject.mid = String(mid);\n        this._mediaObject.type = kind;\n        if (!plainRtpParameters) {\n          this._mediaObject.connection = { ip: \"127.0.0.1\", version: 4 };\n          if (!sctpParameters) {\n            this._mediaObject.protocol = \"UDP/TLS/RTP/SAVPF\";\n          } else {\n            this._mediaObject.protocol = \"UDP/DTLS/SCTP\";\n          }\n          this._mediaObject.port = 7;\n        } else {\n          this._mediaObject.connection = {\n            ip: plainRtpParameters.ip,\n            version: plainRtpParameters.ipVersion\n          };\n          this._mediaObject.protocol = \"RTP/AVP\";\n          this._mediaObject.port = plainRtpParameters.port;\n        }\n        switch (kind) {\n          case \"audio\":\n          case \"video\": {\n            this._mediaObject.direction = \"sendonly\";\n            this._mediaObject.rtp = [];\n            this._mediaObject.rtcpFb = [];\n            this._mediaObject.fmtp = [];\n            if (!this._planB) {\n              this._mediaObject.msid = `${streamId || \"-\"} ${trackId}`;\n            }\n            for (const codec of offerRtpParameters.codecs) {\n              const rtp = {\n                payload: codec.payloadType,\n                codec: getCodecName(codec),\n                rate: codec.clockRate\n              };\n              if (codec.channels > 1) {\n                rtp.encoding = codec.channels;\n              }\n              this._mediaObject.rtp.push(rtp);\n              const fmtp = {\n                payload: codec.payloadType,\n                config: \"\"\n              };\n              for (const key of Object.keys(codec.parameters)) {\n                if (fmtp.config) {\n                  fmtp.config += \";\";\n                }\n                fmtp.config += `${key}=${codec.parameters[key]}`;\n              }\n              if (fmtp.config) {\n                this._mediaObject.fmtp.push(fmtp);\n              }\n              for (const fb of codec.rtcpFeedback) {\n                this._mediaObject.rtcpFb.push({\n                  payload: codec.payloadType,\n                  type: fb.type,\n                  subtype: fb.parameter\n                });\n              }\n            }\n            this._mediaObject.payloads = offerRtpParameters.codecs.map((codec) => codec.payloadType).join(\" \");\n            this._mediaObject.ext = [];\n            for (const ext of offerRtpParameters.headerExtensions) {\n              this._mediaObject.ext.push({\n                uri: ext.uri,\n                value: ext.id\n              });\n            }\n            this._mediaObject.rtcpMux = \"rtcp-mux\";\n            this._mediaObject.rtcpRsize = \"rtcp-rsize\";\n            const encoding = offerRtpParameters.encodings[0];\n            const ssrc = encoding.ssrc;\n            const rtxSsrc = encoding.rtx && encoding.rtx.ssrc ? encoding.rtx.ssrc : void 0;\n            this._mediaObject.ssrcs = [];\n            this._mediaObject.ssrcGroups = [];\n            if (offerRtpParameters.rtcp.cname) {\n              this._mediaObject.ssrcs.push({\n                id: ssrc,\n                attribute: \"cname\",\n                value: offerRtpParameters.rtcp.cname\n              });\n            }\n            if (this._planB) {\n              this._mediaObject.ssrcs.push({\n                id: ssrc,\n                attribute: \"msid\",\n                value: `${streamId || \"-\"} ${trackId}`\n              });\n            }\n            if (rtxSsrc) {\n              if (offerRtpParameters.rtcp.cname) {\n                this._mediaObject.ssrcs.push({\n                  id: rtxSsrc,\n                  attribute: \"cname\",\n                  value: offerRtpParameters.rtcp.cname\n                });\n              }\n              if (this._planB) {\n                this._mediaObject.ssrcs.push({\n                  id: rtxSsrc,\n                  attribute: \"msid\",\n                  value: `${streamId || \"-\"} ${trackId}`\n                });\n              }\n              this._mediaObject.ssrcGroups.push({\n                semantics: \"FID\",\n                ssrcs: `${ssrc} ${rtxSsrc}`\n              });\n            }\n            break;\n          }\n          case \"application\": {\n            if (!oldDataChannelSpec) {\n              this._mediaObject.payloads = \"webrtc-datachannel\";\n              this._mediaObject.sctpPort = sctpParameters.port;\n              this._mediaObject.maxMessageSize = sctpParameters.maxMessageSize;\n            } else {\n              this._mediaObject.payloads = sctpParameters.port;\n              this._mediaObject.sctpmap = {\n                app: \"webrtc-datachannel\",\n                sctpmapNumber: sctpParameters.port,\n                maxMessageSize: sctpParameters.maxMessageSize\n              };\n            }\n            break;\n          }\n        }\n      }\n      setDtlsRole(role) {\n        this._mediaObject.setup = \"actpass\";\n      }\n      resume() {\n        this._mediaObject.direction = \"sendonly\";\n      }\n      planBReceive({ offerRtpParameters, streamId, trackId }) {\n        const encoding = offerRtpParameters.encodings[0];\n        const ssrc = encoding.ssrc;\n        const rtxSsrc = encoding.rtx && encoding.rtx.ssrc ? encoding.rtx.ssrc : void 0;\n        const payloads = this._mediaObject.payloads.split(\" \");\n        for (const codec of offerRtpParameters.codecs) {\n          if (payloads.includes(String(codec.payloadType))) {\n            continue;\n          }\n          const rtp = {\n            payload: codec.payloadType,\n            codec: getCodecName(codec),\n            rate: codec.clockRate\n          };\n          if (codec.channels > 1) {\n            rtp.encoding = codec.channels;\n          }\n          this._mediaObject.rtp.push(rtp);\n          const fmtp = {\n            payload: codec.payloadType,\n            config: \"\"\n          };\n          for (const key of Object.keys(codec.parameters)) {\n            if (fmtp.config) {\n              fmtp.config += \";\";\n            }\n            fmtp.config += `${key}=${codec.parameters[key]}`;\n          }\n          if (fmtp.config) {\n            this._mediaObject.fmtp.push(fmtp);\n          }\n          for (const fb of codec.rtcpFeedback) {\n            this._mediaObject.rtcpFb.push({\n              payload: codec.payloadType,\n              type: fb.type,\n              subtype: fb.parameter\n            });\n          }\n        }\n        this._mediaObject.payloads += ` ${offerRtpParameters.codecs.filter((codec) => !this._mediaObject.payloads.includes(codec.payloadType)).map((codec) => codec.payloadType).join(\" \")}`;\n        this._mediaObject.payloads = this._mediaObject.payloads.trim();\n        if (offerRtpParameters.rtcp.cname) {\n          this._mediaObject.ssrcs.push({\n            id: ssrc,\n            attribute: \"cname\",\n            value: offerRtpParameters.rtcp.cname\n          });\n        }\n        this._mediaObject.ssrcs.push({\n          id: ssrc,\n          attribute: \"msid\",\n          value: `${streamId || \"-\"} ${trackId}`\n        });\n        if (rtxSsrc) {\n          if (offerRtpParameters.rtcp.cname) {\n            this._mediaObject.ssrcs.push({\n              id: rtxSsrc,\n              attribute: \"cname\",\n              value: offerRtpParameters.rtcp.cname\n            });\n          }\n          this._mediaObject.ssrcs.push({\n            id: rtxSsrc,\n            attribute: \"msid\",\n            value: `${streamId || \"-\"} ${trackId}`\n          });\n          this._mediaObject.ssrcGroups.push({\n            semantics: \"FID\",\n            ssrcs: `${ssrc} ${rtxSsrc}`\n          });\n        }\n      }\n      planBStopReceiving({ offerRtpParameters }) {\n        const encoding = offerRtpParameters.encodings[0];\n        const ssrc = encoding.ssrc;\n        const rtxSsrc = encoding.rtx && encoding.rtx.ssrc ? encoding.rtx.ssrc : void 0;\n        this._mediaObject.ssrcs = this._mediaObject.ssrcs.filter((s) => s.id !== ssrc && s.id !== rtxSsrc);\n        if (rtxSsrc) {\n          this._mediaObject.ssrcGroups = this._mediaObject.ssrcGroups.filter((group) => group.ssrcs !== `${ssrc} ${rtxSsrc}`);\n        }\n      }\n    };\n    exports.OfferMediaSection = OfferMediaSection;\n    function getCodecName(codec) {\n      const MimeTypeRegex = new RegExp(\"^(audio|video)/(.+)\", \"i\");\n      const mimeTypeMatch = MimeTypeRegex.exec(codec.mimeType);\n      if (!mimeTypeMatch) {\n        throw new TypeError(\"invalid codec.mimeType\");\n      }\n      return mimeTypeMatch[2];\n    }\n  }\n});\n\n// ../../node_modules/mediasoup-client/lib/handlers/sdp/RemoteSdp.js\nvar require_RemoteSdp = __commonJS({\n  \"../../node_modules/mediasoup-client/lib/handlers/sdp/RemoteSdp.js\"(exports) {\n    \"use strict\";\n    init_process();\n    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {\n      if (k2 === void 0)\n        k2 = k;\n      var desc = Object.getOwnPropertyDescriptor(m, k);\n      if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n        desc = { enumerable: true, get: function() {\n          return m[k];\n        } };\n      }\n      Object.defineProperty(o2, k2, desc);\n    } : function(o2, m, k, k2) {\n      if (k2 === void 0)\n        k2 = k;\n      o2[k2] = m[k];\n    });\n    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {\n      Object.defineProperty(o2, \"default\", { enumerable: true, value: v });\n    } : function(o2, v) {\n      o2[\"default\"] = v;\n    });\n    var __importStar = exports && exports.__importStar || function(mod) {\n      if (mod && mod.__esModule)\n        return mod;\n      var result2 = {};\n      if (mod != null) {\n        for (var k in mod)\n          if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k))\n            __createBinding(result2, mod, k);\n      }\n      __setModuleDefault(result2, mod);\n      return result2;\n    };\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.RemoteSdp = void 0;\n    var sdpTransform4 = __importStar(require_lib());\n    var Logger_1 = require_Logger();\n    var MediaSection_1 = require_MediaSection();\n    var logger2 = new Logger_1.Logger(\"RemoteSdp\");\n    var RemoteSdp = class {\n      constructor({ iceParameters, iceCandidates, dtlsParameters, sctpParameters, plainRtpParameters, planB = false }) {\n        this._mediaSections = [];\n        this._midToIndex = /* @__PURE__ */ new Map();\n        this._iceParameters = iceParameters;\n        this._iceCandidates = iceCandidates;\n        this._dtlsParameters = dtlsParameters;\n        this._sctpParameters = sctpParameters;\n        this._plainRtpParameters = plainRtpParameters;\n        this._planB = planB;\n        this._sdpObject = {\n          version: 0,\n          origin: {\n            address: \"0.0.0.0\",\n            ipVer: 4,\n            netType: \"IN\",\n            sessionId: 1e4,\n            sessionVersion: 0,\n            username: \"mediasoup-client\"\n          },\n          name: \"-\",\n          timing: { start: 0, stop: 0 },\n          media: []\n        };\n        if (iceParameters && iceParameters.iceLite) {\n          this._sdpObject.icelite = \"ice-lite\";\n        }\n        if (dtlsParameters) {\n          this._sdpObject.msidSemantic = { semantic: \"WMS\", token: \"*\" };\n          const numFingerprints = this._dtlsParameters.fingerprints.length;\n          this._sdpObject.fingerprint = {\n            type: dtlsParameters.fingerprints[numFingerprints - 1].algorithm,\n            hash: dtlsParameters.fingerprints[numFingerprints - 1].value\n          };\n          this._sdpObject.groups = [{ type: \"BUNDLE\", mids: \"\" }];\n        }\n        if (plainRtpParameters) {\n          this._sdpObject.origin.address = plainRtpParameters.ip;\n          this._sdpObject.origin.ipVer = plainRtpParameters.ipVersion;\n        }\n      }\n      updateIceParameters(iceParameters) {\n        logger2.debug(\"updateIceParameters() [iceParameters:%o]\", iceParameters);\n        this._iceParameters = iceParameters;\n        this._sdpObject.icelite = iceParameters.iceLite ? \"ice-lite\" : void 0;\n        for (const mediaSection of this._mediaSections) {\n          mediaSection.setIceParameters(iceParameters);\n        }\n      }\n      updateDtlsRole(role) {\n        logger2.debug(\"updateDtlsRole() [role:%s]\", role);\n        this._dtlsParameters.role = role;\n        for (const mediaSection of this._mediaSections) {\n          mediaSection.setDtlsRole(role);\n        }\n      }\n      getNextMediaSectionIdx() {\n        for (let idx = 0; idx < this._mediaSections.length; ++idx) {\n          const mediaSection = this._mediaSections[idx];\n          if (mediaSection.closed) {\n            return { idx, reuseMid: mediaSection.mid };\n          }\n        }\n        return { idx: this._mediaSections.length };\n      }\n      send({ offerMediaObject, reuseMid, offerRtpParameters, answerRtpParameters, codecOptions, extmapAllowMixed = false }) {\n        const mediaSection = new MediaSection_1.AnswerMediaSection({\n          iceParameters: this._iceParameters,\n          iceCandidates: this._iceCandidates,\n          dtlsParameters: this._dtlsParameters,\n          plainRtpParameters: this._plainRtpParameters,\n          planB: this._planB,\n          offerMediaObject,\n          offerRtpParameters,\n          answerRtpParameters,\n          codecOptions,\n          extmapAllowMixed\n        });\n        if (reuseMid) {\n          this._replaceMediaSection(mediaSection, reuseMid);\n        } else if (!this._midToIndex.has(mediaSection.mid)) {\n          this._addMediaSection(mediaSection);\n        } else {\n          this._replaceMediaSection(mediaSection);\n        }\n      }\n      receive({ mid, kind, offerRtpParameters, streamId, trackId }) {\n        const idx = this._midToIndex.get(mid);\n        let mediaSection;\n        if (idx !== void 0) {\n          mediaSection = this._mediaSections[idx];\n        }\n        if (!mediaSection) {\n          mediaSection = new MediaSection_1.OfferMediaSection({\n            iceParameters: this._iceParameters,\n            iceCandidates: this._iceCandidates,\n            dtlsParameters: this._dtlsParameters,\n            plainRtpParameters: this._plainRtpParameters,\n            planB: this._planB,\n            mid,\n            kind,\n            offerRtpParameters,\n            streamId,\n            trackId\n          });\n          const oldMediaSection = this._mediaSections.find((m) => m.closed);\n          if (oldMediaSection) {\n            this._replaceMediaSection(mediaSection, oldMediaSection.mid);\n          } else {\n            this._addMediaSection(mediaSection);\n          }\n        } else {\n          mediaSection.planBReceive({ offerRtpParameters, streamId, trackId });\n          this._replaceMediaSection(mediaSection);\n        }\n      }\n      pauseMediaSection(mid) {\n        const mediaSection = this._findMediaSection(mid);\n        mediaSection.pause();\n      }\n      resumeSendingMediaSection(mid) {\n        const mediaSection = this._findMediaSection(mid);\n        mediaSection.resume();\n      }\n      resumeReceivingMediaSection(mid) {\n        const mediaSection = this._findMediaSection(mid);\n        mediaSection.resume();\n      }\n      disableMediaSection(mid) {\n        const mediaSection = this._findMediaSection(mid);\n        mediaSection.disable();\n      }\n      closeMediaSection(mid) {\n        const mediaSection = this._findMediaSection(mid);\n        if (mid === this._firstMid) {\n          logger2.debug(\"closeMediaSection() | cannot close first media section, disabling it instead [mid:%s]\", mid);\n          this.disableMediaSection(mid);\n          return false;\n        }\n        mediaSection.close();\n        this._regenerateBundleMids();\n        return true;\n      }\n      muxMediaSectionSimulcast(mid, encodings) {\n        const mediaSection = this._findMediaSection(mid);\n        mediaSection.muxSimulcastStreams(encodings);\n        this._replaceMediaSection(mediaSection);\n      }\n      planBStopReceiving({ mid, offerRtpParameters }) {\n        const mediaSection = this._findMediaSection(mid);\n        mediaSection.planBStopReceiving({ offerRtpParameters });\n        this._replaceMediaSection(mediaSection);\n      }\n      sendSctpAssociation({ offerMediaObject }) {\n        const mediaSection = new MediaSection_1.AnswerMediaSection({\n          iceParameters: this._iceParameters,\n          iceCandidates: this._iceCandidates,\n          dtlsParameters: this._dtlsParameters,\n          sctpParameters: this._sctpParameters,\n          plainRtpParameters: this._plainRtpParameters,\n          offerMediaObject\n        });\n        this._addMediaSection(mediaSection);\n      }\n      receiveSctpAssociation({ oldDataChannelSpec = false } = {}) {\n        const mediaSection = new MediaSection_1.OfferMediaSection({\n          iceParameters: this._iceParameters,\n          iceCandidates: this._iceCandidates,\n          dtlsParameters: this._dtlsParameters,\n          sctpParameters: this._sctpParameters,\n          plainRtpParameters: this._plainRtpParameters,\n          mid: \"datachannel\",\n          kind: \"application\",\n          oldDataChannelSpec\n        });\n        this._addMediaSection(mediaSection);\n      }\n      getSdp() {\n        this._sdpObject.origin.sessionVersion++;\n        return sdpTransform4.write(this._sdpObject);\n      }\n      _addMediaSection(newMediaSection) {\n        if (!this._firstMid) {\n          this._firstMid = newMediaSection.mid;\n        }\n        this._mediaSections.push(newMediaSection);\n        this._midToIndex.set(newMediaSection.mid, this._mediaSections.length - 1);\n        this._sdpObject.media.push(newMediaSection.getObject());\n        this._regenerateBundleMids();\n      }\n      _replaceMediaSection(newMediaSection, reuseMid) {\n        if (typeof reuseMid === \"string\") {\n          const idx = this._midToIndex.get(reuseMid);\n          if (idx === void 0) {\n            throw new Error(`no media section found for reuseMid '${reuseMid}'`);\n          }\n          const oldMediaSection = this._mediaSections[idx];\n          this._mediaSections[idx] = newMediaSection;\n          this._midToIndex.delete(oldMediaSection.mid);\n          this._midToIndex.set(newMediaSection.mid, idx);\n          this._sdpObject.media[idx] = newMediaSection.getObject();\n          this._regenerateBundleMids();\n        } else {\n          const idx = this._midToIndex.get(newMediaSection.mid);\n          if (idx === void 0) {\n            throw new Error(`no media section found with mid '${newMediaSection.mid}'`);\n          }\n          this._mediaSections[idx] = newMediaSection;\n          this._sdpObject.media[idx] = newMediaSection.getObject();\n        }\n      }\n      _findMediaSection(mid) {\n        const idx = this._midToIndex.get(mid);\n        if (idx === void 0) {\n          throw new Error(`no media section found with mid '${mid}'`);\n        }\n        return this._mediaSections[idx];\n      }\n      _regenerateBundleMids() {\n        if (!this._dtlsParameters) {\n          return;\n        }\n        this._sdpObject.groups[0].mids = this._mediaSections.filter((mediaSection) => !mediaSection.closed).map((mediaSection) => mediaSection.mid).join(\" \");\n      }\n    };\n    exports.RemoteSdp = RemoteSdp;\n  }\n});\n\n// ../../node_modules/mediasoup-client/lib/scalabilityModes.js\nvar require_scalabilityModes = __commonJS({\n  \"../../node_modules/mediasoup-client/lib/scalabilityModes.js\"(exports) {\n    \"use strict\";\n    init_process();\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.parse = void 0;\n    var ScalabilityModeRegex = new RegExp(\"^[LS]([1-9]\\\\d{0,1})T([1-9]\\\\d{0,1})\");\n    function parse3(scalabilityMode) {\n      const match = ScalabilityModeRegex.exec(scalabilityMode || \"\");\n      if (match) {\n        return {\n          spatialLayers: Number(match[1]),\n          temporalLayers: Number(match[2])\n        };\n      } else {\n        return {\n          spatialLayers: 1,\n          temporalLayers: 1\n        };\n      }\n    }\n    exports.parse = parse3;\n  }\n});\n\n// ../../node_modules/mediasoup-client/lib/handlers/Chrome111.js\nvar require_Chrome111 = __commonJS({\n  \"../../node_modules/mediasoup-client/lib/handlers/Chrome111.js\"(exports) {\n    \"use strict\";\n    init_process();\n    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {\n      if (k2 === void 0)\n        k2 = k;\n      var desc = Object.getOwnPropertyDescriptor(m, k);\n      if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n        desc = { enumerable: true, get: function() {\n          return m[k];\n        } };\n      }\n      Object.defineProperty(o2, k2, desc);\n    } : function(o2, m, k, k2) {\n      if (k2 === void 0)\n        k2 = k;\n      o2[k2] = m[k];\n    });\n    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {\n      Object.defineProperty(o2, \"default\", { enumerable: true, value: v });\n    } : function(o2, v) {\n      o2[\"default\"] = v;\n    });\n    var __importStar = exports && exports.__importStar || function(mod) {\n      if (mod && mod.__esModule)\n        return mod;\n      var result2 = {};\n      if (mod != null) {\n        for (var k in mod)\n          if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k))\n            __createBinding(result2, mod, k);\n      }\n      __setModuleDefault(result2, mod);\n      return result2;\n    };\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.Chrome111 = void 0;\n    var sdpTransform4 = __importStar(require_lib());\n    var Logger_1 = require_Logger();\n    var utils = __importStar(require_utils2());\n    var ortc = __importStar(require_ortc());\n    var sdpCommonUtils = __importStar(require_commonUtils());\n    var sdpUnifiedPlanUtils = __importStar(require_unifiedPlanUtils());\n    var ortcUtils = __importStar(require_utils3());\n    var HandlerInterface_1 = require_HandlerInterface();\n    var RemoteSdp_1 = require_RemoteSdp();\n    var scalabilityModes_1 = require_scalabilityModes();\n    var logger2 = new Logger_1.Logger(\"Chrome111\");\n    var SCTP_NUM_STREAMS = { OS: 1024, MIS: 1024 };\n    var Chrome111 = class extends HandlerInterface_1.HandlerInterface {\n      static createFactory() {\n        return () => new Chrome111();\n      }\n      constructor() {\n        super();\n        this._mapMidTransceiver = /* @__PURE__ */ new Map();\n        this._sendStream = new MediaStream();\n        this._hasDataChannelMediaSection = false;\n        this._nextSendSctpStreamId = 0;\n        this._transportReady = false;\n      }\n      get name() {\n        return \"Chrome111\";\n      }\n      close() {\n        logger2.debug(\"close()\");\n        if (this._pc) {\n          try {\n            this._pc.close();\n          } catch (error) {\n          }\n        }\n        this.emit(\"@close\");\n      }\n      getNativeRtpCapabilities() {\n        return __async(this, null, function* () {\n          logger2.debug(\"getNativeRtpCapabilities()\");\n          const pc = new RTCPeerConnection({\n            iceServers: [],\n            iceTransportPolicy: \"all\",\n            bundlePolicy: \"max-bundle\",\n            rtcpMuxPolicy: \"require\",\n            sdpSemantics: \"unified-plan\"\n          });\n          try {\n            pc.addTransceiver(\"audio\");\n            pc.addTransceiver(\"video\");\n            const offer = yield pc.createOffer();\n            try {\n              pc.close();\n            } catch (error) {\n            }\n            const sdpObject = sdpTransform4.parse(offer.sdp);\n            const nativeRtpCapabilities = sdpCommonUtils.extractRtpCapabilities({ sdpObject });\n            ortcUtils.addNackSuppportForOpus(nativeRtpCapabilities);\n            return nativeRtpCapabilities;\n          } catch (error) {\n            try {\n              pc.close();\n            } catch (error2) {\n            }\n            throw error;\n          }\n        });\n      }\n      getNativeSctpCapabilities() {\n        return __async(this, null, function* () {\n          logger2.debug(\"getNativeSctpCapabilities()\");\n          return {\n            numStreams: SCTP_NUM_STREAMS\n          };\n        });\n      }\n      run({ direction, iceParameters, iceCandidates, dtlsParameters, sctpParameters, iceServers, iceTransportPolicy, additionalSettings, proprietaryConstraints, extendedRtpCapabilities }) {\n        logger2.debug(\"run()\");\n        this._direction = direction;\n        this._remoteSdp = new RemoteSdp_1.RemoteSdp({\n          iceParameters,\n          iceCandidates,\n          dtlsParameters,\n          sctpParameters\n        });\n        this._sendingRtpParametersByKind = {\n          audio: ortc.getSendingRtpParameters(\"audio\", extendedRtpCapabilities),\n          video: ortc.getSendingRtpParameters(\"video\", extendedRtpCapabilities)\n        };\n        this._sendingRemoteRtpParametersByKind = {\n          audio: ortc.getSendingRemoteRtpParameters(\"audio\", extendedRtpCapabilities),\n          video: ortc.getSendingRemoteRtpParameters(\"video\", extendedRtpCapabilities)\n        };\n        if (dtlsParameters.role && dtlsParameters.role !== \"auto\") {\n          this._forcedLocalDtlsRole = dtlsParameters.role === \"server\" ? \"client\" : \"server\";\n        }\n        this._pc = new RTCPeerConnection(__spreadValues({\n          iceServers: iceServers || [],\n          iceTransportPolicy: iceTransportPolicy || \"all\",\n          bundlePolicy: \"max-bundle\",\n          rtcpMuxPolicy: \"require\",\n          sdpSemantics: \"unified-plan\"\n        }, additionalSettings), proprietaryConstraints);\n        if (this._pc.connectionState) {\n          this._pc.addEventListener(\"connectionstatechange\", () => {\n            this.emit(\"@connectionstatechange\", this._pc.connectionState);\n          });\n        } else {\n          logger2.warn(\"run() | pc.connectionState not supported, using pc.iceConnectionState\");\n          this._pc.addEventListener(\"iceconnectionstatechange\", () => {\n            switch (this._pc.iceConnectionState) {\n              case \"checking\":\n                this.emit(\"@connectionstatechange\", \"connecting\");\n                break;\n              case \"connected\":\n              case \"completed\":\n                this.emit(\"@connectionstatechange\", \"connected\");\n                break;\n              case \"failed\":\n                this.emit(\"@connectionstatechange\", \"failed\");\n                break;\n              case \"disconnected\":\n                this.emit(\"@connectionstatechange\", \"disconnected\");\n                break;\n              case \"closed\":\n                this.emit(\"@connectionstatechange\", \"closed\");\n                break;\n            }\n          });\n        }\n      }\n      updateIceServers(iceServers) {\n        return __async(this, null, function* () {\n          logger2.debug(\"updateIceServers()\");\n          const configuration = this._pc.getConfiguration();\n          configuration.iceServers = iceServers;\n          this._pc.setConfiguration(configuration);\n        });\n      }\n      restartIce(iceParameters) {\n        return __async(this, null, function* () {\n          logger2.debug(\"restartIce()\");\n          this._remoteSdp.updateIceParameters(iceParameters);\n          if (!this._transportReady) {\n            return;\n          }\n          if (this._direction === \"send\") {\n            const offer = yield this._pc.createOffer({ iceRestart: true });\n            logger2.debug(\"restartIce() | calling pc.setLocalDescription() [offer:%o]\", offer);\n            yield this._pc.setLocalDescription(offer);\n            const answer = { type: \"answer\", sdp: this._remoteSdp.getSdp() };\n            logger2.debug(\"restartIce() | calling pc.setRemoteDescription() [answer:%o]\", answer);\n            yield this._pc.setRemoteDescription(answer);\n          } else {\n            const offer = { type: \"offer\", sdp: this._remoteSdp.getSdp() };\n            logger2.debug(\"restartIce() | calling pc.setRemoteDescription() [offer:%o]\", offer);\n            yield this._pc.setRemoteDescription(offer);\n            const answer = yield this._pc.createAnswer();\n            logger2.debug(\"restartIce() | calling pc.setLocalDescription() [answer:%o]\", answer);\n            yield this._pc.setLocalDescription(answer);\n          }\n        });\n      }\n      getTransportStats() {\n        return __async(this, null, function* () {\n          return this._pc.getStats();\n        });\n      }\n      send(_0) {\n        return __async(this, arguments, function* ({ track, encodings, codecOptions, codec }) {\n          var _a2;\n          this.assertSendDirection();\n          logger2.debug(\"send() [kind:%s, track.id:%s]\", track.kind, track.id);\n          if (encodings && encodings.length > 1) {\n            encodings.forEach((encoding, idx) => {\n              encoding.rid = `r${idx}`;\n            });\n            let nextRid = 1;\n            let maxTemporalLayers = 1;\n            for (const encoding of encodings) {\n              const temporalLayers = encoding.scalabilityMode ? (0, scalabilityModes_1.parse)(encoding.scalabilityMode).temporalLayers : 3;\n              if (temporalLayers > maxTemporalLayers) {\n                maxTemporalLayers = temporalLayers;\n              }\n            }\n            for (const encoding of encodings) {\n              encoding.rid = `r${nextRid++}`;\n              encoding.scalabilityMode = `L1T${maxTemporalLayers}`;\n            }\n          }\n          const sendingRtpParameters = utils.clone(this._sendingRtpParametersByKind[track.kind], {});\n          sendingRtpParameters.codecs = ortc.reduceCodecs(sendingRtpParameters.codecs, codec);\n          const sendingRemoteRtpParameters = utils.clone(this._sendingRemoteRtpParametersByKind[track.kind], {});\n          sendingRemoteRtpParameters.codecs = ortc.reduceCodecs(sendingRemoteRtpParameters.codecs, codec);\n          const mediaSectionIdx = this._remoteSdp.getNextMediaSectionIdx();\n          const transceiver = this._pc.addTransceiver(track, {\n            direction: \"sendonly\",\n            streams: [this._sendStream],\n            sendEncodings: encodings\n          });\n          const offer = yield this._pc.createOffer();\n          let localSdpObject = sdpTransform4.parse(offer.sdp);\n          if (!this._transportReady) {\n            yield this.setupTransport({\n              localDtlsRole: (_a2 = this._forcedLocalDtlsRole) !== null && _a2 !== void 0 ? _a2 : \"client\",\n              localSdpObject\n            });\n          }\n          logger2.debug(\"send() | calling pc.setLocalDescription() [offer:%o]\", offer);\n          yield this._pc.setLocalDescription(offer);\n          const localId = transceiver.mid;\n          sendingRtpParameters.mid = localId;\n          localSdpObject = sdpTransform4.parse(this._pc.localDescription.sdp);\n          const offerMediaObject = localSdpObject.media[mediaSectionIdx.idx];\n          sendingRtpParameters.rtcp.cname = sdpCommonUtils.getCname({ offerMediaObject });\n          if (!encodings) {\n            sendingRtpParameters.encodings = sdpUnifiedPlanUtils.getRtpEncodings({ offerMediaObject });\n          } else if (encodings.length === 1) {\n            const newEncodings = sdpUnifiedPlanUtils.getRtpEncodings({ offerMediaObject });\n            Object.assign(newEncodings[0], encodings[0]);\n            sendingRtpParameters.encodings = newEncodings;\n          } else {\n            sendingRtpParameters.encodings = encodings;\n          }\n          this._remoteSdp.send({\n            offerMediaObject,\n            reuseMid: mediaSectionIdx.reuseMid,\n            offerRtpParameters: sendingRtpParameters,\n            answerRtpParameters: sendingRemoteRtpParameters,\n            codecOptions,\n            extmapAllowMixed: true\n          });\n          const answer = { type: \"answer\", sdp: this._remoteSdp.getSdp() };\n          logger2.debug(\"send() | calling pc.setRemoteDescription() [answer:%o]\", answer);\n          yield this._pc.setRemoteDescription(answer);\n          this._mapMidTransceiver.set(localId, transceiver);\n          return {\n            localId,\n            rtpParameters: sendingRtpParameters,\n            rtpSender: transceiver.sender\n          };\n        });\n      }\n      stopSending(localId) {\n        return __async(this, null, function* () {\n          this.assertSendDirection();\n          logger2.debug(\"stopSending() [localId:%s]\", localId);\n          const transceiver = this._mapMidTransceiver.get(localId);\n          if (!transceiver) {\n            throw new Error(\"associated RTCRtpTransceiver not found\");\n          }\n          transceiver.sender.replaceTrack(null);\n          this._pc.removeTrack(transceiver.sender);\n          const mediaSectionClosed = this._remoteSdp.closeMediaSection(transceiver.mid);\n          if (mediaSectionClosed) {\n            try {\n              transceiver.stop();\n            } catch (error) {\n            }\n          }\n          const offer = yield this._pc.createOffer();\n          logger2.debug(\"stopSending() | calling pc.setLocalDescription() [offer:%o]\", offer);\n          yield this._pc.setLocalDescription(offer);\n          const answer = { type: \"answer\", sdp: this._remoteSdp.getSdp() };\n          logger2.debug(\"stopSending() | calling pc.setRemoteDescription() [answer:%o]\", answer);\n          yield this._pc.setRemoteDescription(answer);\n          this._mapMidTransceiver.delete(localId);\n        });\n      }\n      pauseSending(localId) {\n        return __async(this, null, function* () {\n          this.assertSendDirection();\n          logger2.debug(\"pauseSending() [localId:%s]\", localId);\n          const transceiver = this._mapMidTransceiver.get(localId);\n          if (!transceiver) {\n            throw new Error(\"associated RTCRtpTransceiver not found\");\n          }\n          transceiver.direction = \"inactive\";\n          this._remoteSdp.pauseMediaSection(localId);\n          const offer = yield this._pc.createOffer();\n          logger2.debug(\"pauseSending() | calling pc.setLocalDescription() [offer:%o]\", offer);\n          yield this._pc.setLocalDescription(offer);\n          const answer = { type: \"answer\", sdp: this._remoteSdp.getSdp() };\n          logger2.debug(\"pauseSending() | calling pc.setRemoteDescription() [answer:%o]\", answer);\n          yield this._pc.setRemoteDescription(answer);\n        });\n      }\n      resumeSending(localId) {\n        return __async(this, null, function* () {\n          this.assertSendDirection();\n          logger2.debug(\"resumeSending() [localId:%s]\", localId);\n          const transceiver = this._mapMidTransceiver.get(localId);\n          this._remoteSdp.resumeSendingMediaSection(localId);\n          if (!transceiver) {\n            throw new Error(\"associated RTCRtpTransceiver not found\");\n          }\n          transceiver.direction = \"sendonly\";\n          const offer = yield this._pc.createOffer();\n          logger2.debug(\"resumeSending() | calling pc.setLocalDescription() [offer:%o]\", offer);\n          yield this._pc.setLocalDescription(offer);\n          const answer = { type: \"answer\", sdp: this._remoteSdp.getSdp() };\n          logger2.debug(\"resumeSending() | calling pc.setRemoteDescription() [answer:%o]\", answer);\n          yield this._pc.setRemoteDescription(answer);\n        });\n      }\n      replaceTrack(localId, track) {\n        return __async(this, null, function* () {\n          this.assertSendDirection();\n          if (track) {\n            logger2.debug(\"replaceTrack() [localId:%s, track.id:%s]\", localId, track.id);\n          } else {\n            logger2.debug(\"replaceTrack() [localId:%s, no track]\", localId);\n          }\n          const transceiver = this._mapMidTransceiver.get(localId);\n          if (!transceiver) {\n            throw new Error(\"associated RTCRtpTransceiver not found\");\n          }\n          yield transceiver.sender.replaceTrack(track);\n        });\n      }\n      setMaxSpatialLayer(localId, spatialLayer) {\n        return __async(this, null, function* () {\n          this.assertSendDirection();\n          logger2.debug(\"setMaxSpatialLayer() [localId:%s, spatialLayer:%s]\", localId, spatialLayer);\n          const transceiver = this._mapMidTransceiver.get(localId);\n          if (!transceiver) {\n            throw new Error(\"associated RTCRtpTransceiver not found\");\n          }\n          const parameters = transceiver.sender.getParameters();\n          parameters.encodings.forEach((encoding, idx) => {\n            if (idx <= spatialLayer) {\n              encoding.active = true;\n            } else {\n              encoding.active = false;\n            }\n          });\n          yield transceiver.sender.setParameters(parameters);\n          this._remoteSdp.muxMediaSectionSimulcast(localId, parameters.encodings);\n          const offer = yield this._pc.createOffer();\n          logger2.debug(\"setMaxSpatialLayer() | calling pc.setLocalDescription() [offer:%o]\", offer);\n          yield this._pc.setLocalDescription(offer);\n          const answer = { type: \"answer\", sdp: this._remoteSdp.getSdp() };\n          logger2.debug(\"setMaxSpatialLayer() | calling pc.setRemoteDescription() [answer:%o]\", answer);\n          yield this._pc.setRemoteDescription(answer);\n        });\n      }\n      setRtpEncodingParameters(localId, params) {\n        return __async(this, null, function* () {\n          this.assertSendDirection();\n          logger2.debug(\"setRtpEncodingParameters() [localId:%s, params:%o]\", localId, params);\n          const transceiver = this._mapMidTransceiver.get(localId);\n          if (!transceiver) {\n            throw new Error(\"associated RTCRtpTransceiver not found\");\n          }\n          const parameters = transceiver.sender.getParameters();\n          parameters.encodings.forEach((encoding, idx) => {\n            parameters.encodings[idx] = __spreadValues(__spreadValues({}, encoding), params);\n          });\n          yield transceiver.sender.setParameters(parameters);\n          this._remoteSdp.muxMediaSectionSimulcast(localId, parameters.encodings);\n          const offer = yield this._pc.createOffer();\n          logger2.debug(\"setRtpEncodingParameters() | calling pc.setLocalDescription() [offer:%o]\", offer);\n          yield this._pc.setLocalDescription(offer);\n          const answer = { type: \"answer\", sdp: this._remoteSdp.getSdp() };\n          logger2.debug(\"setRtpEncodingParameters() | calling pc.setRemoteDescription() [answer:%o]\", answer);\n          yield this._pc.setRemoteDescription(answer);\n        });\n      }\n      getSenderStats(localId) {\n        return __async(this, null, function* () {\n          this.assertSendDirection();\n          const transceiver = this._mapMidTransceiver.get(localId);\n          if (!transceiver) {\n            throw new Error(\"associated RTCRtpTransceiver not found\");\n          }\n          return transceiver.sender.getStats();\n        });\n      }\n      sendDataChannel(_0) {\n        return __async(this, arguments, function* ({ ordered, maxPacketLifeTime, maxRetransmits, label, protocol }) {\n          var _a2;\n          this.assertSendDirection();\n          const options = {\n            negotiated: true,\n            id: this._nextSendSctpStreamId,\n            ordered,\n            maxPacketLifeTime,\n            maxRetransmits,\n            protocol\n          };\n          logger2.debug(\"sendDataChannel() [options:%o]\", options);\n          const dataChannel = this._pc.createDataChannel(label, options);\n          this._nextSendSctpStreamId = ++this._nextSendSctpStreamId % SCTP_NUM_STREAMS.MIS;\n          if (!this._hasDataChannelMediaSection) {\n            const offer = yield this._pc.createOffer();\n            const localSdpObject = sdpTransform4.parse(offer.sdp);\n            const offerMediaObject = localSdpObject.media.find((m) => m.type === \"application\");\n            if (!this._transportReady) {\n              yield this.setupTransport({\n                localDtlsRole: (_a2 = this._forcedLocalDtlsRole) !== null && _a2 !== void 0 ? _a2 : \"client\",\n                localSdpObject\n              });\n            }\n            logger2.debug(\"sendDataChannel() | calling pc.setLocalDescription() [offer:%o]\", offer);\n            yield this._pc.setLocalDescription(offer);\n            this._remoteSdp.sendSctpAssociation({ offerMediaObject });\n            const answer = { type: \"answer\", sdp: this._remoteSdp.getSdp() };\n            logger2.debug(\"sendDataChannel() | calling pc.setRemoteDescription() [answer:%o]\", answer);\n            yield this._pc.setRemoteDescription(answer);\n            this._hasDataChannelMediaSection = true;\n          }\n          const sctpStreamParameters = {\n            streamId: options.id,\n            ordered: options.ordered,\n            maxPacketLifeTime: options.maxPacketLifeTime,\n            maxRetransmits: options.maxRetransmits\n          };\n          return { dataChannel, sctpStreamParameters };\n        });\n      }\n      receive(optionsList) {\n        return __async(this, null, function* () {\n          var _a2;\n          this.assertRecvDirection();\n          const results = [];\n          const mapLocalId = /* @__PURE__ */ new Map();\n          for (const options of optionsList) {\n            const { trackId, kind, rtpParameters, streamId } = options;\n            logger2.debug(\"receive() [trackId:%s, kind:%s]\", trackId, kind);\n            const localId = rtpParameters.mid || String(this._mapMidTransceiver.size);\n            mapLocalId.set(trackId, localId);\n            this._remoteSdp.receive({\n              mid: localId,\n              kind,\n              offerRtpParameters: rtpParameters,\n              streamId: streamId || rtpParameters.rtcp.cname,\n              trackId\n            });\n          }\n          const offer = { type: \"offer\", sdp: this._remoteSdp.getSdp() };\n          logger2.debug(\"receive() | calling pc.setRemoteDescription() [offer:%o]\", offer);\n          yield this._pc.setRemoteDescription(offer);\n          let answer = yield this._pc.createAnswer();\n          const localSdpObject = sdpTransform4.parse(answer.sdp);\n          for (const options of optionsList) {\n            const { trackId, rtpParameters } = options;\n            const localId = mapLocalId.get(trackId);\n            const answerMediaObject = localSdpObject.media.find((m) => String(m.mid) === localId);\n            sdpCommonUtils.applyCodecParameters({\n              offerRtpParameters: rtpParameters,\n              answerMediaObject\n            });\n          }\n          answer = { type: \"answer\", sdp: sdpTransform4.write(localSdpObject) };\n          if (!this._transportReady) {\n            yield this.setupTransport({\n              localDtlsRole: (_a2 = this._forcedLocalDtlsRole) !== null && _a2 !== void 0 ? _a2 : \"client\",\n              localSdpObject\n            });\n          }\n          logger2.debug(\"receive() | calling pc.setLocalDescription() [answer:%o]\", answer);\n          yield this._pc.setLocalDescription(answer);\n          for (const options of optionsList) {\n            const { trackId } = options;\n            const localId = mapLocalId.get(trackId);\n            const transceiver = this._pc.getTransceivers().find((t2) => t2.mid === localId);\n            if (!transceiver) {\n              throw new Error(\"new RTCRtpTransceiver not found\");\n            } else {\n              this._mapMidTransceiver.set(localId, transceiver);\n              results.push({\n                localId,\n                track: transceiver.receiver.track,\n                rtpReceiver: transceiver.receiver\n              });\n            }\n          }\n          return results;\n        });\n      }\n      stopReceiving(localIds) {\n        return __async(this, null, function* () {\n          this.assertRecvDirection();\n          for (const localId of localIds) {\n            logger2.debug(\"stopReceiving() [localId:%s]\", localId);\n            const transceiver = this._mapMidTransceiver.get(localId);\n            if (!transceiver) {\n              throw new Error(\"associated RTCRtpTransceiver not found\");\n            }\n            this._remoteSdp.closeMediaSection(transceiver.mid);\n          }\n          const offer = { type: \"offer\", sdp: this._remoteSdp.getSdp() };\n          logger2.debug(\"stopReceiving() | calling pc.setRemoteDescription() [offer:%o]\", offer);\n          yield this._pc.setRemoteDescription(offer);\n          const answer = yield this._pc.createAnswer();\n          logger2.debug(\"stopReceiving() | calling pc.setLocalDescription() [answer:%o]\", answer);\n          yield this._pc.setLocalDescription(answer);\n          for (const localId of localIds) {\n            this._mapMidTransceiver.delete(localId);\n          }\n        });\n      }\n      pauseReceiving(localIds) {\n        return __async(this, null, function* () {\n          this.assertRecvDirection();\n          for (const localId of localIds) {\n            logger2.debug(\"pauseReceiving() [localId:%s]\", localId);\n            const transceiver = this._mapMidTransceiver.get(localId);\n            if (!transceiver) {\n              throw new Error(\"associated RTCRtpTransceiver not found\");\n            }\n            transceiver.direction = \"inactive\";\n            this._remoteSdp.pauseMediaSection(localId);\n          }\n          const offer = { type: \"offer\", sdp: this._remoteSdp.getSdp() };\n          logger2.debug(\"pauseReceiving() | calling pc.setRemoteDescription() [offer:%o]\", offer);\n          yield this._pc.setRemoteDescription(offer);\n          const answer = yield this._pc.createAnswer();\n          logger2.debug(\"pauseReceiving() | calling pc.setLocalDescription() [answer:%o]\", answer);\n          yield this._pc.setLocalDescription(answer);\n        });\n      }\n      resumeReceiving(localIds) {\n        return __async(this, null, function* () {\n          this.assertRecvDirection();\n          for (const localId of localIds) {\n            logger2.debug(\"resumeReceiving() [localId:%s]\", localId);\n            const transceiver = this._mapMidTransceiver.get(localId);\n            if (!transceiver) {\n              throw new Error(\"associated RTCRtpTransceiver not found\");\n            }\n            transceiver.direction = \"recvonly\";\n            this._remoteSdp.resumeReceivingMediaSection(localId);\n          }\n          const offer = { type: \"offer\", sdp: this._remoteSdp.getSdp() };\n          logger2.debug(\"resumeReceiving() | calling pc.setRemoteDescription() [offer:%o]\", offer);\n          yield this._pc.setRemoteDescription(offer);\n          const answer = yield this._pc.createAnswer();\n          logger2.debug(\"resumeReceiving() | calling pc.setLocalDescription() [answer:%o]\", answer);\n          yield this._pc.setLocalDescription(answer);\n        });\n      }\n      getReceiverStats(localId) {\n        return __async(this, null, function* () {\n          this.assertRecvDirection();\n          const transceiver = this._mapMidTransceiver.get(localId);\n          if (!transceiver) {\n            throw new Error(\"associated RTCRtpTransceiver not found\");\n          }\n          return transceiver.receiver.getStats();\n        });\n      }\n      receiveDataChannel(_0) {\n        return __async(this, arguments, function* ({ sctpStreamParameters, label, protocol }) {\n          var _a2;\n          this.assertRecvDirection();\n          const { streamId, ordered, maxPacketLifeTime, maxRetransmits } = sctpStreamParameters;\n          const options = {\n            negotiated: true,\n            id: streamId,\n            ordered,\n            maxPacketLifeTime,\n            maxRetransmits,\n            protocol\n          };\n          logger2.debug(\"receiveDataChannel() [options:%o]\", options);\n          const dataChannel = this._pc.createDataChannel(label, options);\n          if (!this._hasDataChannelMediaSection) {\n            this._remoteSdp.receiveSctpAssociation();\n            const offer = { type: \"offer\", sdp: this._remoteSdp.getSdp() };\n            logger2.debug(\"receiveDataChannel() | calling pc.setRemoteDescription() [offer:%o]\", offer);\n            yield this._pc.setRemoteDescription(offer);\n            const answer = yield this._pc.createAnswer();\n            if (!this._transportReady) {\n              const localSdpObject = sdpTransform4.parse(answer.sdp);\n              yield this.setupTransport({\n                localDtlsRole: (_a2 = this._forcedLocalDtlsRole) !== null && _a2 !== void 0 ? _a2 : \"client\",\n                localSdpObject\n              });\n            }\n            logger2.debug(\"receiveDataChannel() | calling pc.setRemoteDescription() [answer:%o]\", answer);\n            yield this._pc.setLocalDescription(answer);\n            this._hasDataChannelMediaSection = true;\n          }\n          return { dataChannel };\n        });\n      }\n      setupTransport(_0) {\n        return __async(this, arguments, function* ({ localDtlsRole, localSdpObject }) {\n          if (!localSdpObject) {\n            localSdpObject = sdpTransform4.parse(this._pc.localDescription.sdp);\n          }\n          const dtlsParameters = sdpCommonUtils.extractDtlsParameters({ sdpObject: localSdpObject });\n          dtlsParameters.role = localDtlsRole;\n          this._remoteSdp.updateDtlsRole(localDtlsRole === \"client\" ? \"server\" : \"client\");\n          yield new Promise((resolve, reject) => {\n            this.safeEmit(\"@connect\", { dtlsParameters }, resolve, reject);\n          });\n          this._transportReady = true;\n        });\n      }\n      assertSendDirection() {\n        if (this._direction !== \"send\") {\n          throw new Error('method can just be called for handlers with \"send\" direction');\n        }\n      }\n      assertRecvDirection() {\n        if (this._direction !== \"recv\") {\n          throw new Error('method can just be called for handlers with \"recv\" direction');\n        }\n      }\n    };\n    exports.Chrome111 = Chrome111;\n  }\n});\n\n// ../../node_modules/mediasoup-client/lib/handlers/Chrome74.js\nvar require_Chrome74 = __commonJS({\n  \"../../node_modules/mediasoup-client/lib/handlers/Chrome74.js\"(exports) {\n    \"use strict\";\n    init_process();\n    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {\n      if (k2 === void 0)\n        k2 = k;\n      var desc = Object.getOwnPropertyDescriptor(m, k);\n      if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n        desc = { enumerable: true, get: function() {\n          return m[k];\n        } };\n      }\n      Object.defineProperty(o2, k2, desc);\n    } : function(o2, m, k, k2) {\n      if (k2 === void 0)\n        k2 = k;\n      o2[k2] = m[k];\n    });\n    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {\n      Object.defineProperty(o2, \"default\", { enumerable: true, value: v });\n    } : function(o2, v) {\n      o2[\"default\"] = v;\n    });\n    var __importStar = exports && exports.__importStar || function(mod) {\n      if (mod && mod.__esModule)\n        return mod;\n      var result2 = {};\n      if (mod != null) {\n        for (var k in mod)\n          if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k))\n            __createBinding(result2, mod, k);\n      }\n      __setModuleDefault(result2, mod);\n      return result2;\n    };\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.Chrome74 = void 0;\n    var sdpTransform4 = __importStar(require_lib());\n    var Logger_1 = require_Logger();\n    var utils = __importStar(require_utils2());\n    var ortc = __importStar(require_ortc());\n    var sdpCommonUtils = __importStar(require_commonUtils());\n    var sdpUnifiedPlanUtils = __importStar(require_unifiedPlanUtils());\n    var ortcUtils = __importStar(require_utils3());\n    var HandlerInterface_1 = require_HandlerInterface();\n    var RemoteSdp_1 = require_RemoteSdp();\n    var scalabilityModes_1 = require_scalabilityModes();\n    var logger2 = new Logger_1.Logger(\"Chrome74\");\n    var SCTP_NUM_STREAMS = { OS: 1024, MIS: 1024 };\n    var Chrome74 = class extends HandlerInterface_1.HandlerInterface {\n      static createFactory() {\n        return () => new Chrome74();\n      }\n      constructor() {\n        super();\n        this._mapMidTransceiver = /* @__PURE__ */ new Map();\n        this._sendStream = new MediaStream();\n        this._hasDataChannelMediaSection = false;\n        this._nextSendSctpStreamId = 0;\n        this._transportReady = false;\n      }\n      get name() {\n        return \"Chrome74\";\n      }\n      close() {\n        logger2.debug(\"close()\");\n        if (this._pc) {\n          try {\n            this._pc.close();\n          } catch (error) {\n          }\n        }\n        this.emit(\"@close\");\n      }\n      getNativeRtpCapabilities() {\n        return __async(this, null, function* () {\n          logger2.debug(\"getNativeRtpCapabilities()\");\n          const pc = new RTCPeerConnection({\n            iceServers: [],\n            iceTransportPolicy: \"all\",\n            bundlePolicy: \"max-bundle\",\n            rtcpMuxPolicy: \"require\",\n            sdpSemantics: \"unified-plan\"\n          });\n          try {\n            pc.addTransceiver(\"audio\");\n            pc.addTransceiver(\"video\");\n            const offer = yield pc.createOffer();\n            try {\n              pc.close();\n            } catch (error) {\n            }\n            const sdpObject = sdpTransform4.parse(offer.sdp);\n            const nativeRtpCapabilities = sdpCommonUtils.extractRtpCapabilities({ sdpObject });\n            ortcUtils.addNackSuppportForOpus(nativeRtpCapabilities);\n            return nativeRtpCapabilities;\n          } catch (error) {\n            try {\n              pc.close();\n            } catch (error2) {\n            }\n            throw error;\n          }\n        });\n      }\n      getNativeSctpCapabilities() {\n        return __async(this, null, function* () {\n          logger2.debug(\"getNativeSctpCapabilities()\");\n          return {\n            numStreams: SCTP_NUM_STREAMS\n          };\n        });\n      }\n      run({ direction, iceParameters, iceCandidates, dtlsParameters, sctpParameters, iceServers, iceTransportPolicy, additionalSettings, proprietaryConstraints, extendedRtpCapabilities }) {\n        logger2.debug(\"run()\");\n        this._direction = direction;\n        this._remoteSdp = new RemoteSdp_1.RemoteSdp({\n          iceParameters,\n          iceCandidates,\n          dtlsParameters,\n          sctpParameters\n        });\n        this._sendingRtpParametersByKind = {\n          audio: ortc.getSendingRtpParameters(\"audio\", extendedRtpCapabilities),\n          video: ortc.getSendingRtpParameters(\"video\", extendedRtpCapabilities)\n        };\n        this._sendingRemoteRtpParametersByKind = {\n          audio: ortc.getSendingRemoteRtpParameters(\"audio\", extendedRtpCapabilities),\n          video: ortc.getSendingRemoteRtpParameters(\"video\", extendedRtpCapabilities)\n        };\n        if (dtlsParameters.role && dtlsParameters.role !== \"auto\") {\n          this._forcedLocalDtlsRole = dtlsParameters.role === \"server\" ? \"client\" : \"server\";\n        }\n        this._pc = new RTCPeerConnection(__spreadValues({\n          iceServers: iceServers || [],\n          iceTransportPolicy: iceTransportPolicy || \"all\",\n          bundlePolicy: \"max-bundle\",\n          rtcpMuxPolicy: \"require\",\n          sdpSemantics: \"unified-plan\"\n        }, additionalSettings), proprietaryConstraints);\n        if (this._pc.connectionState) {\n          this._pc.addEventListener(\"connectionstatechange\", () => {\n            this.emit(\"@connectionstatechange\", this._pc.connectionState);\n          });\n        } else {\n          logger2.warn(\"run() | pc.connectionState not supported, using pc.iceConnectionState\");\n          this._pc.addEventListener(\"iceconnectionstatechange\", () => {\n            switch (this._pc.iceConnectionState) {\n              case \"checking\":\n                this.emit(\"@connectionstatechange\", \"connecting\");\n                break;\n              case \"connected\":\n              case \"completed\":\n                this.emit(\"@connectionstatechange\", \"connected\");\n                break;\n              case \"failed\":\n                this.emit(\"@connectionstatechange\", \"failed\");\n                break;\n              case \"disconnected\":\n                this.emit(\"@connectionstatechange\", \"disconnected\");\n                break;\n              case \"closed\":\n                this.emit(\"@connectionstatechange\", \"closed\");\n                break;\n            }\n          });\n        }\n      }\n      updateIceServers(iceServers) {\n        return __async(this, null, function* () {\n          logger2.debug(\"updateIceServers()\");\n          const configuration = this._pc.getConfiguration();\n          configuration.iceServers = iceServers;\n          this._pc.setConfiguration(configuration);\n        });\n      }\n      restartIce(iceParameters) {\n        return __async(this, null, function* () {\n          logger2.debug(\"restartIce()\");\n          this._remoteSdp.updateIceParameters(iceParameters);\n          if (!this._transportReady) {\n            return;\n          }\n          if (this._direction === \"send\") {\n            const offer = yield this._pc.createOffer({ iceRestart: true });\n            logger2.debug(\"restartIce() | calling pc.setLocalDescription() [offer:%o]\", offer);\n            yield this._pc.setLocalDescription(offer);\n            const answer = { type: \"answer\", sdp: this._remoteSdp.getSdp() };\n            logger2.debug(\"restartIce() | calling pc.setRemoteDescription() [answer:%o]\", answer);\n            yield this._pc.setRemoteDescription(answer);\n          } else {\n            const offer = { type: \"offer\", sdp: this._remoteSdp.getSdp() };\n            logger2.debug(\"restartIce() | calling pc.setRemoteDescription() [offer:%o]\", offer);\n            yield this._pc.setRemoteDescription(offer);\n            const answer = yield this._pc.createAnswer();\n            logger2.debug(\"restartIce() | calling pc.setLocalDescription() [answer:%o]\", answer);\n            yield this._pc.setLocalDescription(answer);\n          }\n        });\n      }\n      getTransportStats() {\n        return __async(this, null, function* () {\n          return this._pc.getStats();\n        });\n      }\n      send(_0) {\n        return __async(this, arguments, function* ({ track, encodings, codecOptions, codec }) {\n          var _a2;\n          this.assertSendDirection();\n          logger2.debug(\"send() [kind:%s, track.id:%s]\", track.kind, track.id);\n          if (encodings && encodings.length > 1) {\n            encodings.forEach((encoding, idx) => {\n              encoding.rid = `r${idx}`;\n            });\n          }\n          const sendingRtpParameters = utils.clone(this._sendingRtpParametersByKind[track.kind], {});\n          sendingRtpParameters.codecs = ortc.reduceCodecs(sendingRtpParameters.codecs, codec);\n          const sendingRemoteRtpParameters = utils.clone(this._sendingRemoteRtpParametersByKind[track.kind], {});\n          sendingRemoteRtpParameters.codecs = ortc.reduceCodecs(sendingRemoteRtpParameters.codecs, codec);\n          const mediaSectionIdx = this._remoteSdp.getNextMediaSectionIdx();\n          const transceiver = this._pc.addTransceiver(track, {\n            direction: \"sendonly\",\n            streams: [this._sendStream],\n            sendEncodings: encodings\n          });\n          let offer = yield this._pc.createOffer();\n          let localSdpObject = sdpTransform4.parse(offer.sdp);\n          let offerMediaObject;\n          if (!this._transportReady) {\n            yield this.setupTransport({\n              localDtlsRole: (_a2 = this._forcedLocalDtlsRole) !== null && _a2 !== void 0 ? _a2 : \"client\",\n              localSdpObject\n            });\n          }\n          let hackVp9Svc = false;\n          const layers = (0, scalabilityModes_1.parse)((encodings || [{}])[0].scalabilityMode);\n          if (encodings && encodings.length === 1 && layers.spatialLayers > 1 && sendingRtpParameters.codecs[0].mimeType.toLowerCase() === \"video/vp9\") {\n            logger2.debug(\"send() | enabling legacy simulcast for VP9 SVC\");\n            hackVp9Svc = true;\n            localSdpObject = sdpTransform4.parse(offer.sdp);\n            offerMediaObject = localSdpObject.media[mediaSectionIdx.idx];\n            sdpUnifiedPlanUtils.addLegacySimulcast({\n              offerMediaObject,\n              numStreams: layers.spatialLayers\n            });\n            offer = { type: \"offer\", sdp: sdpTransform4.write(localSdpObject) };\n          }\n          logger2.debug(\"send() | calling pc.setLocalDescription() [offer:%o]\", offer);\n          yield this._pc.setLocalDescription(offer);\n          const localId = transceiver.mid;\n          sendingRtpParameters.mid = localId;\n          localSdpObject = sdpTransform4.parse(this._pc.localDescription.sdp);\n          offerMediaObject = localSdpObject.media[mediaSectionIdx.idx];\n          sendingRtpParameters.rtcp.cname = sdpCommonUtils.getCname({ offerMediaObject });\n          if (!encodings) {\n            sendingRtpParameters.encodings = sdpUnifiedPlanUtils.getRtpEncodings({ offerMediaObject });\n          } else if (encodings.length === 1) {\n            let newEncodings = sdpUnifiedPlanUtils.getRtpEncodings({ offerMediaObject });\n            Object.assign(newEncodings[0], encodings[0]);\n            if (hackVp9Svc) {\n              newEncodings = [newEncodings[0]];\n            }\n            sendingRtpParameters.encodings = newEncodings;\n          } else {\n            sendingRtpParameters.encodings = encodings;\n          }\n          if (sendingRtpParameters.encodings.length > 1 && (sendingRtpParameters.codecs[0].mimeType.toLowerCase() === \"video/vp8\" || sendingRtpParameters.codecs[0].mimeType.toLowerCase() === \"video/h264\")) {\n            for (const encoding of sendingRtpParameters.encodings) {\n              if (encoding.scalabilityMode) {\n                encoding.scalabilityMode = `L1T${layers.temporalLayers}`;\n              } else {\n                encoding.scalabilityMode = \"L1T3\";\n              }\n            }\n          }\n          this._remoteSdp.send({\n            offerMediaObject,\n            reuseMid: mediaSectionIdx.reuseMid,\n            offerRtpParameters: sendingRtpParameters,\n            answerRtpParameters: sendingRemoteRtpParameters,\n            codecOptions,\n            extmapAllowMixed: true\n          });\n          const answer = { type: \"answer\", sdp: this._remoteSdp.getSdp() };\n          logger2.debug(\"send() | calling pc.setRemoteDescription() [answer:%o]\", answer);\n          yield this._pc.setRemoteDescription(answer);\n          this._mapMidTransceiver.set(localId, transceiver);\n          return {\n            localId,\n            rtpParameters: sendingRtpParameters,\n            rtpSender: transceiver.sender\n          };\n        });\n      }\n      stopSending(localId) {\n        return __async(this, null, function* () {\n          this.assertSendDirection();\n          logger2.debug(\"stopSending() [localId:%s]\", localId);\n          const transceiver = this._mapMidTransceiver.get(localId);\n          if (!transceiver) {\n            throw new Error(\"associated RTCRtpTransceiver not found\");\n          }\n          transceiver.sender.replaceTrack(null);\n          this._pc.removeTrack(transceiver.sender);\n          const mediaSectionClosed = this._remoteSdp.closeMediaSection(transceiver.mid);\n          if (mediaSectionClosed) {\n            try {\n              transceiver.stop();\n            } catch (error) {\n            }\n          }\n          const offer = yield this._pc.createOffer();\n          logger2.debug(\"stopSending() | calling pc.setLocalDescription() [offer:%o]\", offer);\n          yield this._pc.setLocalDescription(offer);\n          const answer = { type: \"answer\", sdp: this._remoteSdp.getSdp() };\n          logger2.debug(\"stopSending() | calling pc.setRemoteDescription() [answer:%o]\", answer);\n          yield this._pc.setRemoteDescription(answer);\n          this._mapMidTransceiver.delete(localId);\n        });\n      }\n      pauseSending(localId) {\n        return __async(this, null, function* () {\n          this.assertSendDirection();\n          logger2.debug(\"pauseSending() [localId:%s]\", localId);\n          const transceiver = this._mapMidTransceiver.get(localId);\n          if (!transceiver) {\n            throw new Error(\"associated RTCRtpTransceiver not found\");\n          }\n          transceiver.direction = \"inactive\";\n          this._remoteSdp.pauseMediaSection(localId);\n          const offer = yield this._pc.createOffer();\n          logger2.debug(\"pauseSending() | calling pc.setLocalDescription() [offer:%o]\", offer);\n          yield this._pc.setLocalDescription(offer);\n          const answer = { type: \"answer\", sdp: this._remoteSdp.getSdp() };\n          logger2.debug(\"pauseSending() | calling pc.setRemoteDescription() [answer:%o]\", answer);\n          yield this._pc.setRemoteDescription(answer);\n        });\n      }\n      resumeSending(localId) {\n        return __async(this, null, function* () {\n          this.assertSendDirection();\n          logger2.debug(\"resumeSending() [localId:%s]\", localId);\n          const transceiver = this._mapMidTransceiver.get(localId);\n          this._remoteSdp.resumeSendingMediaSection(localId);\n          if (!transceiver) {\n            throw new Error(\"associated RTCRtpTransceiver not found\");\n          }\n          transceiver.direction = \"sendonly\";\n          const offer = yield this._pc.createOffer();\n          logger2.debug(\"resumeSending() | calling pc.setLocalDescription() [offer:%o]\", offer);\n          yield this._pc.setLocalDescription(offer);\n          const answer = { type: \"answer\", sdp: this._remoteSdp.getSdp() };\n          logger2.debug(\"resumeSending() | calling pc.setRemoteDescription() [answer:%o]\", answer);\n          yield this._pc.setRemoteDescription(answer);\n        });\n      }\n      replaceTrack(localId, track) {\n        return __async(this, null, function* () {\n          this.assertSendDirection();\n          if (track) {\n            logger2.debug(\"replaceTrack() [localId:%s, track.id:%s]\", localId, track.id);\n          } else {\n            logger2.debug(\"replaceTrack() [localId:%s, no track]\", localId);\n          }\n          const transceiver = this._mapMidTransceiver.get(localId);\n          if (!transceiver) {\n            throw new Error(\"associated RTCRtpTransceiver not found\");\n          }\n          yield transceiver.sender.replaceTrack(track);\n        });\n      }\n      setMaxSpatialLayer(localId, spatialLayer) {\n        return __async(this, null, function* () {\n          this.assertSendDirection();\n          logger2.debug(\"setMaxSpatialLayer() [localId:%s, spatialLayer:%s]\", localId, spatialLayer);\n          const transceiver = this._mapMidTransceiver.get(localId);\n          if (!transceiver) {\n            throw new Error(\"associated RTCRtpTransceiver not found\");\n          }\n          const parameters = transceiver.sender.getParameters();\n          parameters.encodings.forEach((encoding, idx) => {\n            if (idx <= spatialLayer) {\n              encoding.active = true;\n            } else {\n              encoding.active = false;\n            }\n          });\n          yield transceiver.sender.setParameters(parameters);\n          this._remoteSdp.muxMediaSectionSimulcast(localId, parameters.encodings);\n          const offer = yield this._pc.createOffer();\n          logger2.debug(\"setMaxSpatialLayer() | calling pc.setLocalDescription() [offer:%o]\", offer);\n          yield this._pc.setLocalDescription(offer);\n          const answer = { type: \"answer\", sdp: this._remoteSdp.getSdp() };\n          logger2.debug(\"setMaxSpatialLayer() | calling pc.setRemoteDescription() [answer:%o]\", answer);\n          yield this._pc.setRemoteDescription(answer);\n        });\n      }\n      setRtpEncodingParameters(localId, params) {\n        return __async(this, null, function* () {\n          this.assertSendDirection();\n          logger2.debug(\"setRtpEncodingParameters() [localId:%s, params:%o]\", localId, params);\n          const transceiver = this._mapMidTransceiver.get(localId);\n          if (!transceiver) {\n            throw new Error(\"associated RTCRtpTransceiver not found\");\n          }\n          const parameters = transceiver.sender.getParameters();\n          parameters.encodings.forEach((encoding, idx) => {\n            parameters.encodings[idx] = __spreadValues(__spreadValues({}, encoding), params);\n          });\n          yield transceiver.sender.setParameters(parameters);\n          this._remoteSdp.muxMediaSectionSimulcast(localId, parameters.encodings);\n          const offer = yield this._pc.createOffer();\n          logger2.debug(\"setRtpEncodingParameters() | calling pc.setLocalDescription() [offer:%o]\", offer);\n          yield this._pc.setLocalDescription(offer);\n          const answer = { type: \"answer\", sdp: this._remoteSdp.getSdp() };\n          logger2.debug(\"setRtpEncodingParameters() | calling pc.setRemoteDescription() [answer:%o]\", answer);\n          yield this._pc.setRemoteDescription(answer);\n        });\n      }\n      getSenderStats(localId) {\n        return __async(this, null, function* () {\n          this.assertSendDirection();\n          const transceiver = this._mapMidTransceiver.get(localId);\n          if (!transceiver) {\n            throw new Error(\"associated RTCRtpTransceiver not found\");\n          }\n          return transceiver.sender.getStats();\n        });\n      }\n      sendDataChannel(_0) {\n        return __async(this, arguments, function* ({ ordered, maxPacketLifeTime, maxRetransmits, label, protocol }) {\n          var _a2;\n          this.assertSendDirection();\n          const options = {\n            negotiated: true,\n            id: this._nextSendSctpStreamId,\n            ordered,\n            maxPacketLifeTime,\n            maxRetransmits,\n            protocol\n          };\n          logger2.debug(\"sendDataChannel() [options:%o]\", options);\n          const dataChannel = this._pc.createDataChannel(label, options);\n          this._nextSendSctpStreamId = ++this._nextSendSctpStreamId % SCTP_NUM_STREAMS.MIS;\n          if (!this._hasDataChannelMediaSection) {\n            const offer = yield this._pc.createOffer();\n            const localSdpObject = sdpTransform4.parse(offer.sdp);\n            const offerMediaObject = localSdpObject.media.find((m) => m.type === \"application\");\n            if (!this._transportReady) {\n              yield this.setupTransport({\n                localDtlsRole: (_a2 = this._forcedLocalDtlsRole) !== null && _a2 !== void 0 ? _a2 : \"client\",\n                localSdpObject\n              });\n            }\n            logger2.debug(\"sendDataChannel() | calling pc.setLocalDescription() [offer:%o]\", offer);\n            yield this._pc.setLocalDescription(offer);\n            this._remoteSdp.sendSctpAssociation({ offerMediaObject });\n            const answer = { type: \"answer\", sdp: this._remoteSdp.getSdp() };\n            logger2.debug(\"sendDataChannel() | calling pc.setRemoteDescription() [answer:%o]\", answer);\n            yield this._pc.setRemoteDescription(answer);\n            this._hasDataChannelMediaSection = true;\n          }\n          const sctpStreamParameters = {\n            streamId: options.id,\n            ordered: options.ordered,\n            maxPacketLifeTime: options.maxPacketLifeTime,\n            maxRetransmits: options.maxRetransmits\n          };\n          return { dataChannel, sctpStreamParameters };\n        });\n      }\n      receive(optionsList) {\n        return __async(this, null, function* () {\n          var _a2;\n          this.assertRecvDirection();\n          const results = [];\n          const mapLocalId = /* @__PURE__ */ new Map();\n          for (const options of optionsList) {\n            const { trackId, kind, rtpParameters, streamId } = options;\n            logger2.debug(\"receive() [trackId:%s, kind:%s]\", trackId, kind);\n            const localId = rtpParameters.mid || String(this._mapMidTransceiver.size);\n            mapLocalId.set(trackId, localId);\n            this._remoteSdp.receive({\n              mid: localId,\n              kind,\n              offerRtpParameters: rtpParameters,\n              streamId: streamId || rtpParameters.rtcp.cname,\n              trackId\n            });\n          }\n          const offer = { type: \"offer\", sdp: this._remoteSdp.getSdp() };\n          logger2.debug(\"receive() | calling pc.setRemoteDescription() [offer:%o]\", offer);\n          yield this._pc.setRemoteDescription(offer);\n          let answer = yield this._pc.createAnswer();\n          const localSdpObject = sdpTransform4.parse(answer.sdp);\n          for (const options of optionsList) {\n            const { trackId, rtpParameters } = options;\n            const localId = mapLocalId.get(trackId);\n            const answerMediaObject = localSdpObject.media.find((m) => String(m.mid) === localId);\n            sdpCommonUtils.applyCodecParameters({\n              offerRtpParameters: rtpParameters,\n              answerMediaObject\n            });\n          }\n          answer = { type: \"answer\", sdp: sdpTransform4.write(localSdpObject) };\n          if (!this._transportReady) {\n            yield this.setupTransport({\n              localDtlsRole: (_a2 = this._forcedLocalDtlsRole) !== null && _a2 !== void 0 ? _a2 : \"client\",\n              localSdpObject\n            });\n          }\n          logger2.debug(\"receive() | calling pc.setLocalDescription() [answer:%o]\", answer);\n          yield this._pc.setLocalDescription(answer);\n          for (const options of optionsList) {\n            const { trackId } = options;\n            const localId = mapLocalId.get(trackId);\n            const transceiver = this._pc.getTransceivers().find((t2) => t2.mid === localId);\n            if (!transceiver) {\n              throw new Error(\"new RTCRtpTransceiver not found\");\n            } else {\n              this._mapMidTransceiver.set(localId, transceiver);\n              results.push({\n                localId,\n                track: transceiver.receiver.track,\n                rtpReceiver: transceiver.receiver\n              });\n            }\n          }\n          return results;\n        });\n      }\n      stopReceiving(localIds) {\n        return __async(this, null, function* () {\n          this.assertRecvDirection();\n          for (const localId of localIds) {\n            logger2.debug(\"stopReceiving() [localId:%s]\", localId);\n            const transceiver = this._mapMidTransceiver.get(localId);\n            if (!transceiver) {\n              throw new Error(\"associated RTCRtpTransceiver not found\");\n            }\n            this._remoteSdp.closeMediaSection(transceiver.mid);\n          }\n          const offer = { type: \"offer\", sdp: this._remoteSdp.getSdp() };\n          logger2.debug(\"stopReceiving() | calling pc.setRemoteDescription() [offer:%o]\", offer);\n          yield this._pc.setRemoteDescription(offer);\n          const answer = yield this._pc.createAnswer();\n          logger2.debug(\"stopReceiving() | calling pc.setLocalDescription() [answer:%o]\", answer);\n          yield this._pc.setLocalDescription(answer);\n          for (const localId of localIds) {\n            this._mapMidTransceiver.delete(localId);\n          }\n        });\n      }\n      pauseReceiving(localIds) {\n        return __async(this, null, function* () {\n          this.assertRecvDirection();\n          for (const localId of localIds) {\n            logger2.debug(\"pauseReceiving() [localId:%s]\", localId);\n            const transceiver = this._mapMidTransceiver.get(localId);\n            if (!transceiver) {\n              throw new Error(\"associated RTCRtpTransceiver not found\");\n            }\n            transceiver.direction = \"inactive\";\n            this._remoteSdp.pauseMediaSection(localId);\n          }\n          const offer = { type: \"offer\", sdp: this._remoteSdp.getSdp() };\n          logger2.debug(\"pauseReceiving() | calling pc.setRemoteDescription() [offer:%o]\", offer);\n          yield this._pc.setRemoteDescription(offer);\n          const answer = yield this._pc.createAnswer();\n          logger2.debug(\"pauseReceiving() | calling pc.setLocalDescription() [answer:%o]\", answer);\n          yield this._pc.setLocalDescription(answer);\n        });\n      }\n      resumeReceiving(localIds) {\n        return __async(this, null, function* () {\n          this.assertRecvDirection();\n          for (const localId of localIds) {\n            logger2.debug(\"resumeReceiving() [localId:%s]\", localId);\n            const transceiver = this._mapMidTransceiver.get(localId);\n            if (!transceiver) {\n              throw new Error(\"associated RTCRtpTransceiver not found\");\n            }\n            transceiver.direction = \"recvonly\";\n            this._remoteSdp.resumeReceivingMediaSection(localId);\n          }\n          const offer = { type: \"offer\", sdp: this._remoteSdp.getSdp() };\n          logger2.debug(\"resumeReceiving() | calling pc.setRemoteDescription() [offer:%o]\", offer);\n          yield this._pc.setRemoteDescription(offer);\n          const answer = yield this._pc.createAnswer();\n          logger2.debug(\"resumeReceiving() | calling pc.setLocalDescription() [answer:%o]\", answer);\n          yield this._pc.setLocalDescription(answer);\n        });\n      }\n      getReceiverStats(localId) {\n        return __async(this, null, function* () {\n          this.assertRecvDirection();\n          const transceiver = this._mapMidTransceiver.get(localId);\n          if (!transceiver) {\n            throw new Error(\"associated RTCRtpTransceiver not found\");\n          }\n          return transceiver.receiver.getStats();\n        });\n      }\n      receiveDataChannel(_0) {\n        return __async(this, arguments, function* ({ sctpStreamParameters, label, protocol }) {\n          var _a2;\n          this.assertRecvDirection();\n          const { streamId, ordered, maxPacketLifeTime, maxRetransmits } = sctpStreamParameters;\n          const options = {\n            negotiated: true,\n            id: streamId,\n            ordered,\n            maxPacketLifeTime,\n            maxRetransmits,\n            protocol\n          };\n          logger2.debug(\"receiveDataChannel() [options:%o]\", options);\n          const dataChannel = this._pc.createDataChannel(label, options);\n          if (!this._hasDataChannelMediaSection) {\n            this._remoteSdp.receiveSctpAssociation();\n            const offer = { type: \"offer\", sdp: this._remoteSdp.getSdp() };\n            logger2.debug(\"receiveDataChannel() | calling pc.setRemoteDescription() [offer:%o]\", offer);\n            yield this._pc.setRemoteDescription(offer);\n            const answer = yield this._pc.createAnswer();\n            if (!this._transportReady) {\n              const localSdpObject = sdpTransform4.parse(answer.sdp);\n              yield this.setupTransport({\n                localDtlsRole: (_a2 = this._forcedLocalDtlsRole) !== null && _a2 !== void 0 ? _a2 : \"client\",\n                localSdpObject\n              });\n            }\n            logger2.debug(\"receiveDataChannel() | calling pc.setRemoteDescription() [answer:%o]\", answer);\n            yield this._pc.setLocalDescription(answer);\n            this._hasDataChannelMediaSection = true;\n          }\n          return { dataChannel };\n        });\n      }\n      setupTransport(_0) {\n        return __async(this, arguments, function* ({ localDtlsRole, localSdpObject }) {\n          if (!localSdpObject) {\n            localSdpObject = sdpTransform4.parse(this._pc.localDescription.sdp);\n          }\n          const dtlsParameters = sdpCommonUtils.extractDtlsParameters({ sdpObject: localSdpObject });\n          dtlsParameters.role = localDtlsRole;\n          this._remoteSdp.updateDtlsRole(localDtlsRole === \"client\" ? \"server\" : \"client\");\n          yield new Promise((resolve, reject) => {\n            this.safeEmit(\"@connect\", { dtlsParameters }, resolve, reject);\n          });\n          this._transportReady = true;\n        });\n      }\n      assertSendDirection() {\n        if (this._direction !== \"send\") {\n          throw new Error('method can just be called for handlers with \"send\" direction');\n        }\n      }\n      assertRecvDirection() {\n        if (this._direction !== \"recv\") {\n          throw new Error('method can just be called for handlers with \"recv\" direction');\n        }\n      }\n    };\n    exports.Chrome74 = Chrome74;\n  }\n});\n\n// ../../node_modules/mediasoup-client/lib/handlers/Chrome70.js\nvar require_Chrome70 = __commonJS({\n  \"../../node_modules/mediasoup-client/lib/handlers/Chrome70.js\"(exports) {\n    \"use strict\";\n    init_process();\n    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {\n      if (k2 === void 0)\n        k2 = k;\n      var desc = Object.getOwnPropertyDescriptor(m, k);\n      if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n        desc = { enumerable: true, get: function() {\n          return m[k];\n        } };\n      }\n      Object.defineProperty(o2, k2, desc);\n    } : function(o2, m, k, k2) {\n      if (k2 === void 0)\n        k2 = k;\n      o2[k2] = m[k];\n    });\n    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {\n      Object.defineProperty(o2, \"default\", { enumerable: true, value: v });\n    } : function(o2, v) {\n      o2[\"default\"] = v;\n    });\n    var __importStar = exports && exports.__importStar || function(mod) {\n      if (mod && mod.__esModule)\n        return mod;\n      var result2 = {};\n      if (mod != null) {\n        for (var k in mod)\n          if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k))\n            __createBinding(result2, mod, k);\n      }\n      __setModuleDefault(result2, mod);\n      return result2;\n    };\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.Chrome70 = void 0;\n    var sdpTransform4 = __importStar(require_lib());\n    var Logger_1 = require_Logger();\n    var utils = __importStar(require_utils2());\n    var ortc = __importStar(require_ortc());\n    var sdpCommonUtils = __importStar(require_commonUtils());\n    var sdpUnifiedPlanUtils = __importStar(require_unifiedPlanUtils());\n    var HandlerInterface_1 = require_HandlerInterface();\n    var RemoteSdp_1 = require_RemoteSdp();\n    var scalabilityModes_1 = require_scalabilityModes();\n    var logger2 = new Logger_1.Logger(\"Chrome70\");\n    var SCTP_NUM_STREAMS = { OS: 1024, MIS: 1024 };\n    var Chrome70 = class extends HandlerInterface_1.HandlerInterface {\n      static createFactory() {\n        return () => new Chrome70();\n      }\n      constructor() {\n        super();\n        this._mapMidTransceiver = /* @__PURE__ */ new Map();\n        this._sendStream = new MediaStream();\n        this._hasDataChannelMediaSection = false;\n        this._nextSendSctpStreamId = 0;\n        this._transportReady = false;\n      }\n      get name() {\n        return \"Chrome70\";\n      }\n      close() {\n        logger2.debug(\"close()\");\n        if (this._pc) {\n          try {\n            this._pc.close();\n          } catch (error) {\n          }\n        }\n        this.emit(\"@close\");\n      }\n      getNativeRtpCapabilities() {\n        return __async(this, null, function* () {\n          logger2.debug(\"getNativeRtpCapabilities()\");\n          const pc = new RTCPeerConnection({\n            iceServers: [],\n            iceTransportPolicy: \"all\",\n            bundlePolicy: \"max-bundle\",\n            rtcpMuxPolicy: \"require\",\n            sdpSemantics: \"unified-plan\"\n          });\n          try {\n            pc.addTransceiver(\"audio\");\n            pc.addTransceiver(\"video\");\n            const offer = yield pc.createOffer();\n            try {\n              pc.close();\n            } catch (error) {\n            }\n            const sdpObject = sdpTransform4.parse(offer.sdp);\n            const nativeRtpCapabilities = sdpCommonUtils.extractRtpCapabilities({ sdpObject });\n            return nativeRtpCapabilities;\n          } catch (error) {\n            try {\n              pc.close();\n            } catch (error2) {\n            }\n            throw error;\n          }\n        });\n      }\n      getNativeSctpCapabilities() {\n        return __async(this, null, function* () {\n          logger2.debug(\"getNativeSctpCapabilities()\");\n          return {\n            numStreams: SCTP_NUM_STREAMS\n          };\n        });\n      }\n      run({ direction, iceParameters, iceCandidates, dtlsParameters, sctpParameters, iceServers, iceTransportPolicy, additionalSettings, proprietaryConstraints, extendedRtpCapabilities }) {\n        logger2.debug(\"run()\");\n        this._direction = direction;\n        this._remoteSdp = new RemoteSdp_1.RemoteSdp({\n          iceParameters,\n          iceCandidates,\n          dtlsParameters,\n          sctpParameters\n        });\n        this._sendingRtpParametersByKind = {\n          audio: ortc.getSendingRtpParameters(\"audio\", extendedRtpCapabilities),\n          video: ortc.getSendingRtpParameters(\"video\", extendedRtpCapabilities)\n        };\n        this._sendingRemoteRtpParametersByKind = {\n          audio: ortc.getSendingRemoteRtpParameters(\"audio\", extendedRtpCapabilities),\n          video: ortc.getSendingRemoteRtpParameters(\"video\", extendedRtpCapabilities)\n        };\n        if (dtlsParameters.role && dtlsParameters.role !== \"auto\") {\n          this._forcedLocalDtlsRole = dtlsParameters.role === \"server\" ? \"client\" : \"server\";\n        }\n        this._pc = new RTCPeerConnection(__spreadValues({\n          iceServers: iceServers || [],\n          iceTransportPolicy: iceTransportPolicy || \"all\",\n          bundlePolicy: \"max-bundle\",\n          rtcpMuxPolicy: \"require\",\n          sdpSemantics: \"unified-plan\"\n        }, additionalSettings), proprietaryConstraints);\n        if (this._pc.connectionState) {\n          this._pc.addEventListener(\"connectionstatechange\", () => {\n            this.emit(\"@connectionstatechange\", this._pc.connectionState);\n          });\n        } else {\n          this._pc.addEventListener(\"iceconnectionstatechange\", () => {\n            logger2.warn(\"run() | pc.connectionState not supported, using pc.iceConnectionState\");\n            switch (this._pc.iceConnectionState) {\n              case \"checking\":\n                this.emit(\"@connectionstatechange\", \"connecting\");\n                break;\n              case \"connected\":\n              case \"completed\":\n                this.emit(\"@connectionstatechange\", \"connected\");\n                break;\n              case \"failed\":\n                this.emit(\"@connectionstatechange\", \"failed\");\n                break;\n              case \"disconnected\":\n                this.emit(\"@connectionstatechange\", \"disconnected\");\n                break;\n              case \"closed\":\n                this.emit(\"@connectionstatechange\", \"closed\");\n                break;\n            }\n          });\n        }\n      }\n      updateIceServers(iceServers) {\n        return __async(this, null, function* () {\n          logger2.debug(\"updateIceServers()\");\n          const configuration = this._pc.getConfiguration();\n          configuration.iceServers = iceServers;\n          this._pc.setConfiguration(configuration);\n        });\n      }\n      restartIce(iceParameters) {\n        return __async(this, null, function* () {\n          logger2.debug(\"restartIce()\");\n          this._remoteSdp.updateIceParameters(iceParameters);\n          if (!this._transportReady) {\n            return;\n          }\n          if (this._direction === \"send\") {\n            const offer = yield this._pc.createOffer({ iceRestart: true });\n            logger2.debug(\"restartIce() | calling pc.setLocalDescription() [offer:%o]\", offer);\n            yield this._pc.setLocalDescription(offer);\n            const answer = { type: \"answer\", sdp: this._remoteSdp.getSdp() };\n            logger2.debug(\"restartIce() | calling pc.setRemoteDescription() [answer:%o]\", answer);\n            yield this._pc.setRemoteDescription(answer);\n          } else {\n            const offer = { type: \"offer\", sdp: this._remoteSdp.getSdp() };\n            logger2.debug(\"restartIce() | calling pc.setRemoteDescription() [offer:%o]\", offer);\n            yield this._pc.setRemoteDescription(offer);\n            const answer = yield this._pc.createAnswer();\n            logger2.debug(\"restartIce() | calling pc.setLocalDescription() [answer:%o]\", answer);\n            yield this._pc.setLocalDescription(answer);\n          }\n        });\n      }\n      getTransportStats() {\n        return __async(this, null, function* () {\n          return this._pc.getStats();\n        });\n      }\n      send(_0) {\n        return __async(this, arguments, function* ({ track, encodings, codecOptions, codec }) {\n          var _a2;\n          this.assertSendDirection();\n          logger2.debug(\"send() [kind:%s, track.id:%s]\", track.kind, track.id);\n          const sendingRtpParameters = utils.clone(this._sendingRtpParametersByKind[track.kind], {});\n          sendingRtpParameters.codecs = ortc.reduceCodecs(sendingRtpParameters.codecs, codec);\n          const sendingRemoteRtpParameters = utils.clone(this._sendingRemoteRtpParametersByKind[track.kind], {});\n          sendingRemoteRtpParameters.codecs = ortc.reduceCodecs(sendingRemoteRtpParameters.codecs, codec);\n          const mediaSectionIdx = this._remoteSdp.getNextMediaSectionIdx();\n          const transceiver = this._pc.addTransceiver(track, { direction: \"sendonly\", streams: [this._sendStream] });\n          let offer = yield this._pc.createOffer();\n          let localSdpObject = sdpTransform4.parse(offer.sdp);\n          let offerMediaObject;\n          if (!this._transportReady) {\n            yield this.setupTransport({\n              localDtlsRole: (_a2 = this._forcedLocalDtlsRole) !== null && _a2 !== void 0 ? _a2 : \"client\",\n              localSdpObject\n            });\n          }\n          if (encodings && encodings.length > 1) {\n            logger2.debug(\"send() | enabling legacy simulcast\");\n            localSdpObject = sdpTransform4.parse(offer.sdp);\n            offerMediaObject = localSdpObject.media[mediaSectionIdx.idx];\n            sdpUnifiedPlanUtils.addLegacySimulcast({\n              offerMediaObject,\n              numStreams: encodings.length\n            });\n            offer = { type: \"offer\", sdp: sdpTransform4.write(localSdpObject) };\n          }\n          let hackVp9Svc = false;\n          const layers = (0, scalabilityModes_1.parse)((encodings || [{}])[0].scalabilityMode);\n          if (encodings && encodings.length === 1 && layers.spatialLayers > 1 && sendingRtpParameters.codecs[0].mimeType.toLowerCase() === \"video/vp9\") {\n            logger2.debug(\"send() | enabling legacy simulcast for VP9 SVC\");\n            hackVp9Svc = true;\n            localSdpObject = sdpTransform4.parse(offer.sdp);\n            offerMediaObject = localSdpObject.media[mediaSectionIdx.idx];\n            sdpUnifiedPlanUtils.addLegacySimulcast({\n              offerMediaObject,\n              numStreams: layers.spatialLayers\n            });\n            offer = { type: \"offer\", sdp: sdpTransform4.write(localSdpObject) };\n          }\n          logger2.debug(\"send() | calling pc.setLocalDescription() [offer:%o]\", offer);\n          yield this._pc.setLocalDescription(offer);\n          if (encodings) {\n            logger2.debug(\"send() | applying given encodings\");\n            const parameters = transceiver.sender.getParameters();\n            for (let idx = 0; idx < (parameters.encodings || []).length; ++idx) {\n              const encoding = parameters.encodings[idx];\n              const desiredEncoding = encodings[idx];\n              if (!desiredEncoding) {\n                break;\n              }\n              parameters.encodings[idx] = Object.assign(encoding, desiredEncoding);\n            }\n            yield transceiver.sender.setParameters(parameters);\n          }\n          const localId = transceiver.mid;\n          sendingRtpParameters.mid = localId;\n          localSdpObject = sdpTransform4.parse(this._pc.localDescription.sdp);\n          offerMediaObject = localSdpObject.media[mediaSectionIdx.idx];\n          sendingRtpParameters.rtcp.cname = sdpCommonUtils.getCname({ offerMediaObject });\n          sendingRtpParameters.encodings = sdpUnifiedPlanUtils.getRtpEncodings({ offerMediaObject });\n          if (encodings) {\n            for (let idx = 0; idx < sendingRtpParameters.encodings.length; ++idx) {\n              if (encodings[idx]) {\n                Object.assign(sendingRtpParameters.encodings[idx], encodings[idx]);\n              }\n            }\n          }\n          if (hackVp9Svc) {\n            sendingRtpParameters.encodings = [sendingRtpParameters.encodings[0]];\n          }\n          if (sendingRtpParameters.encodings.length > 1 && (sendingRtpParameters.codecs[0].mimeType.toLowerCase() === \"video/vp8\" || sendingRtpParameters.codecs[0].mimeType.toLowerCase() === \"video/h264\")) {\n            for (const encoding of sendingRtpParameters.encodings) {\n              encoding.scalabilityMode = \"L1T3\";\n            }\n          }\n          this._remoteSdp.send({\n            offerMediaObject,\n            reuseMid: mediaSectionIdx.reuseMid,\n            offerRtpParameters: sendingRtpParameters,\n            answerRtpParameters: sendingRemoteRtpParameters,\n            codecOptions\n          });\n          const answer = { type: \"answer\", sdp: this._remoteSdp.getSdp() };\n          logger2.debug(\"send() | calling pc.setRemoteDescription() [answer:%o]\", answer);\n          yield this._pc.setRemoteDescription(answer);\n          this._mapMidTransceiver.set(localId, transceiver);\n          return {\n            localId,\n            rtpParameters: sendingRtpParameters,\n            rtpSender: transceiver.sender\n          };\n        });\n      }\n      stopSending(localId) {\n        return __async(this, null, function* () {\n          this.assertSendDirection();\n          logger2.debug(\"stopSending() [localId:%s]\", localId);\n          const transceiver = this._mapMidTransceiver.get(localId);\n          if (!transceiver) {\n            throw new Error(\"associated RTCRtpTransceiver not found\");\n          }\n          transceiver.sender.replaceTrack(null);\n          this._pc.removeTrack(transceiver.sender);\n          const mediaSectionClosed = this._remoteSdp.closeMediaSection(transceiver.mid);\n          if (mediaSectionClosed) {\n            try {\n              transceiver.stop();\n            } catch (error) {\n            }\n          }\n          const offer = yield this._pc.createOffer();\n          logger2.debug(\"stopSending() | calling pc.setLocalDescription() [offer:%o]\", offer);\n          yield this._pc.setLocalDescription(offer);\n          const answer = { type: \"answer\", sdp: this._remoteSdp.getSdp() };\n          logger2.debug(\"stopSending() | calling pc.setRemoteDescription() [answer:%o]\", answer);\n          yield this._pc.setRemoteDescription(answer);\n          this._mapMidTransceiver.delete(localId);\n        });\n      }\n      pauseSending(localId) {\n        return __async(this, null, function* () {\n        });\n      }\n      resumeSending(localId) {\n        return __async(this, null, function* () {\n        });\n      }\n      replaceTrack(localId, track) {\n        return __async(this, null, function* () {\n          this.assertSendDirection();\n          if (track) {\n            logger2.debug(\"replaceTrack() [localId:%s, track.id:%s]\", localId, track.id);\n          } else {\n            logger2.debug(\"replaceTrack() [localId:%s, no track]\", localId);\n          }\n          const transceiver = this._mapMidTransceiver.get(localId);\n          if (!transceiver) {\n            throw new Error(\"associated RTCRtpTransceiver not found\");\n          }\n          yield transceiver.sender.replaceTrack(track);\n        });\n      }\n      setMaxSpatialLayer(localId, spatialLayer) {\n        return __async(this, null, function* () {\n          this.assertSendDirection();\n          logger2.debug(\"setMaxSpatialLayer() [localId:%s, spatialLayer:%s]\", localId, spatialLayer);\n          const transceiver = this._mapMidTransceiver.get(localId);\n          if (!transceiver) {\n            throw new Error(\"associated RTCRtpTransceiver not found\");\n          }\n          const parameters = transceiver.sender.getParameters();\n          parameters.encodings.forEach((encoding, idx) => {\n            if (idx <= spatialLayer) {\n              encoding.active = true;\n            } else {\n              encoding.active = false;\n            }\n          });\n          yield transceiver.sender.setParameters(parameters);\n          this._remoteSdp.muxMediaSectionSimulcast(localId, parameters.encodings);\n          const offer = yield this._pc.createOffer();\n          logger2.debug(\"setMaxSpatialLayer() | calling pc.setLocalDescription() [offer:%o]\", offer);\n          yield this._pc.setLocalDescription(offer);\n          const answer = { type: \"answer\", sdp: this._remoteSdp.getSdp() };\n          logger2.debug(\"setMaxSpatialLayer() | calling pc.setRemoteDescription() [answer:%o]\", answer);\n          yield this._pc.setRemoteDescription(answer);\n        });\n      }\n      setRtpEncodingParameters(localId, params) {\n        return __async(this, null, function* () {\n          this.assertSendDirection();\n          logger2.debug(\"setRtpEncodingParameters() [localId:%s, params:%o]\", localId, params);\n          const transceiver = this._mapMidTransceiver.get(localId);\n          if (!transceiver) {\n            throw new Error(\"associated RTCRtpTransceiver not found\");\n          }\n          const parameters = transceiver.sender.getParameters();\n          parameters.encodings.forEach((encoding, idx) => {\n            parameters.encodings[idx] = __spreadValues(__spreadValues({}, encoding), params);\n          });\n          yield transceiver.sender.setParameters(parameters);\n          this._remoteSdp.muxMediaSectionSimulcast(localId, parameters.encodings);\n          const offer = yield this._pc.createOffer();\n          logger2.debug(\"setRtpEncodingParameters() | calling pc.setLocalDescription() [offer:%o]\", offer);\n          yield this._pc.setLocalDescription(offer);\n          const answer = { type: \"answer\", sdp: this._remoteSdp.getSdp() };\n          logger2.debug(\"setRtpEncodingParameters() | calling pc.setRemoteDescription() [answer:%o]\", answer);\n          yield this._pc.setRemoteDescription(answer);\n        });\n      }\n      getSenderStats(localId) {\n        return __async(this, null, function* () {\n          this.assertSendDirection();\n          const transceiver = this._mapMidTransceiver.get(localId);\n          if (!transceiver) {\n            throw new Error(\"associated RTCRtpTransceiver not found\");\n          }\n          return transceiver.sender.getStats();\n        });\n      }\n      sendDataChannel(_0) {\n        return __async(this, arguments, function* ({ ordered, maxPacketLifeTime, maxRetransmits, label, protocol }) {\n          var _a2;\n          this.assertSendDirection();\n          const options = {\n            negotiated: true,\n            id: this._nextSendSctpStreamId,\n            ordered,\n            maxPacketLifeTime,\n            maxRetransmitTime: maxPacketLifeTime,\n            maxRetransmits,\n            protocol\n          };\n          logger2.debug(\"sendDataChannel() [options:%o]\", options);\n          const dataChannel = this._pc.createDataChannel(label, options);\n          this._nextSendSctpStreamId = ++this._nextSendSctpStreamId % SCTP_NUM_STREAMS.MIS;\n          if (!this._hasDataChannelMediaSection) {\n            const offer = yield this._pc.createOffer();\n            const localSdpObject = sdpTransform4.parse(offer.sdp);\n            const offerMediaObject = localSdpObject.media.find((m) => m.type === \"application\");\n            if (!this._transportReady) {\n              yield this.setupTransport({\n                localDtlsRole: (_a2 = this._forcedLocalDtlsRole) !== null && _a2 !== void 0 ? _a2 : \"client\",\n                localSdpObject\n              });\n            }\n            logger2.debug(\"sendDataChannel() | calling pc.setLocalDescription() [offer:%o]\", offer);\n            yield this._pc.setLocalDescription(offer);\n            this._remoteSdp.sendSctpAssociation({ offerMediaObject });\n            const answer = { type: \"answer\", sdp: this._remoteSdp.getSdp() };\n            logger2.debug(\"sendDataChannel() | calling pc.setRemoteDescription() [answer:%o]\", answer);\n            yield this._pc.setRemoteDescription(answer);\n            this._hasDataChannelMediaSection = true;\n          }\n          const sctpStreamParameters = {\n            streamId: options.id,\n            ordered: options.ordered,\n            maxPacketLifeTime: options.maxPacketLifeTime,\n            maxRetransmits: options.maxRetransmits\n          };\n          return { dataChannel, sctpStreamParameters };\n        });\n      }\n      receive(optionsList) {\n        return __async(this, null, function* () {\n          var _a2;\n          this.assertRecvDirection();\n          const results = [];\n          const mapLocalId = /* @__PURE__ */ new Map();\n          for (const options of optionsList) {\n            const { trackId, kind, rtpParameters, streamId } = options;\n            logger2.debug(\"receive() [trackId:%s, kind:%s]\", trackId, kind);\n            const localId = rtpParameters.mid || String(this._mapMidTransceiver.size);\n            mapLocalId.set(trackId, localId);\n            this._remoteSdp.receive({\n              mid: localId,\n              kind,\n              offerRtpParameters: rtpParameters,\n              streamId: streamId || rtpParameters.rtcp.cname,\n              trackId\n            });\n          }\n          const offer = { type: \"offer\", sdp: this._remoteSdp.getSdp() };\n          logger2.debug(\"receive() | calling pc.setRemoteDescription() [offer:%o]\", offer);\n          yield this._pc.setRemoteDescription(offer);\n          let answer = yield this._pc.createAnswer();\n          const localSdpObject = sdpTransform4.parse(answer.sdp);\n          for (const options of optionsList) {\n            const { trackId, rtpParameters } = options;\n            const localId = mapLocalId.get(trackId);\n            const answerMediaObject = localSdpObject.media.find((m) => String(m.mid) === localId);\n            sdpCommonUtils.applyCodecParameters({\n              offerRtpParameters: rtpParameters,\n              answerMediaObject\n            });\n          }\n          answer = { type: \"answer\", sdp: sdpTransform4.write(localSdpObject) };\n          if (!this._transportReady) {\n            yield this.setupTransport({\n              localDtlsRole: (_a2 = this._forcedLocalDtlsRole) !== null && _a2 !== void 0 ? _a2 : \"client\",\n              localSdpObject\n            });\n          }\n          logger2.debug(\"receive() | calling pc.setLocalDescription() [answer:%o]\", answer);\n          yield this._pc.setLocalDescription(answer);\n          for (const options of optionsList) {\n            const { trackId } = options;\n            const localId = mapLocalId.get(trackId);\n            const transceiver = this._pc.getTransceivers().find((t2) => t2.mid === localId);\n            if (!transceiver) {\n              throw new Error(\"new RTCRtpTransceiver not found\");\n            }\n            this._mapMidTransceiver.set(localId, transceiver);\n            results.push({\n              localId,\n              track: transceiver.receiver.track,\n              rtpReceiver: transceiver.receiver\n            });\n          }\n          return results;\n        });\n      }\n      stopReceiving(localIds) {\n        return __async(this, null, function* () {\n          this.assertRecvDirection();\n          for (const localId of localIds) {\n            logger2.debug(\"stopReceiving() [localId:%s]\", localId);\n            const transceiver = this._mapMidTransceiver.get(localId);\n            if (!transceiver) {\n              throw new Error(\"associated RTCRtpTransceiver not found\");\n            }\n            this._remoteSdp.closeMediaSection(transceiver.mid);\n          }\n          const offer = { type: \"offer\", sdp: this._remoteSdp.getSdp() };\n          logger2.debug(\"stopReceiving() | calling pc.setRemoteDescription() [offer:%o]\", offer);\n          yield this._pc.setRemoteDescription(offer);\n          const answer = yield this._pc.createAnswer();\n          logger2.debug(\"stopReceiving() | calling pc.setLocalDescription() [answer:%o]\", answer);\n          yield this._pc.setLocalDescription(answer);\n          for (const localId of localIds) {\n            this._mapMidTransceiver.delete(localId);\n          }\n        });\n      }\n      pauseReceiving(localIds) {\n        return __async(this, null, function* () {\n        });\n      }\n      resumeReceiving(localIds) {\n        return __async(this, null, function* () {\n        });\n      }\n      getReceiverStats(localId) {\n        return __async(this, null, function* () {\n          this.assertRecvDirection();\n          const transceiver = this._mapMidTransceiver.get(localId);\n          if (!transceiver) {\n            throw new Error(\"associated RTCRtpTransceiver not found\");\n          }\n          return transceiver.receiver.getStats();\n        });\n      }\n      receiveDataChannel(_0) {\n        return __async(this, arguments, function* ({ sctpStreamParameters, label, protocol }) {\n          var _a2;\n          this.assertRecvDirection();\n          const { streamId, ordered, maxPacketLifeTime, maxRetransmits } = sctpStreamParameters;\n          const options = {\n            negotiated: true,\n            id: streamId,\n            ordered,\n            maxPacketLifeTime,\n            maxRetransmitTime: maxPacketLifeTime,\n            maxRetransmits,\n            protocol\n          };\n          logger2.debug(\"receiveDataChannel() [options:%o]\", options);\n          const dataChannel = this._pc.createDataChannel(label, options);\n          if (!this._hasDataChannelMediaSection) {\n            this._remoteSdp.receiveSctpAssociation();\n            const offer = { type: \"offer\", sdp: this._remoteSdp.getSdp() };\n            logger2.debug(\"receiveDataChannel() | calling pc.setRemoteDescription() [offer:%o]\", offer);\n            yield this._pc.setRemoteDescription(offer);\n            const answer = yield this._pc.createAnswer();\n            if (!this._transportReady) {\n              const localSdpObject = sdpTransform4.parse(answer.sdp);\n              yield this.setupTransport({\n                localDtlsRole: (_a2 = this._forcedLocalDtlsRole) !== null && _a2 !== void 0 ? _a2 : \"client\",\n                localSdpObject\n              });\n            }\n            logger2.debug(\"receiveDataChannel() | calling pc.setRemoteDescription() [answer:%o]\", answer);\n            yield this._pc.setLocalDescription(answer);\n            this._hasDataChannelMediaSection = true;\n          }\n          return { dataChannel };\n        });\n      }\n      setupTransport(_0) {\n        return __async(this, arguments, function* ({ localDtlsRole, localSdpObject }) {\n          if (!localSdpObject) {\n            localSdpObject = sdpTransform4.parse(this._pc.localDescription.sdp);\n          }\n          const dtlsParameters = sdpCommonUtils.extractDtlsParameters({ sdpObject: localSdpObject });\n          dtlsParameters.role = localDtlsRole;\n          this._remoteSdp.updateDtlsRole(localDtlsRole === \"client\" ? \"server\" : \"client\");\n          yield new Promise((resolve, reject) => {\n            this.safeEmit(\"@connect\", { dtlsParameters }, resolve, reject);\n          });\n          this._transportReady = true;\n        });\n      }\n      assertSendDirection() {\n        if (this._direction !== \"send\") {\n          throw new Error('method can just be called for handlers with \"send\" direction');\n        }\n      }\n      assertRecvDirection() {\n        if (this._direction !== \"recv\") {\n          throw new Error('method can just be called for handlers with \"recv\" direction');\n        }\n      }\n    };\n    exports.Chrome70 = Chrome70;\n  }\n});\n\n// ../../node_modules/mediasoup-client/lib/handlers/sdp/planBUtils.js\nvar require_planBUtils = __commonJS({\n  \"../../node_modules/mediasoup-client/lib/handlers/sdp/planBUtils.js\"(exports) {\n    \"use strict\";\n    init_process();\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.addLegacySimulcast = exports.getRtpEncodings = void 0;\n    function getRtpEncodings({ offerMediaObject, track }) {\n      let firstSsrc;\n      const ssrcs = /* @__PURE__ */ new Set();\n      for (const line of offerMediaObject.ssrcs || []) {\n        if (line.attribute !== \"msid\") {\n          continue;\n        }\n        const trackId = line.value.split(\" \")[1];\n        if (trackId === track.id) {\n          const ssrc = line.id;\n          ssrcs.add(ssrc);\n          if (!firstSsrc) {\n            firstSsrc = ssrc;\n          }\n        }\n      }\n      if (ssrcs.size === 0) {\n        throw new Error(`a=ssrc line with msid information not found [track.id:${track.id}]`);\n      }\n      const ssrcToRtxSsrc = /* @__PURE__ */ new Map();\n      for (const line of offerMediaObject.ssrcGroups || []) {\n        if (line.semantics !== \"FID\") {\n          continue;\n        }\n        let [ssrc, rtxSsrc] = line.ssrcs.split(/\\s+/);\n        ssrc = Number(ssrc);\n        rtxSsrc = Number(rtxSsrc);\n        if (ssrcs.has(ssrc)) {\n          ssrcs.delete(ssrc);\n          ssrcs.delete(rtxSsrc);\n          ssrcToRtxSsrc.set(ssrc, rtxSsrc);\n        }\n      }\n      for (const ssrc of ssrcs) {\n        ssrcToRtxSsrc.set(ssrc, null);\n      }\n      const encodings = [];\n      for (const [ssrc, rtxSsrc] of ssrcToRtxSsrc) {\n        const encoding = { ssrc };\n        if (rtxSsrc) {\n          encoding.rtx = { ssrc: rtxSsrc };\n        }\n        encodings.push(encoding);\n      }\n      return encodings;\n    }\n    exports.getRtpEncodings = getRtpEncodings;\n    function addLegacySimulcast({ offerMediaObject, track, numStreams }) {\n      if (numStreams <= 1) {\n        throw new TypeError(\"numStreams must be greater than 1\");\n      }\n      let firstSsrc;\n      let firstRtxSsrc;\n      let streamId;\n      const ssrcMsidLine = (offerMediaObject.ssrcs || []).find((line) => {\n        if (line.attribute !== \"msid\") {\n          return false;\n        }\n        const trackId = line.value.split(\" \")[1];\n        if (trackId === track.id) {\n          firstSsrc = line.id;\n          streamId = line.value.split(\" \")[0];\n          return true;\n        } else {\n          return false;\n        }\n      });\n      if (!ssrcMsidLine) {\n        throw new Error(`a=ssrc line with msid information not found [track.id:${track.id}]`);\n      }\n      (offerMediaObject.ssrcGroups || []).some((line) => {\n        if (line.semantics !== \"FID\") {\n          return false;\n        }\n        const ssrcs2 = line.ssrcs.split(/\\s+/);\n        if (Number(ssrcs2[0]) === firstSsrc) {\n          firstRtxSsrc = Number(ssrcs2[1]);\n          return true;\n        } else {\n          return false;\n        }\n      });\n      const ssrcCnameLine = offerMediaObject.ssrcs.find((line) => line.attribute === \"cname\" && line.id === firstSsrc);\n      if (!ssrcCnameLine) {\n        throw new Error(`a=ssrc line with cname information not found [track.id:${track.id}]`);\n      }\n      const cname = ssrcCnameLine.value;\n      const ssrcs = [];\n      const rtxSsrcs = [];\n      for (let i = 0; i < numStreams; ++i) {\n        ssrcs.push(firstSsrc + i);\n        if (firstRtxSsrc) {\n          rtxSsrcs.push(firstRtxSsrc + i);\n        }\n      }\n      offerMediaObject.ssrcGroups = offerMediaObject.ssrcGroups || [];\n      offerMediaObject.ssrcs = offerMediaObject.ssrcs || [];\n      offerMediaObject.ssrcGroups.push({\n        semantics: \"SIM\",\n        ssrcs: ssrcs.join(\" \")\n      });\n      for (let i = 0; i < ssrcs.length; ++i) {\n        const ssrc = ssrcs[i];\n        offerMediaObject.ssrcs.push({\n          id: ssrc,\n          attribute: \"cname\",\n          value: cname\n        });\n        offerMediaObject.ssrcs.push({\n          id: ssrc,\n          attribute: \"msid\",\n          value: `${streamId} ${track.id}`\n        });\n      }\n      for (let i = 0; i < rtxSsrcs.length; ++i) {\n        const ssrc = ssrcs[i];\n        const rtxSsrc = rtxSsrcs[i];\n        offerMediaObject.ssrcs.push({\n          id: rtxSsrc,\n          attribute: \"cname\",\n          value: cname\n        });\n        offerMediaObject.ssrcs.push({\n          id: rtxSsrc,\n          attribute: \"msid\",\n          value: `${streamId} ${track.id}`\n        });\n        offerMediaObject.ssrcGroups.push({\n          semantics: \"FID\",\n          ssrcs: `${ssrc} ${rtxSsrc}`\n        });\n      }\n    }\n    exports.addLegacySimulcast = addLegacySimulcast;\n  }\n});\n\n// ../../node_modules/mediasoup-client/lib/handlers/Chrome67.js\nvar require_Chrome67 = __commonJS({\n  \"../../node_modules/mediasoup-client/lib/handlers/Chrome67.js\"(exports) {\n    \"use strict\";\n    init_process();\n    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {\n      if (k2 === void 0)\n        k2 = k;\n      var desc = Object.getOwnPropertyDescriptor(m, k);\n      if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n        desc = { enumerable: true, get: function() {\n          return m[k];\n        } };\n      }\n      Object.defineProperty(o2, k2, desc);\n    } : function(o2, m, k, k2) {\n      if (k2 === void 0)\n        k2 = k;\n      o2[k2] = m[k];\n    });\n    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {\n      Object.defineProperty(o2, \"default\", { enumerable: true, value: v });\n    } : function(o2, v) {\n      o2[\"default\"] = v;\n    });\n    var __importStar = exports && exports.__importStar || function(mod) {\n      if (mod && mod.__esModule)\n        return mod;\n      var result2 = {};\n      if (mod != null) {\n        for (var k in mod)\n          if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k))\n            __createBinding(result2, mod, k);\n      }\n      __setModuleDefault(result2, mod);\n      return result2;\n    };\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.Chrome67 = void 0;\n    var sdpTransform4 = __importStar(require_lib());\n    var Logger_1 = require_Logger();\n    var utils = __importStar(require_utils2());\n    var ortc = __importStar(require_ortc());\n    var sdpCommonUtils = __importStar(require_commonUtils());\n    var sdpPlanBUtils = __importStar(require_planBUtils());\n    var HandlerInterface_1 = require_HandlerInterface();\n    var RemoteSdp_1 = require_RemoteSdp();\n    var logger2 = new Logger_1.Logger(\"Chrome67\");\n    var SCTP_NUM_STREAMS = { OS: 1024, MIS: 1024 };\n    var Chrome67 = class extends HandlerInterface_1.HandlerInterface {\n      static createFactory() {\n        return () => new Chrome67();\n      }\n      constructor() {\n        super();\n        this._sendStream = new MediaStream();\n        this._mapSendLocalIdRtpSender = /* @__PURE__ */ new Map();\n        this._nextSendLocalId = 0;\n        this._mapRecvLocalIdInfo = /* @__PURE__ */ new Map();\n        this._hasDataChannelMediaSection = false;\n        this._nextSendSctpStreamId = 0;\n        this._transportReady = false;\n      }\n      get name() {\n        return \"Chrome67\";\n      }\n      close() {\n        logger2.debug(\"close()\");\n        if (this._pc) {\n          try {\n            this._pc.close();\n          } catch (error) {\n          }\n        }\n        this.emit(\"@close\");\n      }\n      getNativeRtpCapabilities() {\n        return __async(this, null, function* () {\n          logger2.debug(\"getNativeRtpCapabilities()\");\n          const pc = new RTCPeerConnection({\n            iceServers: [],\n            iceTransportPolicy: \"all\",\n            bundlePolicy: \"max-bundle\",\n            rtcpMuxPolicy: \"require\",\n            sdpSemantics: \"plan-b\"\n          });\n          try {\n            const offer = yield pc.createOffer({\n              offerToReceiveAudio: true,\n              offerToReceiveVideo: true\n            });\n            try {\n              pc.close();\n            } catch (error) {\n            }\n            const sdpObject = sdpTransform4.parse(offer.sdp);\n            const nativeRtpCapabilities = sdpCommonUtils.extractRtpCapabilities({ sdpObject });\n            return nativeRtpCapabilities;\n          } catch (error) {\n            try {\n              pc.close();\n            } catch (error2) {\n            }\n            throw error;\n          }\n        });\n      }\n      getNativeSctpCapabilities() {\n        return __async(this, null, function* () {\n          logger2.debug(\"getNativeSctpCapabilities()\");\n          return {\n            numStreams: SCTP_NUM_STREAMS\n          };\n        });\n      }\n      run({ direction, iceParameters, iceCandidates, dtlsParameters, sctpParameters, iceServers, iceTransportPolicy, additionalSettings, proprietaryConstraints, extendedRtpCapabilities }) {\n        logger2.debug(\"run()\");\n        this._direction = direction;\n        this._remoteSdp = new RemoteSdp_1.RemoteSdp({\n          iceParameters,\n          iceCandidates,\n          dtlsParameters,\n          sctpParameters,\n          planB: true\n        });\n        this._sendingRtpParametersByKind = {\n          audio: ortc.getSendingRtpParameters(\"audio\", extendedRtpCapabilities),\n          video: ortc.getSendingRtpParameters(\"video\", extendedRtpCapabilities)\n        };\n        this._sendingRemoteRtpParametersByKind = {\n          audio: ortc.getSendingRemoteRtpParameters(\"audio\", extendedRtpCapabilities),\n          video: ortc.getSendingRemoteRtpParameters(\"video\", extendedRtpCapabilities)\n        };\n        if (dtlsParameters.role && dtlsParameters.role !== \"auto\") {\n          this._forcedLocalDtlsRole = dtlsParameters.role === \"server\" ? \"client\" : \"server\";\n        }\n        this._pc = new RTCPeerConnection(__spreadValues({\n          iceServers: iceServers || [],\n          iceTransportPolicy: iceTransportPolicy || \"all\",\n          bundlePolicy: \"max-bundle\",\n          rtcpMuxPolicy: \"require\",\n          sdpSemantics: \"plan-b\"\n        }, additionalSettings), proprietaryConstraints);\n        if (this._pc.connectionState) {\n          this._pc.addEventListener(\"connectionstatechange\", () => {\n            this.emit(\"@connectionstatechange\", this._pc.connectionState);\n          });\n        } else {\n          this._pc.addEventListener(\"iceconnectionstatechange\", () => {\n            logger2.warn(\"run() | pc.connectionState not supported, using pc.iceConnectionState\");\n            switch (this._pc.iceConnectionState) {\n              case \"checking\":\n                this.emit(\"@connectionstatechange\", \"connecting\");\n                break;\n              case \"connected\":\n              case \"completed\":\n                this.emit(\"@connectionstatechange\", \"connected\");\n                break;\n              case \"failed\":\n                this.emit(\"@connectionstatechange\", \"failed\");\n                break;\n              case \"disconnected\":\n                this.emit(\"@connectionstatechange\", \"disconnected\");\n                break;\n              case \"closed\":\n                this.emit(\"@connectionstatechange\", \"closed\");\n                break;\n            }\n          });\n        }\n      }\n      updateIceServers(iceServers) {\n        return __async(this, null, function* () {\n          logger2.debug(\"updateIceServers()\");\n          const configuration = this._pc.getConfiguration();\n          configuration.iceServers = iceServers;\n          this._pc.setConfiguration(configuration);\n        });\n      }\n      restartIce(iceParameters) {\n        return __async(this, null, function* () {\n          logger2.debug(\"restartIce()\");\n          this._remoteSdp.updateIceParameters(iceParameters);\n          if (!this._transportReady) {\n            return;\n          }\n          if (this._direction === \"send\") {\n            const offer = yield this._pc.createOffer({ iceRestart: true });\n            logger2.debug(\"restartIce() | calling pc.setLocalDescription() [offer:%o]\", offer);\n            yield this._pc.setLocalDescription(offer);\n            const answer = { type: \"answer\", sdp: this._remoteSdp.getSdp() };\n            logger2.debug(\"restartIce() | calling pc.setRemoteDescription() [answer:%o]\", answer);\n            yield this._pc.setRemoteDescription(answer);\n          } else {\n            const offer = { type: \"offer\", sdp: this._remoteSdp.getSdp() };\n            logger2.debug(\"restartIce() | calling pc.setRemoteDescription() [offer:%o]\", offer);\n            yield this._pc.setRemoteDescription(offer);\n            const answer = yield this._pc.createAnswer();\n            logger2.debug(\"restartIce() | calling pc.setLocalDescription() [answer:%o]\", answer);\n            yield this._pc.setLocalDescription(answer);\n          }\n        });\n      }\n      getTransportStats() {\n        return __async(this, null, function* () {\n          return this._pc.getStats();\n        });\n      }\n      send(_0) {\n        return __async(this, arguments, function* ({ track, encodings, codecOptions, codec }) {\n          var _a2;\n          this.assertSendDirection();\n          logger2.debug(\"send() [kind:%s, track.id:%s]\", track.kind, track.id);\n          if (codec) {\n            logger2.warn(\"send() | codec selection is not available in %s handler\", this.name);\n          }\n          this._sendStream.addTrack(track);\n          this._pc.addTrack(track, this._sendStream);\n          let offer = yield this._pc.createOffer();\n          let localSdpObject = sdpTransform4.parse(offer.sdp);\n          let offerMediaObject;\n          const sendingRtpParameters = utils.clone(this._sendingRtpParametersByKind[track.kind], {});\n          sendingRtpParameters.codecs = ortc.reduceCodecs(sendingRtpParameters.codecs);\n          const sendingRemoteRtpParameters = utils.clone(this._sendingRemoteRtpParametersByKind[track.kind], {});\n          sendingRemoteRtpParameters.codecs = ortc.reduceCodecs(sendingRemoteRtpParameters.codecs);\n          if (!this._transportReady) {\n            yield this.setupTransport({\n              localDtlsRole: (_a2 = this._forcedLocalDtlsRole) !== null && _a2 !== void 0 ? _a2 : \"client\",\n              localSdpObject\n            });\n          }\n          if (track.kind === \"video\" && encodings && encodings.length > 1) {\n            logger2.debug(\"send() | enabling simulcast\");\n            localSdpObject = sdpTransform4.parse(offer.sdp);\n            offerMediaObject = localSdpObject.media.find((m) => m.type === \"video\");\n            sdpPlanBUtils.addLegacySimulcast({\n              offerMediaObject,\n              track,\n              numStreams: encodings.length\n            });\n            offer = { type: \"offer\", sdp: sdpTransform4.write(localSdpObject) };\n          }\n          logger2.debug(\"send() | calling pc.setLocalDescription() [offer:%o]\", offer);\n          yield this._pc.setLocalDescription(offer);\n          localSdpObject = sdpTransform4.parse(this._pc.localDescription.sdp);\n          offerMediaObject = localSdpObject.media.find((m) => m.type === track.kind);\n          sendingRtpParameters.rtcp.cname = sdpCommonUtils.getCname({ offerMediaObject });\n          sendingRtpParameters.encodings = sdpPlanBUtils.getRtpEncodings({ offerMediaObject, track });\n          if (encodings) {\n            for (let idx = 0; idx < sendingRtpParameters.encodings.length; ++idx) {\n              if (encodings[idx]) {\n                Object.assign(sendingRtpParameters.encodings[idx], encodings[idx]);\n              }\n            }\n          }\n          if (sendingRtpParameters.encodings.length > 1 && sendingRtpParameters.codecs[0].mimeType.toLowerCase() === \"video/vp8\") {\n            for (const encoding of sendingRtpParameters.encodings) {\n              encoding.scalabilityMode = \"L1T3\";\n            }\n          }\n          this._remoteSdp.send({\n            offerMediaObject,\n            offerRtpParameters: sendingRtpParameters,\n            answerRtpParameters: sendingRemoteRtpParameters,\n            codecOptions\n          });\n          const answer = { type: \"answer\", sdp: this._remoteSdp.getSdp() };\n          logger2.debug(\"send() | calling pc.setRemoteDescription() [answer:%o]\", answer);\n          yield this._pc.setRemoteDescription(answer);\n          const localId = String(this._nextSendLocalId);\n          this._nextSendLocalId++;\n          const rtpSender = this._pc.getSenders().find((s) => s.track === track);\n          this._mapSendLocalIdRtpSender.set(localId, rtpSender);\n          return {\n            localId,\n            rtpParameters: sendingRtpParameters,\n            rtpSender\n          };\n        });\n      }\n      stopSending(localId) {\n        return __async(this, null, function* () {\n          this.assertSendDirection();\n          logger2.debug(\"stopSending() [localId:%s]\", localId);\n          const rtpSender = this._mapSendLocalIdRtpSender.get(localId);\n          if (!rtpSender) {\n            throw new Error(\"associated RTCRtpSender not found\");\n          }\n          this._pc.removeTrack(rtpSender);\n          if (rtpSender.track) {\n            this._sendStream.removeTrack(rtpSender.track);\n          }\n          this._mapSendLocalIdRtpSender.delete(localId);\n          const offer = yield this._pc.createOffer();\n          logger2.debug(\"stopSending() | calling pc.setLocalDescription() [offer:%o]\", offer);\n          try {\n            yield this._pc.setLocalDescription(offer);\n          } catch (error) {\n            if (this._sendStream.getTracks().length === 0) {\n              logger2.warn(\"stopSending() | ignoring expected error due no sending tracks: %s\", error.toString());\n              return;\n            }\n            throw error;\n          }\n          if (this._pc.signalingState === \"stable\") {\n            return;\n          }\n          const answer = { type: \"answer\", sdp: this._remoteSdp.getSdp() };\n          logger2.debug(\"stopSending() | calling pc.setRemoteDescription() [answer:%o]\", answer);\n          yield this._pc.setRemoteDescription(answer);\n        });\n      }\n      pauseSending(localId) {\n        return __async(this, null, function* () {\n        });\n      }\n      resumeSending(localId) {\n        return __async(this, null, function* () {\n        });\n      }\n      replaceTrack(localId, track) {\n        return __async(this, null, function* () {\n          this.assertSendDirection();\n          if (track) {\n            logger2.debug(\"replaceTrack() [localId:%s, track.id:%s]\", localId, track.id);\n          } else {\n            logger2.debug(\"replaceTrack() [localId:%s, no track]\", localId);\n          }\n          const rtpSender = this._mapSendLocalIdRtpSender.get(localId);\n          if (!rtpSender) {\n            throw new Error(\"associated RTCRtpSender not found\");\n          }\n          const oldTrack = rtpSender.track;\n          yield rtpSender.replaceTrack(track);\n          if (oldTrack) {\n            this._sendStream.removeTrack(oldTrack);\n          }\n          if (track) {\n            this._sendStream.addTrack(track);\n          }\n        });\n      }\n      setMaxSpatialLayer(localId, spatialLayer) {\n        return __async(this, null, function* () {\n          this.assertSendDirection();\n          logger2.debug(\"setMaxSpatialLayer() [localId:%s, spatialLayer:%s]\", localId, spatialLayer);\n          const rtpSender = this._mapSendLocalIdRtpSender.get(localId);\n          if (!rtpSender) {\n            throw new Error(\"associated RTCRtpSender not found\");\n          }\n          const parameters = rtpSender.getParameters();\n          parameters.encodings.forEach((encoding, idx) => {\n            if (idx <= spatialLayer) {\n              encoding.active = true;\n            } else {\n              encoding.active = false;\n            }\n          });\n          yield rtpSender.setParameters(parameters);\n        });\n      }\n      setRtpEncodingParameters(localId, params) {\n        return __async(this, null, function* () {\n          this.assertSendDirection();\n          logger2.debug(\"setRtpEncodingParameters() [localId:%s, params:%o]\", localId, params);\n          const rtpSender = this._mapSendLocalIdRtpSender.get(localId);\n          if (!rtpSender) {\n            throw new Error(\"associated RTCRtpSender not found\");\n          }\n          const parameters = rtpSender.getParameters();\n          parameters.encodings.forEach((encoding, idx) => {\n            parameters.encodings[idx] = __spreadValues(__spreadValues({}, encoding), params);\n          });\n          yield rtpSender.setParameters(parameters);\n        });\n      }\n      getSenderStats(localId) {\n        return __async(this, null, function* () {\n          this.assertSendDirection();\n          const rtpSender = this._mapSendLocalIdRtpSender.get(localId);\n          if (!rtpSender) {\n            throw new Error(\"associated RTCRtpSender not found\");\n          }\n          return rtpSender.getStats();\n        });\n      }\n      sendDataChannel(_0) {\n        return __async(this, arguments, function* ({ ordered, maxPacketLifeTime, maxRetransmits, label, protocol }) {\n          var _a2;\n          this.assertSendDirection();\n          const options = {\n            negotiated: true,\n            id: this._nextSendSctpStreamId,\n            ordered,\n            maxPacketLifeTime,\n            maxRetransmitTime: maxPacketLifeTime,\n            maxRetransmits,\n            protocol\n          };\n          logger2.debug(\"sendDataChannel() [options:%o]\", options);\n          const dataChannel = this._pc.createDataChannel(label, options);\n          this._nextSendSctpStreamId = ++this._nextSendSctpStreamId % SCTP_NUM_STREAMS.MIS;\n          if (!this._hasDataChannelMediaSection) {\n            const offer = yield this._pc.createOffer();\n            const localSdpObject = sdpTransform4.parse(offer.sdp);\n            const offerMediaObject = localSdpObject.media.find((m) => m.type === \"application\");\n            if (!this._transportReady) {\n              yield this.setupTransport({\n                localDtlsRole: (_a2 = this._forcedLocalDtlsRole) !== null && _a2 !== void 0 ? _a2 : \"client\",\n                localSdpObject\n              });\n            }\n            logger2.debug(\"sendDataChannel() | calling pc.setLocalDescription() [offer:%o]\", offer);\n            yield this._pc.setLocalDescription(offer);\n            this._remoteSdp.sendSctpAssociation({ offerMediaObject });\n            const answer = { type: \"answer\", sdp: this._remoteSdp.getSdp() };\n            logger2.debug(\"sendDataChannel() | calling pc.setRemoteDescription() [answer:%o]\", answer);\n            yield this._pc.setRemoteDescription(answer);\n            this._hasDataChannelMediaSection = true;\n          }\n          const sctpStreamParameters = {\n            streamId: options.id,\n            ordered: options.ordered,\n            maxPacketLifeTime: options.maxPacketLifeTime,\n            maxRetransmits: options.maxRetransmits\n          };\n          return { dataChannel, sctpStreamParameters };\n        });\n      }\n      receive(optionsList) {\n        return __async(this, null, function* () {\n          var _a2;\n          this.assertRecvDirection();\n          const results = [];\n          for (const options of optionsList) {\n            const { trackId, kind, rtpParameters, streamId } = options;\n            logger2.debug(\"receive() [trackId:%s, kind:%s]\", trackId, kind);\n            const mid = kind;\n            this._remoteSdp.receive({\n              mid,\n              kind,\n              offerRtpParameters: rtpParameters,\n              streamId: streamId || rtpParameters.rtcp.cname,\n              trackId\n            });\n          }\n          const offer = { type: \"offer\", sdp: this._remoteSdp.getSdp() };\n          logger2.debug(\"receive() | calling pc.setRemoteDescription() [offer:%o]\", offer);\n          yield this._pc.setRemoteDescription(offer);\n          let answer = yield this._pc.createAnswer();\n          const localSdpObject = sdpTransform4.parse(answer.sdp);\n          for (const options of optionsList) {\n            const { kind, rtpParameters } = options;\n            const mid = kind;\n            const answerMediaObject = localSdpObject.media.find((m) => String(m.mid) === mid);\n            sdpCommonUtils.applyCodecParameters({\n              offerRtpParameters: rtpParameters,\n              answerMediaObject\n            });\n          }\n          answer = { type: \"answer\", sdp: sdpTransform4.write(localSdpObject) };\n          if (!this._transportReady) {\n            yield this.setupTransport({\n              localDtlsRole: (_a2 = this._forcedLocalDtlsRole) !== null && _a2 !== void 0 ? _a2 : \"client\",\n              localSdpObject\n            });\n          }\n          logger2.debug(\"receive() | calling pc.setLocalDescription() [answer:%o]\", answer);\n          yield this._pc.setLocalDescription(answer);\n          for (const options of optionsList) {\n            const { kind, trackId, rtpParameters } = options;\n            const localId = trackId;\n            const mid = kind;\n            const rtpReceiver = this._pc.getReceivers().find((r2) => r2.track && r2.track.id === localId);\n            if (!rtpReceiver) {\n              throw new Error(\"new RTCRtpReceiver not\");\n            }\n            this._mapRecvLocalIdInfo.set(localId, { mid, rtpParameters, rtpReceiver });\n            results.push({\n              localId,\n              track: rtpReceiver.track,\n              rtpReceiver\n            });\n          }\n          return results;\n        });\n      }\n      stopReceiving(localIds) {\n        return __async(this, null, function* () {\n          this.assertRecvDirection();\n          for (const localId of localIds) {\n            logger2.debug(\"stopReceiving() [localId:%s]\", localId);\n            const { mid, rtpParameters } = this._mapRecvLocalIdInfo.get(localId) || {};\n            this._mapRecvLocalIdInfo.delete(localId);\n            this._remoteSdp.planBStopReceiving({ mid, offerRtpParameters: rtpParameters });\n          }\n          const offer = { type: \"offer\", sdp: this._remoteSdp.getSdp() };\n          logger2.debug(\"stopReceiving() | calling pc.setRemoteDescription() [offer:%o]\", offer);\n          yield this._pc.setRemoteDescription(offer);\n          const answer = yield this._pc.createAnswer();\n          logger2.debug(\"stopReceiving() | calling pc.setLocalDescription() [answer:%o]\", answer);\n          yield this._pc.setLocalDescription(answer);\n        });\n      }\n      pauseReceiving(localIds) {\n        return __async(this, null, function* () {\n        });\n      }\n      resumeReceiving(localIds) {\n        return __async(this, null, function* () {\n        });\n      }\n      getReceiverStats(localId) {\n        return __async(this, null, function* () {\n          this.assertRecvDirection();\n          const { rtpReceiver } = this._mapRecvLocalIdInfo.get(localId) || {};\n          if (!rtpReceiver) {\n            throw new Error(\"associated RTCRtpReceiver not found\");\n          }\n          return rtpReceiver.getStats();\n        });\n      }\n      receiveDataChannel(_0) {\n        return __async(this, arguments, function* ({ sctpStreamParameters, label, protocol }) {\n          var _a2;\n          this.assertRecvDirection();\n          const { streamId, ordered, maxPacketLifeTime, maxRetransmits } = sctpStreamParameters;\n          const options = {\n            negotiated: true,\n            id: streamId,\n            ordered,\n            maxPacketLifeTime,\n            maxRetransmitTime: maxPacketLifeTime,\n            maxRetransmits,\n            protocol\n          };\n          logger2.debug(\"receiveDataChannel() [options:%o]\", options);\n          const dataChannel = this._pc.createDataChannel(label, options);\n          if (!this._hasDataChannelMediaSection) {\n            this._remoteSdp.receiveSctpAssociation({ oldDataChannelSpec: true });\n            const offer = { type: \"offer\", sdp: this._remoteSdp.getSdp() };\n            logger2.debug(\"receiveDataChannel() | calling pc.setRemoteDescription() [offer:%o]\", offer);\n            yield this._pc.setRemoteDescription(offer);\n            const answer = yield this._pc.createAnswer();\n            if (!this._transportReady) {\n              const localSdpObject = sdpTransform4.parse(answer.sdp);\n              yield this.setupTransport({\n                localDtlsRole: (_a2 = this._forcedLocalDtlsRole) !== null && _a2 !== void 0 ? _a2 : \"client\",\n                localSdpObject\n              });\n            }\n            logger2.debug(\"receiveDataChannel() | calling pc.setRemoteDescription() [answer:%o]\", answer);\n            yield this._pc.setLocalDescription(answer);\n            this._hasDataChannelMediaSection = true;\n          }\n          return { dataChannel };\n        });\n      }\n      setupTransport(_0) {\n        return __async(this, arguments, function* ({ localDtlsRole, localSdpObject }) {\n          if (!localSdpObject) {\n            localSdpObject = sdpTransform4.parse(this._pc.localDescription.sdp);\n          }\n          const dtlsParameters = sdpCommonUtils.extractDtlsParameters({ sdpObject: localSdpObject });\n          dtlsParameters.role = localDtlsRole;\n          this._remoteSdp.updateDtlsRole(localDtlsRole === \"client\" ? \"server\" : \"client\");\n          yield new Promise((resolve, reject) => {\n            this.safeEmit(\"@connect\", { dtlsParameters }, resolve, reject);\n          });\n          this._transportReady = true;\n        });\n      }\n      assertSendDirection() {\n        if (this._direction !== \"send\") {\n          throw new Error('method can just be called for handlers with \"send\" direction');\n        }\n      }\n      assertRecvDirection() {\n        if (this._direction !== \"recv\") {\n          throw new Error('method can just be called for handlers with \"recv\" direction');\n        }\n      }\n    };\n    exports.Chrome67 = Chrome67;\n  }\n});\n\n// ../../node_modules/mediasoup-client/lib/handlers/Chrome55.js\nvar require_Chrome55 = __commonJS({\n  \"../../node_modules/mediasoup-client/lib/handlers/Chrome55.js\"(exports) {\n    \"use strict\";\n    init_process();\n    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {\n      if (k2 === void 0)\n        k2 = k;\n      var desc = Object.getOwnPropertyDescriptor(m, k);\n      if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n        desc = { enumerable: true, get: function() {\n          return m[k];\n        } };\n      }\n      Object.defineProperty(o2, k2, desc);\n    } : function(o2, m, k, k2) {\n      if (k2 === void 0)\n        k2 = k;\n      o2[k2] = m[k];\n    });\n    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {\n      Object.defineProperty(o2, \"default\", { enumerable: true, value: v });\n    } : function(o2, v) {\n      o2[\"default\"] = v;\n    });\n    var __importStar = exports && exports.__importStar || function(mod) {\n      if (mod && mod.__esModule)\n        return mod;\n      var result2 = {};\n      if (mod != null) {\n        for (var k in mod)\n          if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k))\n            __createBinding(result2, mod, k);\n      }\n      __setModuleDefault(result2, mod);\n      return result2;\n    };\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.Chrome55 = void 0;\n    var sdpTransform4 = __importStar(require_lib());\n    var Logger_1 = require_Logger();\n    var errors_1 = require_errors();\n    var utils = __importStar(require_utils2());\n    var ortc = __importStar(require_ortc());\n    var sdpCommonUtils = __importStar(require_commonUtils());\n    var sdpPlanBUtils = __importStar(require_planBUtils());\n    var HandlerInterface_1 = require_HandlerInterface();\n    var RemoteSdp_1 = require_RemoteSdp();\n    var logger2 = new Logger_1.Logger(\"Chrome55\");\n    var SCTP_NUM_STREAMS = { OS: 1024, MIS: 1024 };\n    var Chrome55 = class extends HandlerInterface_1.HandlerInterface {\n      static createFactory() {\n        return () => new Chrome55();\n      }\n      constructor() {\n        super();\n        this._sendStream = new MediaStream();\n        this._mapSendLocalIdTrack = /* @__PURE__ */ new Map();\n        this._nextSendLocalId = 0;\n        this._mapRecvLocalIdInfo = /* @__PURE__ */ new Map();\n        this._hasDataChannelMediaSection = false;\n        this._nextSendSctpStreamId = 0;\n        this._transportReady = false;\n      }\n      get name() {\n        return \"Chrome55\";\n      }\n      close() {\n        logger2.debug(\"close()\");\n        if (this._pc) {\n          try {\n            this._pc.close();\n          } catch (error) {\n          }\n        }\n        this.emit(\"@close\");\n      }\n      getNativeRtpCapabilities() {\n        return __async(this, null, function* () {\n          logger2.debug(\"getNativeRtpCapabilities()\");\n          const pc = new RTCPeerConnection({\n            iceServers: [],\n            iceTransportPolicy: \"all\",\n            bundlePolicy: \"max-bundle\",\n            rtcpMuxPolicy: \"require\",\n            sdpSemantics: \"plan-b\"\n          });\n          try {\n            const offer = yield pc.createOffer({\n              offerToReceiveAudio: true,\n              offerToReceiveVideo: true\n            });\n            try {\n              pc.close();\n            } catch (error) {\n            }\n            const sdpObject = sdpTransform4.parse(offer.sdp);\n            const nativeRtpCapabilities = sdpCommonUtils.extractRtpCapabilities({ sdpObject });\n            return nativeRtpCapabilities;\n          } catch (error) {\n            try {\n              pc.close();\n            } catch (error2) {\n            }\n            throw error;\n          }\n        });\n      }\n      getNativeSctpCapabilities() {\n        return __async(this, null, function* () {\n          logger2.debug(\"getNativeSctpCapabilities()\");\n          return {\n            numStreams: SCTP_NUM_STREAMS\n          };\n        });\n      }\n      run({ direction, iceParameters, iceCandidates, dtlsParameters, sctpParameters, iceServers, iceTransportPolicy, additionalSettings, proprietaryConstraints, extendedRtpCapabilities }) {\n        logger2.debug(\"run()\");\n        this._direction = direction;\n        this._remoteSdp = new RemoteSdp_1.RemoteSdp({\n          iceParameters,\n          iceCandidates,\n          dtlsParameters,\n          sctpParameters,\n          planB: true\n        });\n        this._sendingRtpParametersByKind = {\n          audio: ortc.getSendingRtpParameters(\"audio\", extendedRtpCapabilities),\n          video: ortc.getSendingRtpParameters(\"video\", extendedRtpCapabilities)\n        };\n        this._sendingRemoteRtpParametersByKind = {\n          audio: ortc.getSendingRemoteRtpParameters(\"audio\", extendedRtpCapabilities),\n          video: ortc.getSendingRemoteRtpParameters(\"video\", extendedRtpCapabilities)\n        };\n        if (dtlsParameters.role && dtlsParameters.role !== \"auto\") {\n          this._forcedLocalDtlsRole = dtlsParameters.role === \"server\" ? \"client\" : \"server\";\n        }\n        this._pc = new RTCPeerConnection(__spreadValues({\n          iceServers: iceServers || [],\n          iceTransportPolicy: iceTransportPolicy || \"all\",\n          bundlePolicy: \"max-bundle\",\n          rtcpMuxPolicy: \"require\",\n          sdpSemantics: \"plan-b\"\n        }, additionalSettings), proprietaryConstraints);\n        if (this._pc.connectionState) {\n          this._pc.addEventListener(\"connectionstatechange\", () => {\n            this.emit(\"@connectionstatechange\", this._pc.connectionState);\n          });\n        } else {\n          this._pc.addEventListener(\"iceconnectionstatechange\", () => {\n            logger2.warn(\"run() | pc.connectionState not supported, using pc.iceConnectionState\");\n            switch (this._pc.iceConnectionState) {\n              case \"checking\":\n                this.emit(\"@connectionstatechange\", \"connecting\");\n                break;\n              case \"connected\":\n              case \"completed\":\n                this.emit(\"@connectionstatechange\", \"connected\");\n                break;\n              case \"failed\":\n                this.emit(\"@connectionstatechange\", \"failed\");\n                break;\n              case \"disconnected\":\n                this.emit(\"@connectionstatechange\", \"disconnected\");\n                break;\n              case \"closed\":\n                this.emit(\"@connectionstatechange\", \"closed\");\n                break;\n            }\n          });\n        }\n      }\n      updateIceServers(iceServers) {\n        return __async(this, null, function* () {\n          logger2.debug(\"updateIceServers()\");\n          const configuration = this._pc.getConfiguration();\n          configuration.iceServers = iceServers;\n          this._pc.setConfiguration(configuration);\n        });\n      }\n      restartIce(iceParameters) {\n        return __async(this, null, function* () {\n          logger2.debug(\"restartIce()\");\n          this._remoteSdp.updateIceParameters(iceParameters);\n          if (!this._transportReady) {\n            return;\n          }\n          if (this._direction === \"send\") {\n            const offer = yield this._pc.createOffer({ iceRestart: true });\n            logger2.debug(\"restartIce() | calling pc.setLocalDescription() [offer:%o]\", offer);\n            yield this._pc.setLocalDescription(offer);\n            const answer = { type: \"answer\", sdp: this._remoteSdp.getSdp() };\n            logger2.debug(\"restartIce() | calling pc.setRemoteDescription() [answer:%o]\", answer);\n            yield this._pc.setRemoteDescription(answer);\n          } else {\n            const offer = { type: \"offer\", sdp: this._remoteSdp.getSdp() };\n            logger2.debug(\"restartIce() | calling pc.setRemoteDescription() [offer:%o]\", offer);\n            yield this._pc.setRemoteDescription(offer);\n            const answer = yield this._pc.createAnswer();\n            logger2.debug(\"restartIce() | calling pc.setLocalDescription() [answer:%o]\", answer);\n            yield this._pc.setLocalDescription(answer);\n          }\n        });\n      }\n      getTransportStats() {\n        return __async(this, null, function* () {\n          return this._pc.getStats();\n        });\n      }\n      send(_0) {\n        return __async(this, arguments, function* ({ track, encodings, codecOptions, codec }) {\n          var _a2;\n          this.assertSendDirection();\n          logger2.debug(\"send() [kind:%s, track.id:%s]\", track.kind, track.id);\n          if (codec) {\n            logger2.warn(\"send() | codec selection is not available in %s handler\", this.name);\n          }\n          this._sendStream.addTrack(track);\n          this._pc.addStream(this._sendStream);\n          let offer = yield this._pc.createOffer();\n          let localSdpObject = sdpTransform4.parse(offer.sdp);\n          let offerMediaObject;\n          const sendingRtpParameters = utils.clone(this._sendingRtpParametersByKind[track.kind], {});\n          sendingRtpParameters.codecs = ortc.reduceCodecs(sendingRtpParameters.codecs);\n          const sendingRemoteRtpParameters = utils.clone(this._sendingRemoteRtpParametersByKind[track.kind], {});\n          sendingRemoteRtpParameters.codecs = ortc.reduceCodecs(sendingRemoteRtpParameters.codecs);\n          if (!this._transportReady) {\n            yield this.setupTransport({\n              localDtlsRole: (_a2 = this._forcedLocalDtlsRole) !== null && _a2 !== void 0 ? _a2 : \"client\",\n              localSdpObject\n            });\n          }\n          if (track.kind === \"video\" && encodings && encodings.length > 1) {\n            logger2.debug(\"send() | enabling simulcast\");\n            localSdpObject = sdpTransform4.parse(offer.sdp);\n            offerMediaObject = localSdpObject.media.find((m) => m.type === \"video\");\n            sdpPlanBUtils.addLegacySimulcast({\n              offerMediaObject,\n              track,\n              numStreams: encodings.length\n            });\n            offer = { type: \"offer\", sdp: sdpTransform4.write(localSdpObject) };\n          }\n          logger2.debug(\"send() | calling pc.setLocalDescription() [offer:%o]\", offer);\n          yield this._pc.setLocalDescription(offer);\n          localSdpObject = sdpTransform4.parse(this._pc.localDescription.sdp);\n          offerMediaObject = localSdpObject.media.find((m) => m.type === track.kind);\n          sendingRtpParameters.rtcp.cname = sdpCommonUtils.getCname({ offerMediaObject });\n          sendingRtpParameters.encodings = sdpPlanBUtils.getRtpEncodings({ offerMediaObject, track });\n          if (encodings) {\n            for (let idx = 0; idx < sendingRtpParameters.encodings.length; ++idx) {\n              if (encodings[idx]) {\n                Object.assign(sendingRtpParameters.encodings[idx], encodings[idx]);\n              }\n            }\n          }\n          if (sendingRtpParameters.encodings.length > 1 && sendingRtpParameters.codecs[0].mimeType.toLowerCase() === \"video/vp8\") {\n            for (const encoding of sendingRtpParameters.encodings) {\n              encoding.scalabilityMode = \"L1T3\";\n            }\n          }\n          this._remoteSdp.send({\n            offerMediaObject,\n            offerRtpParameters: sendingRtpParameters,\n            answerRtpParameters: sendingRemoteRtpParameters,\n            codecOptions\n          });\n          const answer = { type: \"answer\", sdp: this._remoteSdp.getSdp() };\n          logger2.debug(\"send() | calling pc.setRemoteDescription() [answer:%o]\", answer);\n          yield this._pc.setRemoteDescription(answer);\n          const localId = String(this._nextSendLocalId);\n          this._nextSendLocalId++;\n          this._mapSendLocalIdTrack.set(localId, track);\n          return {\n            localId,\n            rtpParameters: sendingRtpParameters\n          };\n        });\n      }\n      stopSending(localId) {\n        return __async(this, null, function* () {\n          this.assertSendDirection();\n          logger2.debug(\"stopSending() [localId:%s]\", localId);\n          const track = this._mapSendLocalIdTrack.get(localId);\n          if (!track) {\n            throw new Error(\"track not found\");\n          }\n          this._mapSendLocalIdTrack.delete(localId);\n          this._sendStream.removeTrack(track);\n          this._pc.addStream(this._sendStream);\n          const offer = yield this._pc.createOffer();\n          logger2.debug(\"stopSending() | calling pc.setLocalDescription() [offer:%o]\", offer);\n          try {\n            yield this._pc.setLocalDescription(offer);\n          } catch (error) {\n            if (this._sendStream.getTracks().length === 0) {\n              logger2.warn(\"stopSending() | ignoring expected error due no sending tracks: %s\", error.toString());\n              return;\n            }\n            throw error;\n          }\n          if (this._pc.signalingState === \"stable\") {\n            return;\n          }\n          const answer = { type: \"answer\", sdp: this._remoteSdp.getSdp() };\n          logger2.debug(\"stopSending() | calling pc.setRemoteDescription() [answer:%o]\", answer);\n          yield this._pc.setRemoteDescription(answer);\n        });\n      }\n      pauseSending(localId) {\n        return __async(this, null, function* () {\n        });\n      }\n      resumeSending(localId) {\n        return __async(this, null, function* () {\n        });\n      }\n      replaceTrack(localId, track) {\n        return __async(this, null, function* () {\n          throw new errors_1.UnsupportedError(\"not implemented\");\n        });\n      }\n      setMaxSpatialLayer(localId, spatialLayer) {\n        return __async(this, null, function* () {\n          throw new errors_1.UnsupportedError(\" not implemented\");\n        });\n      }\n      setRtpEncodingParameters(localId, params) {\n        return __async(this, null, function* () {\n          throw new errors_1.UnsupportedError(\"not supported\");\n        });\n      }\n      getSenderStats(localId) {\n        return __async(this, null, function* () {\n          throw new errors_1.UnsupportedError(\"not implemented\");\n        });\n      }\n      sendDataChannel(_0) {\n        return __async(this, arguments, function* ({ ordered, maxPacketLifeTime, maxRetransmits, label, protocol }) {\n          var _a2;\n          this.assertSendDirection();\n          const options = {\n            negotiated: true,\n            id: this._nextSendSctpStreamId,\n            ordered,\n            maxPacketLifeTime,\n            maxRetransmitTime: maxPacketLifeTime,\n            maxRetransmits,\n            protocol\n          };\n          logger2.debug(\"sendDataChannel() [options:%o]\", options);\n          const dataChannel = this._pc.createDataChannel(label, options);\n          this._nextSendSctpStreamId = ++this._nextSendSctpStreamId % SCTP_NUM_STREAMS.MIS;\n          if (!this._hasDataChannelMediaSection) {\n            const offer = yield this._pc.createOffer();\n            const localSdpObject = sdpTransform4.parse(offer.sdp);\n            const offerMediaObject = localSdpObject.media.find((m) => m.type === \"application\");\n            if (!this._transportReady) {\n              yield this.setupTransport({\n                localDtlsRole: (_a2 = this._forcedLocalDtlsRole) !== null && _a2 !== void 0 ? _a2 : \"client\",\n                localSdpObject\n              });\n            }\n            logger2.debug(\"sendDataChannel() | calling pc.setLocalDescription() [offer:%o]\", offer);\n            yield this._pc.setLocalDescription(offer);\n            this._remoteSdp.sendSctpAssociation({ offerMediaObject });\n            const answer = { type: \"answer\", sdp: this._remoteSdp.getSdp() };\n            logger2.debug(\"sendDataChannel() | calling pc.setRemoteDescription() [answer:%o]\", answer);\n            yield this._pc.setRemoteDescription(answer);\n            this._hasDataChannelMediaSection = true;\n          }\n          const sctpStreamParameters = {\n            streamId: options.id,\n            ordered: options.ordered,\n            maxPacketLifeTime: options.maxPacketLifeTime,\n            maxRetransmits: options.maxRetransmits\n          };\n          return { dataChannel, sctpStreamParameters };\n        });\n      }\n      receive(optionsList) {\n        return __async(this, null, function* () {\n          var _a2;\n          this.assertRecvDirection();\n          const results = [];\n          for (const options of optionsList) {\n            const { trackId, kind, rtpParameters, streamId } = options;\n            logger2.debug(\"receive() [trackId:%s, kind:%s]\", trackId, kind);\n            const mid = kind;\n            this._remoteSdp.receive({\n              mid,\n              kind,\n              offerRtpParameters: rtpParameters,\n              streamId: streamId || rtpParameters.rtcp.cname,\n              trackId\n            });\n          }\n          const offer = { type: \"offer\", sdp: this._remoteSdp.getSdp() };\n          logger2.debug(\"receive() | calling pc.setRemoteDescription() [offer:%o]\", offer);\n          yield this._pc.setRemoteDescription(offer);\n          let answer = yield this._pc.createAnswer();\n          const localSdpObject = sdpTransform4.parse(answer.sdp);\n          for (const options of optionsList) {\n            const { kind, rtpParameters } = options;\n            const mid = kind;\n            const answerMediaObject = localSdpObject.media.find((m) => String(m.mid) === mid);\n            sdpCommonUtils.applyCodecParameters({\n              offerRtpParameters: rtpParameters,\n              answerMediaObject\n            });\n          }\n          answer = { type: \"answer\", sdp: sdpTransform4.write(localSdpObject) };\n          if (!this._transportReady) {\n            yield this.setupTransport({\n              localDtlsRole: (_a2 = this._forcedLocalDtlsRole) !== null && _a2 !== void 0 ? _a2 : \"client\",\n              localSdpObject\n            });\n          }\n          logger2.debug(\"receive() | calling pc.setLocalDescription() [answer:%o]\", answer);\n          yield this._pc.setLocalDescription(answer);\n          for (const options of optionsList) {\n            const { kind, trackId, rtpParameters } = options;\n            const mid = kind;\n            const localId = trackId;\n            const streamId = options.streamId || rtpParameters.rtcp.cname;\n            const stream = this._pc.getRemoteStreams().find((s) => s.id === streamId);\n            const track = stream.getTrackById(localId);\n            if (!track) {\n              throw new Error(\"remote track not found\");\n            }\n            this._mapRecvLocalIdInfo.set(localId, { mid, rtpParameters });\n            results.push({ localId, track });\n          }\n          return results;\n        });\n      }\n      stopReceiving(localIds) {\n        return __async(this, null, function* () {\n          this.assertRecvDirection();\n          for (const localId of localIds) {\n            logger2.debug(\"stopReceiving() [localId:%s]\", localId);\n            const { mid, rtpParameters } = this._mapRecvLocalIdInfo.get(localId) || {};\n            this._mapRecvLocalIdInfo.delete(localId);\n            this._remoteSdp.planBStopReceiving({ mid, offerRtpParameters: rtpParameters });\n          }\n          const offer = { type: \"offer\", sdp: this._remoteSdp.getSdp() };\n          logger2.debug(\"stopReceiving() | calling pc.setRemoteDescription() [offer:%o]\", offer);\n          yield this._pc.setRemoteDescription(offer);\n          const answer = yield this._pc.createAnswer();\n          logger2.debug(\"stopReceiving() | calling pc.setLocalDescription() [answer:%o]\", answer);\n          yield this._pc.setLocalDescription(answer);\n        });\n      }\n      pauseReceiving(localIds) {\n        return __async(this, null, function* () {\n        });\n      }\n      resumeReceiving(localIds) {\n        return __async(this, null, function* () {\n        });\n      }\n      getReceiverStats(localId) {\n        return __async(this, null, function* () {\n          throw new errors_1.UnsupportedError(\"not implemented\");\n        });\n      }\n      receiveDataChannel(_0) {\n        return __async(this, arguments, function* ({ sctpStreamParameters, label, protocol }) {\n          var _a2;\n          this.assertRecvDirection();\n          const { streamId, ordered, maxPacketLifeTime, maxRetransmits } = sctpStreamParameters;\n          const options = {\n            negotiated: true,\n            id: streamId,\n            ordered,\n            maxPacketLifeTime,\n            maxRetransmitTime: maxPacketLifeTime,\n            maxRetransmits,\n            protocol\n          };\n          logger2.debug(\"receiveDataChannel() [options:%o]\", options);\n          const dataChannel = this._pc.createDataChannel(label, options);\n          if (!this._hasDataChannelMediaSection) {\n            this._remoteSdp.receiveSctpAssociation({ oldDataChannelSpec: true });\n            const offer = { type: \"offer\", sdp: this._remoteSdp.getSdp() };\n            logger2.debug(\"receiveDataChannel() | calling pc.setRemoteDescription() [offer:%o]\", offer);\n            yield this._pc.setRemoteDescription(offer);\n            const answer = yield this._pc.createAnswer();\n            if (!this._transportReady) {\n              const localSdpObject = sdpTransform4.parse(answer.sdp);\n              yield this.setupTransport({\n                localDtlsRole: (_a2 = this._forcedLocalDtlsRole) !== null && _a2 !== void 0 ? _a2 : \"client\",\n                localSdpObject\n              });\n            }\n            logger2.debug(\"receiveDataChannel() | calling pc.setRemoteDescription() [answer:%o]\", answer);\n            yield this._pc.setLocalDescription(answer);\n            this._hasDataChannelMediaSection = true;\n          }\n          return { dataChannel };\n        });\n      }\n      setupTransport(_0) {\n        return __async(this, arguments, function* ({ localDtlsRole, localSdpObject }) {\n          if (!localSdpObject) {\n            localSdpObject = sdpTransform4.parse(this._pc.localDescription.sdp);\n          }\n          const dtlsParameters = sdpCommonUtils.extractDtlsParameters({ sdpObject: localSdpObject });\n          dtlsParameters.role = localDtlsRole;\n          this._remoteSdp.updateDtlsRole(localDtlsRole === \"client\" ? \"server\" : \"client\");\n          yield new Promise((resolve, reject) => {\n            this.safeEmit(\"@connect\", { dtlsParameters }, resolve, reject);\n          });\n          this._transportReady = true;\n        });\n      }\n      assertSendDirection() {\n        if (this._direction !== \"send\") {\n          throw new Error('method can just be called for handlers with \"send\" direction');\n        }\n      }\n      assertRecvDirection() {\n        if (this._direction !== \"recv\") {\n          throw new Error('method can just be called for handlers with \"recv\" direction');\n        }\n      }\n    };\n    exports.Chrome55 = Chrome55;\n  }\n});\n\n// ../../node_modules/mediasoup-client/lib/handlers/Firefox60.js\nvar require_Firefox60 = __commonJS({\n  \"../../node_modules/mediasoup-client/lib/handlers/Firefox60.js\"(exports) {\n    \"use strict\";\n    init_process();\n    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {\n      if (k2 === void 0)\n        k2 = k;\n      var desc = Object.getOwnPropertyDescriptor(m, k);\n      if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n        desc = { enumerable: true, get: function() {\n          return m[k];\n        } };\n      }\n      Object.defineProperty(o2, k2, desc);\n    } : function(o2, m, k, k2) {\n      if (k2 === void 0)\n        k2 = k;\n      o2[k2] = m[k];\n    });\n    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {\n      Object.defineProperty(o2, \"default\", { enumerable: true, value: v });\n    } : function(o2, v) {\n      o2[\"default\"] = v;\n    });\n    var __importStar = exports && exports.__importStar || function(mod) {\n      if (mod && mod.__esModule)\n        return mod;\n      var result2 = {};\n      if (mod != null) {\n        for (var k in mod)\n          if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k))\n            __createBinding(result2, mod, k);\n      }\n      __setModuleDefault(result2, mod);\n      return result2;\n    };\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.Firefox60 = void 0;\n    var sdpTransform4 = __importStar(require_lib());\n    var Logger_1 = require_Logger();\n    var errors_1 = require_errors();\n    var utils = __importStar(require_utils2());\n    var ortc = __importStar(require_ortc());\n    var sdpCommonUtils = __importStar(require_commonUtils());\n    var sdpUnifiedPlanUtils = __importStar(require_unifiedPlanUtils());\n    var HandlerInterface_1 = require_HandlerInterface();\n    var RemoteSdp_1 = require_RemoteSdp();\n    var scalabilityModes_1 = require_scalabilityModes();\n    var logger2 = new Logger_1.Logger(\"Firefox60\");\n    var SCTP_NUM_STREAMS = { OS: 16, MIS: 2048 };\n    var Firefox60 = class extends HandlerInterface_1.HandlerInterface {\n      static createFactory() {\n        return () => new Firefox60();\n      }\n      constructor() {\n        super();\n        this._mapMidTransceiver = /* @__PURE__ */ new Map();\n        this._sendStream = new MediaStream();\n        this._hasDataChannelMediaSection = false;\n        this._nextSendSctpStreamId = 0;\n        this._transportReady = false;\n      }\n      get name() {\n        return \"Firefox60\";\n      }\n      close() {\n        logger2.debug(\"close()\");\n        if (this._pc) {\n          try {\n            this._pc.close();\n          } catch (error) {\n          }\n        }\n        this.emit(\"@close\");\n      }\n      getNativeRtpCapabilities() {\n        return __async(this, null, function* () {\n          logger2.debug(\"getNativeRtpCapabilities()\");\n          const pc = new RTCPeerConnection({\n            iceServers: [],\n            iceTransportPolicy: \"all\",\n            bundlePolicy: \"max-bundle\",\n            rtcpMuxPolicy: \"require\"\n          });\n          const canvas = document.createElement(\"canvas\");\n          canvas.getContext(\"2d\");\n          const fakeStream = canvas.captureStream();\n          const fakeVideoTrack = fakeStream.getVideoTracks()[0];\n          try {\n            pc.addTransceiver(\"audio\", { direction: \"sendrecv\" });\n            const videoTransceiver = pc.addTransceiver(fakeVideoTrack, { direction: \"sendrecv\" });\n            const parameters = videoTransceiver.sender.getParameters();\n            const encodings = [\n              { rid: \"r0\", maxBitrate: 1e5 },\n              { rid: \"r1\", maxBitrate: 5e5 }\n            ];\n            parameters.encodings = encodings;\n            yield videoTransceiver.sender.setParameters(parameters);\n            const offer = yield pc.createOffer();\n            try {\n              canvas.remove();\n            } catch (error) {\n            }\n            try {\n              fakeVideoTrack.stop();\n            } catch (error) {\n            }\n            try {\n              pc.close();\n            } catch (error) {\n            }\n            const sdpObject = sdpTransform4.parse(offer.sdp);\n            const nativeRtpCapabilities = sdpCommonUtils.extractRtpCapabilities({ sdpObject });\n            return nativeRtpCapabilities;\n          } catch (error) {\n            try {\n              canvas.remove();\n            } catch (error2) {\n            }\n            try {\n              fakeVideoTrack.stop();\n            } catch (error2) {\n            }\n            try {\n              pc.close();\n            } catch (error2) {\n            }\n            throw error;\n          }\n        });\n      }\n      getNativeSctpCapabilities() {\n        return __async(this, null, function* () {\n          logger2.debug(\"getNativeSctpCapabilities()\");\n          return {\n            numStreams: SCTP_NUM_STREAMS\n          };\n        });\n      }\n      run({ direction, iceParameters, iceCandidates, dtlsParameters, sctpParameters, iceServers, iceTransportPolicy, additionalSettings, proprietaryConstraints, extendedRtpCapabilities }) {\n        logger2.debug(\"run()\");\n        this._direction = direction;\n        this._remoteSdp = new RemoteSdp_1.RemoteSdp({\n          iceParameters,\n          iceCandidates,\n          dtlsParameters,\n          sctpParameters\n        });\n        this._sendingRtpParametersByKind = {\n          audio: ortc.getSendingRtpParameters(\"audio\", extendedRtpCapabilities),\n          video: ortc.getSendingRtpParameters(\"video\", extendedRtpCapabilities)\n        };\n        this._sendingRemoteRtpParametersByKind = {\n          audio: ortc.getSendingRemoteRtpParameters(\"audio\", extendedRtpCapabilities),\n          video: ortc.getSendingRemoteRtpParameters(\"video\", extendedRtpCapabilities)\n        };\n        this._pc = new RTCPeerConnection(__spreadValues({\n          iceServers: iceServers || [],\n          iceTransportPolicy: iceTransportPolicy || \"all\",\n          bundlePolicy: \"max-bundle\",\n          rtcpMuxPolicy: \"require\"\n        }, additionalSettings), proprietaryConstraints);\n        if (this._pc.connectionState) {\n          this._pc.addEventListener(\"connectionstatechange\", () => {\n            this.emit(\"@connectionstatechange\", this._pc.connectionState);\n          });\n        } else {\n          this._pc.addEventListener(\"iceconnectionstatechange\", () => {\n            logger2.warn(\"run() | pc.connectionState not supported, using pc.iceConnectionState\");\n            switch (this._pc.iceConnectionState) {\n              case \"checking\":\n                this.emit(\"@connectionstatechange\", \"connecting\");\n                break;\n              case \"connected\":\n              case \"completed\":\n                this.emit(\"@connectionstatechange\", \"connected\");\n                break;\n              case \"failed\":\n                this.emit(\"@connectionstatechange\", \"failed\");\n                break;\n              case \"disconnected\":\n                this.emit(\"@connectionstatechange\", \"disconnected\");\n                break;\n              case \"closed\":\n                this.emit(\"@connectionstatechange\", \"closed\");\n                break;\n            }\n          });\n        }\n      }\n      updateIceServers(iceServers) {\n        return __async(this, null, function* () {\n          throw new errors_1.UnsupportedError(\"not supported\");\n        });\n      }\n      restartIce(iceParameters) {\n        return __async(this, null, function* () {\n          logger2.debug(\"restartIce()\");\n          this._remoteSdp.updateIceParameters(iceParameters);\n          if (!this._transportReady) {\n            return;\n          }\n          if (this._direction === \"send\") {\n            const offer = yield this._pc.createOffer({ iceRestart: true });\n            logger2.debug(\"restartIce() | calling pc.setLocalDescription() [offer:%o]\", offer);\n            yield this._pc.setLocalDescription(offer);\n            const answer = { type: \"answer\", sdp: this._remoteSdp.getSdp() };\n            logger2.debug(\"restartIce() | calling pc.setRemoteDescription() [answer:%o]\", answer);\n            yield this._pc.setRemoteDescription(answer);\n          } else {\n            const offer = { type: \"offer\", sdp: this._remoteSdp.getSdp() };\n            logger2.debug(\"restartIce() | calling pc.setRemoteDescription() [offer:%o]\", offer);\n            yield this._pc.setRemoteDescription(offer);\n            const answer = yield this._pc.createAnswer();\n            logger2.debug(\"restartIce() | calling pc.setLocalDescription() [answer:%o]\", answer);\n            yield this._pc.setLocalDescription(answer);\n          }\n        });\n      }\n      getTransportStats() {\n        return __async(this, null, function* () {\n          return this._pc.getStats();\n        });\n      }\n      send(_0) {\n        return __async(this, arguments, function* ({ track, encodings, codecOptions, codec }) {\n          this.assertSendDirection();\n          logger2.debug(\"send() [kind:%s, track.id:%s]\", track.kind, track.id);\n          if (encodings) {\n            encodings = utils.clone(encodings, []);\n            if (encodings.length > 1) {\n              encodings.forEach((encoding, idx) => {\n                encoding.rid = `r${idx}`;\n              });\n              encodings.reverse();\n            }\n          }\n          const sendingRtpParameters = utils.clone(this._sendingRtpParametersByKind[track.kind], {});\n          sendingRtpParameters.codecs = ortc.reduceCodecs(sendingRtpParameters.codecs, codec);\n          const sendingRemoteRtpParameters = utils.clone(this._sendingRemoteRtpParametersByKind[track.kind], {});\n          sendingRemoteRtpParameters.codecs = ortc.reduceCodecs(sendingRemoteRtpParameters.codecs, codec);\n          const transceiver = this._pc.addTransceiver(track, { direction: \"sendonly\", streams: [this._sendStream] });\n          if (encodings) {\n            const parameters = transceiver.sender.getParameters();\n            parameters.encodings = encodings;\n            yield transceiver.sender.setParameters(parameters);\n          }\n          const offer = yield this._pc.createOffer();\n          let localSdpObject = sdpTransform4.parse(offer.sdp);\n          if (!this._transportReady) {\n            yield this.setupTransport({ localDtlsRole: \"client\", localSdpObject });\n          }\n          const layers = (0, scalabilityModes_1.parse)((encodings || [{}])[0].scalabilityMode);\n          logger2.debug(\"send() | calling pc.setLocalDescription() [offer:%o]\", offer);\n          yield this._pc.setLocalDescription(offer);\n          const localId = transceiver.mid;\n          sendingRtpParameters.mid = localId;\n          localSdpObject = sdpTransform4.parse(this._pc.localDescription.sdp);\n          const offerMediaObject = localSdpObject.media[localSdpObject.media.length - 1];\n          sendingRtpParameters.rtcp.cname = sdpCommonUtils.getCname({ offerMediaObject });\n          if (!encodings) {\n            sendingRtpParameters.encodings = sdpUnifiedPlanUtils.getRtpEncodings({ offerMediaObject });\n          } else if (encodings.length === 1) {\n            const newEncodings = sdpUnifiedPlanUtils.getRtpEncodings({ offerMediaObject });\n            Object.assign(newEncodings[0], encodings[0]);\n            sendingRtpParameters.encodings = newEncodings;\n          } else {\n            sendingRtpParameters.encodings = encodings.reverse();\n          }\n          if (sendingRtpParameters.encodings.length > 1 && (sendingRtpParameters.codecs[0].mimeType.toLowerCase() === \"video/vp8\" || sendingRtpParameters.codecs[0].mimeType.toLowerCase() === \"video/h264\")) {\n            for (const encoding of sendingRtpParameters.encodings) {\n              if (encoding.scalabilityMode) {\n                encoding.scalabilityMode = `L1T${layers.temporalLayers}`;\n              } else {\n                encoding.scalabilityMode = \"L1T3\";\n              }\n            }\n          }\n          this._remoteSdp.send({\n            offerMediaObject,\n            offerRtpParameters: sendingRtpParameters,\n            answerRtpParameters: sendingRemoteRtpParameters,\n            codecOptions,\n            extmapAllowMixed: true\n          });\n          const answer = { type: \"answer\", sdp: this._remoteSdp.getSdp() };\n          logger2.debug(\"send() | calling pc.setRemoteDescription() [answer:%o]\", answer);\n          yield this._pc.setRemoteDescription(answer);\n          this._mapMidTransceiver.set(localId, transceiver);\n          return {\n            localId,\n            rtpParameters: sendingRtpParameters,\n            rtpSender: transceiver.sender\n          };\n        });\n      }\n      stopSending(localId) {\n        return __async(this, null, function* () {\n          logger2.debug(\"stopSending() [localId:%s]\", localId);\n          const transceiver = this._mapMidTransceiver.get(localId);\n          if (!transceiver) {\n            throw new Error(\"associated transceiver not found\");\n          }\n          transceiver.sender.replaceTrack(null);\n          this._pc.removeTrack(transceiver.sender);\n          this._remoteSdp.disableMediaSection(transceiver.mid);\n          const offer = yield this._pc.createOffer();\n          logger2.debug(\"stopSending() | calling pc.setLocalDescription() [offer:%o]\", offer);\n          yield this._pc.setLocalDescription(offer);\n          const answer = { type: \"answer\", sdp: this._remoteSdp.getSdp() };\n          logger2.debug(\"stopSending() | calling pc.setRemoteDescription() [answer:%o]\", answer);\n          yield this._pc.setRemoteDescription(answer);\n          this._mapMidTransceiver.delete(localId);\n        });\n      }\n      pauseSending(localId) {\n        return __async(this, null, function* () {\n          this.assertSendDirection();\n          logger2.debug(\"pauseSending() [localId:%s]\", localId);\n          const transceiver = this._mapMidTransceiver.get(localId);\n          if (!transceiver) {\n            throw new Error(\"associated RTCRtpTransceiver not found\");\n          }\n          transceiver.direction = \"inactive\";\n          this._remoteSdp.pauseMediaSection(localId);\n          const offer = yield this._pc.createOffer();\n          logger2.debug(\"pauseSending() | calling pc.setLocalDescription() [offer:%o]\", offer);\n          yield this._pc.setLocalDescription(offer);\n          const answer = { type: \"answer\", sdp: this._remoteSdp.getSdp() };\n          logger2.debug(\"pauseSending() | calling pc.setRemoteDescription() [answer:%o]\", answer);\n          yield this._pc.setRemoteDescription(answer);\n        });\n      }\n      resumeSending(localId) {\n        return __async(this, null, function* () {\n          this.assertSendDirection();\n          logger2.debug(\"resumeSending() [localId:%s]\", localId);\n          const transceiver = this._mapMidTransceiver.get(localId);\n          if (!transceiver) {\n            throw new Error(\"associated RTCRtpTransceiver not found\");\n          }\n          transceiver.direction = \"sendonly\";\n          this._remoteSdp.resumeSendingMediaSection(localId);\n          const offer = yield this._pc.createOffer();\n          logger2.debug(\"resumeSending() | calling pc.setLocalDescription() [offer:%o]\", offer);\n          yield this._pc.setLocalDescription(offer);\n          const answer = { type: \"answer\", sdp: this._remoteSdp.getSdp() };\n          logger2.debug(\"resumeSending() | calling pc.setRemoteDescription() [answer:%o]\", answer);\n          yield this._pc.setRemoteDescription(answer);\n        });\n      }\n      replaceTrack(localId, track) {\n        return __async(this, null, function* () {\n          this.assertSendDirection();\n          if (track) {\n            logger2.debug(\"replaceTrack() [localId:%s, track.id:%s]\", localId, track.id);\n          } else {\n            logger2.debug(\"replaceTrack() [localId:%s, no track]\", localId);\n          }\n          const transceiver = this._mapMidTransceiver.get(localId);\n          if (!transceiver) {\n            throw new Error(\"associated RTCRtpTransceiver not found\");\n          }\n          yield transceiver.sender.replaceTrack(track);\n        });\n      }\n      setMaxSpatialLayer(localId, spatialLayer) {\n        return __async(this, null, function* () {\n          this.assertSendDirection();\n          logger2.debug(\"setMaxSpatialLayer() [localId:%s, spatialLayer:%s]\", localId, spatialLayer);\n          const transceiver = this._mapMidTransceiver.get(localId);\n          if (!transceiver) {\n            throw new Error(\"associated transceiver not found\");\n          }\n          const parameters = transceiver.sender.getParameters();\n          spatialLayer = parameters.encodings.length - 1 - spatialLayer;\n          parameters.encodings.forEach((encoding, idx) => {\n            if (idx >= spatialLayer) {\n              encoding.active = true;\n            } else {\n              encoding.active = false;\n            }\n          });\n          yield transceiver.sender.setParameters(parameters);\n          this._remoteSdp.muxMediaSectionSimulcast(localId, parameters.encodings);\n          const offer = yield this._pc.createOffer();\n          logger2.debug(\"setMaxSpatialLayer() | calling pc.setLocalDescription() [offer:%o]\", offer);\n          yield this._pc.setLocalDescription(offer);\n          const answer = { type: \"answer\", sdp: this._remoteSdp.getSdp() };\n          logger2.debug(\"setMaxSpatialLayer() | calling pc.setRemoteDescription() [answer:%o]\", answer);\n          yield this._pc.setRemoteDescription(answer);\n        });\n      }\n      setRtpEncodingParameters(localId, params) {\n        return __async(this, null, function* () {\n          this.assertSendDirection();\n          logger2.debug(\"setRtpEncodingParameters() [localId:%s, params:%o]\", localId, params);\n          const transceiver = this._mapMidTransceiver.get(localId);\n          if (!transceiver) {\n            throw new Error(\"associated RTCRtpTransceiver not found\");\n          }\n          const parameters = transceiver.sender.getParameters();\n          parameters.encodings.forEach((encoding, idx) => {\n            parameters.encodings[idx] = __spreadValues(__spreadValues({}, encoding), params);\n          });\n          yield transceiver.sender.setParameters(parameters);\n          this._remoteSdp.muxMediaSectionSimulcast(localId, parameters.encodings);\n          const offer = yield this._pc.createOffer();\n          logger2.debug(\"setRtpEncodingParameters() | calling pc.setLocalDescription() [offer:%o]\", offer);\n          yield this._pc.setLocalDescription(offer);\n          const answer = { type: \"answer\", sdp: this._remoteSdp.getSdp() };\n          logger2.debug(\"setRtpEncodingParameters() | calling pc.setRemoteDescription() [answer:%o]\", answer);\n          yield this._pc.setRemoteDescription(answer);\n        });\n      }\n      getSenderStats(localId) {\n        return __async(this, null, function* () {\n          this.assertSendDirection();\n          const transceiver = this._mapMidTransceiver.get(localId);\n          if (!transceiver) {\n            throw new Error(\"associated RTCRtpTransceiver not found\");\n          }\n          return transceiver.sender.getStats();\n        });\n      }\n      sendDataChannel(_0) {\n        return __async(this, arguments, function* ({ ordered, maxPacketLifeTime, maxRetransmits, label, protocol }) {\n          this.assertSendDirection();\n          const options = {\n            negotiated: true,\n            id: this._nextSendSctpStreamId,\n            ordered,\n            maxPacketLifeTime,\n            maxRetransmits,\n            protocol\n          };\n          logger2.debug(\"sendDataChannel() [options:%o]\", options);\n          const dataChannel = this._pc.createDataChannel(label, options);\n          this._nextSendSctpStreamId = ++this._nextSendSctpStreamId % SCTP_NUM_STREAMS.MIS;\n          if (!this._hasDataChannelMediaSection) {\n            const offer = yield this._pc.createOffer();\n            const localSdpObject = sdpTransform4.parse(offer.sdp);\n            const offerMediaObject = localSdpObject.media.find((m) => m.type === \"application\");\n            if (!this._transportReady) {\n              yield this.setupTransport({ localDtlsRole: \"client\", localSdpObject });\n            }\n            logger2.debug(\"sendDataChannel() | calling pc.setLocalDescription() [offer:%o]\", offer);\n            yield this._pc.setLocalDescription(offer);\n            this._remoteSdp.sendSctpAssociation({ offerMediaObject });\n            const answer = { type: \"answer\", sdp: this._remoteSdp.getSdp() };\n            logger2.debug(\"sendDataChannel() | calling pc.setRemoteDescription() [answer:%o]\", answer);\n            yield this._pc.setRemoteDescription(answer);\n            this._hasDataChannelMediaSection = true;\n          }\n          const sctpStreamParameters = {\n            streamId: options.id,\n            ordered: options.ordered,\n            maxPacketLifeTime: options.maxPacketLifeTime,\n            maxRetransmits: options.maxRetransmits\n          };\n          return { dataChannel, sctpStreamParameters };\n        });\n      }\n      receive(optionsList) {\n        return __async(this, null, function* () {\n          this.assertRecvDirection();\n          const results = [];\n          const mapLocalId = /* @__PURE__ */ new Map();\n          for (const options of optionsList) {\n            const { trackId, kind, rtpParameters, streamId } = options;\n            logger2.debug(\"receive() [trackId:%s, kind:%s]\", trackId, kind);\n            const localId = rtpParameters.mid || String(this._mapMidTransceiver.size);\n            mapLocalId.set(trackId, localId);\n            this._remoteSdp.receive({\n              mid: localId,\n              kind,\n              offerRtpParameters: rtpParameters,\n              streamId: streamId || rtpParameters.rtcp.cname,\n              trackId\n            });\n          }\n          const offer = { type: \"offer\", sdp: this._remoteSdp.getSdp() };\n          logger2.debug(\"receive() | calling pc.setRemoteDescription() [offer:%o]\", offer);\n          yield this._pc.setRemoteDescription(offer);\n          let answer = yield this._pc.createAnswer();\n          const localSdpObject = sdpTransform4.parse(answer.sdp);\n          for (const options of optionsList) {\n            const { trackId, rtpParameters } = options;\n            const localId = mapLocalId.get(trackId);\n            const answerMediaObject = localSdpObject.media.find((m) => String(m.mid) === localId);\n            sdpCommonUtils.applyCodecParameters({\n              offerRtpParameters: rtpParameters,\n              answerMediaObject\n            });\n            answer = { type: \"answer\", sdp: sdpTransform4.write(localSdpObject) };\n          }\n          if (!this._transportReady) {\n            yield this.setupTransport({ localDtlsRole: \"client\", localSdpObject });\n          }\n          logger2.debug(\"receive() | calling pc.setLocalDescription() [answer:%o]\", answer);\n          yield this._pc.setLocalDescription(answer);\n          for (const options of optionsList) {\n            const { trackId } = options;\n            const localId = mapLocalId.get(trackId);\n            const transceiver = this._pc.getTransceivers().find((t2) => t2.mid === localId);\n            if (!transceiver) {\n              throw new Error(\"new RTCRtpTransceiver not found\");\n            }\n            this._mapMidTransceiver.set(localId, transceiver);\n            results.push({\n              localId,\n              track: transceiver.receiver.track,\n              rtpReceiver: transceiver.receiver\n            });\n          }\n          return results;\n        });\n      }\n      stopReceiving(localIds) {\n        return __async(this, null, function* () {\n          this.assertRecvDirection();\n          for (const localId of localIds) {\n            logger2.debug(\"stopReceiving() [localId:%s]\", localId);\n            const transceiver = this._mapMidTransceiver.get(localId);\n            if (!transceiver) {\n              throw new Error(\"associated RTCRtpTransceiver not found\");\n            }\n            this._remoteSdp.closeMediaSection(transceiver.mid);\n          }\n          const offer = { type: \"offer\", sdp: this._remoteSdp.getSdp() };\n          logger2.debug(\"stopReceiving() | calling pc.setRemoteDescription() [offer:%o]\", offer);\n          yield this._pc.setRemoteDescription(offer);\n          const answer = yield this._pc.createAnswer();\n          logger2.debug(\"stopReceiving() | calling pc.setLocalDescription() [answer:%o]\", answer);\n          yield this._pc.setLocalDescription(answer);\n          for (const localId of localIds) {\n            this._mapMidTransceiver.delete(localId);\n          }\n        });\n      }\n      pauseReceiving(localIds) {\n        return __async(this, null, function* () {\n          this.assertRecvDirection();\n          for (const localId of localIds) {\n            logger2.debug(\"pauseReceiving() [localId:%s]\", localId);\n            const transceiver = this._mapMidTransceiver.get(localId);\n            if (!transceiver) {\n              throw new Error(\"associated RTCRtpTransceiver not found\");\n            }\n            transceiver.direction = \"inactive\";\n            this._remoteSdp.pauseMediaSection(localId);\n          }\n          const offer = { type: \"offer\", sdp: this._remoteSdp.getSdp() };\n          logger2.debug(\"pauseReceiving() | calling pc.setRemoteDescription() [offer:%o]\", offer);\n          yield this._pc.setRemoteDescription(offer);\n          const answer = yield this._pc.createAnswer();\n          logger2.debug(\"pauseReceiving() | calling pc.setLocalDescription() [answer:%o]\", answer);\n          yield this._pc.setLocalDescription(answer);\n        });\n      }\n      resumeReceiving(localIds) {\n        return __async(this, null, function* () {\n          this.assertRecvDirection();\n          for (const localId of localIds) {\n            logger2.debug(\"resumeReceiving() [localId:%s]\", localId);\n            const transceiver = this._mapMidTransceiver.get(localId);\n            if (!transceiver) {\n              throw new Error(\"associated RTCRtpTransceiver not found\");\n            }\n            transceiver.direction = \"recvonly\";\n            this._remoteSdp.resumeReceivingMediaSection(localId);\n          }\n          const offer = { type: \"offer\", sdp: this._remoteSdp.getSdp() };\n          logger2.debug(\"resumeReceiving() | calling pc.setRemoteDescription() [offer:%o]\", offer);\n          yield this._pc.setRemoteDescription(offer);\n          const answer = yield this._pc.createAnswer();\n          logger2.debug(\"resumeReceiving() | calling pc.setLocalDescription() [answer:%o]\", answer);\n          yield this._pc.setLocalDescription(answer);\n        });\n      }\n      getReceiverStats(localId) {\n        return __async(this, null, function* () {\n          this.assertRecvDirection();\n          const transceiver = this._mapMidTransceiver.get(localId);\n          if (!transceiver) {\n            throw new Error(\"associated RTCRtpTransceiver not found\");\n          }\n          return transceiver.receiver.getStats();\n        });\n      }\n      receiveDataChannel(_0) {\n        return __async(this, arguments, function* ({ sctpStreamParameters, label, protocol }) {\n          this.assertRecvDirection();\n          const { streamId, ordered, maxPacketLifeTime, maxRetransmits } = sctpStreamParameters;\n          const options = {\n            negotiated: true,\n            id: streamId,\n            ordered,\n            maxPacketLifeTime,\n            maxRetransmits,\n            protocol\n          };\n          logger2.debug(\"receiveDataChannel() [options:%o]\", options);\n          const dataChannel = this._pc.createDataChannel(label, options);\n          if (!this._hasDataChannelMediaSection) {\n            this._remoteSdp.receiveSctpAssociation();\n            const offer = { type: \"offer\", sdp: this._remoteSdp.getSdp() };\n            logger2.debug(\"receiveDataChannel() | calling pc.setRemoteDescription() [offer:%o]\", offer);\n            yield this._pc.setRemoteDescription(offer);\n            const answer = yield this._pc.createAnswer();\n            if (!this._transportReady) {\n              const localSdpObject = sdpTransform4.parse(answer.sdp);\n              yield this.setupTransport({ localDtlsRole: \"client\", localSdpObject });\n            }\n            logger2.debug(\"receiveDataChannel() | calling pc.setRemoteDescription() [answer:%o]\", answer);\n            yield this._pc.setLocalDescription(answer);\n            this._hasDataChannelMediaSection = true;\n          }\n          return { dataChannel };\n        });\n      }\n      setupTransport(_0) {\n        return __async(this, arguments, function* ({ localDtlsRole, localSdpObject }) {\n          if (!localSdpObject) {\n            localSdpObject = sdpTransform4.parse(this._pc.localDescription.sdp);\n          }\n          const dtlsParameters = sdpCommonUtils.extractDtlsParameters({ sdpObject: localSdpObject });\n          dtlsParameters.role = localDtlsRole;\n          this._remoteSdp.updateDtlsRole(localDtlsRole === \"client\" ? \"server\" : \"client\");\n          yield new Promise((resolve, reject) => {\n            this.safeEmit(\"@connect\", { dtlsParameters }, resolve, reject);\n          });\n          this._transportReady = true;\n        });\n      }\n      assertSendDirection() {\n        if (this._direction !== \"send\") {\n          throw new Error('method can just be called for handlers with \"send\" direction');\n        }\n      }\n      assertRecvDirection() {\n        if (this._direction !== \"recv\") {\n          throw new Error('method can just be called for handlers with \"recv\" direction');\n        }\n      }\n    };\n    exports.Firefox60 = Firefox60;\n  }\n});\n\n// ../../node_modules/mediasoup-client/lib/handlers/Safari12.js\nvar require_Safari12 = __commonJS({\n  \"../../node_modules/mediasoup-client/lib/handlers/Safari12.js\"(exports) {\n    \"use strict\";\n    init_process();\n    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {\n      if (k2 === void 0)\n        k2 = k;\n      var desc = Object.getOwnPropertyDescriptor(m, k);\n      if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n        desc = { enumerable: true, get: function() {\n          return m[k];\n        } };\n      }\n      Object.defineProperty(o2, k2, desc);\n    } : function(o2, m, k, k2) {\n      if (k2 === void 0)\n        k2 = k;\n      o2[k2] = m[k];\n    });\n    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {\n      Object.defineProperty(o2, \"default\", { enumerable: true, value: v });\n    } : function(o2, v) {\n      o2[\"default\"] = v;\n    });\n    var __importStar = exports && exports.__importStar || function(mod) {\n      if (mod && mod.__esModule)\n        return mod;\n      var result2 = {};\n      if (mod != null) {\n        for (var k in mod)\n          if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k))\n            __createBinding(result2, mod, k);\n      }\n      __setModuleDefault(result2, mod);\n      return result2;\n    };\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.Safari12 = void 0;\n    var sdpTransform4 = __importStar(require_lib());\n    var Logger_1 = require_Logger();\n    var utils = __importStar(require_utils2());\n    var ortc = __importStar(require_ortc());\n    var sdpCommonUtils = __importStar(require_commonUtils());\n    var sdpUnifiedPlanUtils = __importStar(require_unifiedPlanUtils());\n    var ortcUtils = __importStar(require_utils3());\n    var HandlerInterface_1 = require_HandlerInterface();\n    var RemoteSdp_1 = require_RemoteSdp();\n    var scalabilityModes_1 = require_scalabilityModes();\n    var logger2 = new Logger_1.Logger(\"Safari12\");\n    var SCTP_NUM_STREAMS = { OS: 1024, MIS: 1024 };\n    var Safari12 = class extends HandlerInterface_1.HandlerInterface {\n      static createFactory() {\n        return () => new Safari12();\n      }\n      constructor() {\n        super();\n        this._mapMidTransceiver = /* @__PURE__ */ new Map();\n        this._sendStream = new MediaStream();\n        this._hasDataChannelMediaSection = false;\n        this._nextSendSctpStreamId = 0;\n        this._transportReady = false;\n      }\n      get name() {\n        return \"Safari12\";\n      }\n      close() {\n        logger2.debug(\"close()\");\n        if (this._pc) {\n          try {\n            this._pc.close();\n          } catch (error) {\n          }\n        }\n        this.emit(\"@close\");\n      }\n      getNativeRtpCapabilities() {\n        return __async(this, null, function* () {\n          logger2.debug(\"getNativeRtpCapabilities()\");\n          const pc = new RTCPeerConnection({\n            iceServers: [],\n            iceTransportPolicy: \"all\",\n            bundlePolicy: \"max-bundle\",\n            rtcpMuxPolicy: \"require\"\n          });\n          try {\n            pc.addTransceiver(\"audio\");\n            pc.addTransceiver(\"video\");\n            const offer = yield pc.createOffer();\n            try {\n              pc.close();\n            } catch (error) {\n            }\n            const sdpObject = sdpTransform4.parse(offer.sdp);\n            const nativeRtpCapabilities = sdpCommonUtils.extractRtpCapabilities({ sdpObject });\n            ortcUtils.addNackSuppportForOpus(nativeRtpCapabilities);\n            return nativeRtpCapabilities;\n          } catch (error) {\n            try {\n              pc.close();\n            } catch (error2) {\n            }\n            throw error;\n          }\n        });\n      }\n      getNativeSctpCapabilities() {\n        return __async(this, null, function* () {\n          logger2.debug(\"getNativeSctpCapabilities()\");\n          return {\n            numStreams: SCTP_NUM_STREAMS\n          };\n        });\n      }\n      run({ direction, iceParameters, iceCandidates, dtlsParameters, sctpParameters, iceServers, iceTransportPolicy, additionalSettings, proprietaryConstraints, extendedRtpCapabilities }) {\n        logger2.debug(\"run()\");\n        this._direction = direction;\n        this._remoteSdp = new RemoteSdp_1.RemoteSdp({\n          iceParameters,\n          iceCandidates,\n          dtlsParameters,\n          sctpParameters\n        });\n        this._sendingRtpParametersByKind = {\n          audio: ortc.getSendingRtpParameters(\"audio\", extendedRtpCapabilities),\n          video: ortc.getSendingRtpParameters(\"video\", extendedRtpCapabilities)\n        };\n        this._sendingRemoteRtpParametersByKind = {\n          audio: ortc.getSendingRemoteRtpParameters(\"audio\", extendedRtpCapabilities),\n          video: ortc.getSendingRemoteRtpParameters(\"video\", extendedRtpCapabilities)\n        };\n        if (dtlsParameters.role && dtlsParameters.role !== \"auto\") {\n          this._forcedLocalDtlsRole = dtlsParameters.role === \"server\" ? \"client\" : \"server\";\n        }\n        this._pc = new RTCPeerConnection(__spreadValues({\n          iceServers: iceServers || [],\n          iceTransportPolicy: iceTransportPolicy || \"all\",\n          bundlePolicy: \"max-bundle\",\n          rtcpMuxPolicy: \"require\"\n        }, additionalSettings), proprietaryConstraints);\n        if (this._pc.connectionState) {\n          this._pc.addEventListener(\"connectionstatechange\", () => {\n            this.emit(\"@connectionstatechange\", this._pc.connectionState);\n          });\n        } else {\n          this._pc.addEventListener(\"iceconnectionstatechange\", () => {\n            logger2.warn(\"run() | pc.connectionState not supported, using pc.iceConnectionState\");\n            switch (this._pc.iceConnectionState) {\n              case \"checking\":\n                this.emit(\"@connectionstatechange\", \"connecting\");\n                break;\n              case \"connected\":\n              case \"completed\":\n                this.emit(\"@connectionstatechange\", \"connected\");\n                break;\n              case \"failed\":\n                this.emit(\"@connectionstatechange\", \"failed\");\n                break;\n              case \"disconnected\":\n                this.emit(\"@connectionstatechange\", \"disconnected\");\n                break;\n              case \"closed\":\n                this.emit(\"@connectionstatechange\", \"closed\");\n                break;\n            }\n          });\n        }\n      }\n      updateIceServers(iceServers) {\n        return __async(this, null, function* () {\n          logger2.debug(\"updateIceServers()\");\n          const configuration = this._pc.getConfiguration();\n          configuration.iceServers = iceServers;\n          this._pc.setConfiguration(configuration);\n        });\n      }\n      restartIce(iceParameters) {\n        return __async(this, null, function* () {\n          logger2.debug(\"restartIce()\");\n          this._remoteSdp.updateIceParameters(iceParameters);\n          if (!this._transportReady) {\n            return;\n          }\n          if (this._direction === \"send\") {\n            const offer = yield this._pc.createOffer({ iceRestart: true });\n            logger2.debug(\"restartIce() | calling pc.setLocalDescription() [offer:%o]\", offer);\n            yield this._pc.setLocalDescription(offer);\n            const answer = { type: \"answer\", sdp: this._remoteSdp.getSdp() };\n            logger2.debug(\"restartIce() | calling pc.setRemoteDescription() [answer:%o]\", answer);\n            yield this._pc.setRemoteDescription(answer);\n          } else {\n            const offer = { type: \"offer\", sdp: this._remoteSdp.getSdp() };\n            logger2.debug(\"restartIce() | calling pc.setRemoteDescription() [offer:%o]\", offer);\n            yield this._pc.setRemoteDescription(offer);\n            const answer = yield this._pc.createAnswer();\n            logger2.debug(\"restartIce() | calling pc.setLocalDescription() [answer:%o]\", answer);\n            yield this._pc.setLocalDescription(answer);\n          }\n        });\n      }\n      getTransportStats() {\n        return __async(this, null, function* () {\n          return this._pc.getStats();\n        });\n      }\n      send(_0) {\n        return __async(this, arguments, function* ({ track, encodings, codecOptions, codec }) {\n          var _a2;\n          this.assertSendDirection();\n          logger2.debug(\"send() [kind:%s, track.id:%s]\", track.kind, track.id);\n          const sendingRtpParameters = utils.clone(this._sendingRtpParametersByKind[track.kind], {});\n          sendingRtpParameters.codecs = ortc.reduceCodecs(sendingRtpParameters.codecs, codec);\n          const sendingRemoteRtpParameters = utils.clone(this._sendingRemoteRtpParametersByKind[track.kind], {});\n          sendingRemoteRtpParameters.codecs = ortc.reduceCodecs(sendingRemoteRtpParameters.codecs, codec);\n          const mediaSectionIdx = this._remoteSdp.getNextMediaSectionIdx();\n          const transceiver = this._pc.addTransceiver(track, { direction: \"sendonly\", streams: [this._sendStream] });\n          let offer = yield this._pc.createOffer();\n          let localSdpObject = sdpTransform4.parse(offer.sdp);\n          let offerMediaObject;\n          if (!this._transportReady) {\n            yield this.setupTransport({\n              localDtlsRole: (_a2 = this._forcedLocalDtlsRole) !== null && _a2 !== void 0 ? _a2 : \"client\",\n              localSdpObject\n            });\n          }\n          const layers = (0, scalabilityModes_1.parse)((encodings || [{}])[0].scalabilityMode);\n          if (encodings && encodings.length > 1) {\n            logger2.debug(\"send() | enabling legacy simulcast\");\n            localSdpObject = sdpTransform4.parse(offer.sdp);\n            offerMediaObject = localSdpObject.media[mediaSectionIdx.idx];\n            sdpUnifiedPlanUtils.addLegacySimulcast({\n              offerMediaObject,\n              numStreams: encodings.length\n            });\n            offer = { type: \"offer\", sdp: sdpTransform4.write(localSdpObject) };\n          }\n          logger2.debug(\"send() | calling pc.setLocalDescription() [offer:%o]\", offer);\n          yield this._pc.setLocalDescription(offer);\n          const localId = transceiver.mid;\n          sendingRtpParameters.mid = localId;\n          localSdpObject = sdpTransform4.parse(this._pc.localDescription.sdp);\n          offerMediaObject = localSdpObject.media[mediaSectionIdx.idx];\n          sendingRtpParameters.rtcp.cname = sdpCommonUtils.getCname({ offerMediaObject });\n          sendingRtpParameters.encodings = sdpUnifiedPlanUtils.getRtpEncodings({ offerMediaObject });\n          if (encodings) {\n            for (let idx = 0; idx < sendingRtpParameters.encodings.length; ++idx) {\n              if (encodings[idx]) {\n                Object.assign(sendingRtpParameters.encodings[idx], encodings[idx]);\n              }\n            }\n          }\n          if (sendingRtpParameters.encodings.length > 1 && (sendingRtpParameters.codecs[0].mimeType.toLowerCase() === \"video/vp8\" || sendingRtpParameters.codecs[0].mimeType.toLowerCase() === \"video/h264\")) {\n            for (const encoding of sendingRtpParameters.encodings) {\n              if (encoding.scalabilityMode) {\n                encoding.scalabilityMode = `L1T${layers.temporalLayers}`;\n              } else {\n                encoding.scalabilityMode = \"L1T3\";\n              }\n            }\n          }\n          this._remoteSdp.send({\n            offerMediaObject,\n            reuseMid: mediaSectionIdx.reuseMid,\n            offerRtpParameters: sendingRtpParameters,\n            answerRtpParameters: sendingRemoteRtpParameters,\n            codecOptions\n          });\n          const answer = { type: \"answer\", sdp: this._remoteSdp.getSdp() };\n          logger2.debug(\"send() | calling pc.setRemoteDescription() [answer:%o]\", answer);\n          yield this._pc.setRemoteDescription(answer);\n          this._mapMidTransceiver.set(localId, transceiver);\n          return {\n            localId,\n            rtpParameters: sendingRtpParameters,\n            rtpSender: transceiver.sender\n          };\n        });\n      }\n      stopSending(localId) {\n        return __async(this, null, function* () {\n          this.assertSendDirection();\n          logger2.debug(\"stopSending() [localId:%s]\", localId);\n          const transceiver = this._mapMidTransceiver.get(localId);\n          if (!transceiver) {\n            throw new Error(\"associated RTCRtpTransceiver not found\");\n          }\n          transceiver.sender.replaceTrack(null);\n          this._pc.removeTrack(transceiver.sender);\n          const mediaSectionClosed = this._remoteSdp.closeMediaSection(transceiver.mid);\n          if (mediaSectionClosed) {\n            try {\n              transceiver.stop();\n            } catch (error) {\n            }\n          }\n          const offer = yield this._pc.createOffer();\n          logger2.debug(\"stopSending() | calling pc.setLocalDescription() [offer:%o]\", offer);\n          yield this._pc.setLocalDescription(offer);\n          const answer = { type: \"answer\", sdp: this._remoteSdp.getSdp() };\n          logger2.debug(\"stopSending() | calling pc.setRemoteDescription() [answer:%o]\", answer);\n          yield this._pc.setRemoteDescription(answer);\n          this._mapMidTransceiver.delete(localId);\n        });\n      }\n      pauseSending(localId) {\n        return __async(this, null, function* () {\n          this.assertSendDirection();\n          logger2.debug(\"pauseSending() [localId:%s]\", localId);\n          const transceiver = this._mapMidTransceiver.get(localId);\n          if (!transceiver) {\n            throw new Error(\"associated RTCRtpTransceiver not found\");\n          }\n          transceiver.direction = \"inactive\";\n          this._remoteSdp.pauseMediaSection(localId);\n          const offer = yield this._pc.createOffer();\n          logger2.debug(\"pauseSending() | calling pc.setLocalDescription() [offer:%o]\", offer);\n          yield this._pc.setLocalDescription(offer);\n          const answer = { type: \"answer\", sdp: this._remoteSdp.getSdp() };\n          logger2.debug(\"pauseSending() | calling pc.setRemoteDescription() [answer:%o]\", answer);\n          yield this._pc.setRemoteDescription(answer);\n        });\n      }\n      resumeSending(localId) {\n        return __async(this, null, function* () {\n          this.assertSendDirection();\n          logger2.debug(\"resumeSending() [localId:%s]\", localId);\n          const transceiver = this._mapMidTransceiver.get(localId);\n          if (!transceiver) {\n            throw new Error(\"associated RTCRtpTransceiver not found\");\n          }\n          transceiver.direction = \"sendonly\";\n          this._remoteSdp.resumeSendingMediaSection(localId);\n          const offer = yield this._pc.createOffer();\n          logger2.debug(\"resumeSending() | calling pc.setLocalDescription() [offer:%o]\", offer);\n          yield this._pc.setLocalDescription(offer);\n          const answer = { type: \"answer\", sdp: this._remoteSdp.getSdp() };\n          logger2.debug(\"resumeSending() | calling pc.setRemoteDescription() [answer:%o]\", answer);\n          yield this._pc.setRemoteDescription(answer);\n        });\n      }\n      replaceTrack(localId, track) {\n        return __async(this, null, function* () {\n          this.assertSendDirection();\n          if (track) {\n            logger2.debug(\"replaceTrack() [localId:%s, track.id:%s]\", localId, track.id);\n          } else {\n            logger2.debug(\"replaceTrack() [localId:%s, no track]\", localId);\n          }\n          const transceiver = this._mapMidTransceiver.get(localId);\n          if (!transceiver) {\n            throw new Error(\"associated RTCRtpTransceiver not found\");\n          }\n          yield transceiver.sender.replaceTrack(track);\n        });\n      }\n      setMaxSpatialLayer(localId, spatialLayer) {\n        return __async(this, null, function* () {\n          this.assertSendDirection();\n          logger2.debug(\"setMaxSpatialLayer() [localId:%s, spatialLayer:%s]\", localId, spatialLayer);\n          const transceiver = this._mapMidTransceiver.get(localId);\n          if (!transceiver) {\n            throw new Error(\"associated RTCRtpTransceiver not found\");\n          }\n          const parameters = transceiver.sender.getParameters();\n          parameters.encodings.forEach((encoding, idx) => {\n            if (idx <= spatialLayer) {\n              encoding.active = true;\n            } else {\n              encoding.active = false;\n            }\n          });\n          yield transceiver.sender.setParameters(parameters);\n          this._remoteSdp.muxMediaSectionSimulcast(localId, parameters.encodings);\n          const offer = yield this._pc.createOffer();\n          logger2.debug(\"setMaxSpatialLayer() | calling pc.setLocalDescription() [offer:%o]\", offer);\n          yield this._pc.setLocalDescription(offer);\n          const answer = { type: \"answer\", sdp: this._remoteSdp.getSdp() };\n          logger2.debug(\"setMaxSpatialLayer() | calling pc.setRemoteDescription() [answer:%o]\", answer);\n          yield this._pc.setRemoteDescription(answer);\n        });\n      }\n      setRtpEncodingParameters(localId, params) {\n        return __async(this, null, function* () {\n          this.assertSendDirection();\n          logger2.debug(\"setRtpEncodingParameters() [localId:%s, params:%o]\", localId, params);\n          const transceiver = this._mapMidTransceiver.get(localId);\n          if (!transceiver) {\n            throw new Error(\"associated RTCRtpTransceiver not found\");\n          }\n          const parameters = transceiver.sender.getParameters();\n          parameters.encodings.forEach((encoding, idx) => {\n            parameters.encodings[idx] = __spreadValues(__spreadValues({}, encoding), params);\n          });\n          yield transceiver.sender.setParameters(parameters);\n          this._remoteSdp.muxMediaSectionSimulcast(localId, parameters.encodings);\n          const offer = yield this._pc.createOffer();\n          logger2.debug(\"setRtpEncodingParameters() | calling pc.setLocalDescription() [offer:%o]\", offer);\n          yield this._pc.setLocalDescription(offer);\n          const answer = { type: \"answer\", sdp: this._remoteSdp.getSdp() };\n          logger2.debug(\"setRtpEncodingParameters() | calling pc.setRemoteDescription() [answer:%o]\", answer);\n          yield this._pc.setRemoteDescription(answer);\n        });\n      }\n      getSenderStats(localId) {\n        return __async(this, null, function* () {\n          this.assertSendDirection();\n          const transceiver = this._mapMidTransceiver.get(localId);\n          if (!transceiver) {\n            throw new Error(\"associated RTCRtpTransceiver not found\");\n          }\n          return transceiver.sender.getStats();\n        });\n      }\n      sendDataChannel(_0) {\n        return __async(this, arguments, function* ({ ordered, maxPacketLifeTime, maxRetransmits, label, protocol }) {\n          var _a2;\n          this.assertSendDirection();\n          const options = {\n            negotiated: true,\n            id: this._nextSendSctpStreamId,\n            ordered,\n            maxPacketLifeTime,\n            maxRetransmits,\n            protocol\n          };\n          logger2.debug(\"sendDataChannel() [options:%o]\", options);\n          const dataChannel = this._pc.createDataChannel(label, options);\n          this._nextSendSctpStreamId = ++this._nextSendSctpStreamId % SCTP_NUM_STREAMS.MIS;\n          if (!this._hasDataChannelMediaSection) {\n            const offer = yield this._pc.createOffer();\n            const localSdpObject = sdpTransform4.parse(offer.sdp);\n            const offerMediaObject = localSdpObject.media.find((m) => m.type === \"application\");\n            if (!this._transportReady) {\n              yield this.setupTransport({\n                localDtlsRole: (_a2 = this._forcedLocalDtlsRole) !== null && _a2 !== void 0 ? _a2 : \"client\",\n                localSdpObject\n              });\n            }\n            logger2.debug(\"sendDataChannel() | calling pc.setLocalDescription() [offer:%o]\", offer);\n            yield this._pc.setLocalDescription(offer);\n            this._remoteSdp.sendSctpAssociation({ offerMediaObject });\n            const answer = { type: \"answer\", sdp: this._remoteSdp.getSdp() };\n            logger2.debug(\"sendDataChannel() | calling pc.setRemoteDescription() [answer:%o]\", answer);\n            yield this._pc.setRemoteDescription(answer);\n            this._hasDataChannelMediaSection = true;\n          }\n          const sctpStreamParameters = {\n            streamId: options.id,\n            ordered: options.ordered,\n            maxPacketLifeTime: options.maxPacketLifeTime,\n            maxRetransmits: options.maxRetransmits\n          };\n          return { dataChannel, sctpStreamParameters };\n        });\n      }\n      receive(optionsList) {\n        return __async(this, null, function* () {\n          var _a2;\n          this.assertRecvDirection();\n          const results = [];\n          const mapLocalId = /* @__PURE__ */ new Map();\n          for (const options of optionsList) {\n            const { trackId, kind, rtpParameters, streamId } = options;\n            logger2.debug(\"receive() [trackId:%s, kind:%s]\", trackId, kind);\n            const localId = rtpParameters.mid || String(this._mapMidTransceiver.size);\n            mapLocalId.set(trackId, localId);\n            this._remoteSdp.receive({\n              mid: localId,\n              kind,\n              offerRtpParameters: rtpParameters,\n              streamId: streamId || rtpParameters.rtcp.cname,\n              trackId\n            });\n          }\n          const offer = { type: \"offer\", sdp: this._remoteSdp.getSdp() };\n          logger2.debug(\"receive() | calling pc.setRemoteDescription() [offer:%o]\", offer);\n          yield this._pc.setRemoteDescription(offer);\n          let answer = yield this._pc.createAnswer();\n          const localSdpObject = sdpTransform4.parse(answer.sdp);\n          for (const options of optionsList) {\n            const { trackId, rtpParameters } = options;\n            const localId = mapLocalId.get(trackId);\n            const answerMediaObject = localSdpObject.media.find((m) => String(m.mid) === localId);\n            sdpCommonUtils.applyCodecParameters({\n              offerRtpParameters: rtpParameters,\n              answerMediaObject\n            });\n          }\n          answer = { type: \"answer\", sdp: sdpTransform4.write(localSdpObject) };\n          if (!this._transportReady) {\n            yield this.setupTransport({\n              localDtlsRole: (_a2 = this._forcedLocalDtlsRole) !== null && _a2 !== void 0 ? _a2 : \"client\",\n              localSdpObject\n            });\n          }\n          logger2.debug(\"receive() | calling pc.setLocalDescription() [answer:%o]\", answer);\n          yield this._pc.setLocalDescription(answer);\n          for (const options of optionsList) {\n            const { trackId } = options;\n            const localId = mapLocalId.get(trackId);\n            const transceiver = this._pc.getTransceivers().find((t2) => t2.mid === localId);\n            if (!transceiver) {\n              throw new Error(\"new RTCRtpTransceiver not found\");\n            }\n            this._mapMidTransceiver.set(localId, transceiver);\n            results.push({\n              localId,\n              track: transceiver.receiver.track,\n              rtpReceiver: transceiver.receiver\n            });\n          }\n          return results;\n        });\n      }\n      stopReceiving(localIds) {\n        return __async(this, null, function* () {\n          this.assertRecvDirection();\n          for (const localId of localIds) {\n            logger2.debug(\"stopReceiving() [localId:%s]\", localId);\n            const transceiver = this._mapMidTransceiver.get(localId);\n            if (!transceiver) {\n              throw new Error(\"associated RTCRtpTransceiver not found\");\n            }\n            this._remoteSdp.closeMediaSection(transceiver.mid);\n          }\n          const offer = { type: \"offer\", sdp: this._remoteSdp.getSdp() };\n          logger2.debug(\"stopReceiving() | calling pc.setRemoteDescription() [offer:%o]\", offer);\n          yield this._pc.setRemoteDescription(offer);\n          const answer = yield this._pc.createAnswer();\n          logger2.debug(\"stopReceiving() | calling pc.setLocalDescription() [answer:%o]\", answer);\n          yield this._pc.setLocalDescription(answer);\n          for (const localId of localIds) {\n            this._mapMidTransceiver.delete(localId);\n          }\n        });\n      }\n      pauseReceiving(localIds) {\n        return __async(this, null, function* () {\n          this.assertRecvDirection();\n          for (const localId of localIds) {\n            logger2.debug(\"pauseReceiving() [localId:%s]\", localId);\n            const transceiver = this._mapMidTransceiver.get(localId);\n            if (!transceiver) {\n              throw new Error(\"associated RTCRtpTransceiver not found\");\n            }\n            transceiver.direction = \"inactive\";\n            this._remoteSdp.pauseMediaSection(localId);\n          }\n          const offer = { type: \"offer\", sdp: this._remoteSdp.getSdp() };\n          logger2.debug(\"pauseReceiving() | calling pc.setRemoteDescription() [offer:%o]\", offer);\n          yield this._pc.setRemoteDescription(offer);\n          const answer = yield this._pc.createAnswer();\n          logger2.debug(\"pauseReceiving() | calling pc.setLocalDescription() [answer:%o]\", answer);\n          yield this._pc.setLocalDescription(answer);\n        });\n      }\n      resumeReceiving(localIds) {\n        return __async(this, null, function* () {\n          this.assertRecvDirection();\n          for (const localId of localIds) {\n            logger2.debug(\"resumeReceiving() [localId:%s]\", localId);\n            const transceiver = this._mapMidTransceiver.get(localId);\n            if (!transceiver) {\n              throw new Error(\"associated RTCRtpTransceiver not found\");\n            }\n            transceiver.direction = \"recvonly\";\n            this._remoteSdp.resumeReceivingMediaSection(localId);\n          }\n          const offer = { type: \"offer\", sdp: this._remoteSdp.getSdp() };\n          logger2.debug(\"resumeReceiving() | calling pc.setRemoteDescription() [offer:%o]\", offer);\n          yield this._pc.setRemoteDescription(offer);\n          const answer = yield this._pc.createAnswer();\n          logger2.debug(\"resumeReceiving() | calling pc.setLocalDescription() [answer:%o]\", answer);\n          yield this._pc.setLocalDescription(answer);\n        });\n      }\n      getReceiverStats(localId) {\n        return __async(this, null, function* () {\n          this.assertRecvDirection();\n          const transceiver = this._mapMidTransceiver.get(localId);\n          if (!transceiver) {\n            throw new Error(\"associated RTCRtpTransceiver not found\");\n          }\n          return transceiver.receiver.getStats();\n        });\n      }\n      receiveDataChannel(_0) {\n        return __async(this, arguments, function* ({ sctpStreamParameters, label, protocol }) {\n          var _a2;\n          this.assertRecvDirection();\n          const { streamId, ordered, maxPacketLifeTime, maxRetransmits } = sctpStreamParameters;\n          const options = {\n            negotiated: true,\n            id: streamId,\n            ordered,\n            maxPacketLifeTime,\n            maxRetransmits,\n            protocol\n          };\n          logger2.debug(\"receiveDataChannel() [options:%o]\", options);\n          const dataChannel = this._pc.createDataChannel(label, options);\n          if (!this._hasDataChannelMediaSection) {\n            this._remoteSdp.receiveSctpAssociation();\n            const offer = { type: \"offer\", sdp: this._remoteSdp.getSdp() };\n            logger2.debug(\"receiveDataChannel() | calling pc.setRemoteDescription() [offer:%o]\", offer);\n            yield this._pc.setRemoteDescription(offer);\n            const answer = yield this._pc.createAnswer();\n            if (!this._transportReady) {\n              const localSdpObject = sdpTransform4.parse(answer.sdp);\n              yield this.setupTransport({\n                localDtlsRole: (_a2 = this._forcedLocalDtlsRole) !== null && _a2 !== void 0 ? _a2 : \"client\",\n                localSdpObject\n              });\n            }\n            logger2.debug(\"receiveDataChannel() | calling pc.setRemoteDescription() [answer:%o]\", answer);\n            yield this._pc.setLocalDescription(answer);\n            this._hasDataChannelMediaSection = true;\n          }\n          return { dataChannel };\n        });\n      }\n      setupTransport(_0) {\n        return __async(this, arguments, function* ({ localDtlsRole, localSdpObject }) {\n          if (!localSdpObject) {\n            localSdpObject = sdpTransform4.parse(this._pc.localDescription.sdp);\n          }\n          const dtlsParameters = sdpCommonUtils.extractDtlsParameters({ sdpObject: localSdpObject });\n          dtlsParameters.role = localDtlsRole;\n          this._remoteSdp.updateDtlsRole(localDtlsRole === \"client\" ? \"server\" : \"client\");\n          yield new Promise((resolve, reject) => {\n            this.safeEmit(\"@connect\", { dtlsParameters }, resolve, reject);\n          });\n          this._transportReady = true;\n        });\n      }\n      assertSendDirection() {\n        if (this._direction !== \"send\") {\n          throw new Error('method can just be called for handlers with \"send\" direction');\n        }\n      }\n      assertRecvDirection() {\n        if (this._direction !== \"recv\") {\n          throw new Error('method can just be called for handlers with \"recv\" direction');\n        }\n      }\n    };\n    exports.Safari12 = Safari12;\n  }\n});\n\n// ../../node_modules/mediasoup-client/lib/handlers/Safari11.js\nvar require_Safari11 = __commonJS({\n  \"../../node_modules/mediasoup-client/lib/handlers/Safari11.js\"(exports) {\n    \"use strict\";\n    init_process();\n    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {\n      if (k2 === void 0)\n        k2 = k;\n      var desc = Object.getOwnPropertyDescriptor(m, k);\n      if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n        desc = { enumerable: true, get: function() {\n          return m[k];\n        } };\n      }\n      Object.defineProperty(o2, k2, desc);\n    } : function(o2, m, k, k2) {\n      if (k2 === void 0)\n        k2 = k;\n      o2[k2] = m[k];\n    });\n    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {\n      Object.defineProperty(o2, \"default\", { enumerable: true, value: v });\n    } : function(o2, v) {\n      o2[\"default\"] = v;\n    });\n    var __importStar = exports && exports.__importStar || function(mod) {\n      if (mod && mod.__esModule)\n        return mod;\n      var result2 = {};\n      if (mod != null) {\n        for (var k in mod)\n          if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k))\n            __createBinding(result2, mod, k);\n      }\n      __setModuleDefault(result2, mod);\n      return result2;\n    };\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.Safari11 = void 0;\n    var sdpTransform4 = __importStar(require_lib());\n    var Logger_1 = require_Logger();\n    var utils = __importStar(require_utils2());\n    var ortc = __importStar(require_ortc());\n    var sdpCommonUtils = __importStar(require_commonUtils());\n    var sdpPlanBUtils = __importStar(require_planBUtils());\n    var HandlerInterface_1 = require_HandlerInterface();\n    var RemoteSdp_1 = require_RemoteSdp();\n    var logger2 = new Logger_1.Logger(\"Safari11\");\n    var SCTP_NUM_STREAMS = { OS: 1024, MIS: 1024 };\n    var Safari11 = class extends HandlerInterface_1.HandlerInterface {\n      static createFactory() {\n        return () => new Safari11();\n      }\n      constructor() {\n        super();\n        this._sendStream = new MediaStream();\n        this._mapSendLocalIdRtpSender = /* @__PURE__ */ new Map();\n        this._nextSendLocalId = 0;\n        this._mapRecvLocalIdInfo = /* @__PURE__ */ new Map();\n        this._hasDataChannelMediaSection = false;\n        this._nextSendSctpStreamId = 0;\n        this._transportReady = false;\n      }\n      get name() {\n        return \"Safari11\";\n      }\n      close() {\n        logger2.debug(\"close()\");\n        if (this._pc) {\n          try {\n            this._pc.close();\n          } catch (error) {\n          }\n        }\n        this.emit(\"@close\");\n      }\n      getNativeRtpCapabilities() {\n        return __async(this, null, function* () {\n          logger2.debug(\"getNativeRtpCapabilities()\");\n          const pc = new RTCPeerConnection({\n            iceServers: [],\n            iceTransportPolicy: \"all\",\n            bundlePolicy: \"max-bundle\",\n            rtcpMuxPolicy: \"require\",\n            sdpSemantics: \"plan-b\"\n          });\n          try {\n            const offer = yield pc.createOffer({\n              offerToReceiveAudio: true,\n              offerToReceiveVideo: true\n            });\n            try {\n              pc.close();\n            } catch (error) {\n            }\n            const sdpObject = sdpTransform4.parse(offer.sdp);\n            const nativeRtpCapabilities = sdpCommonUtils.extractRtpCapabilities({ sdpObject });\n            return nativeRtpCapabilities;\n          } catch (error) {\n            try {\n              pc.close();\n            } catch (error2) {\n            }\n            throw error;\n          }\n        });\n      }\n      getNativeSctpCapabilities() {\n        return __async(this, null, function* () {\n          logger2.debug(\"getNativeSctpCapabilities()\");\n          return {\n            numStreams: SCTP_NUM_STREAMS\n          };\n        });\n      }\n      run({ direction, iceParameters, iceCandidates, dtlsParameters, sctpParameters, iceServers, iceTransportPolicy, additionalSettings, proprietaryConstraints, extendedRtpCapabilities }) {\n        logger2.debug(\"run()\");\n        this._direction = direction;\n        this._remoteSdp = new RemoteSdp_1.RemoteSdp({\n          iceParameters,\n          iceCandidates,\n          dtlsParameters,\n          sctpParameters,\n          planB: true\n        });\n        this._sendingRtpParametersByKind = {\n          audio: ortc.getSendingRtpParameters(\"audio\", extendedRtpCapabilities),\n          video: ortc.getSendingRtpParameters(\"video\", extendedRtpCapabilities)\n        };\n        this._sendingRemoteRtpParametersByKind = {\n          audio: ortc.getSendingRemoteRtpParameters(\"audio\", extendedRtpCapabilities),\n          video: ortc.getSendingRemoteRtpParameters(\"video\", extendedRtpCapabilities)\n        };\n        if (dtlsParameters.role && dtlsParameters.role !== \"auto\") {\n          this._forcedLocalDtlsRole = dtlsParameters.role === \"server\" ? \"client\" : \"server\";\n        }\n        this._pc = new RTCPeerConnection(__spreadValues({\n          iceServers: iceServers || [],\n          iceTransportPolicy: iceTransportPolicy || \"all\",\n          bundlePolicy: \"max-bundle\",\n          rtcpMuxPolicy: \"require\"\n        }, additionalSettings), proprietaryConstraints);\n        if (this._pc.connectionState) {\n          this._pc.addEventListener(\"connectionstatechange\", () => {\n            this.emit(\"@connectionstatechange\", this._pc.connectionState);\n          });\n        } else {\n          this._pc.addEventListener(\"iceconnectionstatechange\", () => {\n            logger2.warn(\"run() | pc.connectionState not supported, using pc.iceConnectionState\");\n            switch (this._pc.iceConnectionState) {\n              case \"checking\":\n                this.emit(\"@connectionstatechange\", \"connecting\");\n                break;\n              case \"connected\":\n              case \"completed\":\n                this.emit(\"@connectionstatechange\", \"connected\");\n                break;\n              case \"failed\":\n                this.emit(\"@connectionstatechange\", \"failed\");\n                break;\n              case \"disconnected\":\n                this.emit(\"@connectionstatechange\", \"disconnected\");\n                break;\n              case \"closed\":\n                this.emit(\"@connectionstatechange\", \"closed\");\n                break;\n            }\n          });\n        }\n      }\n      updateIceServers(iceServers) {\n        return __async(this, null, function* () {\n          logger2.debug(\"updateIceServers()\");\n          const configuration = this._pc.getConfiguration();\n          configuration.iceServers = iceServers;\n          this._pc.setConfiguration(configuration);\n        });\n      }\n      restartIce(iceParameters) {\n        return __async(this, null, function* () {\n          logger2.debug(\"restartIce()\");\n          this._remoteSdp.updateIceParameters(iceParameters);\n          if (!this._transportReady) {\n            return;\n          }\n          if (this._direction === \"send\") {\n            const offer = yield this._pc.createOffer({ iceRestart: true });\n            logger2.debug(\"restartIce() | calling pc.setLocalDescription() [offer:%o]\", offer);\n            yield this._pc.setLocalDescription(offer);\n            const answer = { type: \"answer\", sdp: this._remoteSdp.getSdp() };\n            logger2.debug(\"restartIce() | calling pc.setRemoteDescription() [answer:%o]\", answer);\n            yield this._pc.setRemoteDescription(answer);\n          } else {\n            const offer = { type: \"offer\", sdp: this._remoteSdp.getSdp() };\n            logger2.debug(\"restartIce() | calling pc.setRemoteDescription() [offer:%o]\", offer);\n            yield this._pc.setRemoteDescription(offer);\n            const answer = yield this._pc.createAnswer();\n            logger2.debug(\"restartIce() | calling pc.setLocalDescription() [answer:%o]\", answer);\n            yield this._pc.setLocalDescription(answer);\n          }\n        });\n      }\n      getTransportStats() {\n        return __async(this, null, function* () {\n          return this._pc.getStats();\n        });\n      }\n      send(_0) {\n        return __async(this, arguments, function* ({ track, encodings, codecOptions, codec }) {\n          var _a2;\n          this.assertSendDirection();\n          logger2.debug(\"send() [kind:%s, track.id:%s]\", track.kind, track.id);\n          if (codec) {\n            logger2.warn(\"send() | codec selection is not available in %s handler\", this.name);\n          }\n          this._sendStream.addTrack(track);\n          this._pc.addTrack(track, this._sendStream);\n          let offer = yield this._pc.createOffer();\n          let localSdpObject = sdpTransform4.parse(offer.sdp);\n          let offerMediaObject;\n          const sendingRtpParameters = utils.clone(this._sendingRtpParametersByKind[track.kind], {});\n          sendingRtpParameters.codecs = ortc.reduceCodecs(sendingRtpParameters.codecs);\n          const sendingRemoteRtpParameters = utils.clone(this._sendingRemoteRtpParametersByKind[track.kind], {});\n          sendingRemoteRtpParameters.codecs = ortc.reduceCodecs(sendingRemoteRtpParameters.codecs);\n          if (!this._transportReady) {\n            yield this.setupTransport({\n              localDtlsRole: (_a2 = this._forcedLocalDtlsRole) !== null && _a2 !== void 0 ? _a2 : \"client\",\n              localSdpObject\n            });\n          }\n          if (track.kind === \"video\" && encodings && encodings.length > 1) {\n            logger2.debug(\"send() | enabling simulcast\");\n            localSdpObject = sdpTransform4.parse(offer.sdp);\n            offerMediaObject = localSdpObject.media.find((m) => m.type === \"video\");\n            sdpPlanBUtils.addLegacySimulcast({\n              offerMediaObject,\n              track,\n              numStreams: encodings.length\n            });\n            offer = { type: \"offer\", sdp: sdpTransform4.write(localSdpObject) };\n          }\n          logger2.debug(\"send() | calling pc.setLocalDescription() [offer:%o]\", offer);\n          yield this._pc.setLocalDescription(offer);\n          localSdpObject = sdpTransform4.parse(this._pc.localDescription.sdp);\n          offerMediaObject = localSdpObject.media.find((m) => m.type === track.kind);\n          sendingRtpParameters.rtcp.cname = sdpCommonUtils.getCname({ offerMediaObject });\n          sendingRtpParameters.encodings = sdpPlanBUtils.getRtpEncodings({ offerMediaObject, track });\n          if (encodings) {\n            for (let idx = 0; idx < sendingRtpParameters.encodings.length; ++idx) {\n              if (encodings[idx]) {\n                Object.assign(sendingRtpParameters.encodings[idx], encodings[idx]);\n              }\n            }\n          }\n          if (sendingRtpParameters.encodings.length > 1 && sendingRtpParameters.codecs[0].mimeType.toLowerCase() === \"video/vp8\") {\n            for (const encoding of sendingRtpParameters.encodings) {\n              encoding.scalabilityMode = \"L1T3\";\n            }\n          }\n          this._remoteSdp.send({\n            offerMediaObject,\n            offerRtpParameters: sendingRtpParameters,\n            answerRtpParameters: sendingRemoteRtpParameters,\n            codecOptions\n          });\n          const answer = { type: \"answer\", sdp: this._remoteSdp.getSdp() };\n          logger2.debug(\"send() | calling pc.setRemoteDescription() [answer:%o]\", answer);\n          yield this._pc.setRemoteDescription(answer);\n          const localId = String(this._nextSendLocalId);\n          this._nextSendLocalId++;\n          const rtpSender = this._pc.getSenders().find((s) => s.track === track);\n          this._mapSendLocalIdRtpSender.set(localId, rtpSender);\n          return {\n            localId,\n            rtpParameters: sendingRtpParameters,\n            rtpSender\n          };\n        });\n      }\n      stopSending(localId) {\n        return __async(this, null, function* () {\n          this.assertSendDirection();\n          const rtpSender = this._mapSendLocalIdRtpSender.get(localId);\n          if (!rtpSender) {\n            throw new Error(\"associated RTCRtpSender not found\");\n          }\n          if (rtpSender.track) {\n            this._sendStream.removeTrack(rtpSender.track);\n          }\n          this._mapSendLocalIdRtpSender.delete(localId);\n          const offer = yield this._pc.createOffer();\n          logger2.debug(\"stopSending() | calling pc.setLocalDescription() [offer:%o]\", offer);\n          try {\n            yield this._pc.setLocalDescription(offer);\n          } catch (error) {\n            if (this._sendStream.getTracks().length === 0) {\n              logger2.warn(\"stopSending() | ignoring expected error due no sending tracks: %s\", error.toString());\n              return;\n            }\n            throw error;\n          }\n          if (this._pc.signalingState === \"stable\") {\n            return;\n          }\n          const answer = { type: \"answer\", sdp: this._remoteSdp.getSdp() };\n          logger2.debug(\"stopSending() | calling pc.setRemoteDescription() [answer:%o]\", answer);\n          yield this._pc.setRemoteDescription(answer);\n        });\n      }\n      pauseSending(localId) {\n        return __async(this, null, function* () {\n        });\n      }\n      resumeSending(localId) {\n        return __async(this, null, function* () {\n        });\n      }\n      replaceTrack(localId, track) {\n        return __async(this, null, function* () {\n          this.assertSendDirection();\n          if (track) {\n            logger2.debug(\"replaceTrack() [localId:%s, track.id:%s]\", localId, track.id);\n          } else {\n            logger2.debug(\"replaceTrack() [localId:%s, no track]\", localId);\n          }\n          const rtpSender = this._mapSendLocalIdRtpSender.get(localId);\n          if (!rtpSender) {\n            throw new Error(\"associated RTCRtpSender not found\");\n          }\n          const oldTrack = rtpSender.track;\n          yield rtpSender.replaceTrack(track);\n          if (oldTrack) {\n            this._sendStream.removeTrack(oldTrack);\n          }\n          if (track) {\n            this._sendStream.addTrack(track);\n          }\n        });\n      }\n      setMaxSpatialLayer(localId, spatialLayer) {\n        return __async(this, null, function* () {\n          this.assertSendDirection();\n          logger2.debug(\"setMaxSpatialLayer() [localId:%s, spatialLayer:%s]\", localId, spatialLayer);\n          const rtpSender = this._mapSendLocalIdRtpSender.get(localId);\n          if (!rtpSender) {\n            throw new Error(\"associated RTCRtpSender not found\");\n          }\n          const parameters = rtpSender.getParameters();\n          parameters.encodings.forEach((encoding, idx) => {\n            if (idx <= spatialLayer) {\n              encoding.active = true;\n            } else {\n              encoding.active = false;\n            }\n          });\n          yield rtpSender.setParameters(parameters);\n        });\n      }\n      setRtpEncodingParameters(localId, params) {\n        return __async(this, null, function* () {\n          this.assertSendDirection();\n          logger2.debug(\"setRtpEncodingParameters() [localId:%s, params:%o]\", localId, params);\n          const rtpSender = this._mapSendLocalIdRtpSender.get(localId);\n          if (!rtpSender) {\n            throw new Error(\"associated RTCRtpSender not found\");\n          }\n          const parameters = rtpSender.getParameters();\n          parameters.encodings.forEach((encoding, idx) => {\n            parameters.encodings[idx] = __spreadValues(__spreadValues({}, encoding), params);\n          });\n          yield rtpSender.setParameters(parameters);\n        });\n      }\n      getSenderStats(localId) {\n        return __async(this, null, function* () {\n          this.assertSendDirection();\n          const rtpSender = this._mapSendLocalIdRtpSender.get(localId);\n          if (!rtpSender) {\n            throw new Error(\"associated RTCRtpSender not found\");\n          }\n          return rtpSender.getStats();\n        });\n      }\n      sendDataChannel(_0) {\n        return __async(this, arguments, function* ({ ordered, maxPacketLifeTime, maxRetransmits, label, protocol }) {\n          var _a2;\n          this.assertSendDirection();\n          const options = {\n            negotiated: true,\n            id: this._nextSendSctpStreamId,\n            ordered,\n            maxPacketLifeTime,\n            maxRetransmits,\n            protocol\n          };\n          logger2.debug(\"sendDataChannel() [options:%o]\", options);\n          const dataChannel = this._pc.createDataChannel(label, options);\n          this._nextSendSctpStreamId = ++this._nextSendSctpStreamId % SCTP_NUM_STREAMS.MIS;\n          if (!this._hasDataChannelMediaSection) {\n            const offer = yield this._pc.createOffer();\n            const localSdpObject = sdpTransform4.parse(offer.sdp);\n            const offerMediaObject = localSdpObject.media.find((m) => m.type === \"application\");\n            if (!this._transportReady) {\n              yield this.setupTransport({\n                localDtlsRole: (_a2 = this._forcedLocalDtlsRole) !== null && _a2 !== void 0 ? _a2 : \"client\",\n                localSdpObject\n              });\n            }\n            logger2.debug(\"sendDataChannel() | calling pc.setLocalDescription() [offer:%o]\", offer);\n            yield this._pc.setLocalDescription(offer);\n            this._remoteSdp.sendSctpAssociation({ offerMediaObject });\n            const answer = { type: \"answer\", sdp: this._remoteSdp.getSdp() };\n            logger2.debug(\"sendDataChannel() | calling pc.setRemoteDescription() [answer:%o]\", answer);\n            yield this._pc.setRemoteDescription(answer);\n            this._hasDataChannelMediaSection = true;\n          }\n          const sctpStreamParameters = {\n            streamId: options.id,\n            ordered: options.ordered,\n            maxPacketLifeTime: options.maxPacketLifeTime,\n            maxRetransmits: options.maxRetransmits\n          };\n          return { dataChannel, sctpStreamParameters };\n        });\n      }\n      receive(optionsList) {\n        return __async(this, null, function* () {\n          var _a2;\n          this.assertRecvDirection();\n          const results = [];\n          for (const options of optionsList) {\n            const { trackId, kind, rtpParameters, streamId } = options;\n            logger2.debug(\"receive() [trackId:%s, kind:%s]\", trackId, kind);\n            const mid = kind;\n            this._remoteSdp.receive({\n              mid,\n              kind,\n              offerRtpParameters: rtpParameters,\n              streamId: streamId || rtpParameters.rtcp.cname,\n              trackId\n            });\n          }\n          const offer = { type: \"offer\", sdp: this._remoteSdp.getSdp() };\n          logger2.debug(\"receive() | calling pc.setRemoteDescription() [offer:%o]\", offer);\n          yield this._pc.setRemoteDescription(offer);\n          let answer = yield this._pc.createAnswer();\n          const localSdpObject = sdpTransform4.parse(answer.sdp);\n          for (const options of optionsList) {\n            const { kind, rtpParameters } = options;\n            const mid = kind;\n            const answerMediaObject = localSdpObject.media.find((m) => String(m.mid) === mid);\n            sdpCommonUtils.applyCodecParameters({\n              offerRtpParameters: rtpParameters,\n              answerMediaObject\n            });\n          }\n          answer = { type: \"answer\", sdp: sdpTransform4.write(localSdpObject) };\n          if (!this._transportReady) {\n            yield this.setupTransport({\n              localDtlsRole: (_a2 = this._forcedLocalDtlsRole) !== null && _a2 !== void 0 ? _a2 : \"client\",\n              localSdpObject\n            });\n          }\n          logger2.debug(\"receive() | calling pc.setLocalDescription() [answer:%o]\", answer);\n          yield this._pc.setLocalDescription(answer);\n          for (const options of optionsList) {\n            const { kind, trackId, rtpParameters } = options;\n            const mid = kind;\n            const localId = trackId;\n            const rtpReceiver = this._pc.getReceivers().find((r2) => r2.track && r2.track.id === localId);\n            if (!rtpReceiver) {\n              throw new Error(\"new RTCRtpReceiver not\");\n            }\n            this._mapRecvLocalIdInfo.set(localId, { mid, rtpParameters, rtpReceiver });\n            results.push({\n              localId,\n              track: rtpReceiver.track,\n              rtpReceiver\n            });\n          }\n          return results;\n        });\n      }\n      stopReceiving(localIds) {\n        return __async(this, null, function* () {\n          this.assertRecvDirection();\n          for (const localId of localIds) {\n            logger2.debug(\"stopReceiving() [localId:%s]\", localId);\n            const { mid, rtpParameters } = this._mapRecvLocalIdInfo.get(localId) || {};\n            this._mapRecvLocalIdInfo.delete(localId);\n            this._remoteSdp.planBStopReceiving({ mid, offerRtpParameters: rtpParameters });\n          }\n          const offer = { type: \"offer\", sdp: this._remoteSdp.getSdp() };\n          logger2.debug(\"stopReceiving() | calling pc.setRemoteDescription() [offer:%o]\", offer);\n          yield this._pc.setRemoteDescription(offer);\n          const answer = yield this._pc.createAnswer();\n          logger2.debug(\"stopReceiving() | calling pc.setLocalDescription() [answer:%o]\", answer);\n          yield this._pc.setLocalDescription(answer);\n        });\n      }\n      getReceiverStats(localId) {\n        return __async(this, null, function* () {\n          this.assertRecvDirection();\n          const { rtpReceiver } = this._mapRecvLocalIdInfo.get(localId) || {};\n          if (!rtpReceiver) {\n            throw new Error(\"associated RTCRtpReceiver not found\");\n          }\n          return rtpReceiver.getStats();\n        });\n      }\n      pauseReceiving(localIds) {\n        return __async(this, null, function* () {\n        });\n      }\n      resumeReceiving(localIds) {\n        return __async(this, null, function* () {\n        });\n      }\n      receiveDataChannel(_0) {\n        return __async(this, arguments, function* ({ sctpStreamParameters, label, protocol }) {\n          var _a2;\n          this.assertRecvDirection();\n          const { streamId, ordered, maxPacketLifeTime, maxRetransmits } = sctpStreamParameters;\n          const options = {\n            negotiated: true,\n            id: streamId,\n            ordered,\n            maxPacketLifeTime,\n            maxRetransmits,\n            protocol\n          };\n          logger2.debug(\"receiveDataChannel() [options:%o]\", options);\n          const dataChannel = this._pc.createDataChannel(label, options);\n          if (!this._hasDataChannelMediaSection) {\n            this._remoteSdp.receiveSctpAssociation({ oldDataChannelSpec: true });\n            const offer = { type: \"offer\", sdp: this._remoteSdp.getSdp() };\n            logger2.debug(\"receiveDataChannel() | calling pc.setRemoteDescription() [offer:%o]\", offer);\n            yield this._pc.setRemoteDescription(offer);\n            const answer = yield this._pc.createAnswer();\n            if (!this._transportReady) {\n              const localSdpObject = sdpTransform4.parse(answer.sdp);\n              yield this.setupTransport({\n                localDtlsRole: (_a2 = this._forcedLocalDtlsRole) !== null && _a2 !== void 0 ? _a2 : \"client\",\n                localSdpObject\n              });\n            }\n            logger2.debug(\"receiveDataChannel() | calling pc.setRemoteDescription() [answer:%o]\", answer);\n            yield this._pc.setLocalDescription(answer);\n            this._hasDataChannelMediaSection = true;\n          }\n          return { dataChannel };\n        });\n      }\n      setupTransport(_0) {\n        return __async(this, arguments, function* ({ localDtlsRole, localSdpObject }) {\n          if (!localSdpObject) {\n            localSdpObject = sdpTransform4.parse(this._pc.localDescription.sdp);\n          }\n          const dtlsParameters = sdpCommonUtils.extractDtlsParameters({ sdpObject: localSdpObject });\n          dtlsParameters.role = localDtlsRole;\n          this._remoteSdp.updateDtlsRole(localDtlsRole === \"client\" ? \"server\" : \"client\");\n          yield new Promise((resolve, reject) => {\n            this.safeEmit(\"@connect\", { dtlsParameters }, resolve, reject);\n          });\n          this._transportReady = true;\n        });\n      }\n      assertSendDirection() {\n        if (this._direction !== \"send\") {\n          throw new Error('method can just be called for handlers with \"send\" direction');\n        }\n      }\n      assertRecvDirection() {\n        if (this._direction !== \"recv\") {\n          throw new Error('method can just be called for handlers with \"recv\" direction');\n        }\n      }\n    };\n    exports.Safari11 = Safari11;\n  }\n});\n\n// ../../node_modules/mediasoup-client/lib/handlers/ortc/edgeUtils.js\nvar require_edgeUtils = __commonJS({\n  \"../../node_modules/mediasoup-client/lib/handlers/ortc/edgeUtils.js\"(exports) {\n    \"use strict\";\n    init_process();\n    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {\n      if (k2 === void 0)\n        k2 = k;\n      var desc = Object.getOwnPropertyDescriptor(m, k);\n      if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n        desc = { enumerable: true, get: function() {\n          return m[k];\n        } };\n      }\n      Object.defineProperty(o2, k2, desc);\n    } : function(o2, m, k, k2) {\n      if (k2 === void 0)\n        k2 = k;\n      o2[k2] = m[k];\n    });\n    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {\n      Object.defineProperty(o2, \"default\", { enumerable: true, value: v });\n    } : function(o2, v) {\n      o2[\"default\"] = v;\n    });\n    var __importStar = exports && exports.__importStar || function(mod) {\n      if (mod && mod.__esModule)\n        return mod;\n      var result2 = {};\n      if (mod != null) {\n        for (var k in mod)\n          if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k))\n            __createBinding(result2, mod, k);\n      }\n      __setModuleDefault(result2, mod);\n      return result2;\n    };\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.mangleRtpParameters = exports.getCapabilities = void 0;\n    var utils = __importStar(require_utils2());\n    function getCapabilities() {\n      const nativeCaps = RTCRtpReceiver.getCapabilities();\n      const caps = utils.clone(nativeCaps, {});\n      for (const codec of caps.codecs) {\n        codec.channels = codec.numChannels;\n        delete codec.numChannels;\n        codec.mimeType = codec.mimeType || `${codec.kind}/${codec.name}`;\n        if (codec.parameters) {\n          const parameters = codec.parameters;\n          if (parameters.apt) {\n            parameters.apt = Number(parameters.apt);\n          }\n          if (parameters[\"packetization-mode\"]) {\n            parameters[\"packetization-mode\"] = Number(parameters[\"packetization-mode\"]);\n          }\n        }\n        for (const feedback of codec.rtcpFeedback || []) {\n          if (!feedback.parameter) {\n            feedback.parameter = \"\";\n          }\n        }\n      }\n      return caps;\n    }\n    exports.getCapabilities = getCapabilities;\n    function mangleRtpParameters(rtpParameters) {\n      const params = utils.clone(rtpParameters, {});\n      if (params.mid) {\n        params.muxId = params.mid;\n        delete params.mid;\n      }\n      for (const codec of params.codecs) {\n        if (codec.channels) {\n          codec.numChannels = codec.channels;\n          delete codec.channels;\n        }\n        if (codec.mimeType && !codec.name) {\n          codec.name = codec.mimeType.split(\"/\")[1];\n        }\n        delete codec.mimeType;\n      }\n      return params;\n    }\n    exports.mangleRtpParameters = mangleRtpParameters;\n  }\n});\n\n// ../../node_modules/mediasoup-client/lib/handlers/Edge11.js\nvar require_Edge11 = __commonJS({\n  \"../../node_modules/mediasoup-client/lib/handlers/Edge11.js\"(exports) {\n    \"use strict\";\n    init_process();\n    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {\n      if (k2 === void 0)\n        k2 = k;\n      var desc = Object.getOwnPropertyDescriptor(m, k);\n      if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n        desc = { enumerable: true, get: function() {\n          return m[k];\n        } };\n      }\n      Object.defineProperty(o2, k2, desc);\n    } : function(o2, m, k, k2) {\n      if (k2 === void 0)\n        k2 = k;\n      o2[k2] = m[k];\n    });\n    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {\n      Object.defineProperty(o2, \"default\", { enumerable: true, value: v });\n    } : function(o2, v) {\n      o2[\"default\"] = v;\n    });\n    var __importStar = exports && exports.__importStar || function(mod) {\n      if (mod && mod.__esModule)\n        return mod;\n      var result2 = {};\n      if (mod != null) {\n        for (var k in mod)\n          if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k))\n            __createBinding(result2, mod, k);\n      }\n      __setModuleDefault(result2, mod);\n      return result2;\n    };\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.Edge11 = void 0;\n    var Logger_1 = require_Logger();\n    var errors_1 = require_errors();\n    var utils = __importStar(require_utils2());\n    var ortc = __importStar(require_ortc());\n    var edgeUtils = __importStar(require_edgeUtils());\n    var HandlerInterface_1 = require_HandlerInterface();\n    var logger2 = new Logger_1.Logger(\"Edge11\");\n    var Edge11 = class extends HandlerInterface_1.HandlerInterface {\n      static createFactory() {\n        return () => new Edge11();\n      }\n      constructor() {\n        super();\n        this._rtpSenders = /* @__PURE__ */ new Map();\n        this._rtpReceivers = /* @__PURE__ */ new Map();\n        this._nextSendLocalId = 0;\n        this._transportReady = false;\n      }\n      get name() {\n        return \"Edge11\";\n      }\n      close() {\n        logger2.debug(\"close()\");\n        try {\n          this._iceGatherer.close();\n        } catch (error) {\n        }\n        try {\n          this._iceTransport.stop();\n        } catch (error) {\n        }\n        try {\n          this._dtlsTransport.stop();\n        } catch (error) {\n        }\n        for (const rtpSender of this._rtpSenders.values()) {\n          try {\n            rtpSender.stop();\n          } catch (error) {\n          }\n        }\n        for (const rtpReceiver of this._rtpReceivers.values()) {\n          try {\n            rtpReceiver.stop();\n          } catch (error) {\n          }\n        }\n        this.emit(\"@close\");\n      }\n      getNativeRtpCapabilities() {\n        return __async(this, null, function* () {\n          logger2.debug(\"getNativeRtpCapabilities()\");\n          return edgeUtils.getCapabilities();\n        });\n      }\n      getNativeSctpCapabilities() {\n        return __async(this, null, function* () {\n          logger2.debug(\"getNativeSctpCapabilities()\");\n          return {\n            numStreams: { OS: 0, MIS: 0 }\n          };\n        });\n      }\n      run({\n        direction,\n        iceParameters,\n        iceCandidates,\n        dtlsParameters,\n        sctpParameters,\n        iceServers,\n        iceTransportPolicy,\n        additionalSettings,\n        proprietaryConstraints,\n        extendedRtpCapabilities\n      }) {\n        logger2.debug(\"run()\");\n        this._sendingRtpParametersByKind = {\n          audio: ortc.getSendingRtpParameters(\"audio\", extendedRtpCapabilities),\n          video: ortc.getSendingRtpParameters(\"video\", extendedRtpCapabilities)\n        };\n        this._remoteIceParameters = iceParameters;\n        this._remoteIceCandidates = iceCandidates;\n        this._remoteDtlsParameters = dtlsParameters;\n        this._cname = `CNAME-${utils.generateRandomNumber()}`;\n        this.setIceGatherer({ iceServers, iceTransportPolicy });\n        this.setIceTransport();\n        this.setDtlsTransport();\n      }\n      updateIceServers(iceServers) {\n        return __async(this, null, function* () {\n          throw new errors_1.UnsupportedError(\"not supported\");\n        });\n      }\n      restartIce(iceParameters) {\n        return __async(this, null, function* () {\n          logger2.debug(\"restartIce()\");\n          this._remoteIceParameters = iceParameters;\n          if (!this._transportReady) {\n            return;\n          }\n          logger2.debug(\"restartIce() | calling iceTransport.start()\");\n          this._iceTransport.start(this._iceGatherer, iceParameters, \"controlling\");\n          for (const candidate of this._remoteIceCandidates) {\n            this._iceTransport.addRemoteCandidate(candidate);\n          }\n          this._iceTransport.addRemoteCandidate({});\n        });\n      }\n      getTransportStats() {\n        return __async(this, null, function* () {\n          return this._iceTransport.getStats();\n        });\n      }\n      send(_0) {\n        return __async(this, arguments, function* ({ track, encodings, codecOptions, codec }) {\n          logger2.debug(\"send() [kind:%s, track.id:%s]\", track.kind, track.id);\n          if (!this._transportReady) {\n            yield this.setupTransport({ localDtlsRole: \"server\" });\n          }\n          logger2.debug(\"send() | calling new RTCRtpSender()\");\n          const rtpSender = new RTCRtpSender(track, this._dtlsTransport);\n          const rtpParameters = utils.clone(this._sendingRtpParametersByKind[track.kind], {});\n          rtpParameters.codecs = ortc.reduceCodecs(rtpParameters.codecs, codec);\n          const useRtx = rtpParameters.codecs.some((_codec) => /.+\\/rtx$/i.test(_codec.mimeType));\n          if (!encodings) {\n            encodings = [{}];\n          }\n          for (const encoding of encodings) {\n            encoding.ssrc = utils.generateRandomNumber();\n            if (useRtx) {\n              encoding.rtx = { ssrc: utils.generateRandomNumber() };\n            }\n          }\n          rtpParameters.encodings = encodings;\n          rtpParameters.rtcp = {\n            cname: this._cname,\n            reducedSize: true,\n            mux: true\n          };\n          const edgeRtpParameters = edgeUtils.mangleRtpParameters(rtpParameters);\n          logger2.debug(\"send() | calling rtpSender.send() [params:%o]\", edgeRtpParameters);\n          yield rtpSender.send(edgeRtpParameters);\n          const localId = String(this._nextSendLocalId);\n          this._nextSendLocalId++;\n          this._rtpSenders.set(localId, rtpSender);\n          return { localId, rtpParameters, rtpSender };\n        });\n      }\n      stopSending(localId) {\n        return __async(this, null, function* () {\n          logger2.debug(\"stopSending() [localId:%s]\", localId);\n          const rtpSender = this._rtpSenders.get(localId);\n          if (!rtpSender) {\n            throw new Error(\"RTCRtpSender not found\");\n          }\n          this._rtpSenders.delete(localId);\n          try {\n            logger2.debug(\"stopSending() | calling rtpSender.stop()\");\n            rtpSender.stop();\n          } catch (error) {\n            logger2.warn(\"stopSending() | rtpSender.stop() failed:%o\", error);\n            throw error;\n          }\n        });\n      }\n      pauseSending(localId) {\n        return __async(this, null, function* () {\n        });\n      }\n      resumeSending(localId) {\n        return __async(this, null, function* () {\n        });\n      }\n      replaceTrack(localId, track) {\n        return __async(this, null, function* () {\n          if (track) {\n            logger2.debug(\"replaceTrack() [localId:%s, track.id:%s]\", localId, track.id);\n          } else {\n            logger2.debug(\"replaceTrack() [localId:%s, no track]\", localId);\n          }\n          const rtpSender = this._rtpSenders.get(localId);\n          if (!rtpSender) {\n            throw new Error(\"RTCRtpSender not found\");\n          }\n          rtpSender.setTrack(track);\n        });\n      }\n      setMaxSpatialLayer(localId, spatialLayer) {\n        return __async(this, null, function* () {\n          logger2.debug(\"setMaxSpatialLayer() [localId:%s, spatialLayer:%s]\", localId, spatialLayer);\n          const rtpSender = this._rtpSenders.get(localId);\n          if (!rtpSender) {\n            throw new Error(\"RTCRtpSender not found\");\n          }\n          const parameters = rtpSender.getParameters();\n          parameters.encodings.forEach((encoding, idx) => {\n            if (idx <= spatialLayer) {\n              encoding.active = true;\n            } else {\n              encoding.active = false;\n            }\n          });\n          yield rtpSender.setParameters(parameters);\n        });\n      }\n      setRtpEncodingParameters(localId, params) {\n        return __async(this, null, function* () {\n          logger2.debug(\"setRtpEncodingParameters() [localId:%s, params:%o]\", localId, params);\n          const rtpSender = this._rtpSenders.get(localId);\n          if (!rtpSender) {\n            throw new Error(\"RTCRtpSender not found\");\n          }\n          const parameters = rtpSender.getParameters();\n          parameters.encodings.forEach((encoding, idx) => {\n            parameters.encodings[idx] = __spreadValues(__spreadValues({}, encoding), params);\n          });\n          yield rtpSender.setParameters(parameters);\n        });\n      }\n      getSenderStats(localId) {\n        return __async(this, null, function* () {\n          const rtpSender = this._rtpSenders.get(localId);\n          if (!rtpSender) {\n            throw new Error(\"RTCRtpSender not found\");\n          }\n          return rtpSender.getStats();\n        });\n      }\n      sendDataChannel(options) {\n        return __async(this, null, function* () {\n          throw new errors_1.UnsupportedError(\"not implemented\");\n        });\n      }\n      receive(optionsList) {\n        return __async(this, null, function* () {\n          const results = [];\n          for (const options of optionsList) {\n            const { trackId, kind } = options;\n            logger2.debug(\"receive() [trackId:%s, kind:%s]\", trackId, kind);\n          }\n          if (!this._transportReady) {\n            yield this.setupTransport({ localDtlsRole: \"server\" });\n          }\n          for (const options of optionsList) {\n            const { trackId, kind, rtpParameters } = options;\n            logger2.debug(\"receive() | calling new RTCRtpReceiver()\");\n            const rtpReceiver = new RTCRtpReceiver(this._dtlsTransport, kind);\n            rtpReceiver.addEventListener(\"error\", (event) => {\n              logger2.error('rtpReceiver \"error\" event [event:%o]', event);\n            });\n            const edgeRtpParameters = edgeUtils.mangleRtpParameters(rtpParameters);\n            logger2.debug(\"receive() | calling rtpReceiver.receive() [params:%o]\", edgeRtpParameters);\n            yield rtpReceiver.receive(edgeRtpParameters);\n            const localId = trackId;\n            this._rtpReceivers.set(localId, rtpReceiver);\n            results.push({\n              localId,\n              track: rtpReceiver.track,\n              rtpReceiver\n            });\n          }\n          return results;\n        });\n      }\n      stopReceiving(localIds) {\n        return __async(this, null, function* () {\n          for (const localId of localIds) {\n            logger2.debug(\"stopReceiving() [localId:%s]\", localId);\n            const rtpReceiver = this._rtpReceivers.get(localId);\n            if (!rtpReceiver) {\n              throw new Error(\"RTCRtpReceiver not found\");\n            }\n            this._rtpReceivers.delete(localId);\n            try {\n              logger2.debug(\"stopReceiving() | calling rtpReceiver.stop()\");\n              rtpReceiver.stop();\n            } catch (error) {\n              logger2.warn(\"stopReceiving() | rtpReceiver.stop() failed:%o\", error);\n            }\n          }\n        });\n      }\n      pauseReceiving(localIds) {\n        return __async(this, null, function* () {\n        });\n      }\n      resumeReceiving(localIds) {\n        return __async(this, null, function* () {\n        });\n      }\n      getReceiverStats(localId) {\n        return __async(this, null, function* () {\n          const rtpReceiver = this._rtpReceivers.get(localId);\n          if (!rtpReceiver) {\n            throw new Error(\"RTCRtpReceiver not found\");\n          }\n          return rtpReceiver.getStats();\n        });\n      }\n      receiveDataChannel(options) {\n        return __async(this, null, function* () {\n          throw new errors_1.UnsupportedError(\"not implemented\");\n        });\n      }\n      setIceGatherer({ iceServers, iceTransportPolicy }) {\n        const iceGatherer = new RTCIceGatherer({\n          iceServers: iceServers || [],\n          gatherPolicy: iceTransportPolicy || \"all\"\n        });\n        iceGatherer.addEventListener(\"error\", (event) => {\n          logger2.error('iceGatherer \"error\" event [event:%o]', event);\n        });\n        try {\n          iceGatherer.gather();\n        } catch (error) {\n          logger2.debug(\"setIceGatherer() | iceGatherer.gather() failed: %s\", error.toString());\n        }\n        this._iceGatherer = iceGatherer;\n      }\n      setIceTransport() {\n        const iceTransport = new RTCIceTransport(this._iceGatherer);\n        iceTransport.addEventListener(\"statechange\", () => {\n          switch (iceTransport.state) {\n            case \"checking\":\n              this.emit(\"@connectionstatechange\", \"connecting\");\n              break;\n            case \"connected\":\n            case \"completed\":\n              this.emit(\"@connectionstatechange\", \"connected\");\n              break;\n            case \"failed\":\n              this.emit(\"@connectionstatechange\", \"failed\");\n              break;\n            case \"disconnected\":\n              this.emit(\"@connectionstatechange\", \"disconnected\");\n              break;\n            case \"closed\":\n              this.emit(\"@connectionstatechange\", \"closed\");\n              break;\n          }\n        });\n        iceTransport.addEventListener(\"icestatechange\", () => {\n          switch (iceTransport.state) {\n            case \"checking\":\n              this.emit(\"@connectionstatechange\", \"connecting\");\n              break;\n            case \"connected\":\n            case \"completed\":\n              this.emit(\"@connectionstatechange\", \"connected\");\n              break;\n            case \"failed\":\n              this.emit(\"@connectionstatechange\", \"failed\");\n              break;\n            case \"disconnected\":\n              this.emit(\"@connectionstatechange\", \"disconnected\");\n              break;\n            case \"closed\":\n              this.emit(\"@connectionstatechange\", \"closed\");\n              break;\n          }\n        });\n        iceTransport.addEventListener(\"candidatepairchange\", (event) => {\n          logger2.debug('iceTransport \"candidatepairchange\" event [pair:%o]', event.pair);\n        });\n        this._iceTransport = iceTransport;\n      }\n      setDtlsTransport() {\n        const dtlsTransport = new RTCDtlsTransport(this._iceTransport);\n        dtlsTransport.addEventListener(\"statechange\", () => {\n          logger2.debug('dtlsTransport \"statechange\" event [state:%s]', dtlsTransport.state);\n        });\n        dtlsTransport.addEventListener(\"dtlsstatechange\", () => {\n          logger2.debug('dtlsTransport \"dtlsstatechange\" event [state:%s]', dtlsTransport.state);\n          if (dtlsTransport.state === \"closed\") {\n            this.emit(\"@connectionstatechange\", \"closed\");\n          }\n        });\n        dtlsTransport.addEventListener(\"error\", (event) => {\n          logger2.error('dtlsTransport \"error\" event [event:%o]', event);\n        });\n        this._dtlsTransport = dtlsTransport;\n      }\n      setupTransport(_0) {\n        return __async(this, arguments, function* ({ localDtlsRole }) {\n          logger2.debug(\"setupTransport()\");\n          const dtlsParameters = this._dtlsTransport.getLocalParameters();\n          dtlsParameters.role = localDtlsRole;\n          yield new Promise((resolve, reject) => {\n            this.safeEmit(\"@connect\", { dtlsParameters }, resolve, reject);\n          });\n          this._iceTransport.start(this._iceGatherer, this._remoteIceParameters, \"controlling\");\n          for (const candidate of this._remoteIceCandidates) {\n            this._iceTransport.addRemoteCandidate(candidate);\n          }\n          this._iceTransport.addRemoteCandidate({});\n          this._remoteDtlsParameters.fingerprints = this._remoteDtlsParameters.fingerprints.filter((fingerprint) => {\n            return fingerprint.algorithm === \"sha-256\" || fingerprint.algorithm === \"sha-384\" || fingerprint.algorithm === \"sha-512\";\n          });\n          this._dtlsTransport.start(this._remoteDtlsParameters);\n          this._transportReady = true;\n        });\n      }\n    };\n    exports.Edge11 = Edge11;\n  }\n});\n\n// ../../node_modules/mediasoup-client/lib/handlers/ReactNativeUnifiedPlan.js\nvar require_ReactNativeUnifiedPlan = __commonJS({\n  \"../../node_modules/mediasoup-client/lib/handlers/ReactNativeUnifiedPlan.js\"(exports) {\n    \"use strict\";\n    init_process();\n    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {\n      if (k2 === void 0)\n        k2 = k;\n      var desc = Object.getOwnPropertyDescriptor(m, k);\n      if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n        desc = { enumerable: true, get: function() {\n          return m[k];\n        } };\n      }\n      Object.defineProperty(o2, k2, desc);\n    } : function(o2, m, k, k2) {\n      if (k2 === void 0)\n        k2 = k;\n      o2[k2] = m[k];\n    });\n    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {\n      Object.defineProperty(o2, \"default\", { enumerable: true, value: v });\n    } : function(o2, v) {\n      o2[\"default\"] = v;\n    });\n    var __importStar = exports && exports.__importStar || function(mod) {\n      if (mod && mod.__esModule)\n        return mod;\n      var result2 = {};\n      if (mod != null) {\n        for (var k in mod)\n          if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k))\n            __createBinding(result2, mod, k);\n      }\n      __setModuleDefault(result2, mod);\n      return result2;\n    };\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.ReactNativeUnifiedPlan = void 0;\n    var sdpTransform4 = __importStar(require_lib());\n    var Logger_1 = require_Logger();\n    var utils = __importStar(require_utils2());\n    var ortc = __importStar(require_ortc());\n    var sdpCommonUtils = __importStar(require_commonUtils());\n    var sdpUnifiedPlanUtils = __importStar(require_unifiedPlanUtils());\n    var ortcUtils = __importStar(require_utils3());\n    var HandlerInterface_1 = require_HandlerInterface();\n    var RemoteSdp_1 = require_RemoteSdp();\n    var scalabilityModes_1 = require_scalabilityModes();\n    var logger2 = new Logger_1.Logger(\"ReactNativeUnifiedPlan\");\n    var SCTP_NUM_STREAMS = { OS: 1024, MIS: 1024 };\n    var ReactNativeUnifiedPlan = class extends HandlerInterface_1.HandlerInterface {\n      static createFactory() {\n        return () => new ReactNativeUnifiedPlan();\n      }\n      constructor() {\n        super();\n        this._mapMidTransceiver = /* @__PURE__ */ new Map();\n        this._sendStream = new MediaStream();\n        this._hasDataChannelMediaSection = false;\n        this._nextSendSctpStreamId = 0;\n        this._transportReady = false;\n      }\n      get name() {\n        return \"ReactNativeUnifiedPlan\";\n      }\n      close() {\n        logger2.debug(\"close()\");\n        this._sendStream.release(false);\n        if (this._pc) {\n          try {\n            this._pc.close();\n          } catch (error) {\n          }\n        }\n        this.emit(\"@close\");\n      }\n      getNativeRtpCapabilities() {\n        return __async(this, null, function* () {\n          logger2.debug(\"getNativeRtpCapabilities()\");\n          const pc = new RTCPeerConnection({\n            iceServers: [],\n            iceTransportPolicy: \"all\",\n            bundlePolicy: \"max-bundle\",\n            rtcpMuxPolicy: \"require\",\n            sdpSemantics: \"unified-plan\"\n          });\n          try {\n            pc.addTransceiver(\"audio\");\n            pc.addTransceiver(\"video\");\n            const offer = yield pc.createOffer();\n            try {\n              pc.close();\n            } catch (error) {\n            }\n            const sdpObject = sdpTransform4.parse(offer.sdp);\n            const nativeRtpCapabilities = sdpCommonUtils.extractRtpCapabilities({ sdpObject });\n            ortcUtils.addNackSuppportForOpus(nativeRtpCapabilities);\n            return nativeRtpCapabilities;\n          } catch (error) {\n            try {\n              pc.close();\n            } catch (error2) {\n            }\n            throw error;\n          }\n        });\n      }\n      getNativeSctpCapabilities() {\n        return __async(this, null, function* () {\n          logger2.debug(\"getNativeSctpCapabilities()\");\n          return {\n            numStreams: SCTP_NUM_STREAMS\n          };\n        });\n      }\n      run({ direction, iceParameters, iceCandidates, dtlsParameters, sctpParameters, iceServers, iceTransportPolicy, additionalSettings, proprietaryConstraints, extendedRtpCapabilities }) {\n        logger2.debug(\"run()\");\n        this._direction = direction;\n        this._remoteSdp = new RemoteSdp_1.RemoteSdp({\n          iceParameters,\n          iceCandidates,\n          dtlsParameters,\n          sctpParameters\n        });\n        this._sendingRtpParametersByKind = {\n          audio: ortc.getSendingRtpParameters(\"audio\", extendedRtpCapabilities),\n          video: ortc.getSendingRtpParameters(\"video\", extendedRtpCapabilities)\n        };\n        this._sendingRemoteRtpParametersByKind = {\n          audio: ortc.getSendingRemoteRtpParameters(\"audio\", extendedRtpCapabilities),\n          video: ortc.getSendingRemoteRtpParameters(\"video\", extendedRtpCapabilities)\n        };\n        if (dtlsParameters.role && dtlsParameters.role !== \"auto\") {\n          this._forcedLocalDtlsRole = dtlsParameters.role === \"server\" ? \"client\" : \"server\";\n        }\n        this._pc = new RTCPeerConnection(__spreadValues({\n          iceServers: iceServers || [],\n          iceTransportPolicy: iceTransportPolicy || \"all\",\n          bundlePolicy: \"max-bundle\",\n          rtcpMuxPolicy: \"require\",\n          sdpSemantics: \"unified-plan\"\n        }, additionalSettings), proprietaryConstraints);\n        if (this._pc.connectionState) {\n          this._pc.addEventListener(\"connectionstatechange\", () => {\n            this.emit(\"@connectionstatechange\", this._pc.connectionState);\n          });\n        } else {\n          this._pc.addEventListener(\"iceconnectionstatechange\", () => {\n            logger2.warn(\"run() | pc.connectionState not supported, using pc.iceConnectionState\");\n            switch (this._pc.iceConnectionState) {\n              case \"checking\":\n                this.emit(\"@connectionstatechange\", \"connecting\");\n                break;\n              case \"connected\":\n              case \"completed\":\n                this.emit(\"@connectionstatechange\", \"connected\");\n                break;\n              case \"failed\":\n                this.emit(\"@connectionstatechange\", \"failed\");\n                break;\n              case \"disconnected\":\n                this.emit(\"@connectionstatechange\", \"disconnected\");\n                break;\n              case \"closed\":\n                this.emit(\"@connectionstatechange\", \"closed\");\n                break;\n            }\n          });\n        }\n      }\n      updateIceServers(iceServers) {\n        return __async(this, null, function* () {\n          logger2.debug(\"updateIceServers()\");\n          const configuration = this._pc.getConfiguration();\n          configuration.iceServers = iceServers;\n          this._pc.setConfiguration(configuration);\n        });\n      }\n      restartIce(iceParameters) {\n        return __async(this, null, function* () {\n          logger2.debug(\"restartIce()\");\n          this._remoteSdp.updateIceParameters(iceParameters);\n          if (!this._transportReady) {\n            return;\n          }\n          if (this._direction === \"send\") {\n            const offer = yield this._pc.createOffer({ iceRestart: true });\n            logger2.debug(\"restartIce() | calling pc.setLocalDescription() [offer:%o]\", offer);\n            yield this._pc.setLocalDescription(offer);\n            const answer = { type: \"answer\", sdp: this._remoteSdp.getSdp() };\n            logger2.debug(\"restartIce() | calling pc.setRemoteDescription() [answer:%o]\", answer);\n            yield this._pc.setRemoteDescription(answer);\n          } else {\n            const offer = { type: \"offer\", sdp: this._remoteSdp.getSdp() };\n            logger2.debug(\"restartIce() | calling pc.setRemoteDescription() [offer:%o]\", offer);\n            yield this._pc.setRemoteDescription(offer);\n            const answer = yield this._pc.createAnswer();\n            logger2.debug(\"restartIce() | calling pc.setLocalDescription() [answer:%o]\", answer);\n            yield this._pc.setLocalDescription(answer);\n          }\n        });\n      }\n      getTransportStats() {\n        return __async(this, null, function* () {\n          return this._pc.getStats();\n        });\n      }\n      send(_0) {\n        return __async(this, arguments, function* ({ track, encodings, codecOptions, codec }) {\n          var _a2;\n          this.assertSendDirection();\n          logger2.debug(\"send() [kind:%s, track.id:%s]\", track.kind, track.id);\n          if (encodings && encodings.length > 1) {\n            encodings.forEach((encoding, idx) => {\n              encoding.rid = `r${idx}`;\n            });\n          }\n          const sendingRtpParameters = utils.clone(this._sendingRtpParametersByKind[track.kind], {});\n          sendingRtpParameters.codecs = ortc.reduceCodecs(sendingRtpParameters.codecs, codec);\n          const sendingRemoteRtpParameters = utils.clone(this._sendingRemoteRtpParametersByKind[track.kind], {});\n          sendingRemoteRtpParameters.codecs = ortc.reduceCodecs(sendingRemoteRtpParameters.codecs, codec);\n          const mediaSectionIdx = this._remoteSdp.getNextMediaSectionIdx();\n          const transceiver = this._pc.addTransceiver(track, {\n            direction: \"sendonly\",\n            streams: [this._sendStream],\n            sendEncodings: encodings\n          });\n          let offer = yield this._pc.createOffer();\n          let localSdpObject = sdpTransform4.parse(offer.sdp);\n          let offerMediaObject;\n          if (!this._transportReady) {\n            yield this.setupTransport({\n              localDtlsRole: (_a2 = this._forcedLocalDtlsRole) !== null && _a2 !== void 0 ? _a2 : \"client\",\n              localSdpObject\n            });\n          }\n          let hackVp9Svc = false;\n          const layers = (0, scalabilityModes_1.parse)((encodings || [{}])[0].scalabilityMode);\n          if (encodings && encodings.length === 1 && layers.spatialLayers > 1 && sendingRtpParameters.codecs[0].mimeType.toLowerCase() === \"video/vp9\") {\n            logger2.debug(\"send() | enabling legacy simulcast for VP9 SVC\");\n            hackVp9Svc = true;\n            localSdpObject = sdpTransform4.parse(offer.sdp);\n            offerMediaObject = localSdpObject.media[mediaSectionIdx.idx];\n            sdpUnifiedPlanUtils.addLegacySimulcast({\n              offerMediaObject,\n              numStreams: layers.spatialLayers\n            });\n            offer = { type: \"offer\", sdp: sdpTransform4.write(localSdpObject) };\n          }\n          logger2.debug(\"send() | calling pc.setLocalDescription() [offer:%o]\", offer);\n          yield this._pc.setLocalDescription(offer);\n          const localId = transceiver.mid;\n          sendingRtpParameters.mid = localId;\n          localSdpObject = sdpTransform4.parse(this._pc.localDescription.sdp);\n          offerMediaObject = localSdpObject.media[mediaSectionIdx.idx];\n          sendingRtpParameters.rtcp.cname = sdpCommonUtils.getCname({ offerMediaObject });\n          if (!encodings) {\n            sendingRtpParameters.encodings = sdpUnifiedPlanUtils.getRtpEncodings({ offerMediaObject });\n          } else if (encodings.length === 1) {\n            let newEncodings = sdpUnifiedPlanUtils.getRtpEncodings({ offerMediaObject });\n            Object.assign(newEncodings[0], encodings[0]);\n            if (hackVp9Svc) {\n              newEncodings = [newEncodings[0]];\n            }\n            sendingRtpParameters.encodings = newEncodings;\n          } else {\n            sendingRtpParameters.encodings = encodings;\n          }\n          if (sendingRtpParameters.encodings.length > 1 && (sendingRtpParameters.codecs[0].mimeType.toLowerCase() === \"video/vp8\" || sendingRtpParameters.codecs[0].mimeType.toLowerCase() === \"video/h264\")) {\n            for (const encoding of sendingRtpParameters.encodings) {\n              if (encoding.scalabilityMode) {\n                encoding.scalabilityMode = `L1T${layers.temporalLayers}`;\n              } else {\n                encoding.scalabilityMode = \"L1T3\";\n              }\n            }\n          }\n          this._remoteSdp.send({\n            offerMediaObject,\n            reuseMid: mediaSectionIdx.reuseMid,\n            offerRtpParameters: sendingRtpParameters,\n            answerRtpParameters: sendingRemoteRtpParameters,\n            codecOptions,\n            extmapAllowMixed: true\n          });\n          const answer = { type: \"answer\", sdp: this._remoteSdp.getSdp() };\n          logger2.debug(\"send() | calling pc.setRemoteDescription() [answer:%o]\", answer);\n          yield this._pc.setRemoteDescription(answer);\n          this._mapMidTransceiver.set(localId, transceiver);\n          return {\n            localId,\n            rtpParameters: sendingRtpParameters,\n            rtpSender: transceiver.sender\n          };\n        });\n      }\n      stopSending(localId) {\n        return __async(this, null, function* () {\n          this.assertSendDirection();\n          logger2.debug(\"stopSending() [localId:%s]\", localId);\n          const transceiver = this._mapMidTransceiver.get(localId);\n          if (!transceiver) {\n            throw new Error(\"associated RTCRtpTransceiver not found\");\n          }\n          transceiver.sender.replaceTrack(null);\n          this._pc.removeTrack(transceiver.sender);\n          const mediaSectionClosed = this._remoteSdp.closeMediaSection(transceiver.mid);\n          if (mediaSectionClosed) {\n            try {\n              transceiver.stop();\n            } catch (error) {\n            }\n          }\n          const offer = yield this._pc.createOffer();\n          logger2.debug(\"stopSending() | calling pc.setLocalDescription() [offer:%o]\", offer);\n          yield this._pc.setLocalDescription(offer);\n          const answer = { type: \"answer\", sdp: this._remoteSdp.getSdp() };\n          logger2.debug(\"stopSending() | calling pc.setRemoteDescription() [answer:%o]\", answer);\n          yield this._pc.setRemoteDescription(answer);\n          this._mapMidTransceiver.delete(localId);\n        });\n      }\n      pauseSending(localId) {\n        return __async(this, null, function* () {\n          this.assertSendDirection();\n          logger2.debug(\"pauseSending() [localId:%s]\", localId);\n          const transceiver = this._mapMidTransceiver.get(localId);\n          if (!transceiver) {\n            throw new Error(\"associated RTCRtpTransceiver not found\");\n          }\n          transceiver.direction = \"inactive\";\n          this._remoteSdp.pauseMediaSection(localId);\n          const offer = yield this._pc.createOffer();\n          logger2.debug(\"pauseSending() | calling pc.setLocalDescription() [offer:%o]\", offer);\n          yield this._pc.setLocalDescription(offer);\n          const answer = { type: \"answer\", sdp: this._remoteSdp.getSdp() };\n          logger2.debug(\"pauseSending() | calling pc.setRemoteDescription() [answer:%o]\", answer);\n          yield this._pc.setRemoteDescription(answer);\n        });\n      }\n      resumeSending(localId) {\n        return __async(this, null, function* () {\n          this.assertSendDirection();\n          logger2.debug(\"resumeSending() [localId:%s]\", localId);\n          const transceiver = this._mapMidTransceiver.get(localId);\n          this._remoteSdp.resumeSendingMediaSection(localId);\n          if (!transceiver) {\n            throw new Error(\"associated RTCRtpTransceiver not found\");\n          }\n          transceiver.direction = \"sendonly\";\n          const offer = yield this._pc.createOffer();\n          logger2.debug(\"resumeSending() | calling pc.setLocalDescription() [offer:%o]\", offer);\n          yield this._pc.setLocalDescription(offer);\n          const answer = { type: \"answer\", sdp: this._remoteSdp.getSdp() };\n          logger2.debug(\"resumeSending() | calling pc.setRemoteDescription() [answer:%o]\", answer);\n          yield this._pc.setRemoteDescription(answer);\n        });\n      }\n      replaceTrack(localId, track) {\n        return __async(this, null, function* () {\n          this.assertSendDirection();\n          if (track) {\n            logger2.debug(\"replaceTrack() [localId:%s, track.id:%s]\", localId, track.id);\n          } else {\n            logger2.debug(\"replaceTrack() [localId:%s, no track]\", localId);\n          }\n          const transceiver = this._mapMidTransceiver.get(localId);\n          if (!transceiver) {\n            throw new Error(\"associated RTCRtpTransceiver not found\");\n          }\n          yield transceiver.sender.replaceTrack(track);\n        });\n      }\n      setMaxSpatialLayer(localId, spatialLayer) {\n        return __async(this, null, function* () {\n          this.assertSendDirection();\n          logger2.debug(\"setMaxSpatialLayer() [localId:%s, spatialLayer:%s]\", localId, spatialLayer);\n          const transceiver = this._mapMidTransceiver.get(localId);\n          if (!transceiver) {\n            throw new Error(\"associated RTCRtpTransceiver not found\");\n          }\n          const parameters = transceiver.sender.getParameters();\n          parameters.encodings.forEach((encoding, idx) => {\n            if (idx <= spatialLayer) {\n              encoding.active = true;\n            } else {\n              encoding.active = false;\n            }\n          });\n          yield transceiver.sender.setParameters(parameters);\n          this._remoteSdp.muxMediaSectionSimulcast(localId, parameters.encodings);\n          const offer = yield this._pc.createOffer();\n          logger2.debug(\"setMaxSpatialLayer() | calling pc.setLocalDescription() [offer:%o]\", offer);\n          yield this._pc.setLocalDescription(offer);\n          const answer = { type: \"answer\", sdp: this._remoteSdp.getSdp() };\n          logger2.debug(\"setMaxSpatialLayer() | calling pc.setRemoteDescription() [answer:%o]\", answer);\n          yield this._pc.setRemoteDescription(answer);\n        });\n      }\n      setRtpEncodingParameters(localId, params) {\n        return __async(this, null, function* () {\n          this.assertSendDirection();\n          logger2.debug(\"setRtpEncodingParameters() [localId:%s, params:%o]\", localId, params);\n          const transceiver = this._mapMidTransceiver.get(localId);\n          if (!transceiver) {\n            throw new Error(\"associated RTCRtpTransceiver not found\");\n          }\n          const parameters = transceiver.sender.getParameters();\n          parameters.encodings.forEach((encoding, idx) => {\n            parameters.encodings[idx] = __spreadValues(__spreadValues({}, encoding), params);\n          });\n          yield transceiver.sender.setParameters(parameters);\n          this._remoteSdp.muxMediaSectionSimulcast(localId, parameters.encodings);\n          const offer = yield this._pc.createOffer();\n          logger2.debug(\"setRtpEncodingParameters() | calling pc.setLocalDescription() [offer:%o]\", offer);\n          yield this._pc.setLocalDescription(offer);\n          const answer = { type: \"answer\", sdp: this._remoteSdp.getSdp() };\n          logger2.debug(\"setRtpEncodingParameters() | calling pc.setRemoteDescription() [answer:%o]\", answer);\n          yield this._pc.setRemoteDescription(answer);\n        });\n      }\n      getSenderStats(localId) {\n        return __async(this, null, function* () {\n          this.assertSendDirection();\n          const transceiver = this._mapMidTransceiver.get(localId);\n          if (!transceiver) {\n            throw new Error(\"associated RTCRtpTransceiver not found\");\n          }\n          return transceiver.sender.getStats();\n        });\n      }\n      sendDataChannel(_0) {\n        return __async(this, arguments, function* ({ ordered, maxPacketLifeTime, maxRetransmits, label, protocol }) {\n          var _a2;\n          this.assertSendDirection();\n          const options = {\n            negotiated: true,\n            id: this._nextSendSctpStreamId,\n            ordered,\n            maxPacketLifeTime,\n            maxRetransmits,\n            protocol\n          };\n          logger2.debug(\"sendDataChannel() [options:%o]\", options);\n          const dataChannel = this._pc.createDataChannel(label, options);\n          this._nextSendSctpStreamId = ++this._nextSendSctpStreamId % SCTP_NUM_STREAMS.MIS;\n          if (!this._hasDataChannelMediaSection) {\n            const offer = yield this._pc.createOffer();\n            const localSdpObject = sdpTransform4.parse(offer.sdp);\n            const offerMediaObject = localSdpObject.media.find((m) => m.type === \"application\");\n            if (!this._transportReady) {\n              yield this.setupTransport({\n                localDtlsRole: (_a2 = this._forcedLocalDtlsRole) !== null && _a2 !== void 0 ? _a2 : \"client\",\n                localSdpObject\n              });\n            }\n            logger2.debug(\"sendDataChannel() | calling pc.setLocalDescription() [offer:%o]\", offer);\n            yield this._pc.setLocalDescription(offer);\n            this._remoteSdp.sendSctpAssociation({ offerMediaObject });\n            const answer = { type: \"answer\", sdp: this._remoteSdp.getSdp() };\n            logger2.debug(\"sendDataChannel() | calling pc.setRemoteDescription() [answer:%o]\", answer);\n            yield this._pc.setRemoteDescription(answer);\n            this._hasDataChannelMediaSection = true;\n          }\n          const sctpStreamParameters = {\n            streamId: options.id,\n            ordered: options.ordered,\n            maxPacketLifeTime: options.maxPacketLifeTime,\n            maxRetransmits: options.maxRetransmits\n          };\n          return { dataChannel, sctpStreamParameters };\n        });\n      }\n      receive(optionsList) {\n        return __async(this, null, function* () {\n          var _a2;\n          this.assertRecvDirection();\n          const results = [];\n          const mapLocalId = /* @__PURE__ */ new Map();\n          for (const options of optionsList) {\n            const { trackId, kind, rtpParameters, streamId } = options;\n            logger2.debug(\"receive() [trackId:%s, kind:%s]\", trackId, kind);\n            const localId = rtpParameters.mid || String(this._mapMidTransceiver.size);\n            mapLocalId.set(trackId, localId);\n            this._remoteSdp.receive({\n              mid: localId,\n              kind,\n              offerRtpParameters: rtpParameters,\n              streamId: streamId || rtpParameters.rtcp.cname,\n              trackId\n            });\n          }\n          const offer = { type: \"offer\", sdp: this._remoteSdp.getSdp() };\n          logger2.debug(\"receive() | calling pc.setRemoteDescription() [offer:%o]\", offer);\n          yield this._pc.setRemoteDescription(offer);\n          let answer = yield this._pc.createAnswer();\n          const localSdpObject = sdpTransform4.parse(answer.sdp);\n          for (const options of optionsList) {\n            const { trackId, rtpParameters } = options;\n            const localId = mapLocalId.get(trackId);\n            const answerMediaObject = localSdpObject.media.find((m) => String(m.mid) === localId);\n            sdpCommonUtils.applyCodecParameters({\n              offerRtpParameters: rtpParameters,\n              answerMediaObject\n            });\n          }\n          answer = { type: \"answer\", sdp: sdpTransform4.write(localSdpObject) };\n          if (!this._transportReady) {\n            yield this.setupTransport({\n              localDtlsRole: (_a2 = this._forcedLocalDtlsRole) !== null && _a2 !== void 0 ? _a2 : \"client\",\n              localSdpObject\n            });\n          }\n          logger2.debug(\"receive() | calling pc.setLocalDescription() [answer:%o]\", answer);\n          yield this._pc.setLocalDescription(answer);\n          for (const options of optionsList) {\n            const { trackId } = options;\n            const localId = mapLocalId.get(trackId);\n            const transceiver = this._pc.getTransceivers().find((t2) => t2.mid === localId);\n            if (!transceiver) {\n              throw new Error(\"new RTCRtpTransceiver not found\");\n            } else {\n              this._mapMidTransceiver.set(localId, transceiver);\n              results.push({\n                localId,\n                track: transceiver.receiver.track,\n                rtpReceiver: transceiver.receiver\n              });\n            }\n          }\n          return results;\n        });\n      }\n      stopReceiving(localIds) {\n        return __async(this, null, function* () {\n          this.assertRecvDirection();\n          for (const localId of localIds) {\n            logger2.debug(\"stopReceiving() [localId:%s]\", localId);\n            const transceiver = this._mapMidTransceiver.get(localId);\n            if (!transceiver) {\n              throw new Error(\"associated RTCRtpTransceiver not found\");\n            }\n            this._remoteSdp.closeMediaSection(transceiver.mid);\n          }\n          const offer = { type: \"offer\", sdp: this._remoteSdp.getSdp() };\n          logger2.debug(\"stopReceiving() | calling pc.setRemoteDescription() [offer:%o]\", offer);\n          yield this._pc.setRemoteDescription(offer);\n          const answer = yield this._pc.createAnswer();\n          logger2.debug(\"stopReceiving() | calling pc.setLocalDescription() [answer:%o]\", answer);\n          yield this._pc.setLocalDescription(answer);\n          for (const localId of localIds) {\n            this._mapMidTransceiver.delete(localId);\n          }\n        });\n      }\n      pauseReceiving(localIds) {\n        return __async(this, null, function* () {\n          this.assertRecvDirection();\n          for (const localId of localIds) {\n            logger2.debug(\"pauseReceiving() [localId:%s]\", localId);\n            const transceiver = this._mapMidTransceiver.get(localId);\n            if (!transceiver) {\n              throw new Error(\"associated RTCRtpTransceiver not found\");\n            }\n            transceiver.direction = \"inactive\";\n            this._remoteSdp.pauseMediaSection(localId);\n          }\n          const offer = { type: \"offer\", sdp: this._remoteSdp.getSdp() };\n          logger2.debug(\"pauseReceiving() | calling pc.setRemoteDescription() [offer:%o]\", offer);\n          yield this._pc.setRemoteDescription(offer);\n          const answer = yield this._pc.createAnswer();\n          logger2.debug(\"pauseReceiving() | calling pc.setLocalDescription() [answer:%o]\", answer);\n          yield this._pc.setLocalDescription(answer);\n        });\n      }\n      resumeReceiving(localIds) {\n        return __async(this, null, function* () {\n          this.assertRecvDirection();\n          for (const localId of localIds) {\n            logger2.debug(\"resumeReceiving() [localId:%s]\", localId);\n            const transceiver = this._mapMidTransceiver.get(localId);\n            if (!transceiver) {\n              throw new Error(\"associated RTCRtpTransceiver not found\");\n            }\n            transceiver.direction = \"recvonly\";\n            this._remoteSdp.resumeReceivingMediaSection(localId);\n          }\n          const offer = { type: \"offer\", sdp: this._remoteSdp.getSdp() };\n          logger2.debug(\"resumeReceiving() | calling pc.setRemoteDescription() [offer:%o]\", offer);\n          yield this._pc.setRemoteDescription(offer);\n          const answer = yield this._pc.createAnswer();\n          logger2.debug(\"resumeReceiving() | calling pc.setLocalDescription() [answer:%o]\", answer);\n          yield this._pc.setLocalDescription(answer);\n        });\n      }\n      getReceiverStats(localId) {\n        return __async(this, null, function* () {\n          this.assertRecvDirection();\n          const transceiver = this._mapMidTransceiver.get(localId);\n          if (!transceiver) {\n            throw new Error(\"associated RTCRtpTransceiver not found\");\n          }\n          return transceiver.receiver.getStats();\n        });\n      }\n      receiveDataChannel(_0) {\n        return __async(this, arguments, function* ({ sctpStreamParameters, label, protocol }) {\n          var _a2;\n          this.assertRecvDirection();\n          const { streamId, ordered, maxPacketLifeTime, maxRetransmits } = sctpStreamParameters;\n          const options = {\n            negotiated: true,\n            id: streamId,\n            ordered,\n            maxPacketLifeTime,\n            maxRetransmits,\n            protocol\n          };\n          logger2.debug(\"receiveDataChannel() [options:%o]\", options);\n          const dataChannel = this._pc.createDataChannel(label, options);\n          if (!this._hasDataChannelMediaSection) {\n            this._remoteSdp.receiveSctpAssociation();\n            const offer = { type: \"offer\", sdp: this._remoteSdp.getSdp() };\n            logger2.debug(\"receiveDataChannel() | calling pc.setRemoteDescription() [offer:%o]\", offer);\n            yield this._pc.setRemoteDescription(offer);\n            const answer = yield this._pc.createAnswer();\n            if (!this._transportReady) {\n              const localSdpObject = sdpTransform4.parse(answer.sdp);\n              yield this.setupTransport({\n                localDtlsRole: (_a2 = this._forcedLocalDtlsRole) !== null && _a2 !== void 0 ? _a2 : \"client\",\n                localSdpObject\n              });\n            }\n            logger2.debug(\"receiveDataChannel() | calling pc.setRemoteDescription() [answer:%o]\", answer);\n            yield this._pc.setLocalDescription(answer);\n            this._hasDataChannelMediaSection = true;\n          }\n          return { dataChannel };\n        });\n      }\n      setupTransport(_0) {\n        return __async(this, arguments, function* ({ localDtlsRole, localSdpObject }) {\n          if (!localSdpObject) {\n            localSdpObject = sdpTransform4.parse(this._pc.localDescription.sdp);\n          }\n          const dtlsParameters = sdpCommonUtils.extractDtlsParameters({ sdpObject: localSdpObject });\n          dtlsParameters.role = localDtlsRole;\n          this._remoteSdp.updateDtlsRole(localDtlsRole === \"client\" ? \"server\" : \"client\");\n          yield new Promise((resolve, reject) => {\n            this.safeEmit(\"@connect\", { dtlsParameters }, resolve, reject);\n          });\n          this._transportReady = true;\n        });\n      }\n      assertSendDirection() {\n        if (this._direction !== \"send\") {\n          throw new Error('method can just be called for handlers with \"send\" direction');\n        }\n      }\n      assertRecvDirection() {\n        if (this._direction !== \"recv\") {\n          throw new Error('method can just be called for handlers with \"recv\" direction');\n        }\n      }\n    };\n    exports.ReactNativeUnifiedPlan = ReactNativeUnifiedPlan;\n  }\n});\n\n// ../../node_modules/mediasoup-client/lib/handlers/ReactNative.js\nvar require_ReactNative = __commonJS({\n  \"../../node_modules/mediasoup-client/lib/handlers/ReactNative.js\"(exports) {\n    \"use strict\";\n    init_process();\n    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {\n      if (k2 === void 0)\n        k2 = k;\n      var desc = Object.getOwnPropertyDescriptor(m, k);\n      if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n        desc = { enumerable: true, get: function() {\n          return m[k];\n        } };\n      }\n      Object.defineProperty(o2, k2, desc);\n    } : function(o2, m, k, k2) {\n      if (k2 === void 0)\n        k2 = k;\n      o2[k2] = m[k];\n    });\n    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {\n      Object.defineProperty(o2, \"default\", { enumerable: true, value: v });\n    } : function(o2, v) {\n      o2[\"default\"] = v;\n    });\n    var __importStar = exports && exports.__importStar || function(mod) {\n      if (mod && mod.__esModule)\n        return mod;\n      var result2 = {};\n      if (mod != null) {\n        for (var k in mod)\n          if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k))\n            __createBinding(result2, mod, k);\n      }\n      __setModuleDefault(result2, mod);\n      return result2;\n    };\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.ReactNative = void 0;\n    var sdpTransform4 = __importStar(require_lib());\n    var Logger_1 = require_Logger();\n    var errors_1 = require_errors();\n    var utils = __importStar(require_utils2());\n    var ortc = __importStar(require_ortc());\n    var sdpCommonUtils = __importStar(require_commonUtils());\n    var sdpPlanBUtils = __importStar(require_planBUtils());\n    var HandlerInterface_1 = require_HandlerInterface();\n    var RemoteSdp_1 = require_RemoteSdp();\n    var logger2 = new Logger_1.Logger(\"ReactNative\");\n    var SCTP_NUM_STREAMS = { OS: 1024, MIS: 1024 };\n    var ReactNative = class extends HandlerInterface_1.HandlerInterface {\n      static createFactory() {\n        return () => new ReactNative();\n      }\n      constructor() {\n        super();\n        this._sendStream = new MediaStream();\n        this._mapSendLocalIdTrack = /* @__PURE__ */ new Map();\n        this._nextSendLocalId = 0;\n        this._mapRecvLocalIdInfo = /* @__PURE__ */ new Map();\n        this._hasDataChannelMediaSection = false;\n        this._nextSendSctpStreamId = 0;\n        this._transportReady = false;\n      }\n      get name() {\n        return \"ReactNative\";\n      }\n      close() {\n        logger2.debug(\"close()\");\n        this._sendStream.release(false);\n        if (this._pc) {\n          try {\n            this._pc.close();\n          } catch (error) {\n          }\n        }\n        this.emit(\"@close\");\n      }\n      getNativeRtpCapabilities() {\n        return __async(this, null, function* () {\n          logger2.debug(\"getNativeRtpCapabilities()\");\n          const pc = new RTCPeerConnection({\n            iceServers: [],\n            iceTransportPolicy: \"all\",\n            bundlePolicy: \"max-bundle\",\n            rtcpMuxPolicy: \"require\",\n            sdpSemantics: \"plan-b\"\n          });\n          try {\n            const offer = yield pc.createOffer({\n              offerToReceiveAudio: true,\n              offerToReceiveVideo: true\n            });\n            try {\n              pc.close();\n            } catch (error) {\n            }\n            const sdpObject = sdpTransform4.parse(offer.sdp);\n            const nativeRtpCapabilities = sdpCommonUtils.extractRtpCapabilities({ sdpObject });\n            return nativeRtpCapabilities;\n          } catch (error) {\n            try {\n              pc.close();\n            } catch (error2) {\n            }\n            throw error;\n          }\n        });\n      }\n      getNativeSctpCapabilities() {\n        return __async(this, null, function* () {\n          logger2.debug(\"getNativeSctpCapabilities()\");\n          return {\n            numStreams: SCTP_NUM_STREAMS\n          };\n        });\n      }\n      run({ direction, iceParameters, iceCandidates, dtlsParameters, sctpParameters, iceServers, iceTransportPolicy, additionalSettings, proprietaryConstraints, extendedRtpCapabilities }) {\n        logger2.debug(\"run()\");\n        this._direction = direction;\n        this._remoteSdp = new RemoteSdp_1.RemoteSdp({\n          iceParameters,\n          iceCandidates,\n          dtlsParameters,\n          sctpParameters,\n          planB: true\n        });\n        this._sendingRtpParametersByKind = {\n          audio: ortc.getSendingRtpParameters(\"audio\", extendedRtpCapabilities),\n          video: ortc.getSendingRtpParameters(\"video\", extendedRtpCapabilities)\n        };\n        this._sendingRemoteRtpParametersByKind = {\n          audio: ortc.getSendingRemoteRtpParameters(\"audio\", extendedRtpCapabilities),\n          video: ortc.getSendingRemoteRtpParameters(\"video\", extendedRtpCapabilities)\n        };\n        if (dtlsParameters.role && dtlsParameters.role !== \"auto\") {\n          this._forcedLocalDtlsRole = dtlsParameters.role === \"server\" ? \"client\" : \"server\";\n        }\n        this._pc = new RTCPeerConnection(__spreadValues({\n          iceServers: iceServers || [],\n          iceTransportPolicy: iceTransportPolicy || \"all\",\n          bundlePolicy: \"max-bundle\",\n          rtcpMuxPolicy: \"require\",\n          sdpSemantics: \"plan-b\"\n        }, additionalSettings), proprietaryConstraints);\n        if (this._pc.connectionState) {\n          this._pc.addEventListener(\"connectionstatechange\", () => {\n            this.emit(\"@connectionstatechange\", this._pc.connectionState);\n          });\n        } else {\n          this._pc.addEventListener(\"iceconnectionstatechange\", () => {\n            logger2.warn(\"run() | pc.connectionState not supported, using pc.iceConnectionState\");\n            switch (this._pc.iceConnectionState) {\n              case \"checking\":\n                this.emit(\"@connectionstatechange\", \"connecting\");\n                break;\n              case \"connected\":\n              case \"completed\":\n                this.emit(\"@connectionstatechange\", \"connected\");\n                break;\n              case \"failed\":\n                this.emit(\"@connectionstatechange\", \"failed\");\n                break;\n              case \"disconnected\":\n                this.emit(\"@connectionstatechange\", \"disconnected\");\n                break;\n              case \"closed\":\n                this.emit(\"@connectionstatechange\", \"closed\");\n                break;\n            }\n          });\n        }\n      }\n      updateIceServers(iceServers) {\n        return __async(this, null, function* () {\n          logger2.debug(\"updateIceServers()\");\n          const configuration = this._pc.getConfiguration();\n          configuration.iceServers = iceServers;\n          this._pc.setConfiguration(configuration);\n        });\n      }\n      restartIce(iceParameters) {\n        return __async(this, null, function* () {\n          logger2.debug(\"restartIce()\");\n          this._remoteSdp.updateIceParameters(iceParameters);\n          if (!this._transportReady) {\n            return;\n          }\n          if (this._direction === \"send\") {\n            const offer = yield this._pc.createOffer({ iceRestart: true });\n            logger2.debug(\"restartIce() | calling pc.setLocalDescription() [offer:%o]\", offer);\n            yield this._pc.setLocalDescription(offer);\n            const answer = { type: \"answer\", sdp: this._remoteSdp.getSdp() };\n            logger2.debug(\"restartIce() | calling pc.setRemoteDescription() [answer:%o]\", answer);\n            yield this._pc.setRemoteDescription(answer);\n          } else {\n            const offer = { type: \"offer\", sdp: this._remoteSdp.getSdp() };\n            logger2.debug(\"restartIce() | calling pc.setRemoteDescription() [offer:%o]\", offer);\n            yield this._pc.setRemoteDescription(offer);\n            const answer = yield this._pc.createAnswer();\n            logger2.debug(\"restartIce() | calling pc.setLocalDescription() [answer:%o]\", answer);\n            yield this._pc.setLocalDescription(answer);\n          }\n        });\n      }\n      getTransportStats() {\n        return __async(this, null, function* () {\n          return this._pc.getStats();\n        });\n      }\n      send(_0) {\n        return __async(this, arguments, function* ({ track, encodings, codecOptions, codec }) {\n          var _a2;\n          this.assertSendDirection();\n          logger2.debug(\"send() [kind:%s, track.id:%s]\", track.kind, track.id);\n          if (codec) {\n            logger2.warn(\"send() | codec selection is not available in %s handler\", this.name);\n          }\n          this._sendStream.addTrack(track);\n          this._pc.addStream(this._sendStream);\n          let offer = yield this._pc.createOffer();\n          let localSdpObject = sdpTransform4.parse(offer.sdp);\n          let offerMediaObject;\n          const sendingRtpParameters = utils.clone(this._sendingRtpParametersByKind[track.kind], {});\n          sendingRtpParameters.codecs = ortc.reduceCodecs(sendingRtpParameters.codecs);\n          const sendingRemoteRtpParameters = utils.clone(this._sendingRemoteRtpParametersByKind[track.kind], {});\n          sendingRemoteRtpParameters.codecs = ortc.reduceCodecs(sendingRemoteRtpParameters.codecs);\n          if (!this._transportReady) {\n            yield this.setupTransport({\n              localDtlsRole: (_a2 = this._forcedLocalDtlsRole) !== null && _a2 !== void 0 ? _a2 : \"client\",\n              localSdpObject\n            });\n          }\n          if (track.kind === \"video\" && encodings && encodings.length > 1) {\n            logger2.debug(\"send() | enabling simulcast\");\n            localSdpObject = sdpTransform4.parse(offer.sdp);\n            offerMediaObject = localSdpObject.media.find((m) => m.type === \"video\");\n            sdpPlanBUtils.addLegacySimulcast({\n              offerMediaObject,\n              track,\n              numStreams: encodings.length\n            });\n            offer = { type: \"offer\", sdp: sdpTransform4.write(localSdpObject) };\n          }\n          logger2.debug(\"send() | calling pc.setLocalDescription() [offer:%o]\", offer);\n          yield this._pc.setLocalDescription(offer);\n          localSdpObject = sdpTransform4.parse(this._pc.localDescription.sdp);\n          offerMediaObject = localSdpObject.media.find((m) => m.type === track.kind);\n          sendingRtpParameters.rtcp.cname = sdpCommonUtils.getCname({ offerMediaObject });\n          sendingRtpParameters.encodings = sdpPlanBUtils.getRtpEncodings({ offerMediaObject, track });\n          if (encodings) {\n            for (let idx = 0; idx < sendingRtpParameters.encodings.length; ++idx) {\n              if (encodings[idx]) {\n                Object.assign(sendingRtpParameters.encodings[idx], encodings[idx]);\n              }\n            }\n          }\n          if (sendingRtpParameters.encodings.length > 1 && (sendingRtpParameters.codecs[0].mimeType.toLowerCase() === \"video/vp8\" || sendingRtpParameters.codecs[0].mimeType.toLowerCase() === \"video/h264\")) {\n            for (const encoding of sendingRtpParameters.encodings) {\n              encoding.scalabilityMode = \"L1T3\";\n            }\n          }\n          this._remoteSdp.send({\n            offerMediaObject,\n            offerRtpParameters: sendingRtpParameters,\n            answerRtpParameters: sendingRemoteRtpParameters,\n            codecOptions\n          });\n          const answer = { type: \"answer\", sdp: this._remoteSdp.getSdp() };\n          logger2.debug(\"send() | calling pc.setRemoteDescription() [answer:%o]\", answer);\n          yield this._pc.setRemoteDescription(answer);\n          const localId = String(this._nextSendLocalId);\n          this._nextSendLocalId++;\n          this._mapSendLocalIdTrack.set(localId, track);\n          return {\n            localId,\n            rtpParameters: sendingRtpParameters\n          };\n        });\n      }\n      stopSending(localId) {\n        return __async(this, null, function* () {\n          this.assertSendDirection();\n          logger2.debug(\"stopSending() [localId:%s]\", localId);\n          const track = this._mapSendLocalIdTrack.get(localId);\n          if (!track) {\n            throw new Error(\"track not found\");\n          }\n          this._mapSendLocalIdTrack.delete(localId);\n          this._sendStream.removeTrack(track);\n          this._pc.addStream(this._sendStream);\n          const offer = yield this._pc.createOffer();\n          logger2.debug(\"stopSending() | calling pc.setLocalDescription() [offer:%o]\", offer);\n          try {\n            yield this._pc.setLocalDescription(offer);\n          } catch (error) {\n            if (this._sendStream.getTracks().length === 0) {\n              logger2.warn(\"stopSending() | ignoring expected error due no sending tracks: %s\", error.toString());\n              return;\n            }\n            throw error;\n          }\n          if (this._pc.signalingState === \"stable\") {\n            return;\n          }\n          const answer = { type: \"answer\", sdp: this._remoteSdp.getSdp() };\n          logger2.debug(\"stopSending() | calling pc.setRemoteDescription() [answer:%o]\", answer);\n          yield this._pc.setRemoteDescription(answer);\n        });\n      }\n      pauseSending(localId) {\n        return __async(this, null, function* () {\n        });\n      }\n      resumeSending(localId) {\n        return __async(this, null, function* () {\n        });\n      }\n      replaceTrack(localId, track) {\n        return __async(this, null, function* () {\n          throw new errors_1.UnsupportedError(\"not implemented\");\n        });\n      }\n      setMaxSpatialLayer(localId, spatialLayer) {\n        return __async(this, null, function* () {\n          throw new errors_1.UnsupportedError(\"not implemented\");\n        });\n      }\n      setRtpEncodingParameters(localId, params) {\n        return __async(this, null, function* () {\n          throw new errors_1.UnsupportedError(\"not implemented\");\n        });\n      }\n      getSenderStats(localId) {\n        return __async(this, null, function* () {\n          throw new errors_1.UnsupportedError(\"not implemented\");\n        });\n      }\n      sendDataChannel(_0) {\n        return __async(this, arguments, function* ({ ordered, maxPacketLifeTime, maxRetransmits, label, protocol }) {\n          var _a2;\n          this.assertSendDirection();\n          const options = {\n            negotiated: true,\n            id: this._nextSendSctpStreamId,\n            ordered,\n            maxPacketLifeTime,\n            maxRetransmitTime: maxPacketLifeTime,\n            maxRetransmits,\n            protocol\n          };\n          logger2.debug(\"sendDataChannel() [options:%o]\", options);\n          const dataChannel = this._pc.createDataChannel(label, options);\n          this._nextSendSctpStreamId = ++this._nextSendSctpStreamId % SCTP_NUM_STREAMS.MIS;\n          if (!this._hasDataChannelMediaSection) {\n            const offer = yield this._pc.createOffer();\n            const localSdpObject = sdpTransform4.parse(offer.sdp);\n            const offerMediaObject = localSdpObject.media.find((m) => m.type === \"application\");\n            if (!this._transportReady) {\n              yield this.setupTransport({\n                localDtlsRole: (_a2 = this._forcedLocalDtlsRole) !== null && _a2 !== void 0 ? _a2 : \"client\",\n                localSdpObject\n              });\n            }\n            logger2.debug(\"sendDataChannel() | calling pc.setLocalDescription() [offer:%o]\", offer);\n            yield this._pc.setLocalDescription(offer);\n            this._remoteSdp.sendSctpAssociation({ offerMediaObject });\n            const answer = { type: \"answer\", sdp: this._remoteSdp.getSdp() };\n            logger2.debug(\"sendDataChannel() | calling pc.setRemoteDescription() [answer:%o]\", answer);\n            yield this._pc.setRemoteDescription(answer);\n            this._hasDataChannelMediaSection = true;\n          }\n          const sctpStreamParameters = {\n            streamId: options.id,\n            ordered: options.ordered,\n            maxPacketLifeTime: options.maxPacketLifeTime,\n            maxRetransmits: options.maxRetransmits\n          };\n          return { dataChannel, sctpStreamParameters };\n        });\n      }\n      receive(optionsList) {\n        return __async(this, null, function* () {\n          var _a2;\n          this.assertRecvDirection();\n          const results = [];\n          const mapStreamId = /* @__PURE__ */ new Map();\n          for (const options of optionsList) {\n            const { trackId, kind, rtpParameters } = options;\n            logger2.debug(\"receive() [trackId:%s, kind:%s]\", trackId, kind);\n            const mid = kind;\n            let streamId = options.streamId || rtpParameters.rtcp.cname;\n            logger2.debug(\"receive() | forcing a random remote streamId to avoid well known bug in react-native-webrtc\");\n            streamId += `-hack-${utils.generateRandomNumber()}`;\n            mapStreamId.set(trackId, streamId);\n            this._remoteSdp.receive({\n              mid,\n              kind,\n              offerRtpParameters: rtpParameters,\n              streamId,\n              trackId\n            });\n          }\n          const offer = { type: \"offer\", sdp: this._remoteSdp.getSdp() };\n          logger2.debug(\"receive() | calling pc.setRemoteDescription() [offer:%o]\", offer);\n          yield this._pc.setRemoteDescription(offer);\n          let answer = yield this._pc.createAnswer();\n          const localSdpObject = sdpTransform4.parse(answer.sdp);\n          for (const options of optionsList) {\n            const { kind, rtpParameters } = options;\n            const mid = kind;\n            const answerMediaObject = localSdpObject.media.find((m) => String(m.mid) === mid);\n            sdpCommonUtils.applyCodecParameters({\n              offerRtpParameters: rtpParameters,\n              answerMediaObject\n            });\n          }\n          answer = { type: \"answer\", sdp: sdpTransform4.write(localSdpObject) };\n          if (!this._transportReady) {\n            yield this.setupTransport({\n              localDtlsRole: (_a2 = this._forcedLocalDtlsRole) !== null && _a2 !== void 0 ? _a2 : \"client\",\n              localSdpObject\n            });\n          }\n          logger2.debug(\"receive() | calling pc.setLocalDescription() [answer:%o]\", answer);\n          yield this._pc.setLocalDescription(answer);\n          for (const options of optionsList) {\n            const { kind, trackId, rtpParameters } = options;\n            const localId = trackId;\n            const mid = kind;\n            const streamId = mapStreamId.get(trackId);\n            const stream = this._pc.getRemoteStreams().find((s) => s.id === streamId);\n            const track = stream.getTrackById(localId);\n            if (!track) {\n              throw new Error(\"remote track not found\");\n            }\n            this._mapRecvLocalIdInfo.set(localId, { mid, rtpParameters });\n            results.push({ localId, track });\n          }\n          return results;\n        });\n      }\n      stopReceiving(localIds) {\n        return __async(this, null, function* () {\n          this.assertRecvDirection();\n          for (const localId of localIds) {\n            logger2.debug(\"stopReceiving() [localId:%s]\", localId);\n            const { mid, rtpParameters } = this._mapRecvLocalIdInfo.get(localId) || {};\n            this._mapRecvLocalIdInfo.delete(localId);\n            this._remoteSdp.planBStopReceiving({ mid, offerRtpParameters: rtpParameters });\n          }\n          const offer = { type: \"offer\", sdp: this._remoteSdp.getSdp() };\n          logger2.debug(\"stopReceiving() | calling pc.setRemoteDescription() [offer:%o]\", offer);\n          yield this._pc.setRemoteDescription(offer);\n          const answer = yield this._pc.createAnswer();\n          logger2.debug(\"stopReceiving() | calling pc.setLocalDescription() [answer:%o]\", answer);\n          yield this._pc.setLocalDescription(answer);\n        });\n      }\n      pauseReceiving(localIds) {\n        return __async(this, null, function* () {\n        });\n      }\n      resumeReceiving(localIds) {\n        return __async(this, null, function* () {\n        });\n      }\n      getReceiverStats(localId) {\n        return __async(this, null, function* () {\n          throw new errors_1.UnsupportedError(\"not implemented\");\n        });\n      }\n      receiveDataChannel(_0) {\n        return __async(this, arguments, function* ({ sctpStreamParameters, label, protocol }) {\n          var _a2;\n          this.assertRecvDirection();\n          const { streamId, ordered, maxPacketLifeTime, maxRetransmits } = sctpStreamParameters;\n          const options = {\n            negotiated: true,\n            id: streamId,\n            ordered,\n            maxPacketLifeTime,\n            maxRetransmitTime: maxPacketLifeTime,\n            maxRetransmits,\n            protocol\n          };\n          logger2.debug(\"receiveDataChannel() [options:%o]\", options);\n          const dataChannel = this._pc.createDataChannel(label, options);\n          if (!this._hasDataChannelMediaSection) {\n            this._remoteSdp.receiveSctpAssociation({ oldDataChannelSpec: true });\n            const offer = { type: \"offer\", sdp: this._remoteSdp.getSdp() };\n            logger2.debug(\"receiveDataChannel() | calling pc.setRemoteDescription() [offer:%o]\", offer);\n            yield this._pc.setRemoteDescription(offer);\n            const answer = yield this._pc.createAnswer();\n            if (!this._transportReady) {\n              const localSdpObject = sdpTransform4.parse(answer.sdp);\n              yield this.setupTransport({\n                localDtlsRole: (_a2 = this._forcedLocalDtlsRole) !== null && _a2 !== void 0 ? _a2 : \"client\",\n                localSdpObject\n              });\n            }\n            logger2.debug(\"receiveDataChannel() | calling pc.setRemoteDescription() [answer:%o]\", answer);\n            yield this._pc.setLocalDescription(answer);\n            this._hasDataChannelMediaSection = true;\n          }\n          return { dataChannel };\n        });\n      }\n      setupTransport(_0) {\n        return __async(this, arguments, function* ({ localDtlsRole, localSdpObject }) {\n          if (!localSdpObject) {\n            localSdpObject = sdpTransform4.parse(this._pc.localDescription.sdp);\n          }\n          const dtlsParameters = sdpCommonUtils.extractDtlsParameters({ sdpObject: localSdpObject });\n          dtlsParameters.role = localDtlsRole;\n          this._remoteSdp.updateDtlsRole(localDtlsRole === \"client\" ? \"server\" : \"client\");\n          yield new Promise((resolve, reject) => {\n            this.safeEmit(\"@connect\", { dtlsParameters }, resolve, reject);\n          });\n          this._transportReady = true;\n        });\n      }\n      assertSendDirection() {\n        if (this._direction !== \"send\") {\n          throw new Error('method can just be called for handlers with \"send\" direction');\n        }\n      }\n      assertRecvDirection() {\n        if (this._direction !== \"recv\") {\n          throw new Error('method can just be called for handlers with \"recv\" direction');\n        }\n      }\n    };\n    exports.ReactNative = ReactNative;\n  }\n});\n\n// ../../node_modules/mediasoup-client/lib/Device.js\nvar require_Device = __commonJS({\n  \"../../node_modules/mediasoup-client/lib/Device.js\"(exports) {\n    \"use strict\";\n    init_process();\n    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {\n      if (k2 === void 0)\n        k2 = k;\n      var desc = Object.getOwnPropertyDescriptor(m, k);\n      if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n        desc = { enumerable: true, get: function() {\n          return m[k];\n        } };\n      }\n      Object.defineProperty(o2, k2, desc);\n    } : function(o2, m, k, k2) {\n      if (k2 === void 0)\n        k2 = k;\n      o2[k2] = m[k];\n    });\n    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {\n      Object.defineProperty(o2, \"default\", { enumerable: true, value: v });\n    } : function(o2, v) {\n      o2[\"default\"] = v;\n    });\n    var __importStar = exports && exports.__importStar || function(mod) {\n      if (mod && mod.__esModule)\n        return mod;\n      var result2 = {};\n      if (mod != null) {\n        for (var k in mod)\n          if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k))\n            __createBinding(result2, mod, k);\n      }\n      __setModuleDefault(result2, mod);\n      return result2;\n    };\n    var __importDefault = exports && exports.__importDefault || function(mod) {\n      return mod && mod.__esModule ? mod : { \"default\": mod };\n    };\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.Device = exports.detectDevice = void 0;\n    var bowser_1 = __importDefault(require_es5());\n    var Logger_1 = require_Logger();\n    var EnhancedEventEmitter_1 = require_EnhancedEventEmitter();\n    var errors_1 = require_errors();\n    var utils = __importStar(require_utils2());\n    var ortc = __importStar(require_ortc());\n    var Transport_1 = require_Transport();\n    var Chrome111_1 = require_Chrome111();\n    var Chrome74_1 = require_Chrome74();\n    var Chrome70_1 = require_Chrome70();\n    var Chrome67_1 = require_Chrome67();\n    var Chrome55_1 = require_Chrome55();\n    var Firefox60_1 = require_Firefox60();\n    var Safari12_1 = require_Safari12();\n    var Safari11_1 = require_Safari11();\n    var Edge11_1 = require_Edge11();\n    var ReactNativeUnifiedPlan_1 = require_ReactNativeUnifiedPlan();\n    var ReactNative_1 = require_ReactNative();\n    var logger2 = new Logger_1.Logger(\"Device\");\n    function detectDevice2() {\n      if (typeof navigator === \"object\" && navigator.product === \"ReactNative\") {\n        if (typeof RTCPeerConnection === \"undefined\") {\n          logger2.warn(\"this._detectDevice() | unsupported react-native-webrtc without RTCPeerConnection, forgot to call registerGlobals()?\");\n          return void 0;\n        }\n        if (typeof RTCRtpTransceiver !== \"undefined\") {\n          logger2.debug(\"this._detectDevice() | ReactNative UnifiedPlan handler chosen\");\n          return \"ReactNativeUnifiedPlan\";\n        } else {\n          logger2.debug(\"this._detectDevice() | ReactNative PlanB handler chosen\");\n          return \"ReactNative\";\n        }\n      } else if (typeof navigator === \"object\" && typeof navigator.userAgent === \"string\") {\n        const ua = navigator.userAgent;\n        const browser = bowser_1.default.getParser(ua);\n        const engine = browser.getEngine();\n        if (browser.satisfies({ chrome: \">=111\", chromium: \">=111\", \"microsoft edge\": \">=111\" })) {\n          return \"Chrome111\";\n        } else if (browser.satisfies({ chrome: \">=74\", chromium: \">=74\", \"microsoft edge\": \">=88\" })) {\n          return \"Chrome74\";\n        } else if (browser.satisfies({ chrome: \">=70\", chromium: \">=70\" })) {\n          return \"Chrome70\";\n        } else if (browser.satisfies({ chrome: \">=67\", chromium: \">=67\" })) {\n          return \"Chrome67\";\n        } else if (browser.satisfies({ chrome: \">=55\", chromium: \">=55\" })) {\n          return \"Chrome55\";\n        } else if (browser.satisfies({ firefox: \">=60\" })) {\n          return \"Firefox60\";\n        } else if (browser.satisfies({ ios: { OS: \">=14.3\", firefox: \">=30.0\" } })) {\n          return \"Safari12\";\n        } else if (browser.satisfies({ safari: \">=12.0\" }) && typeof RTCRtpTransceiver !== \"undefined\" && RTCRtpTransceiver.prototype.hasOwnProperty(\"currentDirection\")) {\n          return \"Safari12\";\n        } else if (browser.satisfies({ safari: \">=11\" })) {\n          return \"Safari11\";\n        } else if (browser.satisfies({ \"microsoft edge\": \">=11\" }) && browser.satisfies({ \"microsoft edge\": \"<=18\" })) {\n          return \"Edge11\";\n        } else if (engine.name && engine.name.toLowerCase() === \"blink\") {\n          const match = ua.match(/(?:(?:Chrome|Chromium))[ /](\\w+)/i);\n          if (match) {\n            const version = Number(match[1]);\n            if (version >= 111) {\n              return \"Chrome111\";\n            } else if (version >= 74) {\n              return \"Chrome74\";\n            } else if (version >= 70) {\n              return \"Chrome70\";\n            } else if (version >= 67) {\n              return \"Chrome67\";\n            } else {\n              return \"Chrome55\";\n            }\n          } else {\n            return \"Chrome111\";\n          }\n        } else {\n          logger2.warn(\"this._detectDevice() | browser not supported [name:%s, version:%s]\", browser.getBrowserName(), browser.getBrowserVersion());\n          return void 0;\n        }\n      } else {\n        logger2.warn(\"this._detectDevice() | unknown device\");\n        return void 0;\n      }\n    }\n    exports.detectDevice = detectDevice2;\n    var Device2 = class {\n      constructor({ handlerName, handlerFactory, Handler } = {}) {\n        this._loaded = false;\n        this._observer = new EnhancedEventEmitter_1.EnhancedEventEmitter();\n        logger2.debug(\"constructor()\");\n        if (Handler) {\n          logger2.warn(\"constructor() | Handler option is DEPRECATED, use handlerName or handlerFactory instead\");\n          if (typeof Handler === \"string\") {\n            handlerName = Handler;\n          } else {\n            throw new TypeError(\"non string Handler option no longer supported, use handlerFactory instead\");\n          }\n        }\n        if (handlerName && handlerFactory) {\n          throw new TypeError(\"just one of handlerName or handlerInterface can be given\");\n        }\n        if (handlerFactory) {\n          this._handlerFactory = handlerFactory;\n        } else {\n          if (handlerName) {\n            logger2.debug(\"constructor() | handler given: %s\", handlerName);\n          } else {\n            handlerName = detectDevice2();\n            if (handlerName) {\n              logger2.debug(\"constructor() | detected handler: %s\", handlerName);\n            } else {\n              throw new errors_1.UnsupportedError(\"device not supported\");\n            }\n          }\n          switch (handlerName) {\n            case \"Chrome111\":\n              this._handlerFactory = Chrome111_1.Chrome111.createFactory();\n              break;\n            case \"Chrome74\":\n              this._handlerFactory = Chrome74_1.Chrome74.createFactory();\n              break;\n            case \"Chrome70\":\n              this._handlerFactory = Chrome70_1.Chrome70.createFactory();\n              break;\n            case \"Chrome67\":\n              this._handlerFactory = Chrome67_1.Chrome67.createFactory();\n              break;\n            case \"Chrome55\":\n              this._handlerFactory = Chrome55_1.Chrome55.createFactory();\n              break;\n            case \"Firefox60\":\n              this._handlerFactory = Firefox60_1.Firefox60.createFactory();\n              break;\n            case \"Safari12\":\n              this._handlerFactory = Safari12_1.Safari12.createFactory();\n              break;\n            case \"Safari11\":\n              this._handlerFactory = Safari11_1.Safari11.createFactory();\n              break;\n            case \"Edge11\":\n              this._handlerFactory = Edge11_1.Edge11.createFactory();\n              break;\n            case \"ReactNativeUnifiedPlan\":\n              this._handlerFactory = ReactNativeUnifiedPlan_1.ReactNativeUnifiedPlan.createFactory();\n              break;\n            case \"ReactNative\":\n              this._handlerFactory = ReactNative_1.ReactNative.createFactory();\n              break;\n            default:\n              throw new TypeError(`unknown handlerName \"${handlerName}\"`);\n          }\n        }\n        const handler = this._handlerFactory();\n        this._handlerName = handler.name;\n        handler.close();\n        this._extendedRtpCapabilities = void 0;\n        this._recvRtpCapabilities = void 0;\n        this._canProduceByKind = {\n          audio: false,\n          video: false\n        };\n        this._sctpCapabilities = void 0;\n      }\n      get handlerName() {\n        return this._handlerName;\n      }\n      get loaded() {\n        return this._loaded;\n      }\n      get rtpCapabilities() {\n        if (!this._loaded) {\n          throw new errors_1.InvalidStateError(\"not loaded\");\n        }\n        return this._recvRtpCapabilities;\n      }\n      get sctpCapabilities() {\n        if (!this._loaded) {\n          throw new errors_1.InvalidStateError(\"not loaded\");\n        }\n        return this._sctpCapabilities;\n      }\n      get observer() {\n        return this._observer;\n      }\n      load(_0) {\n        return __async(this, arguments, function* ({ routerRtpCapabilities }) {\n          logger2.debug(\"load() [routerRtpCapabilities:%o]\", routerRtpCapabilities);\n          routerRtpCapabilities = utils.clone(routerRtpCapabilities, void 0);\n          let handler;\n          try {\n            if (this._loaded) {\n              throw new errors_1.InvalidStateError(\"already loaded\");\n            }\n            ortc.validateRtpCapabilities(routerRtpCapabilities);\n            handler = this._handlerFactory();\n            const nativeRtpCapabilities = yield handler.getNativeRtpCapabilities();\n            logger2.debug(\"load() | got native RTP capabilities:%o\", nativeRtpCapabilities);\n            ortc.validateRtpCapabilities(nativeRtpCapabilities);\n            this._extendedRtpCapabilities = ortc.getExtendedRtpCapabilities(nativeRtpCapabilities, routerRtpCapabilities);\n            logger2.debug(\"load() | got extended RTP capabilities:%o\", this._extendedRtpCapabilities);\n            this._canProduceByKind.audio = ortc.canSend(\"audio\", this._extendedRtpCapabilities);\n            this._canProduceByKind.video = ortc.canSend(\"video\", this._extendedRtpCapabilities);\n            this._recvRtpCapabilities = ortc.getRecvRtpCapabilities(this._extendedRtpCapabilities);\n            ortc.validateRtpCapabilities(this._recvRtpCapabilities);\n            logger2.debug(\"load() | got receiving RTP capabilities:%o\", this._recvRtpCapabilities);\n            this._sctpCapabilities = yield handler.getNativeSctpCapabilities();\n            logger2.debug(\"load() | got native SCTP capabilities:%o\", this._sctpCapabilities);\n            ortc.validateSctpCapabilities(this._sctpCapabilities);\n            logger2.debug(\"load() succeeded\");\n            this._loaded = true;\n            handler.close();\n          } catch (error) {\n            if (handler) {\n              handler.close();\n            }\n            throw error;\n          }\n        });\n      }\n      canProduce(kind) {\n        if (!this._loaded) {\n          throw new errors_1.InvalidStateError(\"not loaded\");\n        } else if (kind !== \"audio\" && kind !== \"video\") {\n          throw new TypeError(`invalid kind \"${kind}\"`);\n        }\n        return this._canProduceByKind[kind];\n      }\n      createSendTransport({ id, iceParameters, iceCandidates, dtlsParameters, sctpParameters, iceServers, iceTransportPolicy, additionalSettings, proprietaryConstraints, appData }) {\n        logger2.debug(\"createSendTransport()\");\n        return this.createTransport({\n          direction: \"send\",\n          id,\n          iceParameters,\n          iceCandidates,\n          dtlsParameters,\n          sctpParameters,\n          iceServers,\n          iceTransportPolicy,\n          additionalSettings,\n          proprietaryConstraints,\n          appData\n        });\n      }\n      createRecvTransport({ id, iceParameters, iceCandidates, dtlsParameters, sctpParameters, iceServers, iceTransportPolicy, additionalSettings, proprietaryConstraints, appData }) {\n        logger2.debug(\"createRecvTransport()\");\n        return this.createTransport({\n          direction: \"recv\",\n          id,\n          iceParameters,\n          iceCandidates,\n          dtlsParameters,\n          sctpParameters,\n          iceServers,\n          iceTransportPolicy,\n          additionalSettings,\n          proprietaryConstraints,\n          appData\n        });\n      }\n      createTransport({ direction, id, iceParameters, iceCandidates, dtlsParameters, sctpParameters, iceServers, iceTransportPolicy, additionalSettings, proprietaryConstraints, appData }) {\n        if (!this._loaded) {\n          throw new errors_1.InvalidStateError(\"not loaded\");\n        } else if (typeof id !== \"string\") {\n          throw new TypeError(\"missing id\");\n        } else if (typeof iceParameters !== \"object\") {\n          throw new TypeError(\"missing iceParameters\");\n        } else if (!Array.isArray(iceCandidates)) {\n          throw new TypeError(\"missing iceCandidates\");\n        } else if (typeof dtlsParameters !== \"object\") {\n          throw new TypeError(\"missing dtlsParameters\");\n        } else if (sctpParameters && typeof sctpParameters !== \"object\") {\n          throw new TypeError(\"wrong sctpParameters\");\n        } else if (appData && typeof appData !== \"object\") {\n          throw new TypeError(\"if given, appData must be an object\");\n        }\n        const transport = new Transport_1.Transport({\n          direction,\n          id,\n          iceParameters,\n          iceCandidates,\n          dtlsParameters,\n          sctpParameters,\n          iceServers,\n          iceTransportPolicy,\n          additionalSettings,\n          proprietaryConstraints,\n          appData,\n          handlerFactory: this._handlerFactory,\n          extendedRtpCapabilities: this._extendedRtpCapabilities,\n          canProduceByKind: this._canProduceByKind\n        });\n        this._observer.safeEmit(\"newtransport\", transport);\n        return transport;\n      }\n    };\n    exports.Device = Device2;\n  }\n});\n\n// ../../node_modules/mediasoup-client/lib/RtpParameters.js\nvar require_RtpParameters = __commonJS({\n  \"../../node_modules/mediasoup-client/lib/RtpParameters.js\"(exports) {\n    \"use strict\";\n    init_process();\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n  }\n});\n\n// ../../node_modules/mediasoup-client/lib/SctpParameters.js\nvar require_SctpParameters = __commonJS({\n  \"../../node_modules/mediasoup-client/lib/SctpParameters.js\"(exports) {\n    \"use strict\";\n    init_process();\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n  }\n});\n\n// ../../node_modules/mediasoup-client/lib/types.js\nvar require_types = __commonJS({\n  \"../../node_modules/mediasoup-client/lib/types.js\"(exports) {\n    \"use strict\";\n    init_process();\n    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {\n      if (k2 === void 0)\n        k2 = k;\n      var desc = Object.getOwnPropertyDescriptor(m, k);\n      if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n        desc = { enumerable: true, get: function() {\n          return m[k];\n        } };\n      }\n      Object.defineProperty(o2, k2, desc);\n    } : function(o2, m, k, k2) {\n      if (k2 === void 0)\n        k2 = k;\n      o2[k2] = m[k];\n    });\n    var __exportStar = exports && exports.__exportStar || function(m, exports2) {\n      for (var p in m)\n        if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports2, p))\n          __createBinding(exports2, m, p);\n    };\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    __exportStar(require_Device(), exports);\n    __exportStar(require_Transport(), exports);\n    __exportStar(require_Producer(), exports);\n    __exportStar(require_Consumer(), exports);\n    __exportStar(require_DataProducer(), exports);\n    __exportStar(require_DataConsumer(), exports);\n    __exportStar(require_RtpParameters(), exports);\n    __exportStar(require_SctpParameters(), exports);\n    __exportStar(require_HandlerInterface(), exports);\n    __exportStar(require_errors(), exports);\n  }\n});\n\n// ../../node_modules/mediasoup-client/lib/index.js\nvar require_lib3 = __commonJS({\n  \"../../node_modules/mediasoup-client/lib/index.js\"(exports) {\n    \"use strict\";\n    init_process();\n    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m, k, k2) {\n      if (k2 === void 0)\n        k2 = k;\n      var desc = Object.getOwnPropertyDescriptor(m, k);\n      if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n        desc = { enumerable: true, get: function() {\n          return m[k];\n        } };\n      }\n      Object.defineProperty(o2, k2, desc);\n    } : function(o2, m, k, k2) {\n      if (k2 === void 0)\n        k2 = k;\n      o2[k2] = m[k];\n    });\n    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o2, v) {\n      Object.defineProperty(o2, \"default\", { enumerable: true, value: v });\n    } : function(o2, v) {\n      o2[\"default\"] = v;\n    });\n    var __importStar = exports && exports.__importStar || function(mod) {\n      if (mod && mod.__esModule)\n        return mod;\n      var result2 = {};\n      if (mod != null) {\n        for (var k in mod)\n          if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k))\n            __createBinding(result2, mod, k);\n      }\n      __setModuleDefault(result2, mod);\n      return result2;\n    };\n    var __importDefault = exports && exports.__importDefault || function(mod) {\n      return mod && mod.__esModule ? mod : { \"default\": mod };\n    };\n    Object.defineProperty(exports, \"__esModule\", { value: true });\n    exports.debug = exports.parseScalabilityMode = exports.detectDevice = exports.Device = exports.version = exports.types = void 0;\n    var debug_1 = __importDefault(require_browser2());\n    exports.debug = debug_1.default;\n    var Device_1 = require_Device();\n    Object.defineProperty(exports, \"Device\", { enumerable: true, get: function() {\n      return Device_1.Device;\n    } });\n    Object.defineProperty(exports, \"detectDevice\", { enumerable: true, get: function() {\n      return Device_1.detectDevice;\n    } });\n    var types = __importStar(require_types());\n    exports.types = types;\n    exports.version = \"3.6.82\";\n    var scalabilityModes_1 = require_scalabilityModes();\n    Object.defineProperty(exports, \"parseScalabilityMode\", { enumerable: true, get: function() {\n      return scalabilityModes_1.parse;\n    } });\n  }\n});\n\n// src/index.ts\ninit_process();\n\n// src/errors.ts\ninit_process();\n\n// ../core/src/index.ts\ninit_process();\n\n// ../core/src/channel/index.ts\ninit_process();\n\n// ../common/src/index.ts\ninit_process();\n\n// ../common/src/error.ts\ninit_process();\n\n// ../common/src/logger.ts\ninit_process();\nvar logLevelTypes = [\n  \"disable\",\n  \"error\",\n  \"warn\",\n  \"info\",\n  \"debug\"\n];\nvar _Logger = class {\n  constructor(prefix) {\n    this.debug = (...msg) => {\n      this._log(\"debug\", ...msg);\n      return Date.now();\n    };\n    this.info = (...msg) => {\n      this._log(\"info\", ...msg);\n      return Date.now();\n    };\n    this.warn = (...msg) => {\n      this._log(\"warn\", ...msg);\n    };\n    this.error = (...msg) => {\n      this._log(\"error\", ...msg);\n    };\n    this.elapsed = (timestamp, ...msg) => {\n      const elapsed = Date.now() - timestamp;\n      this._log(\"info\", `elapsed ms:${elapsed}`, ...msg);\n    };\n    this.prefix = prefix;\n  }\n  _log(level, ...msg) {\n    const logType = logLevelTypes.indexOf(level);\n    const logLevel = logLevelTypes.indexOf(_Logger.level);\n    if (logLevel >= logType) {\n      const timestamp = new Date(Date.now() + 60 * 9 * 6e4).toISOString() + \"+JST\";\n      const parsed = [this.prefix, ...msg].map((m) => {\n        if (m instanceof Error) {\n          if (m.toJSON) {\n            return m.toJSON();\n          }\n          return { name: m.name, message: m.message, stack: m.stack };\n        }\n        if (typeof m === \"object\") {\n          try {\n            return JSON.parse(JSON.stringify(m));\n          } catch (error) {\n            return \"json error\";\n          }\n        }\n        return m;\n      });\n      msg = parsed;\n      let log53 = [timestamp, level, ...msg];\n      if (_Logger.format === \"string\") {\n        log53 = [timestamp + \" \" + level + \" \" + JSON.stringify(msg)];\n      }\n      switch (level) {\n        case \"debug\":\n          console.log(...log53);\n          break;\n        case \"info\":\n          console.info(...log53);\n          break;\n        case \"warn\":\n          console.warn(...log53);\n          break;\n        case \"error\":\n          console.error(...log53);\n          break;\n      }\n      _Logger.onLog({ id: _Logger.id, timestamp, level, message: msg });\n    }\n  }\n  createBlock(info) {\n    return {\n      warn: (...msg) => {\n        this.warn(__spreadValues({}, info), ...msg);\n      },\n      debug: (...msg) => {\n        this.debug(__spreadValues({}, info), ...msg);\n      },\n      info: (...msg) => {\n        this.info(__spreadValues({}, info), ...msg);\n      },\n      error: (...msg) => {\n        this.error(__spreadValues({}, info), ...msg);\n      }\n    };\n  }\n};\nvar Logger = _Logger;\nLogger.level = \"error\";\nLogger.format = \"object\";\nLogger.onLog = () => {\n};\nLogger.id = Math.random().toString().slice(2, 7);\n\n// ../common/src/error.ts\nvar log = new Logger(\"packages/common/src/error.ts\");\nvar SkyWayError = class extends Error {\n  constructor(init, logging = true) {\n    super(init.info.detail);\n    this.id = Math.random().toString().slice(2, 10);\n    Object.assign(this, init);\n    this.name = this.info.name;\n    if (logging) {\n      const messages = [\n        \"SkyWayError\",\n        `name:${this.info.name}, detail:${this.info.detail}, solution:${this.info.solution}`\n      ];\n      if (this.path) {\n        messages.push(this.path);\n      }\n      if (this.error) {\n        messages.push(this.error);\n      }\n      if (this.payload) {\n        messages.push(this.payload);\n      }\n      messages.push(this.id);\n      log.warn(...messages);\n    }\n  }\n  toJSON() {\n    return {\n      id: this.id,\n      info: this.info,\n      path: this.path,\n      payload: this.payload,\n      error: this.error,\n      stack: this.stack\n    };\n  }\n};\n\n// ../common/src/event.ts\ninit_process();\nvar log2 = new Logger(\"packages/common/src/event.ts\");\nvar Event = class {\n  constructor(_onSetListener = () => {\n  }) {\n    this._onSetListener = _onSetListener;\n    this._stack = [];\n    this._eventIndex = 0;\n    this.emit = (arg) => {\n      for (const task of this._stack) {\n        try {\n          task.execute(arg);\n        } catch (error) {\n          log2.error(\"task throws error\", error);\n        }\n      }\n    };\n    this.removeAllListeners = () => {\n      this._stack = [];\n    };\n    this.pipe = (event) => {\n      return this.add((arg) => event.emit(arg));\n    };\n    this.add = (callback) => {\n      const id = this._eventIndex;\n      this._stack.push({ execute: callback, id });\n      this._eventIndex++;\n      const removeListener = () => {\n        this._stack = this._stack.filter((item) => item.id !== id && item);\n      };\n      const disposer = (disposer2) => {\n        disposer2.push(removeListener);\n      };\n      this._onSetListener();\n      return { removeListener, disposer };\n    };\n    this.once = (callback) => {\n      const off = this.add((arg) => {\n        off.removeListener();\n        callback(arg);\n      });\n    };\n    this.asPromise = (timeLimit) => new Promise((resolve, reject) => {\n      const timeout = timeLimit && setTimeout(() => {\n        reject(\n          new SerializableError(\"Event asPromise timeout : \" + timeLimit)\n        );\n      }, timeLimit);\n      this.once((arg) => {\n        if (timeout)\n          clearTimeout(timeout);\n        resolve(arg);\n      });\n    });\n    this.watch = (callback, timeLimit) => new Promise((resolve, reject) => {\n      const timeout = timeLimit && setTimeout(() => {\n        reject(new SerializableError(\"Event watch timeout : \" + timeLimit));\n      }, timeLimit);\n      const { removeListener } = this.add((arg) => {\n        const done = callback(arg);\n        if (done) {\n          if (timeout)\n            clearTimeout(timeout);\n          removeListener();\n          resolve(arg);\n        }\n      });\n    });\n  }\n  get length() {\n    return this._stack.length;\n  }\n};\nvar Events = class {\n  constructor() {\n    this.events = [];\n  }\n  make() {\n    const event = new Event();\n    this.events.push(event);\n    return event;\n  }\n  dispose() {\n    this.events.forEach((event) => event.removeAllListeners());\n    this.events = [];\n  }\n};\nvar EventDisposer = class {\n  constructor() {\n    this._disposer = [];\n  }\n  push(disposer) {\n    this._disposer.push(disposer);\n  }\n  dispose() {\n    this._disposer.forEach((d) => d());\n    this._disposer = [];\n  }\n};\nvar SerializableError = class extends Error {\n  toJSON() {\n    return {\n      name: this.name,\n      message: this.message,\n      stack: this.stack\n    };\n  }\n};\n\n// ../common/src/http.ts\ninit_process();\nvar import_axios = __toESM(require_axios2());\nvar log3 = new Logger(\"packages/common/src/http.ts\");\nvar HttpClient = class {\n  constructor(baseURL) {\n    this.api = import_axios.default.create({ baseURL });\n  }\n  get(url, config) {\n    return __async(this, null, function* () {\n      const res = yield this.api.get(url, config).catch((err) => err);\n      if (import_axios.default.isAxiosError(res)) {\n        const error = __spreadProps(__spreadValues({}, res.response), { message: res.message });\n        if (config == null ? void 0 : config.retry) {\n          const retry = yield config.retry(error);\n          if (retry) {\n            log3.warn(\"retry get\", { url });\n            return this.get(url, config);\n          } else {\n            log3.warn(\"retry get failed\", { url });\n            throw error;\n          }\n        }\n        log3.warn(\"response error\", { error });\n        throw error;\n      } else {\n        return res.data;\n      }\n    });\n  }\n  post(url, data, config) {\n    return __async(this, null, function* () {\n      var _a2, _b2, _c;\n      const res = yield this.api.post(url, data, config).catch((err) => err);\n      if (import_axios.default.isAxiosError(res)) {\n        const error = {\n          data: (_a2 = res.response) == null ? void 0 : _a2.data,\n          status: (_b2 = res.response) == null ? void 0 : _b2.status,\n          statusText: (_c = res.response) == null ? void 0 : _c.statusText,\n          message: res.message\n        };\n        log3.warn(\"error received\", error);\n        if (config == null ? void 0 : config.retry) {\n          const needRetry = yield config.retry(error);\n          if (needRetry) {\n            log3.warn(\"retry post\", url, { data, error, needRetry });\n            return this.post(url, data, config);\n          } else {\n            throw error;\n          }\n        }\n        throw error;\n      } else {\n        return res.data;\n      }\n    });\n  }\n  put(url, data, config) {\n    return __async(this, null, function* () {\n      const res = yield this.api.put(url, data, config).catch((err) => err);\n      if (import_axios.default.isAxiosError(res)) {\n        const error = __spreadProps(__spreadValues({}, res.response), { message: res.message });\n        if (config == null ? void 0 : config.retry) {\n          const retry = yield config.retry(error);\n          if (retry) {\n            log3.warn(\"retry put\", { url, data });\n            return this.put(url, data, config);\n          } else {\n            log3.warn(\"retry put failed\", { url, data });\n            throw error;\n          }\n        }\n        log3.warn(\"response error\", { error });\n        throw error;\n      } else {\n        return res.data;\n      }\n    });\n  }\n  delete(url, config) {\n    return __async(this, null, function* () {\n      const res = yield this.api.delete(url, config).catch((err) => err);\n      if (import_axios.default.isAxiosError(res)) {\n        const error = __spreadProps(__spreadValues({}, res.response), { message: res.message });\n        if (config == null ? void 0 : config.retry) {\n          const retry = yield config.retry(error);\n          if (retry) {\n            log3.warn(\"retry delete\", { url });\n            return this.delete(url, config);\n          } else {\n            log3.warn(\"retry delete failed\", { url });\n            throw error;\n          }\n        }\n        log3.warn(\"response error\", { error });\n        throw error;\n      } else {\n        return res.data;\n      }\n    });\n  }\n};\n\n// ../common/src/promise.ts\ninit_process();\nvar log4 = new Logger(\"packages/common/src/promise.ts\");\nvar PromiseQueue = class {\n  constructor() {\n    this.id = Math.random().toString().slice(2);\n    this.queue = [];\n    this.running = false;\n    this.push = (promise) => new Promise((r2, f) => {\n      this.queue.push({ promise, done: r2, failed: f });\n      if (!this.running) {\n        this.run();\n      }\n    });\n  }\n  run() {\n    return __async(this, null, function* () {\n      const task = this.queue.shift();\n      if (task) {\n        this.running = true;\n        try {\n          const res = yield task.promise();\n          task.done(res);\n        } catch (error) {\n          task.failed(error);\n        }\n        yield this.run();\n      } else {\n        this.running = false;\n      }\n    });\n  }\n};\n\n// ../common/src/util.ts\ninit_process();\nvar BackOff = class {\n  constructor(props = {}) {\n    this.count = 0;\n    this.times = 8;\n    this.interval = 100;\n    this.jitter = 0;\n    Object.assign(this, props);\n  }\n  wait() {\n    return __async(this, null, function* () {\n      if (this.exceeded) {\n        return false;\n      }\n      const timeout = this.timeout;\n      this.count++;\n      yield new Promise((r2) => setTimeout(r2, timeout));\n      return true;\n    });\n  }\n  get timeout() {\n    const timeout = __pow(this.count, 2) * this.interval + __pow(this.count, 2) * this.jitter * Math.random();\n    return timeout;\n  }\n  get exceeded() {\n    return this.count >= this.times;\n  }\n  reset() {\n    this.count = 0;\n  }\n};\nvar deepCopy = (o2) => JSON.parse(JSON.stringify(o2));\n\n// ../core/src/errors.ts\ninit_process();\nvar errors = {\n  internal: {\n    name: \"internal\",\n    detail: \"\",\n    solution: \"\"\n  },\n  timeout: { name: \"timeout\", detail: \"\", solution: \"\" },\n  missingProperty: { name: \"missingProperty\", detail: \"\", solution: \"\" },\n  notFound: { name: \"notFound\", detail: \"\", solution: \"\" },\n  invalidParameter: { name: \"invalidParameter\", detail: \"\", solution: \"\" },\n  invalidArgumentValue: {\n    name: \"invalidArgumentValue\",\n    detail: \"\\u5F15\\u6570\\u306E\\u5024\\u304C\\u4E0D\\u6B63\\u3067\\u3059\",\n    solution: \"\\u6B63\\u3057\\u3044\\u5024\\u3092\\u5F15\\u6570\\u306B\\u6E21\\u3057\\u3066\\u304F\\u3060\\u3055\\u3044\"\n  },\n  invalidContentType: {\n    name: \"invalidContentType\",\n    detail: \"contentType\\u304C\\u6B63\\u3057\\u304F\\u3042\\u308A\\u307E\\u305B\\u3093\",\n    solution: \"ContentType\\u3092\\u78BA\\u8A8D\\u3057\\u3066\\u304F\\u3060\\u3055\\u3044\"\n  },\n  localPersonNotJoinedChannel: {\n    name: \"localPersonNotJoinedChannel\",\n    detail: \"\\u64CD\\u4F5C\\u3057\\u3088\\u3046\\u3068\\u3057\\u305FPerson\\u304CChannel\\u306B\\u5C45\\u306A\\u3044\\u306E\\u3067\\u3001\\u64CD\\u4F5C\\u3067\\u304D\\u307E\\u305B\\u3093 The person who tried to operate is not in the channel, so the operation is not possible\",\n    solution: \"Channel\\u306B\\u5C45\\u306A\\u3044Person\\u3092\\u64CD\\u4F5C\\u3057\\u3066\\u3044\\u308B\\u53EF\\u80FD\\u6027\\u304C\\u3042\\u308B\\u306E\\u3067\\u78BA\\u8A8D\\u3057\\u3066\\u304F\\u3060\\u3055\\u3044 Please check as you may be operating a person which is not in the channel\"\n  },\n  alreadyLocalPersonExist: {\n    name: \"alreadyLocalPersonExist\",\n    detail: \"Channel\\u306B\\u3059\\u3067\\u306BLocalPerson\\u304C\\u5B58\\u5728\\u3057\\u307E\\u3059\\u3002\\u4E00\\u3064\\u306EChannel\\u30A4\\u30F3\\u30B9\\u30BF\\u30F3\\u30B9\\u306B\\u306FLocalPerson\\u304C\\u4E00\\u3064\\u3057\\u304BJoin\\u3067\\u304D\\u307E\\u305B\\u3093\",\n    solution: \"\\u8907\\u6570\\u306ELocalPerson\\u3092\\u7528\\u610F\\u3057\\u305F\\u3044\\u5834\\u5408\\u306F\\u500B\\u5225\\u306BChannel\\u30A4\\u30F3\\u30B9\\u30BF\\u30F3\\u30B9\\u3092\\u7528\\u610F\\u3057\\u3066\\u304F\\u3060\\u3055\\u3044\\u3002\"\n  },\n  alreadySameNameMemberExist: {\n    name: \"alreadySameNameMemberExist\",\n    detail: \"Channel\\u306B\\u3059\\u3067\\u306B\\u540C\\u3058Name\\u306EMember\\u304C\\u5B58\\u5728\\u3057\\u307E\\u3059\",\n    solution: \"\\u5225\\u306EName\\u3092\\u4F7F\\u7528\\u3057\\u3066\\u304F\\u3060\\u3055\\u3044\"\n  },\n  alreadyPublishedStream: {\n    name: \"alreadyPublishedStream\",\n    detail: \"\\u3059\\u3067\\u306BPublish\\u3057\\u305FStream\\u3092\\u518D\\u5EA6Publish\\u3059\\u308B\\u3053\\u3068\\u306F\\u3067\\u304D\\u307E\\u305B\\u3093 You cannot re-publish a stream that has already been published\",\n    solution: \"\\u305D\\u306EStream\\u3092Publish\\u3057\\u305FPublication\\u3092Unpublish\\u3059\\u308B\\u304B\\u3001\\u5225\\u306E\\u65B0\\u3057\\u3044Stream\\u3092\\u4F5C\\u3063\\u3066Publish\\u3057\\u3066\\u304F\\u3060\\u3055\\u3044 Unpublish the publication that published that stream, or create another new stream and publish it\"\n  },\n  alreadySubscribedPublication: {\n    name: \"alreadySubscribedPublication\",\n    detail: \"\\u3059\\u3067\\u306BSubscribe\\u3057\\u305FPublication\\u3092Subscribe\\u3059\\u308B\\u3053\\u3068\\u306F\\u3067\\u304D\\u307E\\u305B\\u3093\",\n    solution: \"\\u3042\\u308A\\u307E\\u305B\\u3093\"\n  },\n  invalidTrackKind: {\n    name: \"invalidTrackKind\",\n    detail: \"Stream\\u306E\\u7A2E\\u985E\\u3068MediaStreamTrack\\u306E\\u7A2E\\u985E\\u304C\\u4E00\\u81F4\\u3057\\u307E\\u305B\\u3093\",\n    solution: \"Stream\\u306E\\u7A2E\\u985E\\u3068\\u540C\\u3058MediaStreamTrack\\u3092\\u5229\\u7528\\u3057\\u3066\\u304F\\u3060\\u3055\\u3044\"\n  },\n  cantMoveSameIdChannel: {\n    name: \"cantMoveSameIdChannel\",\n    detail: \"moveChannel\\u3067\\u540C\\u3058id\\u306EChannel\\u306B\\u79FB\\u52D5\\u3059\\u308B\\u3053\\u3068\\u306F\\u51FA\\u6765\\u307E\\u305B\\u3093\",\n    solution: \"\\u79FB\\u52D5\\u5148\\u306EChannel\\u304C\\u6B63\\u3057\\u3044\\u304B\\u78BA\\u304B\\u3081\\u3066\\u304F\\u3060\\u3055\\u3044\"\n  },\n  alreadyChannelClosed: {\n    name: \"alreadyChannelClosed\",\n    detail: \"Channel\\u304C\\u3059\\u3067\\u306BClose\\u3055\\u308C\\u3066\\u3044\\u307E\\u3059\",\n    solution: \"\\u3042\\u308A\\u307E\\u305B\\u3093\"\n  },\n  disabledDataStream: {\n    name: \"disabledDataStream\",\n    detail: \"\\u95A2\\u9023\\u3059\\u308BPublication\\u304CDisable\\u306ADataStream\\u306B\\u306F\\u66F8\\u304D\\u8FBC\\u307F\\u3067\\u304D\\u307E\\u305B\\u3093\",\n    solution: \"\\u95A2\\u9023\\u3059\\u308BPublication\\u3092Enable\\u3057\\u3066\\u304B\\u3089\\u66F8\\u304D\\u8FBC\\u3093\\u3067\\u304F\\u3060\\u3055\\u3044\"\n  },\n  publicationNotExist: {\n    name: \"publicationNotExist\",\n    detail: \"channel\\u306B\\u8A72\\u5F53\\u3059\\u308BPublication\\u304C\\u5B58\\u5728\\u3057\\u307E\\u305B\\u3093\",\n    solution: \"publicationId\\u304C\\u6B63\\u3057\\u3044\\u304B\\u78BA\\u304B\\u3081\\u3066\\u304F\\u3060\\u3055\\u3044\"\n  },\n  subscriptionNotExist: {\n    name: \"subscriptionNotExist\",\n    detail: \"channel\\u306B\\u8A72\\u5F53\\u3059\\u308BSubscription\\u304C\\u5B58\\u5728\\u3057\\u307E\\u305B\\u3093\",\n    solution: \"subscriptionId\\u304C\\u6B63\\u3057\\u3044\\u304B\\u78BA\\u304B\\u3081\\u3066\\u304F\\u3060\\u3055\\u3044\"\n  },\n  unknownMemberType: {\n    name: \"unknownMemberType\",\n    detail: \"\\u5BFE\\u8C61\\u306EMember\\u306ESubtype\\u306E\\u30D7\\u30E9\\u30B0\\u30A4\\u30F3\\u304C\\u767B\\u9332\\u3055\\u308C\\u3066\\u3044\\u307E\\u305B\\u3093\",\n    solution: \"\\u5BFE\\u8C61\\u306EMember\\u306ESubtype\\u306E\\u30D7\\u30E9\\u30B0\\u30A4\\u30F3(SfuBot\\u306A\\u3069)\\u3092SkyWayContext\\u306B\\u767B\\u9332\\u3057\\u3066\\u304F\\u3060\\u3055\\u3044\"\n  },\n  unknownRemoteMemberType: {\n    name: \"unknownMemberType\",\n    detail: \"\\u5BFE\\u8C61\\u306EMember\\u306ESubtype\\u306E\\u30D7\\u30E9\\u30B0\\u30A4\\u30F3\\u304C\\u767B\\u9332\\u3055\\u308C\\u3066\\u3044\\u307E\\u305B\\u3093\",\n    solution: \"\\u5BFE\\u8C61\\u306EMember\\u306ESubtype\\u306E\\u30D7\\u30E9\\u30B0\\u30A4\\u30F3(SfuBot\\u306A\\u3069)\\u3092SkyWayContext\\u306B\\u767B\\u9332\\u3057\\u3066\\u304F\\u3060\\u3055\\u3044\"\n  },\n  streamNotExistInSubscription: {\n    name: \"streamNotExistInSubscription\",\n    detail: \"Subscription\\u306BStream\\u304C\\u3042\\u308A\\u307E\\u305B\\u3093\\u3002RemoteMember\\u306ESubscription\\u306EStream\\u306B\\u306F\\u30A2\\u30AF\\u30BB\\u30B9\\u3067\\u304D\\u307E\\u305B\\u3093\",\n    solution: \"\\u53C2\\u7167\\u3057\\u3066\\u3044\\u308BSubscription\\u304C\\u76EE\\u7684\\u306E\\u3082\\u306E\\u304B\\u78BA\\u304B\\u3081\\u3066\\u304F\\u3060\\u3055\\u3044\\u3002\"\n  },\n  streamNotExistInPublication: {\n    name: \"streamNotExistInPublication\",\n    detail: \"Publication\\u306BStream\\u304C\\u3042\\u308A\\u307E\\u305B\\u3093\\u3002RemoteMember\\u306EPublication\\u306EStream\\u306B\\u306F\\u30A2\\u30AF\\u30BB\\u30B9\\u3067\\u304D\\u307E\\u305B\\u3093\",\n    solution: \"\\u53C2\\u7167\\u3057\\u3066\\u3044\\u308BPublication\\u304C\\u76EE\\u7684\\u306E\\u3082\\u306E\\u304B\\u78BA\\u304B\\u3081\\u3066\\u304F\\u3060\\u3055\\u3044\\u3002\"\n  },\n  dataStreamNotSupportEncoding: {\n    name: \"dataStreamNotSupportEncoding\",\n    detail: \"dataStream\\u306FEncode\\u8A2D\\u5B9A\\u306E\\u5909\\u66F4\\u306B\\u5BFE\\u5FDC\\u3057\\u3066\\u3044\\u307E\\u305B\\u3093\",\n    solution: \"\\u3042\\u308A\\u307E\\u305B\\u3093\"\n  },\n  correspondingEncodeNotExistForId: {\n    name: \"correspondingEncodeNotExistForId\",\n    detail: \"\\u6307\\u5B9A\\u3055\\u308C\\u305FID\\u306B\\u5BFE\\u5FDC\\u3059\\u308BEncode\\u8A2D\\u5B9A\\u304C\\u5B58\\u5728\\u3057\\u307E\\u305B\\u3093\",\n    solution: \"\\u6B63\\u3057\\u3044EncodingID\\u3092\\u6307\\u5B9A\\u3057\\u3066\\u304F\\u3060\\u3055\\u3044\"\n  },\n  updateIceParamsFailed: {\n    name: \"updateIceParamsFailed\",\n    detail: \"iceParams\\u306E\\u66F4\\u65B0\\u306B\\u5931\\u6557\\u3057\\u307E\\u3057\\u305F\",\n    solution: \"\\u3042\\u308A\\u307E\\u305B\\u3093\"\n  },\n  invalidElement: {\n    name: \"invalidElement\",\n    detail: \"\\u6E21\\u3055\\u308C\\u305FHTML Element\\u304C\\u6B63\\u3057\\u304F\\u3042\\u308A\\u307E\\u305B\\u3093\",\n    solution: \"\\u8981\\u6C42\\u3055\\u308C\\u305F\\u6B63\\u3057\\u3044Element\\u3092\\u6E21\\u3057\\u3066\\u304F\\u3060\\u3055\\u3044\"\n  },\n  connectRtcApiFailed: {\n    name: \"connectRtcApiFailed\",\n    detail: \"RtcAPI\\u3078\\u306E\\u63A5\\u7D9A\\u306B\\u5931\\u6557\\u3057\\u307E\\u3057\\u305F\",\n    solution: \"\\u30A4\\u30F3\\u30BF\\u30FC\\u30CD\\u30C3\\u30C8\\u3078\\u306E\\u63A5\\u7D9A\\u3067\\u304D\\u3066\\u3044\\u308B\\u304B\\u3001\\u3082\\u3057\\u304F\\u306FToken\\u306E\\u30D1\\u30E9\\u30E1\\u30FC\\u30BF\\u304C\\u6B63\\u3057\\u3044\\u304B\\u3092\\u78BA\\u304B\\u3081\\u3066\\u304F\\u3060\\u3055\\u3044\"\n  },\n  rtcApiFatalError: {\n    name: \"rtcApiFatalError\",\n    detail: \"RtcAPI\\u306E\\u56DE\\u5FA9\\u4E0D\\u80FD\\u306A\\u30A8\\u30E9\\u30FC\\u3067\\u3059\\u3002\\u30B5\\u30FC\\u30D0\\u30FC\\u5074\\u306E\\u554F\\u984C\\u306E\\u53EF\\u80FD\\u6027\\u304C\\u3042\\u308A\\u307E\\u3059\",\n    solution: \"\\u30A4\\u30F3\\u30BF\\u30FC\\u30CD\\u30C3\\u30C8\\u3078\\u306E\\u63A5\\u7D9A\\u304C\\u51FA\\u6765\\u3066\\u3044\\u308B\\u304B\\u3092\\u78BA\\u304B\\u3081\\u3066\\u304F\\u3060\\u3055\\u3044\"\n  },\n  invalidExpireTokenValue: {\n    name: \"invalidExpireTokenValue\",\n    detail: \"token\\u306EExpire\\u6642\\u523B\\u304C\\u4E0D\\u6B63\\u3067\\u3059\",\n    solution: \"\\u6B63\\u3057\\u3044\\u6642\\u523B\\u3092\\u6307\\u5B9A\\u3057\\u3066\\u304F\\u3060\\u3055\\u3044\"\n  },\n  invalidRemindExpireTokenValue: {\n    name: \"invalidRemindExpireTokenValue\",\n    detail: \"token\\u306EExpire\\u3092\\u30EA\\u30DE\\u30A4\\u30F3\\u30C9\\u3059\\u308B\\u6642\\u9593\\u306E\\u5024\\u304C\\u4E0D\\u6B63\\u3067\\u3059\",\n    solution: \"\\u6B63\\u3057\\u3044\\u6642\\u9593\\u3092\\u6307\\u5B9A\\u3057\\u3066\\u304F\\u3060\\u3055\\u3044\"\n  },\n  invalidTokenAppId: {\n    name: \"invalidTokenAppId\",\n    detail: \"token\\u306EappId\\u304C\\u6B63\\u3057\\u304F\\u3042\\u308A\\u307E\\u305B\\u3093\",\n    solution: \"\\u6B63\\u3057\\u3044appId\\u3092\\u542B\\u3080Token\\u3092\\u4F7F\\u7528\\u3057\\u3066\\u304F\\u3060\\u3055\\u3044\"\n  },\n  mediaDevicesNotFound: {\n    name: \"mediaDevicesNotFound\",\n    detail: \"navigator.mediaDevices\\u304C\\u307F\\u3064\\u304B\\u308A\\u307E\\u305B\\u3093\",\n    solution: \"\\u30A2\\u30D7\\u30EA\\u30B1\\u30FC\\u30B7\\u30E7\\u30F3\\u3092https,localhost,127.0.0.1\\u306E\\u3044\\u305A\\u308C\\u304B\\u306E\\u74B0\\u5883\\u3067\\u52D5\\u4F5C\\u3055\\u305B\\u3066\\u304F\\u3060\\u3055\\u3044\"\n  },\n  canNotUseReplaceStream: {\n    name: \"canNotUseReplaceStream\",\n    detail: \"remote\\u306EPublication\\u304B\\u3089replaceStream\\u3067\\u304D\\u307E\\u305B\\u3093\",\n    solution: \"\\u5BFE\\u8C61\\u306EPublication\\u304CLocal\\u306E\\u3082\\u306E\\u304B\\u78BA\\u8A8D\\u3057\\u3066\\u304F\\u3060\\u3055\\u3044\"\n  },\n  canNotEnableRemotePublication: {\n    name: \"canNotEnableRemotePublication\",\n    detail: \"remote\\u306EPublication\\u3092enable\\u3059\\u308B\\u3053\\u3068\\u306F\\u3067\\u304D\\u307E\\u305B\\u3093\",\n    solution: \"\\u5BFE\\u8C61\\u306EPublication\\u304CLocal\\u306E\\u3082\\u306E\\u304B\\u78BA\\u8A8D\\u3057\\u3066\\u304F\\u3060\\u3055\\u3044\"\n  }\n};\n\n// ../core/src/publication/factory.ts\ninit_process();\n\n// ../core/src/publication/index.ts\ninit_process();\n\n// ../core/src/util.ts\ninit_process();\nvar import_bowser = __toESM(require_es5());\nvar import_sdp_transform = __toESM(require_lib());\nvar log5 = new Logger(\"packages/core/src/util.ts\");\nfunction getBitrateFromPeerConnection(stream, direction, cb, selector) {\n  let preBytes = 0;\n  const id = setInterval(() => __async(this, null, function* () {\n    const stats = yield stream.getStats(selector);\n    const stat = stats.find((v) => {\n      if (direction === \"inbound\") {\n        return (v == null ? void 0 : v.id.includes(\"InboundRTPVideo\")) || (v == null ? void 0 : v.type.includes(\"inbound-rtp\"));\n      }\n      return (v == null ? void 0 : v.id.includes(\"OutboundRTPVideo\")) || (v == null ? void 0 : v.type.includes(\"outbound-rtp\"));\n    });\n    if (!stat) {\n      return;\n    }\n    const totalBytes = direction === \"inbound\" ? stat.bytesReceived : stat.bytesSent;\n    const bitrate = (totalBytes - preBytes) * 8;\n    cb(bitrate);\n    preBytes = totalBytes;\n  }), 1e3);\n  return () => clearInterval(id);\n}\nfunction statsToArray(stats) {\n  const arr = [];\n  stats.forEach((stat) => {\n    arr.push(stat);\n  });\n  return arr;\n}\nfunction createLogPayload(_0) {\n  return __async(this, arguments, function* ({\n    operationName,\n    channel\n  }) {\n    const payload = {\n      operationName,\n      appId: channel.appId,\n      channelId: channel.id\n    };\n    if (channel.localPerson) {\n      const member = channel.localPerson;\n      const publishing = yield Promise.all(\n        member.publications.map((p) => __async(this, null, function* () {\n          var _a2, _b2, _c;\n          const publication = {\n            id: p.id,\n            contentType: p.contentType,\n            state: p.state,\n            stats: {},\n            connectionStats: {}\n          };\n          if (p.stream) {\n            for (const { memberId, stats } of yield p.stream._getStatsAll()) {\n              const localCandidate = stats.find(\n                (s) => s.type.includes(\"local-candidate\")\n              );\n              publication.stats[memberId] = {\n                transportType: (_a2 = localCandidate == null ? void 0 : localCandidate.protocol) != null ? _a2 : \"none\",\n                relayProtocol: (_b2 = localCandidate == null ? void 0 : localCandidate.relayProtocol) != null ? _b2 : \"none\",\n                callType: (_c = p.subscriptions.find(\n                  (s) => s.subscriber.id === memberId\n                )) == null ? void 0 : _c.subscriber.subtype,\n                outbound: stats.find((s) => s.type.includes(\"outbound-rtp\")),\n                localCandidate\n              };\n            }\n          }\n          if (p.stream) {\n            for (const {\n              memberId,\n              connectionState\n            } of p.stream._getConnectionStateAll()) {\n              publication.connectionStats[memberId] = connectionState;\n            }\n          }\n          return publication;\n        }))\n      );\n      payload[\"publishing\"] = publishing;\n      const subscribing = yield Promise.all(\n        member.subscriptions.map((s) => __async(this, null, function* () {\n          const subscription = {\n            id: s.id,\n            contentType: s.contentType,\n            stats: {}\n          };\n          subscription[\"callType\"] = s.publication.publisher.subtype;\n          if (s.stream) {\n            const stats = yield s.stream.getStats();\n            subscription.stats = stats.find(\n              (s2) => s2.type.includes(\"inbound-rtp\")\n            );\n            const iceCandidate = stats.find(\n              (s2) => s2.type.includes(\"local-candidate\")\n            );\n            subscription[\"transportType\"] = iceCandidate == null ? void 0 : iceCandidate.protocol;\n            subscription[\"relayProtocol\"] = iceCandidate == null ? void 0 : iceCandidate.relayProtocol;\n          }\n          if (s.stream) {\n            subscription[\"connectionState\"] = s.stream.getConnectionState();\n          }\n          return subscription;\n        }))\n      );\n      payload[\"subscribing\"] = subscribing;\n    }\n    return payload;\n  });\n}\nfunction createWarnPayload({\n  member,\n  detail,\n  channel,\n  operationName,\n  payload\n}) {\n  const warn = {\n    operationName,\n    payload,\n    detail\n  };\n  if (member) {\n    warn[\"appId\"] = member.channel.appId;\n    warn[\"channelId\"] = member.channel.id;\n    warn[\"memberId\"] = member.id;\n  }\n  if (channel) {\n    warn[\"appId\"] = channel.appId;\n    warn[\"channelId\"] = channel.id;\n  }\n  return warn;\n}\nfunction createError({\n  operationName,\n  context,\n  info,\n  error,\n  path: path2,\n  payload,\n  channel\n}) {\n  const errPayload = {\n    operationName,\n    payload\n  };\n  if (channel) {\n    errPayload[\"appId\"] = channel.appId;\n    errPayload[\"channelId\"] = channel.id;\n    if (channel.localPerson) {\n      errPayload[\"memberId\"] = channel.localPerson.id;\n    }\n  }\n  if (context) {\n    errPayload[\"info\"] = context.info;\n    errPayload[\"plugins\"] = context.plugins.map((p) => p.subtype);\n  }\n  return new SkyWayError({ error, info, payload: errPayload, path: path2 });\n}\nvar waitForLocalStats = (stream, remoteMember, end, interval = 100, timeout = 1e4) => __async(void 0, null, function* () {\n  return new Promise((r2, f) => __async(void 0, null, function* () {\n    for (let elapsed = 0; ; elapsed += interval) {\n      if (elapsed >= timeout) {\n        f(\n          createError({\n            operationName: \"Peer.waitForStats\",\n            info: __spreadProps(__spreadValues({}, errors.timeout), {\n              detail: \"waitForStats timeout\"\n            }),\n            path: log5.prefix\n          })\n        );\n        break;\n      }\n      const stats = yield stream.getStats(remoteMember);\n      if (end(stats)) {\n        r2(stats);\n        break;\n      }\n      yield new Promise((r3) => setTimeout(r3, interval));\n    }\n  }));\n});\nvar getParameters = (fmtp, payload) => {\n  var _a2, _b2;\n  return fmtpConfigParser((_b2 = (_a2 = fmtp.find((f) => f.payload === payload)) == null ? void 0 : _a2.config) != null ? _b2 : \"\");\n};\nvar fmtpConfigParser = (config) => {\n  const parameters = config.split(\";\").reduce((acc, cur) => {\n    const [k, v] = cur.split(\"=\");\n    if (k) {\n      acc[k] = Number(v);\n      if (k === \"profile-level-id\") {\n        acc[k] = v;\n      }\n    }\n    return acc;\n  }, {});\n  return parameters;\n};\nfunction createTestVideoTrack(width, height) {\n  const canvas = document.createElement(\"canvas\");\n  canvas.width = width;\n  canvas.height = height;\n  const ctx = canvas.getContext(\"2d\");\n  const drawAnimation = () => {\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n    ctx.fillStyle = \"rgb(200, 200, 200)\";\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\n    const date = new Date();\n    ctx.font = \"45px Monaco,Consolas\";\n    ctx.textAlign = \"center\";\n    ctx.fillStyle = \"red\";\n    const hours = (\"0\" + date.getHours()).slice(-2);\n    const minutes = (\"0\" + date.getMinutes()).slice(-2);\n    const seconds = (\"0\" + date.getSeconds()).slice(-2);\n    const milliseconds = (\"00\" + date.getMilliseconds()).slice(-3);\n    ctx.fillText(\n      `${hours}:${minutes}:${seconds}.${milliseconds}`,\n      canvas.width / 2,\n      canvas.height / 2\n    );\n    requestAnimationFrame(drawAnimation);\n  };\n  setTimeout(() => drawAnimation(), 0);\n  const [track] = canvas.captureStream().getVideoTracks();\n  return track;\n}\nvar getRuntimeInfo = ({\n  isNotBrowser\n} = {}) => {\n  if (isNotBrowser) {\n    return isNotBrowser;\n  }\n  const browser = import_bowser.default.getParser(window.navigator.userAgent);\n  const osName = browser.getOSName();\n  const osVersion = browser.getOSVersion();\n  const browserName = browser.getBrowserName();\n  const browserVersion = browser.getBrowserVersion();\n  return {\n    browserName,\n    browserVersion,\n    osName,\n    osVersion\n  };\n};\nfunction detectDevice() {\n  if (typeof navigator === \"object\" && navigator.product === \"ReactNative\") {\n    if (typeof RTCPeerConnection === \"undefined\") {\n      return void 0;\n    }\n    return \"ReactNative\";\n  } else if (typeof navigator === \"object\" && typeof navigator.userAgent === \"string\") {\n    const ua = navigator.userAgent;\n    const browser = import_bowser.default.getParser(ua);\n    const engine = browser.getEngine();\n    if (browser.satisfies({\n      chrome: \">=74\",\n      chromium: \">=74\",\n      \"microsoft edge\": \">=88\"\n    })) {\n      return \"Chrome74\";\n    } else if (browser.satisfies({ chrome: \">=70\", chromium: \">=70\" })) {\n      return \"Chrome70\";\n    } else if (browser.satisfies({ chrome: \">=67\", chromium: \">=67\" })) {\n      return \"Chrome67\";\n    } else if (browser.satisfies({ chrome: \">=55\", chromium: \">=55\" })) {\n      return \"Chrome55\";\n    } else if (browser.satisfies({ firefox: \">=60\" })) {\n      return \"Firefox60\";\n    } else if (browser.satisfies({ ios: { OS: \">=14.3\", firefox: \">=30.0\" } })) {\n      return \"Safari12\";\n    } else if (browser.satisfies({ safari: \">=12.0\" }) && typeof RTCRtpTransceiver !== \"undefined\" && RTCRtpTransceiver.prototype.hasOwnProperty(\"currentDirection\")) {\n      return \"Safari12\";\n    } else if (browser.satisfies({ safari: \">=11\" })) {\n      return \"Safari11\";\n    } else if (browser.satisfies({ \"microsoft edge\": \">=11\" }) && browser.satisfies({ \"microsoft edge\": \"<=18\" })) {\n      return \"Edge11\";\n    } else if (engine.name && engine.name.toLowerCase() === \"blink\") {\n      const match = ua.match(/(?:(?:Chrome|Chromium))[ /](\\w+)/i);\n      if (match) {\n        const version = Number(match[1]);\n        if (version >= 74) {\n          return \"Chrome74\";\n        } else if (version >= 70) {\n          return \"Chrome70\";\n        } else if (version >= 67) {\n          return \"Chrome67\";\n        } else {\n          return \"Chrome55\";\n        }\n      } else {\n        return \"Chrome74\";\n      }\n    } else {\n      return void 0;\n    }\n  } else {\n    return void 0;\n  }\n}\n\n// ../core/src/publication/index.ts\nvar log6 = new Logger(\"packages/core/src/publication/index.ts\");\nvar PublicationImpl = class {\n  constructor(args) {\n    this._codecCapabilities = [];\n    this._encodings = [];\n    this._state = \"enabled\";\n    this._events = new Events();\n    this.onCanceled = this._events.make();\n    this.onSubscribed = this._events.make();\n    this.onUnsubscribed = this._events.make();\n    this.onSubscriptionListChanged = this._events.make();\n    this.onMetadataUpdated = this._events.make();\n    this.onEnabled = this._events.make();\n    this.onDisabled = this._events.make();\n    this.onStateChanged = this._events.make();\n    this.onConnectionStateChanged = new Event();\n    this._onEncodingsChanged = this._events.make();\n    this._onReplaceStream = this._events.make();\n    this._onEnabled = this._events.make();\n    this.streamEventDisposer = new EventDisposer();\n    this.cancel = () => new Promise((r2, f) => {\n      let failed = false;\n      this._channel._unpublish(this.id).catch((e2) => {\n        failed = true;\n        f(e2);\n      });\n      this._setStream(void 0);\n      this.onCanceled.asPromise(this._context.config.rtcApi.timeout).then(() => r2()).catch((e2) => {\n        if (!failed) {\n          f(e2);\n        }\n      });\n    });\n    this.updateMetadata = (metadata) => new Promise((r2, f) => __async(this, null, function* () {\n      const timestamp = log6.info(\n        \"[start] updateMetadata\",\n        yield createLogPayload({\n          operationName: \"Publication.updateMetadata\",\n          channel: this._channel\n        }),\n        this\n      );\n      let failed = false;\n      this._channel._updatePublicationMetadata(this.id, metadata).catch((e2) => {\n        failed = true;\n        f(e2);\n      });\n      this.onMetadataUpdated.watch(\n        (e2) => e2.metadata === metadata,\n        this._context.config.rtcApi.timeout\n      ).catch((error) => {\n        if (!failed) {\n          throw createError({\n            operationName: \"PublicationImpl.updateMetadata\",\n            info: __spreadProps(__spreadValues({}, errors.timeout), {\n              detail: \"publication onMetadataUpdated\"\n            }),\n            path: log6.prefix,\n            context: this._context,\n            channel: this._channel,\n            error\n          });\n        }\n      }).then(() => __async(this, null, function* () {\n        r2();\n        log6.elapsed(\n          timestamp,\n          \"[end] updateMetadata\",\n          yield createLogPayload({\n            operationName: \"Publication.updateMetadata\",\n            channel: this._channel\n          }),\n          this\n        );\n      }));\n    }));\n    this.disable = () => new Promise((r2, f) => __async(this, null, function* () {\n      const timestamp = log6.info(\n        \"[start] disable\",\n        yield createLogPayload({\n          operationName: \"Publication.disable\",\n          channel: this._channel\n        }),\n        this\n      );\n      this._disableStream();\n      let failed = false;\n      this._channel._disablePublication(this.id).catch((e2) => {\n        failed = true;\n        f(e2);\n      });\n      this.onDisabled.asPromise(this._context.config.rtcApi.timeout).then(() => __async(this, null, function* () {\n        r2();\n        log6.elapsed(\n          timestamp,\n          \"[end] disable\",\n          yield createLogPayload({\n            operationName: \"Publication.disable\",\n            channel: this._channel\n          }),\n          this\n        );\n      })).catch((e2) => {\n        if (!failed) {\n          f(e2);\n        }\n      });\n    }));\n    this.enable = () => new Promise((r2, f) => __async(this, null, function* () {\n      if (this.stream == void 0) {\n        f(\n          createError({\n            operationName: \"Publication.enable\",\n            context: this._context,\n            info: errors.canNotEnableRemotePublication,\n            path: log6.prefix\n          })\n        );\n        return;\n      }\n      const timestamp = log6.info(\n        \"[start] enable\",\n        yield createLogPayload({\n          operationName: \"Publication.enable\",\n          channel: this._channel\n        }),\n        this\n      );\n      let failed = false;\n      this._channel._enablePublication(this.id).catch((e2) => {\n        failed = true;\n        f(e2);\n      });\n      this._onEnabled.asPromise(this._context.config.rtcApi.timeout).then(() => __async(this, null, function* () {\n        yield this._enableStream();\n        this.onEnabled.emit();\n        this.onStateChanged.emit();\n        log6.elapsed(\n          timestamp,\n          \"[end] enable\",\n          yield createLogPayload({\n            operationName: \"Publication.enable\",\n            channel: this._channel\n          }),\n          this\n        );\n        r2();\n      })).catch((e2) => {\n        if (!failed) {\n          f(e2);\n        }\n      });\n    }));\n    var _a2, _b2;\n    this.id = args.id;\n    this._channel = args.channel;\n    this._context = this._channel._context;\n    this.publisher = args.publisher;\n    this.contentType = args.contentType;\n    this._metadata = args.metadata;\n    this.origin = args.origin;\n    this.setCodecCapabilities((_a2 = args.codecCapabilities) != null ? _a2 : []);\n    this.setEncodings(normalizeEncodings((_b2 = args.encodings) != null ? _b2 : []));\n    if (args.stream) {\n      this._setStream(args.stream);\n    }\n    this._state = args.isEnabled ? \"enabled\" : \"disabled\";\n    log6.debug(\"publication spawned\", this.toJSON());\n  }\n  get codecCapabilities() {\n    return this._codecCapabilities;\n  }\n  setCodecCapabilities(_codecCapabilities) {\n    this._codecCapabilities = _codecCapabilities;\n  }\n  get encodings() {\n    return this._encodings;\n  }\n  setEncodings(_encodings) {\n    this._encodings = _encodings;\n  }\n  get stream() {\n    return this._stream;\n  }\n  _setStream(stream) {\n    this._stream = stream;\n    if (stream) {\n      stream._onConnectionStateChanged.add((e2) => {\n        log6.debug(\"onConnectionStateChanged\", this.id, e2);\n        this.onConnectionStateChanged.emit(e2);\n      }).disposer(this.streamEventDisposer);\n    } else {\n      this.streamEventDisposer.dispose();\n    }\n  }\n  get metadata() {\n    return this._metadata;\n  }\n  get state() {\n    return this._state;\n  }\n  get subscriptions() {\n    return this._channel.subscriptions.filter(\n      (s) => s.publication.id === this.id\n    );\n  }\n  _updateMetadata(metadata) {\n    this._metadata = metadata;\n    this.onMetadataUpdated.emit({ metadata });\n  }\n  _disable() {\n    this._disableStream();\n    this.onDisabled.emit();\n    this.onStateChanged.emit();\n  }\n  _enable() {\n    if (this.stream) {\n      this._onEnabled.emit();\n    } else {\n      this._state = \"enabled\";\n      this.onEnabled.emit();\n      this.onStateChanged.emit();\n    }\n  }\n  _unpublished() {\n    this._state = \"canceled\";\n    if (this.stream) {\n      this.stream._unpublished();\n    }\n    this.onCanceled.emit();\n    this.onStateChanged.emit();\n    this._dispose();\n  }\n  _subscribed(subscription) {\n    this.onSubscribed.emit({ subscription });\n    this.onSubscriptionListChanged.emit();\n  }\n  _unsubscribed(subscription) {\n    this.onUnsubscribed.emit({ subscription });\n    this.onSubscriptionListChanged.emit();\n  }\n  updateEncodings(encodings) {\n    log6.info(\"updateEncodings\", { encodings }, this);\n    this.setEncodings(normalizeEncodings(encodings));\n    this._onEncodingsChanged.emit(encodings);\n  }\n  _disableStream() {\n    if (this.state === \"disabled\") {\n      return;\n    }\n    this._state = \"disabled\";\n    if (!this.stream) {\n      return;\n    }\n    if (this.stream.contentType === \"data\") {\n      this.stream.setIsEnabled(false);\n    } else {\n      this.stream.setEnabled(false).catch((e2) => {\n        log6.warn(\n          createWarnPayload({\n            channel: this._channel,\n            operationName: \"Publication._disableStream\",\n            payload: e2,\n            detail: \"setEnabled failed\"\n          })\n        );\n      });\n    }\n    createLogPayload({\n      operationName: \"Publication._disableStream\",\n      channel: this._channel\n    }).then(\n      (p) => log6.info(\"publication _disableStream\", p, { publication: this })\n    );\n  }\n  _enableStream() {\n    return __async(this, null, function* () {\n      if (this.state === \"enabled\") {\n        return;\n      }\n      this._state = \"enabled\";\n      if (!this.stream) {\n        return;\n      }\n      createLogPayload({\n        operationName: \"Publication._enableStream\",\n        channel: this._channel\n      }).then(\n        (p) => log6.info(\"publication _enableStream\", p, { publication: this })\n      );\n      if (this.stream.contentType === \"data\") {\n        this.stream.setIsEnabled(true);\n      } else {\n        yield this.stream.setEnabled(true).catch((e2) => {\n          log6.warn(\n            createWarnPayload({\n              channel: this._channel,\n              operationName: \"Publication._disableStream\",\n              payload: e2,\n              detail: \"setEnabled failed\"\n            })\n          );\n        });\n      }\n    });\n  }\n  replaceStream(stream, options = {}) {\n    var _a2;\n    log6.info(\"replaceStream\", { stream, options }, this);\n    if (!this.stream) {\n      throw createError({\n        operationName: \"PublicationImpl.replaceStream\",\n        context: this._context,\n        info: errors.canNotUseReplaceStream,\n        path: log6.prefix\n      });\n    }\n    if (stream.contentType !== this.contentType) {\n      throw createError({\n        operationName: \"PublicationImpl.replaceStream\",\n        context: this._context,\n        info: errors.invalidContentType,\n        path: log6.prefix\n      });\n    }\n    if ((_a2 = options.releaseOldStream) != null ? _a2 : true) {\n      const old = this.stream;\n      old.release();\n    }\n    createLogPayload({\n      operationName: \"PublicationImpl.replaceStream\",\n      channel: this._channel\n    }).then((res) => log6.debug(res, { old: this.stream, new: stream })).catch((e2) => e2);\n    stream.setEnabled(this.stream.isEnabled);\n    this._setStream(stream);\n    this._onReplaceStream.emit(stream);\n  }\n  getStats(selector) {\n    if (!this.stream) {\n      throw createError({\n        operationName: \"PublicationImpl.getStats\",\n        context: this._context,\n        info: errors.streamNotExistInSubscription,\n        path: log6.prefix\n      });\n    }\n    return this.stream._getStats(selector);\n  }\n  getRTCPeerConnection(selector) {\n    if (!this.stream) {\n      throw createError({\n        operationName: \"PublicationImpl.getRTCPeerConnection\",\n        context: this._context,\n        info: errors.streamNotExistInSubscription,\n        path: log6.prefix\n      });\n    }\n    return this.stream._getRTCPeerConnection(selector);\n  }\n  getConnectionState(selector) {\n    if (!this.stream) {\n      throw createError({\n        operationName: \"PublicationImpl.getConnectionState\",\n        context: this._context,\n        info: errors.streamNotExistInSubscription,\n        path: log6.prefix\n      });\n    }\n    return this.stream._getConnectionState(selector);\n  }\n  toJSON() {\n    var _a2;\n    return {\n      id: this.id,\n      channelId: this._channel.id,\n      publisherId: this.publisher.id,\n      origin: (_a2 = this.origin) == null ? void 0 : _a2.id,\n      contentType: this.contentType,\n      metadata: this.metadata,\n      codecCapabilities: this.codecCapabilities,\n      encodings: this.encodings,\n      state: this.state,\n      stream: this.stream\n    };\n  }\n  _dispose() {\n    this._events.dispose();\n  }\n};\nvar normalizeEncodings = (encodings) => encodings.map((e2, i) => {\n  var _a2;\n  return __spreadProps(__spreadValues({}, e2), {\n    id: (_a2 = e2.id) != null ? _a2 : i.toString()\n  });\n});\n\n// ../core/src/publication/factory.ts\nfunction createPublication(channel, {\n  publisherId,\n  stream,\n  origin,\n  metadata,\n  codecCapabilities,\n  encodings,\n  contentType,\n  id,\n  isEnabled\n}) {\n  const exist = channel._getPublication(id);\n  if (exist) {\n    return exist;\n  }\n  contentType = contentType.toLowerCase();\n  const originPublication = origin ? channel._getPublication(origin) : void 0;\n  if (originPublication) {\n    if (encodings.length === 0) {\n      encodings = originPublication.encodings;\n    }\n  }\n  const publication = new PublicationImpl({\n    id,\n    channel,\n    publisher: channel._getMember(publisherId),\n    contentType,\n    metadata,\n    origin: originPublication,\n    stream,\n    codecCapabilities: codecCapabilities != null ? codecCapabilities : [],\n    encodings,\n    isEnabled\n  });\n  return publication;\n}\n\n// ../core/src/subscription/factory.ts\ninit_process();\n\n// ../core/src/subscription/index.ts\ninit_process();\nvar log7 = new Logger(\"packages/core/src/subscription/index.ts\");\nvar SubscriptionImpl = class {\n  constructor(args) {\n    this._disposer = new EventDisposer();\n    this._state = \"enabled\";\n    this.onCanceled = new Event();\n    this.onStreamAttached = new Event();\n    this.onConnectionStateChanged = new Event();\n    this._onChangeEncoding = new Event();\n    this.cancel = () => new Promise((r2, f) => {\n      let failed = false;\n      this._channel._unsubscribe(this.id).catch((e2) => {\n        failed = true;\n        f(e2);\n      });\n      this.onCanceled.asPromise(this._context.config.rtcApi.timeout).then(() => r2()).catch((e2) => {\n        if (!failed)\n          f(e2);\n      });\n    });\n    this._channel = args.channel;\n    this._context = this._channel._context;\n    this.id = args.id;\n    this.contentType = args.contentType;\n    this.subscriber = args.subscriber;\n    this.publication = args.publication;\n    log7.debug(\"subscription spawned\", this.toJSON());\n    this._handlePublicationEnabled();\n  }\n  get state() {\n    return this._state;\n  }\n  _handlePublicationEnabled() {\n    this.publication.onDisabled.add(() => {\n      if (this.stream) {\n        log7.debug(\"disabled\", this);\n        this.stream.setIsEnabled(false);\n      }\n    }).disposer(this._disposer);\n    this.publication.onEnabled.add(() => {\n      if (this.stream) {\n        log7.debug(\"enabled\", this);\n        this.stream.setIsEnabled(true);\n      }\n    }).disposer(this._disposer);\n    if (this.stream) {\n      this.stream.setIsEnabled(this.publication.state === \"enabled\");\n    }\n  }\n  _setStream(stream) {\n    this._stream = stream;\n    this.onStreamAttached.emit();\n    stream._onConnectionStateChanged.add((e2) => {\n      log7.debug(\"onConnectionStateChanged\", this.id, e2);\n      this.onConnectionStateChanged.emit(e2);\n    });\n  }\n  get stream() {\n    return this._stream;\n  }\n  toJSON() {\n    return {\n      id: this.id,\n      contentType: this.contentType,\n      subscriber: this.subscriber,\n      publication: this.publication,\n      channelId: this._channel.id,\n      state: this.state,\n      stream: this.stream\n    };\n  }\n  _canceled() {\n    this._state = \"canceled\";\n    this.onCanceled.emit();\n    this._disposer.dispose();\n  }\n  changePreferredEncoding(id) {\n    if (!this.stream) {\n      throw createError({\n        operationName: \"SubscriptionImpl.changePreferredEncoding\",\n        info: errors.streamNotExistInSubscription,\n        path: log7.prefix,\n        context: this._context,\n        channel: this._channel\n      });\n    }\n    if (this.stream.contentType === \"data\") {\n      throw createError({\n        operationName: \"SubscriptionImpl.changePreferredEncoding\",\n        info: errors.dataStreamNotSupportEncoding,\n        path: log7.prefix,\n        context: this._context,\n        channel: this._channel\n      });\n    }\n    if (!this.publication.encodings.map((e2) => e2.id).includes(id)) {\n      throw createError({\n        operationName: \"SubscriptionImpl.changePreferredEncoding\",\n        info: errors.correspondingEncodeNotExistForId,\n        path: log7.prefix,\n        context: this._context,\n        channel: this._channel\n      });\n    }\n    this.preferredEncoding = id;\n    this._onChangeEncoding.emit();\n  }\n  getStats() {\n    if (!this.stream) {\n      throw createError({\n        operationName: \"SubscriptionImpl.getStats\",\n        info: errors.streamNotExistInSubscription,\n        path: log7.prefix,\n        context: this._context,\n        channel: this._channel\n      });\n    }\n    return this.stream._getStats();\n  }\n  getRTCPeerConnection() {\n    if (!this.stream) {\n      throw createError({\n        operationName: \"SubscriptionImpl.getRTCPeerConnection\",\n        info: errors.streamNotExistInSubscription,\n        path: log7.prefix,\n        context: this._context,\n        channel: this._channel\n      });\n    }\n    return this.stream._getRTCPeerConnection();\n  }\n  getConnectionState() {\n    if (!this.stream) {\n      throw createError({\n        operationName: \"SubscriptionImpl.getConnectionState\",\n        info: errors.streamNotExistInSubscription,\n        path: log7.prefix,\n        context: this._context,\n        channel: this._channel\n      });\n    }\n    return this.stream._getConnectionState();\n  }\n};\n\n// ../core/src/subscription/factory.ts\nfunction createSubscription(channel, { subscriberId, publicationId, id }) {\n  const exist = channel._getSubscription(id);\n  if (exist)\n    return exist;\n  const publication = channel._getPublication(publicationId);\n  const contentType = publication.contentType;\n  const subscription = new SubscriptionImpl({\n    channel,\n    id,\n    subscriber: channel._getMember(subscriberId),\n    publication: channel._getPublication(publicationId),\n    contentType\n  });\n  return subscription;\n}\n\n// ../core/src/member/localPerson/index.ts\ninit_process();\n\n// ../core/src/plugin/internal/unknown/member.ts\ninit_process();\n\n// ../core/src/member/index.ts\ninit_process();\nvar log8 = new Logger(\"packages/core/src/member/index.ts\");\nvar MemberImpl = class {\n  constructor(args) {\n    this._state = \"joined\";\n    this._events = new Events();\n    this.onLeft = this._events.make();\n    this.onMetadataUpdated = this._events.make();\n    this.channel = args.channel;\n    this.id = args.id;\n    this.name = args.name;\n    this._metadata = args.metadata;\n    this.context = args.context;\n  }\n  get metadata() {\n    return this._metadata;\n  }\n  get state() {\n    return this._state;\n  }\n  get publications() {\n    return this.channel.publications.filter((p) => p.publisher.id === this.id);\n  }\n  get subscriptions() {\n    return this.channel.subscriptions.filter(\n      (p) => p.subscriber.id === this.id\n    );\n  }\n  toJSON() {\n    return {\n      id: this.id,\n      name: this.name,\n      type: this.type,\n      subtype: this.subtype,\n      metadata: this.metadata\n    };\n  }\n  _left() {\n    this._state = \"left\";\n    this.onLeft.emit();\n    this._events.dispose();\n  }\n  _metadataUpdated(metadata) {\n    this._metadata = metadata;\n    this.onMetadataUpdated.emit(metadata);\n  }\n  updateMetadata(metadata) {\n    return __async(this, null, function* () {\n      yield this.channel._updateMemberMetadata(this.id, metadata);\n    });\n  }\n  leave() {\n    return __async(this, null, function* () {\n      const timestamp = log8.info(\n        \"[start] leave\",\n        yield createLogPayload({\n          operationName: \"localPerson.leave\",\n          channel: this.channel\n        })\n      );\n      if (this.state === \"left\") {\n        throw createError({\n          operationName: \"localPerson.leave\",\n          info: errors.localPersonNotJoinedChannel,\n          path: log8.prefix,\n          context: this.context,\n          channel: this.channel\n        });\n      }\n      yield this.channel.leave(this);\n      log8.elapsed(timestamp, \"[end] leave\");\n    });\n  }\n};\n\n// ../core/src/plugin/internal/unknown/connection.ts\ninit_process();\nvar log9 = new Logger(\n  \"packages/core/src/plugin/internal/unknown/connection.ts\"\n);\nvar UnknownConnection = class {\n  constructor(localPerson, remoteMember) {\n    this.localPerson = localPerson;\n    this.remoteMember = remoteMember;\n    this.type = \"unknown\";\n    this.onDisconnect = new Event();\n    this.onClose = new Event();\n    this.closed = false;\n  }\n  close() {\n    this.closed = true;\n    this.onClose.emit();\n  }\n  startPublishing(publication) {\n    return __async(this, null, function* () {\n      log9.debug(\n        `this is unknown type connection. should install ${this.remoteMember.subtype} plugin`,\n        { publication }\n      );\n    });\n  }\n  stopPublishing(publication) {\n    return __async(this, null, function* () {\n      log9.debug(\n        `this is unknown type connection. should install ${this.remoteMember.subtype} plugin`,\n        { publication }\n      );\n    });\n  }\n  startSubscribing(subscription) {\n    return __async(this, null, function* () {\n      log9.debug(\n        `this is unknown type connection. should install ${this.remoteMember.subtype} plugin`,\n        { subscription }\n      );\n    });\n  }\n  stopSubscribing(subscription) {\n    return __async(this, null, function* () {\n      log9.debug(\n        `this is unknown type connection. should install ${this.remoteMember.subtype} plugin`,\n        { subscription }\n      );\n    });\n  }\n};\n\n// ../core/src/plugin/internal/unknown/member.ts\nvar UnknownMemberImpl = class extends MemberImpl {\n  constructor(args) {\n    super(args);\n    this.type = \"bot\";\n    this.side = \"remote\";\n    this._connections = {};\n    this.plugin = args.plugin;\n    this.subtype = args.subtype;\n  }\n  _getConnection(localPersonId) {\n    return this._connections[localPersonId];\n  }\n  _getOrCreateConnection(localPerson) {\n    var _a2;\n    const connection = (_a2 = this._getConnection(localPerson.id)) != null ? _a2 : this._createConnection(localPerson, this);\n    return connection;\n  }\n  _createConnection(localPerson, endpointMember) {\n    return new UnknownConnection(localPerson, endpointMember);\n  }\n  _dispose() {\n  }\n};\n\n// ../core/src/member/remoteMember.ts\ninit_process();\nfunction isRemoteMember(member) {\n  if (member == void 0)\n    return false;\n  if (member[\"side\"] === \"remote\") {\n    return true;\n  }\n  return false;\n}\n\n// ../core/src/member/localPerson/agent/index.ts\ninit_process();\n\n// ../core/src/member/localPerson/agent/publishing.ts\ninit_process();\nvar log10 = new Logger(\"packages/core/src/dataPlane/agent/publishing.ts\");\nvar PublishingAgent = class {\n  constructor(_localPerson) {\n    this._localPerson = _localPerson;\n    this.context = this._localPerson.context;\n  }\n  startPublishing(publication, endpoint) {\n    return __async(this, null, function* () {\n      if (this.context.config.internal.disableDPlane) {\n        yield new Promise((r2) => setTimeout(r2, 500));\n        return;\n      }\n      if (!publication.stream) {\n        yield this._localPerson.onStreamPublished.watch(\n          (e2) => e2.publication.id === publication.id,\n          this.context.config.rtcApi.timeout\n        ).catch((error) => {\n          throw createError({\n            operationName: \"PublishingAgent.startPublishing\",\n            context: this.context,\n            channel: this._localPerson.channel,\n            info: __spreadProps(__spreadValues({}, errors.timeout), {\n              detail: \"PublishingAgent onStreamPublished\"\n            }),\n            path: log10.prefix,\n            payload: { publication },\n            error\n          });\n        });\n      }\n      const connection = endpoint._getOrCreateConnection(this._localPerson);\n      if (connection.startPublishing) {\n        yield connection.startPublishing(publication);\n      }\n    });\n  }\n  stopPublishing(publication, endpoint) {\n    return __async(this, null, function* () {\n      const connection = endpoint._getConnection(this._localPerson.id);\n      if (connection == null ? void 0 : connection.stopPublishing) {\n        connection.stopPublishing(publication).catch((err) => {\n          log10.error(\"stopPublishing failed\", err);\n        });\n      }\n    });\n  }\n};\n\n// ../core/src/member/localPerson/agent/subscribing.ts\ninit_process();\nvar SubscribingAgent = class {\n  constructor(_localPerson) {\n    this._localPerson = _localPerson;\n    this._disposers = {};\n    this._context = this._localPerson.context;\n  }\n  startSubscribing(subscription) {\n    return __async(this, null, function* () {\n      if (this._context.config.internal.disableDPlane) {\n        yield new Promise((r2) => setTimeout(r2, 500));\n        return;\n      }\n      const publisher = subscription.publication.publisher;\n      const connection = publisher._getOrCreateConnection(this._localPerson);\n      if (connection.startSubscribing) {\n        yield connection.startSubscribing(subscription);\n        const { removeListener } = subscription._onChangeEncoding.add(\n          () => __async(this, null, function* () {\n            var _a2;\n            yield (_a2 = connection.changePreferredEncoding) == null ? void 0 : _a2.call(connection, subscription);\n          })\n        );\n        this._disposers[subscription.id] = removeListener;\n      }\n    });\n  }\n  stopSubscribing(subscription) {\n    return __async(this, null, function* () {\n      var _a2, _b2;\n      const publisher = subscription.publication.publisher;\n      const connection = publisher._getConnection(this._localPerson.id);\n      if (connection == null ? void 0 : connection.stopSubscribing) {\n        yield connection.stopSubscribing(subscription);\n        (_b2 = (_a2 = this._disposers)[subscription.id]) == null ? void 0 : _b2.call(_a2);\n      }\n    });\n  }\n};\n\n// ../core/src/member/localPerson/adapter.ts\ninit_process();\nvar LocalPersonAdapter = class {\n  constructor(_impl) {\n    this._impl = _impl;\n    this._events = new Events();\n    this.onLeft = this._events.make();\n    this.onMetadataUpdated = this._events.make();\n    this.onMemberStateChanged = this._events.make();\n    this.onStreamPublished = this._events.make();\n    this.onStreamUnpublished = this._events.make();\n    this.onPublicationListChanged = this._events.make();\n    this.onPublicationSubscribed = this._events.make();\n    this.onPublicationUnsubscribed = this._events.make();\n    this.onSubscriptionListChanged = this._events.make();\n    this.onFatalError = this._events.make();\n    this.apply(_impl);\n  }\n  get keepaliveIntervalSec() {\n    return this._impl.keepaliveIntervalSec;\n  }\n  get keepaliveIntervalGapSec() {\n    return this._impl.keepaliveIntervalGapSec;\n  }\n  get type() {\n    return this._impl.type;\n  }\n  get subtype() {\n    return this._impl.subtype;\n  }\n  get side() {\n    return this._impl.side;\n  }\n  get id() {\n    return this._impl.id;\n  }\n  get name() {\n    return this._impl.name;\n  }\n  get channel() {\n    return this._impl.channel;\n  }\n  get metadata() {\n    return this._impl.metadata;\n  }\n  get state() {\n    return this._impl.state;\n  }\n  get publications() {\n    return this._impl.publications;\n  }\n  get subscriptions() {\n    return this._impl.subscriptions;\n  }\n  apply(person) {\n    this._impl = person;\n    person.onLeft.pipe(this.onLeft);\n    person.onMetadataUpdated.pipe(this.onMetadataUpdated);\n    person.onStreamPublished.pipe(this.onStreamPublished);\n    person.onStreamUnpublished.pipe(this.onStreamUnpublished);\n    person.onPublicationListChanged.pipe(this.onPublicationListChanged);\n    person.onPublicationSubscribed.pipe(this.onPublicationSubscribed);\n    person.onPublicationUnsubscribed.pipe(this.onPublicationUnsubscribed);\n    person.onSubscriptionListChanged.pipe(this.onSubscriptionListChanged);\n    person.onFatalError.pipe(this.onFatalError);\n  }\n  subscribe(publication, options) {\n    return this._impl.subscribe(publication, options);\n  }\n  unsubscribe(subscription) {\n    return this._impl.unsubscribe(subscription);\n  }\n  publish(stream, options = {}) {\n    return this._impl.publish(stream, options);\n  }\n  unpublish(publication) {\n    return this._impl.unpublish(publication);\n  }\n  updateMetadata(metadata) {\n    return this._impl.updateMetadata(metadata);\n  }\n  leave() {\n    return __async(this, null, function* () {\n      yield this._impl.leave();\n    });\n  }\n  dispose() {\n    this._impl.dispose();\n  }\n};\n\n// ../core/src/member/localPerson/factory.ts\ninit_process();\n\n// ../core/src/const.ts\ninit_process();\nvar MaxIceParamServerTTL = 24 * 60 * 60;\n\n// ../core/src/external/signaling.ts\ninit_process();\n\n// ../signaling-client/src/index.ts\ninit_process();\n\n// ../signaling-client/src/signalingClient.ts\ninit_process();\n\n// ../signaling-client/node_modules/uuid/dist/esm-browser/index.js\ninit_process();\n\n// ../signaling-client/node_modules/uuid/dist/esm-browser/rng.js\ninit_process();\nvar getRandomValues;\nvar rnds8 = new Uint8Array(16);\nfunction rng() {\n  if (!getRandomValues) {\n    getRandomValues = typeof crypto !== \"undefined\" && crypto.getRandomValues && crypto.getRandomValues.bind(crypto);\n    if (!getRandomValues) {\n      throw new Error(\"crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported\");\n    }\n  }\n  return getRandomValues(rnds8);\n}\n\n// ../signaling-client/node_modules/uuid/dist/esm-browser/stringify.js\ninit_process();\n\n// ../signaling-client/node_modules/uuid/dist/esm-browser/validate.js\ninit_process();\n\n// ../signaling-client/node_modules/uuid/dist/esm-browser/regex.js\ninit_process();\nvar regex_default = /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;\n\n// ../signaling-client/node_modules/uuid/dist/esm-browser/validate.js\nfunction validate(uuid) {\n  return typeof uuid === \"string\" && regex_default.test(uuid);\n}\nvar validate_default = validate;\n\n// ../signaling-client/node_modules/uuid/dist/esm-browser/stringify.js\nvar byteToHex = [];\nfor (let i = 0; i < 256; ++i) {\n  byteToHex.push((i + 256).toString(16).slice(1));\n}\nfunction unsafeStringify(arr, offset = 0) {\n  return (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + \"-\" + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + \"-\" + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + \"-\" + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + \"-\" + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase();\n}\n\n// ../signaling-client/node_modules/uuid/dist/esm-browser/v4.js\ninit_process();\n\n// ../signaling-client/node_modules/uuid/dist/esm-browser/native.js\ninit_process();\nvar randomUUID = typeof crypto !== \"undefined\" && crypto.randomUUID && crypto.randomUUID.bind(crypto);\nvar native_default = {\n  randomUUID\n};\n\n// ../signaling-client/node_modules/uuid/dist/esm-browser/v4.js\nfunction v4(options, buf, offset) {\n  if (native_default.randomUUID && !buf && !options) {\n    return native_default.randomUUID();\n  }\n  options = options || {};\n  const rnds = options.random || (options.rng || rng)();\n  rnds[6] = rnds[6] & 15 | 64;\n  rnds[8] = rnds[8] & 63 | 128;\n  if (buf) {\n    offset = offset || 0;\n    for (let i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n    return buf;\n  }\n  return unsafeStringify(rnds);\n}\nvar v4_default = v4;\n\n// ../signaling-client/src/clientEvent.ts\ninit_process();\nvar MAX_PAYLOAD_LENGTH = 20480;\nvar ClientEvent = class {\n  constructor(event, payload = {}) {\n    this.event = event;\n    this.payload = payload;\n    this.eventId = v4_default();\n    this.data = JSON.stringify({ event: this.event, eventId: this.eventId, payload: this.payload });\n    if (this.data.length > MAX_PAYLOAD_LENGTH) {\n      throw new Error(\"payload size exceeds the upper limit\");\n    }\n  }\n};\n\n// ../signaling-client/src/payloadTypes.ts\ninit_process();\nvar AcknowledgeReason = [\n  \"rateLimitExceeded\",\n  \"targetNotFound\",\n  \"payloadLengthExceeded\",\n  \"invalidPayload\",\n  \"unknown\",\n  \"parameterError\",\n  \"permissionError\"\n];\nfunction isMessagePayload(payload) {\n  if (!payload || typeof payload !== \"object\")\n    return false;\n  if (!isMember(payload.src))\n    return false;\n  if (!payload.data || typeof payload.data !== \"object\")\n    return false;\n  return true;\n}\nfunction isAcknowledgePayload(payload) {\n  if (!payload || typeof payload !== \"object\")\n    return false;\n  if (typeof payload.eventId !== \"string\")\n    return false;\n  if (typeof payload.ok !== \"boolean\")\n    return false;\n  if (typeof payload.reason !== \"undefined\" && (typeof payload.reason !== \"string\" || !AcknowledgeReason.includes(payload.reason)))\n    return false;\n  return true;\n}\nfunction isMember(arg) {\n  if (arg === void 0 || Array.isArray(arg))\n    return false;\n  if (typeof arg !== \"object\")\n    return false;\n  if (typeof arg.id !== \"string\")\n    return false;\n  if (typeof arg.name !== \"undefined\" && typeof arg.name !== \"string\")\n    return false;\n  return true;\n}\n\n// ../signaling-client/src/socket.ts\ninit_process();\nvar import_isomorphic_ws = __toESM(require_browser());\n\n// ../signaling-client/src/utils/event.ts\ninit_process();\nvar Event3 = class {\n  constructor() {\n    this._listeners = /* @__PURE__ */ new Map();\n    this._listenerIndex = 0;\n    this.emit = (arg) => {\n      this._listeners.forEach((listener) => listener(arg));\n    };\n    this.removeAllListeners = () => {\n      this._listeners.clear();\n    };\n    this.addListener = (listener) => {\n      const id = this._listenerIndex;\n      this._listeners.set(id, listener);\n      this._listenerIndex++;\n      const removeListener = () => {\n        this._listeners.delete(id);\n      };\n      return { removeListener };\n    };\n    this.addOneTimeListener = (listener) => {\n      const off = this.addListener((arg) => {\n        off.removeListener();\n        listener(arg);\n      });\n      return off;\n    };\n    this.asPromise = (timeLimit) => new Promise((resolve, reject) => {\n      let removeListener = () => {\n      };\n      const timeout = timeLimit && setTimeout(() => {\n        reject(\"Event asPromise timeout\");\n        removeListener();\n      }, timeLimit);\n      const off = this.addOneTimeListener((arg) => {\n        if (timeout)\n          clearTimeout(timeout);\n        resolve(arg);\n      });\n      removeListener = off.removeListener;\n    });\n  }\n};\n\n// ../signaling-client/src/version.ts\ninit_process();\nvar PACKAGE_VERSION = \"0.2.0-beta.0\";\n\n// ../signaling-client/src/socket.ts\nvar ServerEventType = [\"open\", \"sendRequestSignalingMessage\", \"sendResponseSignalingMessage\", \"acknowledge\"];\nvar getReconnectWaitTime = (reconnectCount) => {\n  return (__pow(2, reconnectCount) + Math.random()) * 1e3;\n};\nvar Socket = class {\n  constructor({ channelId, channelName, memberId, memberName, sessionEndpoint, token, logger: logger2 }) {\n    this._isOpen = false;\n    this._isDestroyed = false;\n    this._reconnectCount = 0;\n    this.connectionState = \"closed\";\n    this.onConnectionStateChanged = new Event3();\n    this.onOpened = new Event3();\n    this.onEventReceived = new Event3();\n    this.onConnectionFailed = new Event3();\n    this._sessionEndpoint = sessionEndpoint;\n    this._channelId = channelId;\n    this._channelName = channelName;\n    this._memberId = memberId;\n    this._memberName = memberName;\n    this._token = token;\n    this._logger = logger2;\n    this._connect();\n  }\n  _setConnectionState(state) {\n    this._logger.debug(`connectionState changed : ${state}`);\n    this.connectionState = state;\n    this.onConnectionStateChanged.emit(state);\n  }\n  _connect() {\n    let ws;\n    try {\n      const subProtocol = `SkyWayAuthToken!${this._token}`;\n      const wsProperties = {\n        channelId: this._channelId,\n        channelName: this._channelName,\n        memberId: this._memberId,\n        memberName: this._memberName,\n        platform: \"javascript\",\n        version: PACKAGE_VERSION\n      };\n      const queryString = Object.entries(wsProperties).filter(([_, v]) => v !== void 0).map((pair) => pair.join(\"=\")).join(\"&\");\n      const wsURL = `${this._sessionEndpoint}?${queryString}`;\n      ws = new import_isomorphic_ws.default(wsURL, subProtocol);\n      this._logger.debug(`Connecting to signaling-server: ${this._sessionEndpoint}`);\n      ws.onerror = (event) => {\n        this._logger.error(\"WebSocket error occurred\", event.error);\n        ws.close(4202);\n      };\n    } catch (err) {\n      const error = err instanceof Error ? err : new Error();\n      this._logger.error(\"Failed to create WebSocket instance\", error);\n      this.reconnect();\n      return;\n    }\n    ws.onopen = () => {\n      this._logger.debug(\"Connected to signaling-server\");\n    };\n    ws.onclose = (event) => {\n      const logMessage = \"Close event fired: \" + JSON.stringify({ code: event.code, reason: event.reason, type: event.type });\n      if (4100 <= event.code && event.code <= 4199) {\n        this._logger.error(logMessage, new Error());\n      } else {\n        this._logger.debug(logMessage);\n      }\n      if (event.code !== 1e3 && !(4e3 <= event.code && event.code <= 4199)) {\n        this.reconnect();\n        return;\n      }\n      if (event.code === 4e3) {\n        return;\n      }\n      this._logger.debug(\"Closed the connection to signaling-server\");\n      this.onConnectionFailed.emit();\n      this.destroy();\n    };\n    ws.onmessage = (event) => {\n      this._messageHandler(event.data);\n    };\n    this._ws = ws;\n  }\n  updateAuthToken(token) {\n    this._token = token;\n  }\n  reconnect() {\n    if (this._ws !== void 0) {\n      this._ws.close(4e3);\n    }\n    this._ws = void 0;\n    this._isOpen = false;\n    if (this._reconnectCount >= 8) {\n      this.onConnectionFailed.emit();\n      this.destroy();\n      this._logger.error(\"Failed to reconnect for eight times\", new Error());\n    } else {\n      this._setConnectionState(\"reconnecting\");\n      const waitTime = getReconnectWaitTime(this._reconnectCount);\n      this._reconnectTimer = setTimeout(() => {\n        this._connect();\n        this._reconnectCount++;\n        this._logger.debug(`Try to reconnect: count = ${this._reconnectCount}`);\n      }, waitTime);\n    }\n  }\n  destroy() {\n    this._isDestroyed = true;\n    this._setConnectionState(\"closed\");\n    this.onConnectionStateChanged.removeAllListeners();\n    this.onOpened.removeAllListeners();\n    this.onEventReceived.removeAllListeners();\n    this.onConnectionFailed.removeAllListeners();\n    if (this._reconnectTimer) {\n      clearTimeout(this._reconnectTimer);\n    }\n    if (this._ws !== void 0) {\n      this._ws.close(1e3);\n    }\n  }\n  send(clientEvent) {\n    return new Promise((resolve, reject) => {\n      const retrySend = () => {\n        this.onOpened.addOneTimeListener(() => {\n          this.send(clientEvent).then(() => {\n            resolve();\n          }).catch((err) => {\n            reject(err);\n          });\n        });\n        this.onConnectionFailed.addOneTimeListener(() => {\n          reject(new Error(\"Connection failed\"));\n        });\n      };\n      if (this._isDestroyed) {\n        reject(new Error(\"The socket is already destroyed\"));\n        return;\n      }\n      if (this._ws === void 0 || !this._isOpen) {\n        this._logger.debug(\n          \"Retry send the client event when connected because WebSocket is undefined or isOpen = false\"\n        );\n        retrySend();\n        return;\n      }\n      this._logger.debug(`Send the event: ${clientEvent.data}`);\n      this._ws.send(clientEvent.data, (err) => {\n        if (err) {\n          if (this._ws === void 0 || !this._isOpen || this._ws.readyState !== import_isomorphic_ws.default.OPEN) {\n            this._logger.debug(\"Retry send the client event when connected because WebSocket.send failed\");\n            retrySend();\n            return;\n          }\n          reject(err);\n        } else {\n          resolve();\n        }\n      });\n    });\n  }\n  _messageHandler(data) {\n    if (typeof data !== \"string\") {\n      this._logger.error(\"Received invalid message: not string\", new Error());\n      return;\n    }\n    let parsedData;\n    try {\n      parsedData = JSON.parse(data);\n    } catch (err) {\n      const error = err instanceof Error ? err : new Error();\n      this._logger.error(\"Received invalid message: parse error\", error);\n      return;\n    }\n    if (!isServerEvent(parsedData)) {\n      this._logger.error(`Received invalid message: ${parsedData}`, new Error());\n      return;\n    }\n    if (parsedData.event === \"open\") {\n      this._logger.debug(\"Received a open event\");\n      this._isOpen = true;\n      this._setConnectionState(\"connected\");\n      if (this._reconnectCount !== 0) {\n        this._reconnectCount = 0;\n        this._logger.debug(\"Succeeded to reconnect\");\n      }\n      this.onOpened.emit();\n    } else {\n      this._logger.debug(`Received the event: ${parsedData.event}, payload: ${JSON.stringify(parsedData.payload)}`);\n      this.onEventReceived.emit(parsedData);\n    }\n  }\n};\nfunction isServerEvent(data) {\n  if (!data || typeof data !== \"object\")\n    return false;\n  if (typeof data.event !== \"string\" || !ServerEventType.includes(data.event))\n    return false;\n  if (typeof data.eventId !== \"string\")\n    return false;\n  if (data.payload && typeof data.payload !== \"object\")\n    return false;\n  return true;\n}\n\n// ../signaling-client/src/signalingClient.ts\nvar SIGNALING_SERVER_DOMAIN = \"signaling.skyway.ntt.com\";\nvar API_VERSION = \"v1\";\nvar SignalingClient = class {\n  constructor({ token, channelId, channelName, memberId, memberName }, options) {\n    this.onConnectionStateChanged = new Event3();\n    this.onConnectionFailed = new Event3();\n    this.onRequested = new Event3();\n    this._connectivityCheckTimers = /* @__PURE__ */ new Map();\n    this._responseCallbacks = /* @__PURE__ */ new Map();\n    this._acknowledgeCallbacks = /* @__PURE__ */ new Map();\n    this._token = token;\n    this._channelId = channelId;\n    this._channelName = channelName;\n    this._memberId = memberId;\n    this._memberName = memberName;\n    const defaultOptions = {\n      connectivityCheckIntervalSec: 30,\n      signalingServerDomain: SIGNALING_SERVER_DOMAIN,\n      secure: true,\n      logger: {\n        debug: (message) => {\n          console.debug(message);\n        },\n        error: (error) => {\n          console.error(error);\n        }\n      }\n    };\n    this._options = Object.assign({}, defaultOptions, options != null ? options : {});\n    this._logger = this._options.logger;\n    this._logger.debug(`Created instance with the options: ${this._options}`);\n  }\n  get connectionState() {\n    var _a2, _b2;\n    return (_b2 = (_a2 = this._socket) == null ? void 0 : _a2.connectionState) != null ? _b2 : \"closed\";\n  }\n  connect() {\n    return __async(this, null, function* () {\n      const WSProtocol = this._options.secure ? \"wss\" : \"ws\";\n      const signalingServerDomain = this._options.signalingServerDomain || SIGNALING_SERVER_DOMAIN;\n      this._socket = new Socket({\n        sessionEndpoint: `${WSProtocol}://${signalingServerDomain}/${API_VERSION}/ws`,\n        channelId: this._channelId,\n        channelName: this._channelName,\n        memberId: this._memberId,\n        memberName: this._memberName,\n        token: this._token,\n        logger: this._logger\n      });\n      this._socket.onEventReceived.addListener((data) => {\n        try {\n          this._eventReceivedHandler(data);\n        } catch (error) {\n          this._logger.error(\"in _eventReceivedHandler\", error);\n        }\n      });\n      this._socket.onConnectionFailed.addListener(() => {\n        this.onConnectionFailed.emit();\n      });\n      this._socket.onConnectionStateChanged.addListener((state) => {\n        this.onConnectionStateChanged.emit(state);\n      });\n      yield this._socket.onOpened.asPromise(15 * 1e3);\n      this._startConnectivityCheck();\n    });\n  }\n  disconnect() {\n    var _a2;\n    this._stopConnectivityCheck();\n    (_a2 = this._socket) == null ? void 0 : _a2.destroy();\n    this._socket = void 0;\n    this._responseCallbacks.clear();\n    this._acknowledgeCallbacks.clear();\n  }\n  _startConnectivityCheck() {\n    if (this._connectivityCheckInterval) {\n      this._logger.debug(\"connectivity check timer is already set\");\n      return;\n    }\n    this._connectivityCheckInterval = setInterval(() => {\n      var _a2;\n      const clientEvent = new ClientEvent(\"checkConnectivity\");\n      (_a2 = this._socket) == null ? void 0 : _a2.send(clientEvent).catch(() => {\n        this._acknowledgeCallbacks.delete(clientEvent.eventId);\n      });\n      this._connectivityCheckTimers.set(\n        clientEvent.eventId,\n        setTimeout(() => {\n          var _a3;\n          this._acknowledgeCallbacks.delete(clientEvent.eventId);\n          (_a3 = this._socket) == null ? void 0 : _a3.reconnect();\n          this._logger.debug(\"connectivity check timer is expired\");\n        }, 5 * 1e3)\n      );\n      this._setAcknowledgeCallback(clientEvent.eventId, (data) => {\n        var _a3;\n        const timer = this._connectivityCheckTimers.get(clientEvent.eventId);\n        if (timer) {\n          clearTimeout(timer);\n          this._connectivityCheckTimers.delete(clientEvent.eventId);\n        }\n        if (!data.ok) {\n          (_a3 = this._socket) == null ? void 0 : _a3.reconnect();\n          this._logger.debug(\"connectivity check response from server was not ok\");\n        }\n      });\n    }, this._options.connectivityCheckIntervalSec * 1e3);\n    this._logger.debug(\"Started connectivity check timer\");\n  }\n  _stopConnectivityCheck() {\n    if (!this._connectivityCheckInterval) {\n      this._logger.debug(\"connectivity check timer is not set\");\n      return;\n    }\n    clearInterval(this._connectivityCheckInterval);\n    this._connectivityCheckInterval = void 0;\n    this._logger.debug(\"Stopped connectivity check timer\");\n    for (const [_, timer] of this._connectivityCheckTimers) {\n      clearTimeout(timer);\n    }\n    this._connectivityCheckTimers.clear();\n  }\n  request(target, data, timeoutSec = 10) {\n    validateTarget(target);\n    validateData(data);\n    return new Promise((resolve, reject) => {\n      if (this._socket === void 0) {\n        reject(new Error(\"websocket is not connected\"));\n        return;\n      }\n      const payload = {\n        dst: target,\n        data\n      };\n      const clientEvent = new ClientEvent(\"sendRequestSignalingMessage\", payload);\n      const timer = setTimeout(() => {\n        this._acknowledgeCallbacks.delete(clientEvent.eventId);\n        reject(new Error(\"request timeout\"));\n      }, timeoutSec * 1e3);\n      this._setResponseCallback(clientEvent.eventId, (data2) => {\n        clearTimeout(timer);\n        resolve(data2);\n      });\n      this._setAcknowledgeCallback(clientEvent.eventId, (data2) => {\n        if (!data2.ok) {\n          clearTimeout(timer);\n          reject(data2);\n        }\n      });\n      this._socket.send(clientEvent).catch((err) => {\n        this._acknowledgeCallbacks.delete(clientEvent.eventId);\n        clearTimeout(timer);\n        reject(err);\n      });\n    });\n  }\n  _response(target, requestEventId, data, timeoutSec) {\n    return new Promise((resolve, reject) => {\n      validateData(data);\n      if (this._socket === void 0) {\n        reject(new Error(\"websocket is not connected\"));\n        return;\n      }\n      const payload = {\n        dst: target,\n        requestEventId,\n        data\n      };\n      const clientEvent = new ClientEvent(\"sendResponseSignalingMessage\", payload);\n      const timer = setTimeout(() => {\n        this._acknowledgeCallbacks.delete(clientEvent.eventId);\n        reject(new Error(\"response timeout\"));\n      }, timeoutSec * 1e3);\n      this._setAcknowledgeCallback(clientEvent.eventId, (data2) => {\n        clearTimeout(timer);\n        if (data2.ok) {\n          resolve();\n        } else {\n          reject(data2);\n        }\n      });\n      this._socket.send(clientEvent).catch((err) => {\n        this._acknowledgeCallbacks.delete(clientEvent.eventId);\n        clearTimeout(timer);\n        reject(err);\n      });\n    });\n  }\n  updateSkyWayAuthToken(token, timeoutSec = 10) {\n    return new Promise((resolve, reject) => {\n      if (this._socket === void 0) {\n        reject(new Error(\"websocket is not connected\"));\n        return;\n      }\n      const payload = {\n        token\n      };\n      const clientEvent = new ClientEvent(\"updateSkyWayAuthToken\", payload);\n      const timer = setTimeout(() => {\n        this._acknowledgeCallbacks.delete(clientEvent.eventId);\n        reject(new Error(\"updateSkyWayAuthToken timeout\"));\n      }, timeoutSec * 1e3);\n      this._setAcknowledgeCallback(clientEvent.eventId, (data) => {\n        clearTimeout(timer);\n        if (data.ok) {\n          if (this._socket === void 0) {\n            reject(new Error(\"websocket is not connected\"));\n            return;\n          }\n          this._socket.updateAuthToken(token);\n          resolve();\n        } else {\n          reject(data);\n        }\n      });\n      this._socket.send(clientEvent).catch((err) => {\n        this._acknowledgeCallbacks.delete(clientEvent.eventId);\n        clearTimeout(timer);\n        reject(err);\n      });\n    });\n  }\n  _eventReceivedHandler(data) {\n    switch (data.event) {\n      case \"acknowledge\":\n        this._acknowledgeHandler(data.payload);\n        break;\n      case \"sendRequestSignalingMessage\":\n        this._eventMessageRequestHandler(data.payload);\n        break;\n      case \"sendResponseSignalingMessage\":\n        this._eventMessageResponseHandler(data.payload);\n        break;\n      case \"open\":\n        break;\n      default: {\n        const _ = data.event;\n        this._logger.debug(`Unknown event: ${data.event}`);\n      }\n    }\n  }\n  _acknowledgeHandler(payload) {\n    if (!isAcknowledgePayload(payload)) {\n      throw new Error(\"Invalid payload\");\n    }\n    const { eventId } = payload;\n    if (!this._acknowledgeCallbacks.has(eventId)) {\n      throw new Error(`acknowledge event has unknown eventId: ${eventId}`);\n    }\n    const callback = this._acknowledgeCallbacks.get(eventId);\n    if (callback) {\n      this._acknowledgeCallbacks.delete(eventId);\n      callback(payload);\n    }\n  }\n  _eventMessageRequestHandler(payload) {\n    if (!isMessagePayload(payload)) {\n      throw new Error(\"Invalid payload\");\n    }\n    if (!payload.requestEventId) {\n      throw new Error(\"Invalid payload\");\n    }\n    const src = payload.src;\n    const requestEventId = payload.requestEventId;\n    const reply = (data, timeout = 10) => __async(this, null, function* () {\n      yield this._response(src, requestEventId, data, timeout);\n    });\n    this.onRequested.emit({\n      data: payload.data,\n      reply,\n      requestEventId: payload.requestEventId,\n      src: payload.src\n    });\n  }\n  _eventMessageResponseHandler(payload) {\n    if (!isMessagePayload(payload)) {\n      throw new Error(\"Invalid payload\");\n    }\n    if (!payload.requestEventId || !this._responseCallbacks.has(payload.requestEventId)) {\n      throw new Error(`received response has unknown eventId: ${payload.requestEventId}`);\n    }\n    const callback = this._responseCallbacks.get(payload.requestEventId);\n    if (callback) {\n      this._responseCallbacks.delete(payload.requestEventId);\n      callback(payload.data);\n    }\n  }\n  _setResponseCallback(eventId, callback) {\n    this._responseCallbacks.set(eventId, callback);\n  }\n  _setAcknowledgeCallback(eventId, callback) {\n    this._acknowledgeCallbacks.set(eventId, callback);\n  }\n};\nfunction validateData(data) {\n  if (!data || typeof data !== \"object\") {\n    throw new Error(\"the type of data must be object\");\n  }\n}\nfunction validateTarget(target) {\n  if (!isMember(target)) {\n    throw new Error(\"the type of target must be {id: string, name: string}\");\n  }\n  if (!validate_default(target.id)) {\n    throw new Error(\"the type of target.id must be uuid format\");\n  }\n}\n\n// ../signaling-client/src/utils/logger.ts\ninit_process();\n\n// ../token/src/index.ts\ninit_process();\n\n// ../token/node_modules/uuid/dist/esm-browser/index.js\ninit_process();\n\n// ../token/node_modules/uuid/dist/esm-browser/rng.js\ninit_process();\nvar getRandomValues2;\nvar rnds82 = new Uint8Array(16);\nfunction rng2() {\n  if (!getRandomValues2) {\n    getRandomValues2 = typeof crypto !== \"undefined\" && crypto.getRandomValues && crypto.getRandomValues.bind(crypto);\n    if (!getRandomValues2) {\n      throw new Error(\"crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported\");\n    }\n  }\n  return getRandomValues2(rnds82);\n}\n\n// ../token/node_modules/uuid/dist/esm-browser/stringify.js\ninit_process();\nvar byteToHex2 = [];\nfor (let i = 0; i < 256; ++i) {\n  byteToHex2.push((i + 256).toString(16).slice(1));\n}\nfunction unsafeStringify2(arr, offset = 0) {\n  return (byteToHex2[arr[offset + 0]] + byteToHex2[arr[offset + 1]] + byteToHex2[arr[offset + 2]] + byteToHex2[arr[offset + 3]] + \"-\" + byteToHex2[arr[offset + 4]] + byteToHex2[arr[offset + 5]] + \"-\" + byteToHex2[arr[offset + 6]] + byteToHex2[arr[offset + 7]] + \"-\" + byteToHex2[arr[offset + 8]] + byteToHex2[arr[offset + 9]] + \"-\" + byteToHex2[arr[offset + 10]] + byteToHex2[arr[offset + 11]] + byteToHex2[arr[offset + 12]] + byteToHex2[arr[offset + 13]] + byteToHex2[arr[offset + 14]] + byteToHex2[arr[offset + 15]]).toLowerCase();\n}\n\n// ../token/node_modules/uuid/dist/esm-browser/v4.js\ninit_process();\n\n// ../token/node_modules/uuid/dist/esm-browser/native.js\ninit_process();\nvar randomUUID2 = typeof crypto !== \"undefined\" && crypto.randomUUID && crypto.randomUUID.bind(crypto);\nvar native_default2 = {\n  randomUUID: randomUUID2\n};\n\n// ../token/node_modules/uuid/dist/esm-browser/v4.js\nfunction v42(options, buf, offset) {\n  if (native_default2.randomUUID && !buf && !options) {\n    return native_default2.randomUUID();\n  }\n  options = options || {};\n  const rnds = options.random || (options.rng || rng2)();\n  rnds[6] = rnds[6] & 15 | 64;\n  rnds[8] = rnds[8] & 63 | 128;\n  if (buf) {\n    offset = offset || 0;\n    for (let i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n    return buf;\n  }\n  return unsafeStringify2(rnds);\n}\nvar v4_default2 = v42;\n\n// ../token/src/encoder.ts\ninit_process();\nvar import_jsrsasign = __toESM(require_jsrsasign());\n\n// ../../node_modules/jwt-decode/build/jwt-decode.esm.js\ninit_process();\nfunction e(e2) {\n  this.message = e2;\n}\ne.prototype = new Error(), e.prototype.name = \"InvalidCharacterError\";\nvar r = \"undefined\" != typeof window && window.atob && window.atob.bind(window) || function(r2) {\n  var t2 = String(r2).replace(/=+$/, \"\");\n  if (t2.length % 4 == 1)\n    throw new e(\"'atob' failed: The string to be decoded is not correctly encoded.\");\n  for (var n2, o2, a = 0, i = 0, c = \"\"; o2 = t2.charAt(i++); ~o2 && (n2 = a % 4 ? 64 * n2 + o2 : o2, a++ % 4) ? c += String.fromCharCode(255 & n2 >> (-2 * a & 6)) : 0)\n    o2 = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\".indexOf(o2);\n  return c;\n};\nfunction t(e2) {\n  var t2 = e2.replace(/-/g, \"+\").replace(/_/g, \"/\");\n  switch (t2.length % 4) {\n    case 0:\n      break;\n    case 2:\n      t2 += \"==\";\n      break;\n    case 3:\n      t2 += \"=\";\n      break;\n    default:\n      throw \"Illegal base64url string!\";\n  }\n  try {\n    return function(e3) {\n      return decodeURIComponent(r(e3).replace(/(.)/g, function(e4, r2) {\n        var t3 = r2.charCodeAt(0).toString(16).toUpperCase();\n        return t3.length < 2 && (t3 = \"0\" + t3), \"%\" + t3;\n      }));\n    }(t2);\n  } catch (e3) {\n    return r(t2);\n  }\n}\nfunction n(e2) {\n  this.message = e2;\n}\nfunction o(e2, r2) {\n  if (\"string\" != typeof e2)\n    throw new n(\"Invalid token specified\");\n  var o2 = true === (r2 = r2 || {}).header ? 0 : 1;\n  try {\n    return JSON.parse(t(e2.split(\".\")[o2]));\n  } catch (e3) {\n    throw new n(\"Invalid token specified: \" + e3.message);\n  }\n}\nn.prototype = new Error(), n.prototype.name = \"InvalidTokenError\";\nvar jwt_decode_esm_default = o;\n\n// ../token/src/encoder.ts\nvar log11 = new Logger(\"packages/token/src/encoder.ts\");\nvar SkyWayAuthToken = class {\n  constructor(props) {\n    Object.assign(this, props);\n  }\n  static Decode(token) {\n    try {\n      const props = jwt_decode_esm_default(token);\n      const authToken = new SkyWayAuthToken(props);\n      authToken.tokenString = token;\n      return authToken;\n    } catch (error) {\n      throw new SkyWayError({\n        path: log11.prefix,\n        info: tokenErrors.invalidParameter,\n        error\n      });\n    }\n  }\n  encode(secret) {\n    const payload = {\n      jti: this.jti,\n      iat: this.iat,\n      exp: this.exp,\n      scope: this.scope\n    };\n    this.tokenString = import_jsrsasign.default.KJUR.jws.JWS.sign(\n      \"HS256\",\n      JSON.stringify({ alg: \"HS256\", typ: \"JWT\" }),\n      JSON.stringify(payload),\n      secret\n    );\n    return this.tokenString;\n  }\n  toJSON() {\n    return {\n      jti: this.jti,\n      iat: this.iat,\n      exp: this.exp,\n      scope: this.scope,\n      encoded: this.tokenString\n    };\n  }\n};\n\n// ../token/src/scope/app.ts\ninit_process();\nvar AppActions = [\"listChannels\", \"read\", \"write\"];\nvar ChannelActions = [\n  \"write\",\n  \"read\",\n  \"create\",\n  \"delete\",\n  \"updateMetadata\"\n];\nvar MemberActions = [\n  \"write\",\n  \"create\",\n  \"delete\",\n  \"updateMetadata\",\n  \"signal\"\n];\nvar PublicationActions = [\n  \"write\",\n  \"create\",\n  \"delete\",\n  \"updateMetadata\",\n  \"enable\",\n  \"disable\"\n];\nvar SubscriptionActions = [\"write\", \"create\", \"delete\"];\n\n// ../token/src/scope/sfu.ts\ninit_process();\nvar SfuBotActions = [\"create\", \"write\", \"delete\"];\nvar ForwardingActions = [\"create\", \"write\", \"delete\"];\nvar SfuSubscriptionActions = [\"create\", \"write\", \"delete\"];\n\n// ../token/src/token.ts\ninit_process();\n\n// ../token/src/errors.ts\ninit_process();\nvar tokenErrors = {\n  invalidParameter: {\n    name: \"invalidParameter\",\n    detail: \"failed to decode token\",\n    solution: \"Use the correct token according to the specification\"\n  }\n};\n\n// ../token/src/util.ts\ninit_process();\nvar nowInSec = () => Math.floor(Date.now() / 1e3);\n\n// ../token/src/index.ts\nvar uuidV4 = v4_default2;\n\n// ../core/src/external/signaling.ts\nvar log12 = new Logger(\"packages/core/src/external/signaling.ts\");\nfunction setupSignalingSession(context, channel, memberDto) {\n  return __async(this, null, function* () {\n    const { signalingService } = context.config;\n    const client = new SignalingClient(\n      {\n        token: context.authTokenString,\n        channelId: channel.id,\n        channelName: channel.name,\n        memberId: memberDto.id,\n        memberName: memberDto.name\n      },\n      {\n        logger: {\n          error: (error) => __async(this, null, function* () {\n            log12.error(\n              \"SignalingClient error\",\n              createError({\n                operationName: \"SignalingClient.logger\",\n                context,\n                info: __spreadProps(__spreadValues({}, errors.internal), { detail: \"signalingClient error\" }),\n                error,\n                path: log12.prefix,\n                channel\n              })\n            );\n          }),\n          debug: (s) => {\n          }\n        },\n        signalingServerDomain: signalingService.domain,\n        secure: signalingService.secure\n      }\n    );\n    const signalingSession = new SignalingSession(client, context);\n    yield signalingSession.connect();\n    return signalingSession;\n  });\n}\nvar SignalingSession = class {\n  constructor(_client, context) {\n    this._client = _client;\n    this.context = context;\n    this.onConnectionFailed = new Event();\n    this.onConnectionStateChanged = new Event();\n    this.onMessage = new Event();\n    this.closed = false;\n    this._chunkedMessageBuffer = {};\n    this._backoffUpdateSkyWayAuthToken = new BackOff({\n      times: 8,\n      interval: 100,\n      jitter: 100\n    });\n    this._listen();\n    context._onTokenUpdated.add((token) => __async(this, null, function* () {\n      yield this._updateSkyWayAuthToken(token);\n    }));\n  }\n  updateClient(client) {\n    this._client = client;\n    this._listen();\n  }\n  _listen() {\n    this._client.onConnectionFailed.addOneTimeListener(() => {\n      this.onConnectionFailed.emit({});\n    });\n    this._client.onConnectionStateChanged.addListener((state) => {\n      log12.debug(\"signalingClient onConnectionStateChanged\", state);\n      this.onConnectionStateChanged.emit(state);\n    });\n    this._client.onRequested.addListener((_0) => __async(this, [_0], function* ({ data, src, reply }) {\n      var _a2;\n      const messageChunk = data;\n      const { chunk, length, offset, id, type } = messageChunk;\n      if (type !== messageType)\n        return;\n      if (length === 0) {\n        this.onMessage.emit({\n          src,\n          data: JSON.parse(chunk)\n        });\n      } else {\n        this._chunkedMessageBuffer[id] = [\n          ...(_a2 = this._chunkedMessageBuffer[id]) != null ? _a2 : [],\n          messageChunk.chunk\n        ];\n        if (length === offset) {\n          const message = this._chunkedMessageBuffer[id].join(\"\");\n          delete this._chunkedMessageBuffer[id];\n          this.onMessage.emit({\n            src,\n            data: JSON.parse(message)\n          });\n        }\n      }\n      yield reply({}).catch((e2) => {\n        if (this.closed)\n          return;\n        log12.warn(\n          \"failed to reply\",\n          createWarnPayload({\n            operationName: \"SignalingSession.reply\",\n            detail: \"SignalingClient failed to reply\"\n          }),\n          e2\n        );\n      });\n    }));\n  }\n  _updateSkyWayAuthToken(token) {\n    return __async(this, null, function* () {\n      if (this._backoffUpdateSkyWayAuthToken.exceeded) {\n        log12.error(\"[failed] updateSkyWayAuthToken\");\n        return;\n      }\n      yield this._backoffUpdateSkyWayAuthToken.wait();\n      log12.debug(\"[start] updateSkyWayAuthToken\", {\n        count: this._backoffUpdateSkyWayAuthToken.count\n      });\n      const e2 = yield this._client.updateSkyWayAuthToken(token).catch((e3) => e3);\n      if (e2) {\n        log12.warn(\n          \"[retry] updateSkyWayAuthToken\",\n          createWarnPayload({\n            operationName: \"SignalingSession._updateSkyWayAuthToken\",\n            detail: \"[retry] updateSkyWayAuthToken\"\n          }),\n          e2\n        );\n        this._updateSkyWayAuthToken(token);\n        return;\n      }\n      log12.debug(\"[end] updateSkyWayAuthToken\");\n      this._backoffUpdateSkyWayAuthToken.reset();\n    });\n  }\n  get connectionState() {\n    return this._client.connectionState;\n  }\n  connect() {\n    return __async(this, null, function* () {\n      log12.debug(\"[start] connect signalingService\");\n      yield this._client.connect().catch((err) => {\n        throw createError({\n          operationName: \"signalingSession.connect\",\n          path: log12.prefix,\n          info: __spreadProps(__spreadValues({}, errors.internal), {\n            detail: \"signalingClient failed to connect Server\"\n          }),\n          context: this.context,\n          error: err\n        });\n      });\n      log12.debug(\"[end] connect signalingService\");\n    });\n  }\n  close() {\n    this.closed = true;\n    this._client.disconnect();\n  }\n  send(target, data, timeout = 1e4) {\n    return __async(this, null, function* () {\n      var _a2;\n      try {\n        const payload = JSON.stringify(data);\n        const id = uuidV4();\n        if (payload.length > 20480) {\n          const split = (_a2 = payload.match(/.{1,20480}/g)) != null ? _a2 : [];\n          let offset = 0;\n          for (const chunk of split) {\n            const chunkMessage = {\n              type: messageType,\n              length: split.length - 1,\n              offset: offset++,\n              chunk,\n              id\n            };\n            yield this._client.request(\n              target,\n              chunkMessage,\n              timeout / 1e3\n            );\n          }\n        } else {\n          const chunkMessage = {\n            type: messageType,\n            length: 0,\n            offset: 0,\n            chunk: payload,\n            id\n          };\n          yield this._client.request(target, chunkMessage, timeout / 1e3);\n        }\n      } catch (error) {\n        if (this.closed || target.state !== \"joined\")\n          return;\n        throw createError({\n          operationName: \"SignalingSession.send\",\n          context: this.context,\n          info: __spreadProps(__spreadValues({}, errors.internal), { detail: \"signalingClient\" }),\n          error,\n          path: log12.prefix,\n          payload: { target, data }\n        });\n      }\n    });\n  }\n};\nvar messageType = \"signalingMessage\";\n\n// ../core/src/external/ice.ts\ninit_process();\nvar log13 = new Logger(\"packages/core/src/external/ice.ts\");\nvar IceManager = class {\n  constructor(args) {\n    this.args = args;\n    this.domain = this.args.domain;\n    this.version = this.args.version;\n    this.secure = this.args.secure;\n    this.memberId = this.args.memberId;\n    this.channelId = this.args.channelId;\n    this.ttl = this.args.ttl;\n    this.context = this.args.context;\n    this._stunServers = [];\n    this._turnServers = [];\n    this._endpoint = `http${this.secure ? \"s\" : \"\"}://${this.domain}/v${this.version}`;\n    this.http = new HttpClient(this._endpoint);\n  }\n  updateIceParams() {\n    return __async(this, null, function* () {\n      const body = {\n        memberId: this.memberId,\n        channelId: this.channelId,\n        ttl: this.ttl\n      };\n      log13.debug(\"[start] fetch iceParams\");\n      const backoff = new BackOff({ times: 6, interval: 500, jitter: 100 });\n      const { turn, stun } = yield this.http.post(`/ice-params`, body, {\n        headers: { authorization: `Bearer ${this.context.authTokenString}` },\n        retry: () => backoff.wait()\n      });\n      if (turn) {\n        this._turnServers = [\n          {\n            credential: turn.credential,\n            urls: `turn:${turn.domain}:${turn.port}?transport=tcp`,\n            username: turn.username\n          },\n          {\n            credential: turn.credential,\n            urls: `turn:${turn.domain}:${turn.port}?transport=udp`,\n            username: turn.username\n          },\n          {\n            credential: turn.credential,\n            urls: `turns:${turn.domain}:${turn.port}?transport=tcp`,\n            username: turn.username\n          }\n        ];\n      }\n      this._stunServers = [{ urls: `stun:${stun.domain}:${stun.port}` }];\n      log13.debug(\"[end] fetch iceParams\", { turn, stun });\n    });\n  }\n  get iceServers() {\n    let iceServers = [...this._stunServers];\n    const turnServers = this._turnServers.filter((t2) => {\n      const url = t2.urls;\n      switch (this.context.config.rtcConfig.turnProtocol) {\n        case \"all\":\n          return true;\n        case \"udp\":\n          return url.endsWith(\"udp\");\n        case \"tcp\":\n          return !url.startsWith(\"turns\") && url.endsWith(\"tcp\");\n        case \"tls\":\n          return url.startsWith(\"turns\");\n      }\n    });\n    if (this.context.config.rtcConfig.turnPolicy !== \"disable\") {\n      iceServers = [...iceServers, ...turnServers];\n    }\n    return iceServers;\n  }\n};\n\n// ../core/src/member/localPerson/factory.ts\nvar log14 = new Logger(\"packages/core/src/member/person/local/factory.ts\");\nfunction createLocalPerson(_0, _1, _2) {\n  return __async(this, arguments, function* (context, channel, memberDto, {\n    keepaliveIntervalSec,\n    keepaliveIntervalGapSec\n  } = {}) {\n    var _a2;\n    log14.debug(\"createLocalPerson\", {\n      channel,\n      memberDto,\n      keepaliveIntervalSec,\n      keepaliveIntervalGapSec\n    });\n    const { iceParamServer } = context.config;\n    const signalingSession = context.config.internal.disableSignaling === true ? void 0 : yield setupSignalingSession(context, channel, memberDto);\n    const iceManager = new IceManager(__spreadProps(__spreadValues({}, iceParamServer), {\n      memberId: memberDto.id,\n      channelId: channel.id,\n      ttl: MaxIceParamServerTTL,\n      context\n    }));\n    yield iceManager.updateIceParams().catch((err) => {\n      throw createError({\n        operationName: \"createLocalPerson\",\n        context,\n        channel,\n        info: __spreadProps(__spreadValues({}, errors.internal), { detail: \"updateIceParams failed\" }),\n        path: log14.prefix,\n        error: err\n      });\n    });\n    const person = yield LocalPersonImpl.Create({\n      iceManager,\n      channel,\n      signaling: signalingSession,\n      metadata: memberDto.metadata,\n      name: memberDto.name,\n      id: memberDto.id,\n      keepaliveIntervalSec,\n      keepaliveIntervalGapSec,\n      context\n    });\n    for (const plugin of context.plugins) {\n      yield (_a2 = plugin._whenCreateLocalPerson) == null ? void 0 : _a2.call(plugin, person);\n      person._onDisposed.once(() => __async(this, null, function* () {\n        var _a3;\n        yield (_a3 = plugin._whenDisposeLocalPerson) == null ? void 0 : _a3.call(plugin, person);\n      }));\n    }\n    return person;\n  });\n}\n\n// ../core/src/member/localPerson/index.ts\nvar log15 = new Logger(\"packages/core/src/member/localPerson/index.ts\");\nvar LocalPersonImpl = class extends MemberImpl {\n  constructor(args) {\n    super(args);\n    this.args = args;\n    this.type = \"person\";\n    this.subtype = \"person\";\n    this.side = \"local\";\n    this.keepaliveIntervalSec = this.args.keepaliveIntervalSec;\n    this.keepaliveIntervalGapSec = this.args.keepaliveIntervalGapSec;\n    this.config = this.context.config;\n    this.onStreamPublished = this._events.make();\n    this.onStreamUnpublished = this._events.make();\n    this.onPublicationListChanged = this._events.make();\n    this.onPublicationSubscribed = this._events.make();\n    this.onPublicationUnsubscribed = this._events.make();\n    this.onSubscriptionListChanged = this._events.make();\n    this.onFatalError = this._events.make();\n    this._onStreamSubscribeFailed = this._events.make();\n    this._onDisposed = this._events.make();\n    this._disposer = new EventDisposer();\n    this._subscribing = {};\n    this._requestQueue = new PromiseQueue();\n    this.iceManager = this.args.iceManager;\n    this._disposed = false;\n    this._publishingAgent = new PublishingAgent(this);\n    this._subscribingAgent = new SubscribingAgent(this);\n    this._signaling = args.signaling;\n    this._listenChannelEvent();\n    this._listenBeforeUnload();\n  }\n  static Create(...args) {\n    return __async(this, null, function* () {\n      const person = new LocalPersonImpl(...args);\n      yield person._setupTtlTimer();\n      return person;\n    });\n  }\n  _listenChannelEvent() {\n    this.channel.onPublicationSubscribed.add((_0) => __async(this, [_0], function* ({ subscription }) {\n      yield this._handleOnPublicationSubscribe(\n        subscription\n      ).catch((e2) => log15.error(\"_handleOnStreamSubscribe\", e2));\n    })).disposer(this._disposer);\n    this.channel.onPublicationUnsubscribed.add((_0) => __async(this, [_0], function* ({ subscription }) {\n      yield this._handleOnPublicationUnsubscribe(\n        subscription\n      ).catch((e2) => log15.error(\"_handleOnStreamUnsubscribe\", e2));\n    })).disposer(this._disposer);\n    this.channel._onDisposed.once(() => {\n      this.dispose();\n    });\n    this.onLeft.once(() => {\n      this.dispose();\n    });\n  }\n  _setupTtlTimer() {\n    return __async(this, null, function* () {\n      const { keepaliveIntervalSec, keepaliveIntervalGapSec } = this;\n      if (keepaliveIntervalSec == null)\n        return;\n      log15.debug(\"_setupTtlTimer\", this.toJSON(), {\n        keepaliveIntervalSec,\n        keepaliveIntervalGapSec\n      });\n      if (keepaliveIntervalSec === -1) {\n        return;\n      }\n      const updateTtl = () => __async(this, null, function* () {\n        if (this._disposed) {\n          return;\n        }\n        const now = yield this.context._api.getServerUnixtimeInSec();\n        this.ttlSec = Math.floor(\n          now + keepaliveIntervalSec + (keepaliveIntervalGapSec != null ? keepaliveIntervalGapSec : 0)\n        );\n        try {\n          yield this.channel._updateMemberTtl(this.id, this.ttlSec);\n          log15.debug(\"updateTtl\", this.toJSON(), {\n            now,\n            ttlSec: this.ttlSec,\n            keepaliveIntervalSec: keepaliveIntervalSec != null ? keepaliveIntervalSec : 0,\n            keepaliveIntervalGapSec: keepaliveIntervalGapSec != null ? keepaliveIntervalGapSec : 0,\n            diff: this.ttlSec - now\n          });\n        } catch (error) {\n          if (this._disposed) {\n            return;\n          }\n          throw error;\n        }\n      });\n      yield updateTtl();\n      this.ttlInterval = setInterval(() => __async(this, null, function* () {\n        yield updateTtl().catch((error) => {\n          if (!this._disposed) {\n            this.onFatalError.emit(\n              createError({\n                operationName: \"localPerson._setupTtlTimer\",\n                path: log15.prefix,\n                info: __spreadProps(__spreadValues({}, errors.internal), {\n                  detail: \"updateMemberTtl failed\"\n                }),\n                channel: this.channel,\n                context: this.context,\n                error\n              })\n            );\n            this.dispose();\n          }\n        });\n      }), keepaliveIntervalSec * 1e3);\n    });\n  }\n  _listenBeforeUnload() {\n    if (window) {\n      const leave = () => __async(this, null, function* () {\n        window.removeEventListener(\"beforeunload\", leave);\n        if (this.state !== \"joined\") {\n          return;\n        }\n        log15.debug(\"leave by beforeunload\", this.toJSON());\n        yield this.leave();\n      });\n      window.addEventListener(\"beforeunload\", leave);\n    }\n  }\n  _handleOnPublicationSubscribe(subscription) {\n    return __async(this, null, function* () {\n      var _a2;\n      if (subscription.subscriber.id === this.id) {\n        try {\n          const timestamp = log15.info(\n            \"[start] startSubscribing\",\n            yield createLogPayload({\n              operationName: \"onPublicationSubscribed\",\n              channel: this.channel\n            }),\n            { subscription }\n          );\n          const options = (_a2 = this._subscribing[subscription.publication.id]) == null ? void 0 : _a2.options;\n          if (options) {\n            subscription.preferredEncoding = options.preferredEncodingId;\n          }\n          yield this._subscribingAgent.startSubscribing(subscription);\n          this.onPublicationSubscribed.emit({\n            subscription,\n            stream: subscription.stream\n          });\n          this.onSubscriptionListChanged.emit();\n          log15.elapsed(\n            timestamp,\n            \"[end] startSubscribing\",\n            yield createLogPayload({\n              operationName: \"onPublicationSubscribed\",\n              channel: this.channel\n            }),\n            {\n              subscription\n            }\n          );\n        } catch (error) {\n          this._onStreamSubscribeFailed.emit({ error, subscription });\n          throw error;\n        }\n      }\n      if (subscription.publication.publisher.id === this.id) {\n        if (subscription.subscriber.id === this.id) {\n          throw createError({\n            operationName: \"localPerson._handleOnStreamSubscribe\",\n            path: log15.prefix,\n            info: __spreadProps(__spreadValues({}, errors.internal), {\n              detail: \"can not subscribe own Publication\"\n            }),\n            channel: this.channel,\n            context: this.context\n          });\n        }\n        const timestamp = log15.info(\n          \"[start] startPublishing\",\n          yield createLogPayload({\n            operationName: \"onPublicationSubscribed\",\n            channel: this.channel\n          }),\n          { subscription }\n        );\n        yield this._publishingAgent.startPublishing(subscription.publication, subscription.subscriber).catch((e2) => {\n          log15.error(\"[failed] startPublishing\", e2, { subscription });\n          throw e2;\n        });\n        log15.elapsed(\n          timestamp,\n          \"[end] startPublishing\",\n          yield createLogPayload({\n            operationName: \"onPublicationSubscribed\",\n            channel: this.channel\n          }),\n          { subscription }\n        );\n      }\n    });\n  }\n  _handleOnPublicationUnsubscribe(subscription) {\n    return __async(this, null, function* () {\n      if (subscription.publication.publisher.id === this.id) {\n        const timestamp = log15.info(\n          \"[start] stopPublishing\",\n          yield createLogPayload({\n            operationName: \"onPublicationUnsubscribed\",\n            channel: this.channel\n          }),\n          { subscription }\n        );\n        yield this._publishingAgent.stopPublishing(subscription.publication, subscription.subscriber).catch((e2) => {\n          log15.error(\"[failed] stopPublishing\", e2, { subscription });\n          throw e2;\n        });\n        log15.elapsed(\n          timestamp,\n          \"[end] stopPublishing\",\n          yield createLogPayload({\n            operationName: \"onPublicationUnsubscribed\",\n            channel: this.channel\n          }),\n          { subscription }\n        );\n      }\n      if (subscription.subscriber.id === this.id) {\n        const timestamp = log15.info(\n          \"[start] stopSubscribing\",\n          yield createLogPayload({\n            operationName: \"onPublicationUnsubscribed\",\n            channel: this.channel\n          }),\n          { subscription }\n        );\n        yield this._subscribingAgent.stopSubscribing(subscription).catch((e2) => {\n          log15.error(\"[failed] stopSubscribing\", { subscription }, e2);\n          throw e2;\n        });\n        this.onPublicationUnsubscribed.emit({ subscription });\n        this.onSubscriptionListChanged.emit();\n        log15.elapsed(\n          timestamp,\n          \"[end] stopSubscribing\",\n          yield createLogPayload({\n            operationName: \"onPublicationUnsubscribed\",\n            channel: this.channel\n          }),\n          { subscription }\n        );\n      }\n    });\n  }\n  publish(_0) {\n    return __async(this, arguments, function* (stream, options = {}) {\n      var _a2, _b2, _c;\n      const timestamp = log15.info(\n        \"[start] publish\",\n        yield createLogPayload({\n          operationName: \"localPerson.publish\",\n          channel: this.channel\n        }),\n        { options }\n      );\n      if (this.state !== \"joined\") {\n        throw createError({\n          operationName: \"localPerson.publish\",\n          info: errors.localPersonNotJoinedChannel,\n          path: log15.prefix,\n          channel: this.channel,\n          context: this.context\n        });\n      }\n      if (stream.published) {\n        throw createError({\n          operationName: \"localPerson.publish\",\n          channel: this.channel,\n          context: this.context,\n          info: errors.alreadyPublishedStream,\n          path: log15.prefix\n        });\n      }\n      stream.published = true;\n      const init = {\n        metadata: options.metadata,\n        publisher: this.id,\n        channel: this.channel.id,\n        contentType: stream.contentType,\n        codecCapabilities: (_a2 = options.codecCapabilities) != null ? _a2 : []\n      };\n      if (stream.contentType === \"video\" && init.codecCapabilities.length === 0) {\n        init.codecCapabilities = [{ mimeType: \"video/vp8\" }];\n      }\n      if (options.encodings && options.encodings.length > 0) {\n        init.encodings = sortEncodings(normalizeEncodings(options.encodings));\n      }\n      const published = yield this._requestQueue.push(\n        () => this.channel._publish(init).catch((e2) => {\n          throw createError({\n            operationName: \"localPerson.publish\",\n            context: this.context,\n            channel: this.channel,\n            info: e2.info,\n            path: log15.prefix,\n            error: e2\n          });\n        })\n      );\n      const publication = this.channel._addPublication(published);\n      publication._setStream(stream);\n      if ((_b2 = init.codecCapabilities) == null ? void 0 : _b2.length) {\n        publication.setCodecCapabilities(init.codecCapabilities);\n      }\n      if ((_c = init.encodings) == null ? void 0 : _c.length) {\n        publication.setEncodings(init.encodings);\n      }\n      yield this._handleOnStreamPublish(publication);\n      log15.elapsed(\n        timestamp,\n        \"[end] publish\",\n        yield createLogPayload({\n          operationName: \"localPerson.publish\",\n          channel: this.channel\n        }),\n        { publication }\n      );\n      return publication;\n    });\n  }\n  _handleOnStreamPublish(publication) {\n    return __async(this, null, function* () {\n      log15.info(\n        \"onStreamPublished\",\n        yield createLogPayload({\n          operationName: \"onStreamPublished\",\n          channel: this.channel\n        })\n      );\n      this.onStreamPublished.emit({ publication });\n      this.onPublicationListChanged.emit();\n    });\n  }\n  unpublish(target) {\n    return __async(this, null, function* () {\n      const timestamp = log15.info(\n        \"[start] unpublish\",\n        yield createLogPayload({\n          operationName: \"localPerson.unpublish\",\n          channel: this.channel\n        })\n      );\n      const publicationId = typeof target === \"string\" ? target : target.id;\n      if (this.state !== \"joined\") {\n        throw createError({\n          operationName: \"localPerson.unpublish\",\n          info: errors.localPersonNotJoinedChannel,\n          path: log15.prefix,\n          context: this.context,\n          channel: this.channel\n        });\n      }\n      const publication = this.channel._getPublication(publicationId);\n      if (!publication) {\n        throw createError({\n          operationName: \"localPerson.unpublish\",\n          info: errors.publicationNotExist,\n          path: log15.prefix,\n          context: this.context,\n          channel: this.channel,\n          payload: { publicationId }\n        });\n      }\n      if (publication.stream) {\n        publication.stream._unpublished();\n      }\n      yield this._requestQueue.push(() => this.channel._unpublish(publicationId));\n      publication.subscriptions.map((s) => s.subscriber).forEach((s) => {\n        if (isRemoteMember(s)) {\n          this._publishingAgent.stopPublishing(publication, s);\n        }\n      });\n      yield this._handleOnStreamUnpublished(publication);\n      log15.elapsed(\n        timestamp,\n        \"[end] unpublish\",\n        yield createLogPayload({\n          operationName: \"localPerson.unpublish\",\n          channel: this.channel\n        }),\n        { publication }\n      );\n    });\n  }\n  _handleOnStreamUnpublished(publication) {\n    return __async(this, null, function* () {\n      log15.info(\n        \"onStreamUnpublished\",\n        yield createLogPayload({\n          operationName: \"onStreamUnpublished\",\n          channel: this.channel\n        })\n      );\n      this.onStreamUnpublished.emit({ publication });\n      this.onPublicationListChanged.emit();\n    });\n  }\n  subscribe(_0) {\n    return __async(this, arguments, function* (target, options = {}) {\n      const timestamp = log15.info(\n        \"[start] subscribe\",\n        yield createLogPayload({\n          operationName: \"localPerson.subscribe\",\n          channel: this.channel\n        }),\n        { target }\n      );\n      const publicationId = typeof target === \"string\" ? target : target.id;\n      if (this.state !== \"joined\") {\n        throw createError({\n          operationName: \"localPerson.subscribe\",\n          info: errors.localPersonNotJoinedChannel,\n          path: log15.prefix,\n          context: this.context,\n          channel: this.channel,\n          payload: { target }\n        });\n      }\n      const publication = this.channel._getPublication(publicationId);\n      if (publication == void 0) {\n        throw createError({\n          operationName: \"localPerson.subscribe\",\n          info: errors.publicationNotExist,\n          path: log15.prefix,\n          context: this.context,\n          channel: this.channel,\n          payload: publication\n        });\n      }\n      this._validatePublicationForSubscribe(publication);\n      this._subscribing[publication.id] = {\n        options,\n        processing: true\n      };\n      const subscribing = this._subscribing[publication.id];\n      try {\n        const subscriptionDto = yield this._requestQueue.push(\n          () => this.channel._subscribe(this.id, publicationId)\n        );\n        log15.elapsed(timestamp, \"[elapsed] subscribe / subscriptionDto received\", {\n          subscriptionDto\n        });\n        const subscription = this.channel._addSubscription(subscriptionDto);\n        if (!subscription.stream) {\n          yield Promise.race([\n            new Promise((r2, f) => {\n              this.onPublicationSubscribed.watch(\n                ({ subscription: subscription2 }) => subscription2.publication.id === publicationId,\n                this.context.config.rtcApi.timeout\n              ).catch((e2) => __async(this, null, function* () {\n                if (subscribing.processing) {\n                  f(\n                    createError({\n                      operationName: \"localPerson.subscribe\",\n                      info: __spreadProps(__spreadValues({}, errors.timeout), {\n                        detail: \"failed to subscribe publication. maybe publisher already left room\"\n                      }),\n                      path: log15.prefix,\n                      context: this.context,\n                      channel: this.channel,\n                      payload: { subscription, publication },\n                      error: e2\n                    })\n                  );\n                }\n              })).then(r2);\n            }),\n            new Promise((r2, f) => {\n              this.channel.onMemberLeft.watch(\n                (e2) => e2.member.id === publication.publisher.id,\n                this.context.config.rtcApi.timeout + 1e3\n              ).then(() => {\n                if (subscribing.processing) {\n                  f(\n                    createError({\n                      operationName: \"localPerson.subscribe\",\n                      info: __spreadProps(__spreadValues({}, errors.internal), {\n                        detail: \"failed to subscribe publication. publisher already left room\"\n                      }),\n                      path: log15.prefix,\n                      context: this.context,\n                      channel: this.channel,\n                      payload: { subscription, publication }\n                    })\n                  );\n                }\n              }).catch(r2);\n            }),\n            new Promise((r2, f) => {\n              this._onStreamSubscribeFailed.watch(\n                (e2) => e2.subscription.publication.id === publication.id,\n                this.context.config.rtcApi.timeout + 1e3\n              ).then((e2) => {\n                var _a2, _b2;\n                if (subscribing.processing) {\n                  const info = (_b2 = (_a2 = e2 == null ? void 0 : e2.error) == null ? void 0 : _a2.info) != null ? _b2 : __spreadProps(__spreadValues({}, errors.internal), {\n                    detail: \"subscribe _onStreamSubscribeFailed\"\n                  });\n                  f(\n                    createError({\n                      operationName: \"localPerson.subscribe\",\n                      info,\n                      path: log15.prefix,\n                      context: this.context,\n                      channel: this.channel,\n                      error: e2.error,\n                      payload: { subscription, publication }\n                    })\n                  );\n                }\n              }).catch(r2);\n            })\n          ]);\n        }\n        subscribing.processing = false;\n        log15.elapsed(\n          timestamp,\n          \"[end] subscribe\",\n          yield createLogPayload({\n            operationName: \"localPerson.subscribe\",\n            channel: this.channel\n          }),\n          { subscription, publication }\n        );\n        return {\n          subscription,\n          stream: subscription.stream\n        };\n      } catch (error) {\n        subscribing.processing = false;\n        log15.warn(\"[failed] subscribe\", error, { publication });\n        throw error;\n      }\n    });\n  }\n  _validatePublicationForSubscribe(publication) {\n    if (publication.publisher.id === this.id) {\n      throw createError({\n        operationName: \"localPerson._validatePublicationForSubscribe\",\n        info: errors.publicationNotExist,\n        path: log15.prefix,\n        context: this.context,\n        channel: this.channel,\n        payload: { publication }\n      });\n    }\n    if (publication.publisher instanceof UnknownMemberImpl) {\n      throw createError({\n        operationName: \"localPerson._validatePublicationForSubscribe\",\n        info: errors.unknownMemberType,\n        path: log15.prefix,\n        context: this.context,\n        channel: this.channel,\n        payload: { publication }\n      });\n    }\n    if (this.subscriptions.find((s) => s.publication.id === publication.id)) {\n      throw createError({\n        operationName: \"localPerson._validatePublicationForSubscribe\",\n        info: errors.alreadySubscribedPublication,\n        path: log15.prefix,\n        context: this.context,\n        channel: this.channel,\n        payload: { publication }\n      });\n    }\n  }\n  unsubscribe(target) {\n    return __async(this, null, function* () {\n      const timestamp = log15.info(\n        \"[start] unsubscribe\",\n        yield createLogPayload({\n          operationName: \"localPerson.unsubscribe\",\n          channel: this.channel\n        })\n      );\n      const subscriptionId = typeof target === \"string\" ? target : target.id;\n      if (this.state !== \"joined\") {\n        throw createError({\n          operationName: \"localPerson.unsubscribe\",\n          info: errors.localPersonNotJoinedChannel,\n          path: log15.prefix,\n          context: this.context,\n          channel: this.channel\n        });\n      }\n      const subscription = this.subscriptions.find(\n        (s) => s.id === subscriptionId\n      );\n      if (!subscription) {\n        throw createError({\n          operationName: \"localPerson.unsubscribe\",\n          info: errors.subscriptionNotExist,\n          path: log15.prefix,\n          context: this.context,\n          channel: this.channel,\n          payload: { subscriptionId }\n        });\n      }\n      delete this._subscribing[subscription.publication.id];\n      yield this._requestQueue.push(\n        () => this.channel._unsubscribe(subscriptionId)\n      );\n      log15.elapsed(\n        timestamp,\n        \"[end] unsubscribe\",\n        yield createLogPayload({\n          operationName: \"localPerson.unsubscribe\",\n          channel: this.channel\n        }),\n        { subscription }\n      );\n    });\n  }\n  _getConnections() {\n    const connections = this.channel.members.map(\n      (m) => m._getConnection(this.id)\n    );\n    const active = connections.filter(\n      (c) => (c == null ? void 0 : c.closed) === false\n    );\n    return active;\n  }\n  dispose() {\n    if (this._disposed) {\n      return;\n    }\n    this._disposed = true;\n    log15.debug(\"disposed\", this.toJSON());\n    clearInterval(this.ttlInterval);\n    if (this._signaling) {\n      this._signaling.close();\n    }\n    this._getConnections().forEach((c) => c.close());\n    this._onDisposed.emit();\n    this._events.dispose();\n    this._disposer.dispose();\n  }\n};\nfunction sortEncodings(encodings) {\n  const [encode] = encodings;\n  if (encode.maxBitrate) {\n    return encodings.sort((a, b) => a.maxBitrate - b.maxBitrate);\n  } else if (encode.scaleResolutionDownBy) {\n    return encodings.sort(\n      (a, b) => b.scaleResolutionDownBy - a.scaleResolutionDownBy\n    );\n  } else if (encode.maxFramerate) {\n    return encodings.sort((a, b) => a.maxFramerate - b.maxFramerate);\n  }\n  return encodings;\n}\n\n// ../core/src/channel/index.ts\nvar log16 = new Logger(\"packages/core/src/channel/index.ts\");\nvar SkyWayChannelImpl = class {\n  constructor(_context, _channelImpl) {\n    this._context = _context;\n    this._channelImpl = _channelImpl;\n    this.id = this._channelImpl.id;\n    this.name = this._channelImpl.name;\n    this.appId = this._context.appId;\n    this.disposed = false;\n    this.config = this._context.config;\n    this._state = \"opened\";\n    this._api = this._context._api;\n    this._members = {};\n    this._getMember = (id) => this._members[id];\n    this._publications = {};\n    this._getPublication = (id) => this._publications[id];\n    this._subscriptions = {};\n    this._getSubscription = (id) => this._subscriptions[id];\n    this._events = new Events();\n    this.onClosed = this._events.make();\n    this.onMetadataUpdated = this._events.make();\n    this.onMemberListChanged = this._events.make();\n    this.onMemberJoined = this._events.make();\n    this.onMemberLeft = this._events.make();\n    this.onMemberMetadataUpdated = this._events.make();\n    this.onPublicationListChanged = this._events.make();\n    this.onStreamPublished = this._events.make();\n    this.onStreamUnpublished = this._events.make();\n    this.onPublicationMetadataUpdated = this._events.make();\n    this.onPublicationEnabled = this._events.make();\n    this.onPublicationDisabled = this._events.make();\n    this.onSubscriptionListChanged = this._events.make();\n    this.onPublicationSubscribed = this._events.make();\n    this.onPublicationUnsubscribed = this._events.make();\n    this._onDisposed = this._events.make();\n    this.leave = (member) => __async(this, null, function* () {\n      return this._channelImpl.leave(this.id, member.id);\n    });\n    this.updateMetadata = (metadata) => this._channelImpl.updateChannelMetadata(metadata);\n    this.close = () => new Promise((r2, f) => __async(this, null, function* () {\n      if (this.state === \"closed\") {\n        f(\n          createError({\n            operationName: \"SkyWayChannelImpl.close\",\n            path: log16.prefix,\n            info: errors.alreadyChannelClosed,\n            channel: this,\n            context: this._context,\n            payload: this.toJSON()\n          })\n        );\n        return;\n      }\n      const timestamp = log16.info(\n        \"[start] close channel\",\n        yield createLogPayload({\n          operationName: \"SkyWayChannelImpl.close\",\n          channel: this\n        })\n      );\n      try {\n        yield this._channelImpl.close().catch((e2) => {\n          const error = createError({\n            operationName: \"SkyWayChannelImpl.close\",\n            context: this._context,\n            info: __spreadProps(__spreadValues({}, errors.internal), { detail: \"_api.deleteChannel failed\" }),\n            error: e2,\n            path: log16.prefix,\n            channel: this\n          });\n          throw error;\n        });\n        if (this._state !== \"closed\") {\n          yield this.onClosed.asPromise(this._context.config.rtcApi.timeout).catch((e2) => {\n            const error = createError({\n              operationName: \"SkyWayChannelImpl.close\",\n              context: this._context,\n              info: __spreadProps(__spreadValues({}, errors.timeout), { detail: \"channel.onClosed\" }),\n              error: e2,\n              path: log16.prefix,\n              channel: this\n            });\n            throw error;\n          });\n        }\n      } catch (error) {\n        log16.error(error.message, error);\n        f(error);\n      }\n      log16.elapsed(\n        timestamp,\n        \"[end] close channel\",\n        yield createLogPayload({\n          operationName: \"SkyWayChannelImpl.close\",\n          channel: this\n        })\n      );\n      r2();\n    }));\n    this._updateMemberTtl = (memberId, ttlSec) => this._channelImpl.updateMemberTtl(memberId, ttlSec);\n    this._updateMemberMetadata = (memberId, metadata) => this._channelImpl.updateMemberMetadata(memberId, metadata);\n    this._publish = (init) => this._channelImpl.publish(init);\n    this._unpublish = (publicationId) => __async(this, null, function* () {\n      return this._channelImpl.unpublish(publicationId);\n    });\n    this._subscribe = (subscriberId, publicationId) => {\n      const publication = this._getPublication(publicationId);\n      const subscriber = this._getMember(subscriberId);\n      if (subscriber == void 0) {\n        throw createError({\n          operationName: \"SkyWayChannelImpl._subscribe\",\n          path: log16.prefix,\n          info: __spreadProps(__spreadValues({}, errors.internal), {\n            detail: \"subscriber not found\"\n          }),\n          channel: this,\n          context: this._context,\n          payload: { subscriberId, publicationId }\n        });\n      }\n      return this._channelImpl.subscribe({\n        publication: publication.toJSON(),\n        subscriber: subscriber.toJSON()\n      });\n    };\n    this._unsubscribe = (subscriptionId) => __async(this, null, function* () {\n      if (!this._getSubscription(subscriptionId)) {\n        throw createError({\n          operationName: \"SkyWayChannelImpl._unsubscribe\",\n          path: log16.prefix,\n          info: __spreadProps(__spreadValues({}, errors.internal), {\n            detail: \"can't unsubscribe not exist subscription\"\n          }),\n          channel: this,\n          context: this._context,\n          payload: { subscriptionId }\n        });\n      }\n      yield this._channelImpl.unsubscribe(subscriptionId);\n    });\n    this._updatePublicationMetadata = (publicationId, metadata) => this._channelImpl.updatePublicationMetadata(publicationId, metadata);\n    this._disablePublication = (publicationId) => this._channelImpl.disablePublication(publicationId);\n    this._enablePublication = (publicationId) => this._channelImpl.enablePublication(publicationId);\n    this._setupPropertiesFromChannel();\n    this._setupListenChannelEvent();\n    _context._onDisposed.once(() => {\n      this.dispose();\n    });\n    log16.debug(\"channel spawned\", this.toJSON());\n  }\n  _addMember(memberDto) {\n    const exist = this._getMember(memberDto.id);\n    if (exist) {\n      return exist;\n    }\n    const member = this._context._createRemoteMember(this, memberDto);\n    this._members[member.id] = member;\n    return member;\n  }\n  _removeMember(memberId) {\n    delete this._members[memberId];\n  }\n  _addPublication(p) {\n    const exist = this._getPublication(p.id);\n    if (exist) {\n      return exist;\n    }\n    const publication = createPublication(this, p);\n    this._publications[p.id] = publication;\n    return publication;\n  }\n  _removePublication(publicationId) {\n    delete this._publications[publicationId];\n  }\n  _addSubscription(s) {\n    const exist = this._getSubscription(s.id);\n    if (exist) {\n      return exist;\n    }\n    const subscription = createSubscription(this, s);\n    this._subscriptions[s.id] = subscription;\n    return subscription;\n  }\n  _removeSubscription(subscriptionId) {\n    delete this._subscriptions[subscriptionId];\n  }\n  get localPerson() {\n    return this._localPerson;\n  }\n  get members() {\n    return Object.values(this._members);\n  }\n  get bots() {\n    return this.members.filter((m) => m.type === \"bot\");\n  }\n  get publications() {\n    return Object.values(this._publications);\n  }\n  get subscriptions() {\n    return Object.values(this._subscriptions);\n  }\n  get metadata() {\n    return this._channelImpl.metadata;\n  }\n  get state() {\n    return this._state;\n  }\n  toJSON() {\n    return {\n      id: this.id,\n      name: this.name,\n      appId: this.appId,\n      metadata: this.metadata,\n      members: this.members,\n      publications: this.publications,\n      subscriptions: this.subscriptions\n    };\n  }\n  _setupPropertiesFromChannel() {\n    this._channelImpl.members.forEach((memberDto) => {\n      this._addMember(memberDto);\n    });\n    this._channelImpl.publications.forEach((publicationDto) => {\n      this._addPublication(publicationDto);\n    });\n    this._channelImpl.subscriptions.forEach((subscriptionDto) => {\n      this._addSubscription(subscriptionDto);\n    });\n  }\n  _setupListenChannelEvent() {\n    this._channelImpl.onClosed.add(() => this._handleOnChannelClose());\n    this._channelImpl.onMetadataUpdated.add(\n      ({ channel }) => this._handleOnChannelMetadataUpdate(channel.metadata)\n    );\n    this._channelImpl.onMemberJoined.add(({ member }) => {\n      this._handleOnMemberJoin(member);\n    });\n    this._channelImpl.onMemberLeft.add(({ member }) => {\n      this._handleOnMemberLeft(member);\n    });\n    this._channelImpl.onMemberListChanged.pipe(this.onMemberListChanged);\n    this._channelImpl.onMemberMetadataUpdated.add(({ member }) => {\n      this._handleOnMemberMetadataUpdate(member, member.metadata);\n    });\n    this._channelImpl.onStreamPublished.add(({ publication }) => {\n      this._handleOnStreamPublish(publication);\n    });\n    this._channelImpl.onStreamUnpublished.add(({ publication }) => {\n      this._handleOnStreamUnpublish(publication);\n    });\n    this._channelImpl.onPublicationListChanged.pipe(\n      this.onPublicationListChanged\n    );\n    this._channelImpl.onPublicationMetadataUpdated.add(({ publication }) => {\n      this._handleOnPublicationMetadataUpdate(\n        publication,\n        publication.metadata\n      );\n    });\n    this._channelImpl.onPublicationEnabled.add(\n      (_0) => __async(this, [_0], function* ({ publication }) {\n        return yield this._handleOnPublicationEnabled(publication);\n      })\n    );\n    this._channelImpl.onPublicationDisabled.add(\n      ({ publication }) => this._handleOnPublicationDisabled(publication)\n    );\n    this._channelImpl.onPublicationSubscribed.add(({ subscription }) => {\n      this._handleOnStreamSubscribe(subscription);\n    });\n    this._channelImpl.onPublicationUnsubscribed.add(({ subscription }) => {\n      this._handleOnStreamUnsubscribe(subscription);\n    });\n    this._channelImpl.onSubscriptionListChanged.pipe(\n      this.onSubscriptionListChanged\n    );\n  }\n  _handleOnChannelClose() {\n    this._state = \"closed\";\n    this.onClosed.emit({});\n    this.dispose();\n  }\n  _handleOnChannelMetadataUpdate(metadata) {\n    this.onMetadataUpdated.emit({ metadata });\n  }\n  _handleOnMemberJoin(memberDto) {\n    const member = this._addMember(memberDto);\n    this.onMemberJoined.emit({ member });\n  }\n  _handleOnMemberLeft(memberDto) {\n    var _a2;\n    const member = this._getMember(memberDto.id);\n    this._removeMember(member.id);\n    member._left();\n    if (((_a2 = this.localPerson) == null ? void 0 : _a2.id) === memberDto.id) {\n      this.localPerson._left();\n      this._localPerson = void 0;\n    }\n    this.onMemberLeft.emit({ member });\n  }\n  _handleOnMemberMetadataUpdate(memberDto, metadata) {\n    var _a2;\n    const member = this._getMember(memberDto.id);\n    member._metadataUpdated(metadata);\n    if (((_a2 = this.localPerson) == null ? void 0 : _a2.id) === memberDto.id) {\n      this.localPerson._metadataUpdated(metadata);\n    }\n    this.onMemberMetadataUpdated.emit({ member, metadata });\n  }\n  _handleOnStreamPublish(publicationDto) {\n    const publication = this._addPublication(publicationDto);\n    this.onStreamPublished.emit({ publication });\n  }\n  _handleOnStreamUnpublish(publicationDto) {\n    const publication = this._getPublication(publicationDto.id);\n    this._removePublication(publication.id);\n    publication._unpublished();\n    this.onStreamUnpublished.emit({ publication });\n  }\n  _handleOnPublicationMetadataUpdate(publicationDto, metadata) {\n    const publication = this._getPublication(publicationDto.id);\n    publication._updateMetadata(metadata);\n    this.onPublicationMetadataUpdated.emit({ publication, metadata });\n  }\n  _handleOnPublicationEnabled(publicationDto) {\n    return __async(this, null, function* () {\n      const publication = this._getPublication(publicationDto.id);\n      publication._enable();\n      this.onPublicationEnabled.emit({ publication });\n    });\n  }\n  _handleOnPublicationDisabled(publicationDto) {\n    const publication = this._getPublication(publicationDto.id);\n    publication._disable();\n    this.onPublicationDisabled.emit({ publication });\n  }\n  _handleOnStreamSubscribe(subscriptionDto) {\n    const subscription = this._addSubscription(subscriptionDto);\n    const publication = this._getPublication(subscription.publication.id);\n    publication._subscribed(subscription);\n    this.onPublicationSubscribed.emit({ subscription });\n  }\n  _handleOnStreamUnsubscribe(subscriptionDto) {\n    const subscription = this._getSubscription(subscriptionDto.id);\n    this._removeSubscription(subscription.id);\n    subscription._canceled();\n    const publication = this._getPublication(subscription.publication.id);\n    publication._unsubscribed(subscription);\n    this.onPublicationUnsubscribed.emit({ subscription });\n  }\n  join() {\n    return __async(this, arguments, function* (options = {}) {\n      var _a2, _b2;\n      const timestamp = log16.info(\n        \"[start] join\",\n        yield createLogPayload({\n          operationName: \"SkyWayChannelImpl.join\",\n          channel: this\n        })\n      );\n      if (this._localPerson) {\n        throw createError({\n          operationName: \"SkyWayChannelImpl.join\",\n          path: log16.prefix,\n          info: errors.alreadyLocalPersonExist,\n          channel: this,\n          context: this._context\n        });\n      }\n      if (options.name != void 0) {\n        const exist = this.members.find((m) => m.name === options.name);\n        if (exist) {\n          throw createError({\n            operationName: \"SkyWayChannelImpl.join\",\n            path: log16.prefix,\n            info: errors.alreadySameNameMemberExist,\n            channel: this,\n            context: this._context,\n            payload: options\n          });\n        }\n      }\n      options.keepaliveIntervalSec = (_a2 = options.keepaliveIntervalSec) != null ? _a2 : this.config.member.keepaliveIntervalSec;\n      options.keepaliveIntervalGapSec = (_b2 = options.keepaliveIntervalGapSec) != null ? _b2 : this.config.member.keepaliveIntervalGapSec;\n      const init = __spreadProps(__spreadValues({}, options), {\n        type: \"person\",\n        subtype: \"person\"\n      });\n      if (options.keepaliveIntervalSec !== null) {\n        init[\"ttlSec\"] = (yield this._context._api.getServerUnixtimeInSec()) + options.keepaliveIntervalSec;\n      }\n      const member = yield this._channelImpl.joinChannel(init).catch((e2) => {\n        log16.error(\"[failed] join\", e2);\n        throw e2;\n      });\n      log16.elapsed(timestamp, \"[elapsed] join / channelImpl.joinChannel\", {\n        member\n      });\n      const person = yield this._createLocalPerson(member, {\n        keepaliveIntervalSec: options.keepaliveIntervalSec,\n        keepaliveIntervalGapSec: options.keepaliveIntervalGapSec\n      });\n      const adapter = new LocalPersonAdapter(person);\n      log16.elapsed(timestamp, \"[end] join\", { person });\n      return adapter;\n    });\n  }\n  moveChannel(adapter) {\n    return __async(this, null, function* () {\n      if (this._localPerson) {\n        throw createError({\n          operationName: \"SkyWayChannelImpl.moveChannel\",\n          path: log16.prefix,\n          info: errors.alreadyLocalPersonExist,\n          channel: this,\n          context: this._context\n        });\n      }\n      if (!(adapter instanceof LocalPersonAdapter)) {\n        throw createError({\n          operationName: \"SkyWayChannelImpl.moveChannel\",\n          path: log16.prefix,\n          info: errors.invalidArgumentValue,\n          channel: this,\n          context: this._context\n        });\n      }\n      const leaveChannel = adapter.channel;\n      if (this.id === leaveChannel.id) {\n        throw createError({\n          operationName: \"SkyWayChannelImpl.moveChannel\",\n          path: log16.prefix,\n          info: errors.cantMoveSameIdChannel,\n          channel: this,\n          context: this._context\n        });\n      }\n      yield leaveChannel.leave(adapter);\n      const init = {\n        name: adapter.name,\n        type: adapter.type,\n        subtype: adapter.subtype,\n        metadata: adapter.metadata\n      };\n      if (adapter.keepaliveIntervalSec != void 0) {\n        init[\"ttlSec\"] = (yield this._context._api.getServerUnixtimeInSec()) + adapter.keepaliveIntervalSec;\n      }\n      const member = yield this._channelImpl.joinChannel(init);\n      const person = yield this._createLocalPerson(member, {\n        keepaliveIntervalSec: adapter.keepaliveIntervalSec,\n        keepaliveIntervalGapSec: adapter.keepaliveIntervalSec\n      });\n      adapter.apply(person);\n    });\n  }\n  _createLocalPerson(_0, _1) {\n    return __async(this, arguments, function* (member, {\n      keepaliveIntervalSec,\n      keepaliveIntervalGapSec\n    }) {\n      const person = yield createLocalPerson(this._context, this, member, {\n        keepaliveIntervalSec,\n        keepaliveIntervalGapSec\n      });\n      this._localPerson = person;\n      return person;\n    });\n  }\n  dispose() {\n    if (this.disposed) {\n      return;\n    }\n    this.disposed = true;\n    log16.debug(\"disposed\", this.toJSON());\n    this._channelImpl.dispose();\n    this._onDisposed.emit();\n    this._events.dispose();\n  }\n};\nvar SkyWayChannel = class {\n  static Create(_0) {\n    return __async(this, arguments, function* (context, init = {}) {\n      const timestamp = log16.info(\"[start] createChannel\", {\n        operationName: \"SkyWayChannel.Create\"\n      });\n      const channelImpl = yield context._api.createChannel(init).catch((e2) => {\n        log16.error(\"[failed] createChannel\", e2);\n        throw e2;\n      });\n      const channel = new SkyWayChannelImpl(context, channelImpl);\n      log16.elapsed(timestamp, \"[end] createChannel\");\n      return channel;\n    });\n  }\n  static Find(context, query) {\n    return __async(this, null, function* () {\n      const timestamp = log16.info(\"[start] findChannel\", {\n        operationName: \"SkyWayChannel.Find\"\n      });\n      const channelImpl = yield context._api.findChannel(query).catch((e2) => {\n        log16.error(\"[failed] findChannel\", e2);\n        throw e2;\n      });\n      const channel = new SkyWayChannelImpl(context, channelImpl);\n      log16.elapsed(timestamp, \"[end] findChannel\");\n      return channel;\n    });\n  }\n  static FindOrCreate(context, query) {\n    return __async(this, null, function* () {\n      const timestamp = log16.info(\"[start] findOrCreateChannel\", {\n        operationName: \"SkyWayChannel.FindOrCreate\"\n      });\n      const channelImpl = yield context._api.findOrCreateChannel(query).catch((e2) => {\n        log16.error(\"[failed] findOrCreateChannel\", e2);\n        throw e2;\n      });\n      const channel = new SkyWayChannelImpl(context, channelImpl);\n      log16.elapsed(timestamp, \"[end] findOrCreateChannel\");\n      return channel;\n    });\n  }\n  constructor() {\n  }\n};\n\n// ../core/src/channel/event.ts\ninit_process();\n\n// ../core/src/config.ts\ninit_process();\n\n// ../rtc-api-client/src/index.ts\ninit_process();\n\n// ../rtc-api-client/src/client.ts\ninit_process();\n\n// ../rtc-rpc-api-client/src/index.ts\ninit_process();\n\n// ../rtc-rpc-api-client/src/client.ts\ninit_process();\n\n// ../rtc-rpc-api-client/src/const.ts\ninit_process();\nvar defaultDomain = \"rtc-api.skyway.ntt.com\";\nvar rpcTimeout = 2e4;\nvar MaxRetry = 8;\n\n// ../rtc-rpc-api-client/src/errors.ts\ninit_process();\nvar errors2 = {\n  timeout: { name: \"timeout\", detail: \"\", solution: \"\" },\n  internalError: { name: \"internalError\", detail: \"\", solution: \"\" },\n  invalidParameter: { name: \"invalidParameter\", detail: \"\", solution: \"\" },\n  connectionDisconnected: {\n    name: \"connectionDisconnected\",\n    detail: \"\",\n    solution: \"\"\n  },\n  websocketConnectionFailure: {\n    name: \"connectionFailure\",\n    detail: \"\\u30B5\\u30FC\\u30D0\\u3078\\u306E\\u63A5\\u7D9A\\u306B\\u5931\\u6557\\u3057\\u307E\\u3057\\u305F\",\n    solution: \"\\u30CD\\u30C3\\u30C8\\u30EF\\u30FC\\u30AF\\u63A5\\u7D9A\\u72B6\\u6CC1\\u3092\\u78BA\\u8A8D\\u3057\\u3066\\u304F\\u3060\\u3055\\u3044\"\n  },\n  rpcResponseError: {\n    name: \"rpcResponseError\",\n    detail: \"\",\n    solution: \"\",\n    error: {}\n  },\n  onClosedWhileRequesting: {\n    name: \"onClosedWhileRequesting\",\n    detail: \"request\\u4E2D\\u306B\\u30AF\\u30E9\\u30A4\\u30A2\\u30F3\\u30C8\\u304C\\u7D42\\u4E86\\u3055\\u308C\\u307E\\u3057\\u305F\",\n    solution: \"\\u30EA\\u30AF\\u30A8\\u30B9\\u30C8\\u306E\\u5B8C\\u4E86\\u3092\\u78BA\\u8A8D\\u3057\\u3066\\u304B\\u3089\\u30AF\\u30E9\\u30A4\\u30A2\\u30F3\\u30C8\\u3092\\u7D42\\u4E86\\u3055\\u305B\\u3066\\u304F\\u3060\\u3055\\u3044\"\n  },\n  failedToConnectRtcAPI: {\n    name: \"failedToConnectRtcAPI\",\n    detail: \"rtc-api server\\u3078\\u306E\\u63A5\\u7D9A\\u306B\\u5931\\u6557\\u3057\\u307E\\u3057\\u305F\",\n    solution: \"\\u30A4\\u30F3\\u30BF\\u30FC\\u30CD\\u30C3\\u30C8\\u63A5\\u7D9A\\u72B6\\u6CC1\\u3068Token\\u306E\\u5185\\u5BB9\\u304C\\u6B63\\u3057\\u3044\\u304B\\u3092\\u78BA\\u304B\\u3081\\u3066\\u304F\\u3060\\u3055\\u3044\"\n  },\n  failedToUpdateMemberTTL: {\n    name: \"failedToUpdateMemberTTL\",\n    detail: \"updateMemberTTL\\u3092\\u518D\\u8A66\\u884C\\u3057\\u307E\\u3057\\u305F\\u304C\\u3001\\u5931\\u6557\\u3057\\u307E\\u3057\\u305F\",\n    solution: \"\\u30A4\\u30F3\\u30BF\\u30FC\\u30CD\\u30C3\\u30C8\\u63A5\\u7D9A\\u72B6\\u6CC1\\u3092\\u78BA\\u8A8D\\u3057\\u3066\\u304F\\u3060\\u3055\\u3044\"\n  }\n};\n\n// ../rtc-rpc-api-client/src/rpc.ts\ninit_process();\nvar import_isomorphic_ws2 = __toESM(require_browser());\n\n// ../rtc-rpc-api-client/node_modules/uuid/dist/esm-browser/index.js\ninit_process();\n\n// ../rtc-rpc-api-client/node_modules/uuid/dist/esm-browser/rng.js\ninit_process();\nvar getRandomValues3;\nvar rnds83 = new Uint8Array(16);\nfunction rng3() {\n  if (!getRandomValues3) {\n    getRandomValues3 = typeof crypto !== \"undefined\" && crypto.getRandomValues && crypto.getRandomValues.bind(crypto);\n    if (!getRandomValues3) {\n      throw new Error(\"crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported\");\n    }\n  }\n  return getRandomValues3(rnds83);\n}\n\n// ../rtc-rpc-api-client/node_modules/uuid/dist/esm-browser/stringify.js\ninit_process();\nvar byteToHex3 = [];\nfor (let i = 0; i < 256; ++i) {\n  byteToHex3.push((i + 256).toString(16).slice(1));\n}\nfunction unsafeStringify3(arr, offset = 0) {\n  return (byteToHex3[arr[offset + 0]] + byteToHex3[arr[offset + 1]] + byteToHex3[arr[offset + 2]] + byteToHex3[arr[offset + 3]] + \"-\" + byteToHex3[arr[offset + 4]] + byteToHex3[arr[offset + 5]] + \"-\" + byteToHex3[arr[offset + 6]] + byteToHex3[arr[offset + 7]] + \"-\" + byteToHex3[arr[offset + 8]] + byteToHex3[arr[offset + 9]] + \"-\" + byteToHex3[arr[offset + 10]] + byteToHex3[arr[offset + 11]] + byteToHex3[arr[offset + 12]] + byteToHex3[arr[offset + 13]] + byteToHex3[arr[offset + 14]] + byteToHex3[arr[offset + 15]]).toLowerCase();\n}\n\n// ../rtc-rpc-api-client/node_modules/uuid/dist/esm-browser/v4.js\ninit_process();\n\n// ../rtc-rpc-api-client/node_modules/uuid/dist/esm-browser/native.js\ninit_process();\nvar randomUUID3 = typeof crypto !== \"undefined\" && crypto.randomUUID && crypto.randomUUID.bind(crypto);\nvar native_default3 = {\n  randomUUID: randomUUID3\n};\n\n// ../rtc-rpc-api-client/node_modules/uuid/dist/esm-browser/v4.js\nfunction v43(options, buf, offset) {\n  if (native_default3.randomUUID && !buf && !options) {\n    return native_default3.randomUUID();\n  }\n  options = options || {};\n  const rnds = options.random || (options.rng || rng3)();\n  rnds[6] = rnds[6] & 15 | 64;\n  rnds[8] = rnds[8] & 63 | 128;\n  if (buf) {\n    offset = offset || 0;\n    for (let i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n    return buf;\n  }\n  return unsafeStringify3(rnds);\n}\nvar v4_default3 = v43;\n\n// ../rtc-rpc-api-client/src/util.ts\ninit_process();\nfunction createError2({\n  operationName,\n  info,\n  error,\n  path: path2,\n  payload,\n  channelId,\n  appId,\n  memberId\n}) {\n  return new SkyWayError({\n    error,\n    info,\n    payload: { payload, operationName, channelId, appId, memberId },\n    path: path2\n  });\n}\nfunction createWarnPayload2({\n  appId,\n  detail,\n  channelId,\n  operationName,\n  payload,\n  memberId\n}) {\n  const warn = {\n    operationName,\n    payload,\n    detail,\n    appId,\n    channelId,\n    memberId\n  };\n  return warn;\n}\n\n// ../rtc-rpc-api-client/src/rpc.ts\nvar log17 = new Logger(\"packages/rtc-rpc-api-client/src/rpc.ts\");\nvar RPC = class {\n  constructor() {\n    this._id = v4_default3();\n    this.closed = false;\n    this.negotiated = false;\n    this._reconnecting = false;\n    this._pendingRequests = [];\n    this._events = new Events();\n    this._onMessage = this._events.make();\n    this.onNotify = this._events.make();\n    this.onFatalError = this._events.make();\n    this.onDisconnected = this._events.make();\n    this.onClosed = this._events.make();\n    this._send = (request) => new Promise((r2, f) => __async(this, null, function* () {\n      yield new Promise((r3) => setTimeout(r3, 0));\n      if (this._ws.readyState !== this._ws.OPEN) {\n        f(\n          createError2({\n            operationName: \"RPC._send\",\n            info: __spreadProps(__spreadValues({}, errors2.internalError), { detail: \"wrong state\" }),\n            path: log17.prefix,\n            payload: {\n              request,\n              wsReadyState: wsStates[this._ws.readyState]\n            }\n          })\n        );\n        return;\n      }\n      this._ws.send(JSON.stringify(request), (error) => {\n        if (error) {\n          throw f(\n            createError2({\n              operationName: \"RPC._send\",\n              info: __spreadProps(__spreadValues({}, errors2.internalError), {\n                detail: \"failed to send rpc message\"\n              }),\n              path: log17.prefix,\n              error\n            })\n          );\n        }\n      });\n      r2();\n    }));\n  }\n  set reconnecting(b) {\n    this._reconnecting = b;\n  }\n  get reconnecting() {\n    return this._reconnecting;\n  }\n  connect(_0) {\n    return __async(this, arguments, function* ({\n      domain,\n      token,\n      secure\n    }) {\n      const subProtocol = token;\n      this._ws = new import_isomorphic_ws2.default(\n        `${secure ? \"wss\" : \"ws\"}://${domain}/ws`,\n        subProtocol\n      );\n      this._ws.onmessage = (ev) => {\n        this._onMessage.emit(JSON.parse(ev.data));\n      };\n      this._ws.onclose = () => __async(this, null, function* () {\n        log17.debug(\"websocket closed\", { id: this._id });\n        this.onDisconnected.emit();\n      });\n      this._onMessage.add((msg) => {\n        if (isNotifyMessage(msg)) {\n          this.onNotify.emit(msg);\n        }\n      });\n      const error = yield new Promise((r2, f) => {\n        const timeout = setTimeout(() => {\n          f(\n            createError2({\n              operationName: \"RPC.connect\",\n              info: __spreadProps(__spreadValues({}, errors2.timeout), { detail: \"ws.open\" }),\n              path: log17.prefix\n            })\n          );\n        }, 1e4);\n        this._ws.onerror = (e2) => {\n          f(\n            createError2({\n              operationName: \"RPC.connect\",\n              info: errors2.websocketConnectionFailure,\n              path: log17.prefix,\n              error: e2\n            })\n          );\n        };\n        this._ws.onopen = () => {\n          clearTimeout(timeout);\n          r2();\n        };\n      }).catch((e2) => e2);\n      if (error) {\n        throw error;\n      }\n      this.negotiated = true;\n    });\n  }\n  close() {\n    if (this.closed) {\n      return;\n    }\n    this.closed = true;\n    log17.debug(\"closed\");\n    this._ws.close();\n    this.onClosed.emit();\n    this._events.dispose();\n  }\n  resolvePendingRequests() {\n    log17.debug(\"resolve pendingRequests\", [...this._pendingRequests]);\n    this._pendingRequests.forEach((req) => __async(this, null, function* () {\n      yield this._send(req);\n    }));\n    this._pendingRequests = [];\n  }\n  request(method, params) {\n    return __async(this, null, function* () {\n      if (this.closed) {\n        throw createError2({\n          operationName: \"RPC.request\",\n          info: __spreadProps(__spreadValues({}, errors2.internalError), {\n            detail: \"rpc closed\"\n          }),\n          path: log17.prefix,\n          payload: { method, params, id: this._id }\n        });\n      }\n      let promiseResolved = false;\n      try {\n        const request = buildRequest(method, params);\n        const handleMessage = () => __async(this, null, function* () {\n          return yield this._onMessage.watch((msg) => msg.id === request.id, rpcTimeout).catch(() => {\n            if (promiseResolved) {\n              return;\n            }\n            throw createError2({\n              operationName: \"RPC.request\",\n              info: __spreadProps(__spreadValues({}, errors2.timeout), {\n                detail: \"rpc request timeout\"\n              }),\n              path: log17.prefix,\n              payload: {\n                rpcTimeout,\n                method,\n                params,\n                wsReadyState: wsStates[this._ws.readyState],\n                id: this._id\n              }\n            });\n          });\n        });\n        const pendingRequest = () => __async(this, null, function* () {\n          log17.warn(\n            \"[start] reconnecting. pending request\",\n            createWarnPayload2({\n              operationName: \"RPC.request\",\n              detail: \"[start] reconnecting. pending request\",\n              payload: { request, id: this._id }\n            })\n          );\n          this._pendingRequests.push(request);\n          const message2 = yield Promise.race([\n            handleMessage(),\n            this.onFatalError.asPromise(rpcTimeout + 100).then((e2) => {\n              if (!promiseResolved) {\n                log17.error(\n                  \"[failed] reconnecting. pending request\",\n                  createError2({\n                    operationName: \"RPC.request\",\n                    info: __spreadProps(__spreadValues({}, errors2.internalError), {\n                      detail: \"onFatalError while request\"\n                    }),\n                    path: log17.prefix\n                  }),\n                  e2\n                );\n              }\n              throw e2;\n            })\n          ]);\n          promiseResolved = true;\n          log17.warn(\n            \"[end] reconnecting. pending request\",\n            createWarnPayload2({\n              operationName: \"RPC.request\",\n              detail: \"[end] reconnecting. pending request\",\n              payload: { request, id: this._id }\n            })\n          );\n          return message2;\n        });\n        let message;\n        if (!this._reconnecting) {\n          this._send(request).catch((e2) => {\n            log17.error(\"send error\", e2);\n          });\n          message = yield Promise.race([\n            handleMessage(),\n            (() => __async(this, null, function* () {\n              yield this.onDisconnected.asPromise(rpcTimeout + 100);\n              if (promiseResolved) {\n                return {};\n              }\n              try {\n                const message2 = yield pendingRequest();\n                log17.warn(\n                  createWarnPayload2({\n                    operationName: \"request.pendingRequest\",\n                    detail: \"success to handle disconnected\"\n                  })\n                );\n                return message2;\n              } catch (error) {\n                throw createError2({\n                  operationName: \"RPC.request\",\n                  info: errors2.connectionDisconnected,\n                  path: log17.prefix,\n                  error\n                });\n              }\n            }))(),\n            this.onFatalError.asPromise(rpcTimeout + 100).then((e2) => {\n              if (promiseResolved) {\n                return {};\n              }\n              throw createError2({\n                operationName: \"RPC.request\",\n                info: __spreadProps(__spreadValues({}, errors2.internalError), {\n                  detail: \"onFatalError while requesting\"\n                }),\n                path: log17.prefix,\n                error: e2\n              });\n            }),\n            this.onClosed.asPromise(rpcTimeout + 100).then(() => {\n              if (promiseResolved) {\n                return {};\n              }\n              throw createError2({\n                operationName: \"RPC.request\",\n                info: errors2.onClosedWhileRequesting,\n                path: log17.prefix,\n                payload: { method, params }\n              });\n            })\n          ]);\n          promiseResolved = true;\n        } else {\n          message = yield pendingRequest();\n        }\n        if (message.error) {\n          log17.warn(\"[failed] request \", { message, method, params });\n          throw createError2({\n            operationName: \"RPC.request\",\n            info: __spreadProps(__spreadValues({}, errors2.rpcResponseError), {\n              detail: method,\n              error: message.error\n            }),\n            payload: { message, method, params },\n            path: log17.prefix\n          });\n        }\n        return message.result;\n      } catch (error) {\n        promiseResolved = true;\n        throw error;\n      }\n    });\n  }\n  notify(method, params) {\n    return __async(this, null, function* () {\n      const request = buildRequest(method, params, true);\n      yield this._send(request);\n    });\n  }\n  batch(requests) {\n    return __async(this, null, function* () {\n      const messages = requests.map(\n        ({ method, params }) => buildRequest(method, params)\n      );\n      this._send(messages).catch((e2) => {\n        throw e2;\n      });\n      const responses = yield Promise.all(\n        messages.map((_0) => __async(this, [_0], function* ({ id }) {\n          const message = yield this._onMessage.watch(\n            (msg) => msg.id === id,\n            rpcTimeout\n          );\n          return message;\n        }))\n      );\n      return responses;\n    });\n  }\n};\nvar buildRequest = (method, params, notify) => {\n  if (notify) {\n    return { jsonrpc: \"2.0\", method, params };\n  }\n  const id = v4_default3();\n  return { jsonrpc: \"2.0\", method, params, id };\n};\nvar isNotifyMessage = (msg) => {\n  const notify = msg;\n  if (notify.method && notify.id == void 0) {\n    return true;\n  }\n  return false;\n};\nvar wsStates = [\"CONNECTING\", \"OPEN\", \"CLOSING\", \"CLOSED\"];\n\n// ../rtc-rpc-api-client/src/client.ts\nvar log18 = new Logger(\"packages/rtc-rpc-api-client/src/client.ts\");\nvar _a, _b;\nvar RtcRpcApiClient = class {\n  constructor(config) {\n    this.config = config;\n    this.closed = false;\n    this._domain = (_a = this.config.domain) != null ? _a : defaultDomain;\n    this._secure = (_b = this.config.secure) != null ? _b : true;\n    this._token = this.config.token;\n    this._rpc = new RPC();\n    this._subscribingChannelEvents = /* @__PURE__ */ new Set();\n    this._subscribingChannelVersions = {};\n    this._httpClient = new HttpClient(\n      `http${this.config.secure ? \"s\" : \"\"}://${this.config.domain}`\n    );\n    this._reconnectCount = 0;\n    this._reconnectLimit = MaxRetry;\n    this._events = new Events();\n    this.onEvent = this._events.make();\n    this.onFatalError = this._events.make();\n    this.onClose = this._events.make();\n    this.onReconnected = this._events.make();\n    var _a2, _b2, _c, _d;\n    Logger.level = (_b2 = (_a2 = config.log) == null ? void 0 : _a2.level) != null ? _b2 : Logger.level;\n    Logger.format = (_d = (_c = config.log) == null ? void 0 : _c.format) != null ? _d : Logger.format;\n    log18.debug(\"RtcRpcApiClient spawned\", config);\n    this._rpc.onNotify.add((notify) => {\n      if (notify.method === \"channelEventNotification\") {\n        const event = notify.params;\n        this._subscribingChannelVersions[event.data.channel.id] = event.data.channel.version;\n        this.onEvent.emit({ channelId: event.data.channel.id, event });\n      }\n    });\n    this._rpc.onDisconnected.add(() => __async(this, null, function* () {\n      if (this._rpc.negotiated && !this._rpc.closed && !this._rpc.reconnecting) {\n        yield this._reconnect();\n      }\n    }));\n    this._rpc.onFatalError.once((e2) => {\n      log18.error(\"fatal error\", e2);\n      this.onFatalError.emit(e2);\n      this.close();\n    });\n  }\n  get token() {\n    return this._token;\n  }\n  _reconnect() {\n    return __async(this, null, function* () {\n      if (this._reconnectCount >= this._reconnectLimit) {\n        this._rpc.onFatalError.emit(\n          createError2({\n            operationName: \"RtcRpcApiClient._reconnect\",\n            info: {\n              name: \"failed to reconnect\",\n              detail: \"_reconnectLimit exceeded\",\n              solution: \"\"\n            },\n            path: log18.prefix\n          })\n        );\n        this.close();\n        return;\n      }\n      this._rpc.reconnecting = true;\n      log18.warn(\n        \"[start] reconnect\",\n        createWarnPayload2({\n          operationName: \"RtcRpcApiClient._reconnect\",\n          detail: \"reconnect start\",\n          payload: {\n            reconnectCount: this._reconnectCount,\n            limit: this._reconnectLimit\n          }\n        })\n      );\n      this._reconnectCount++;\n      const backOffTime = __pow(this._reconnectCount, 2) * 100 + __pow(this._reconnectCount, 2) * 100 * Math.random();\n      yield new Promise((r2) => setTimeout(r2, backOffTime));\n      try {\n        yield this.connect().catch((err) => {\n          log18.warn(\n            `[failed] reconnect rtc api`,\n            createWarnPayload2({\n              operationName: \"RtcRpcApiClient._reconnect\",\n              detail: \"connect rpc failed\",\n              payload: {\n                reconnectCount: this._reconnectCount\n              }\n            }),\n            err\n          );\n          throw err;\n        });\n        this._rpc.reconnecting = false;\n        this._reconnectCount = 0;\n        this._rpc.resolvePendingRequests();\n        yield Promise.all(\n          [...this._subscribingChannelEvents].map((s) => __async(this, null, function* () {\n            const [appId, channelId] = s.split(\":\");\n            const offset = this._subscribingChannelVersions[channelId];\n            yield this.subscribeChannelEvents({\n              appId,\n              channelId,\n              offset\n            });\n          }))\n        ).catch((e2) => {\n          log18.warn(\n            \"subscribeChannelEvents failed\",\n            createWarnPayload2({\n              operationName: \"RtcRpcApiClient._reconnect\",\n              detail: \"subscribeChannelEvents failed\",\n              payload: {\n                reconnectCount: this._reconnectCount\n              }\n            }),\n            e2\n          );\n          throw e2;\n        });\n        log18.warn(\n          \"[end] reconnect\",\n          createWarnPayload2({\n            operationName: \"RtcRpcApiClient._reconnect\",\n            detail: \"reconnect finished\",\n            payload: {\n              reconnectCount: this._reconnectCount\n            }\n          })\n        );\n        this.onReconnected.emit();\n      } catch (error) {\n        log18.warn(\n          \"[failed] reconnect\",\n          createWarnPayload2({\n            operationName: \"RtcRpcApiClient._reconnect\",\n            detail: \"reconnect failed\",\n            payload: {\n              reconnectCount: this._reconnectCount\n            }\n          }),\n          error\n        );\n        yield this._reconnect();\n      }\n    });\n  }\n  updateToken(token) {\n    return __async(this, null, function* () {\n      log18.debug(\"token update\", { token });\n      this._token = token;\n      yield this._updateAuthToken();\n    });\n  }\n  close() {\n    if (this.closed) {\n      return;\n    }\n    this.closed = true;\n    log18.debug(\"closed\");\n    this._rpc.close();\n    this.onClose.emit();\n    this._events.dispose();\n  }\n  health() {\n    return __async(this, null, function* () {\n      const response = yield this._httpClient.get(\"/health\");\n      return response;\n    });\n  }\n  connect() {\n    return __async(this, null, function* () {\n      log18.debug(\"connect to rtc api rpc\", this._domain);\n      yield this._rpc.connect({\n        domain: this._domain,\n        token: this.token,\n        secure: this._secure\n      }).catch((e2) => {\n        throw createError2({\n          operationName: \"RtcRpcApiClient.connect\",\n          info: errors2.failedToConnectRtcAPI,\n          error: e2,\n          path: log18.prefix\n        });\n      });\n    });\n  }\n  _channelSubscribed(appId, channelId) {\n    this._subscribingChannelEvents.add(appId + \":\" + channelId);\n    log18.debug(\"_channelSubscribed\", {\n      appId,\n      channelId,\n      _subscribingChannelEvents: [...this._subscribingChannelEvents]\n    });\n  }\n  _isSubscribingChannel(appId, channelId) {\n    return this._subscribingChannelEvents.has(appId + \":\" + channelId);\n  }\n  createChannel(_0) {\n    return __async(this, arguments, function* ({\n      name,\n      metadata,\n      appId\n    }) {\n      const { channel } = yield this._rpc.request(\"createChannel\", {\n        name,\n        metadata,\n        appId,\n        authToken: this.token\n      });\n      this._channelSubscribed(appId, channel.id);\n      return channel;\n    });\n  }\n  findOrCreateChannel(_0) {\n    return __async(this, arguments, function* ({\n      name,\n      metadata,\n      appId\n    }) {\n      const { channel } = yield this._rpc.request(\n        \"findOrCreateChannel\",\n        {\n          name,\n          metadata,\n          appId,\n          authToken: this.token\n        }\n      );\n      this._channelSubscribed(appId, channel.id);\n      return channel;\n    });\n  }\n  getChannel(_0) {\n    return __async(this, arguments, function* ({ appId, id }) {\n      const res = yield this._rpc.request(\n        \"getChannel\",\n        {\n          id,\n          appId,\n          authToken: this.token\n        }\n      );\n      if (!this._isSubscribingChannel(appId, id)) {\n        this._channelSubscribed(appId, id);\n        yield this.subscribeChannelEvents({\n          appId,\n          channelId: id,\n          offset: res.channel.version\n        });\n      }\n      return res.channel;\n    });\n  }\n  getChannelByName(_0) {\n    return __async(this, arguments, function* ({\n      name,\n      appId\n    }) {\n      const res = yield this._rpc.request(\n        \"getChannelByName\",\n        {\n          name,\n          appId,\n          authToken: this.token\n        }\n      );\n      const channelId = res.channel.id;\n      if (!this._isSubscribingChannel(appId, channelId)) {\n        this._channelSubscribed(appId, channelId);\n        yield this.subscribeChannelEvents({\n          appId,\n          channelId,\n          offset: res.channel.version\n        });\n      }\n      return res.channel;\n    });\n  }\n  deleteChannel(_0) {\n    return __async(this, arguments, function* ({ id, appId }) {\n      yield this._rpc.request(\"deleteChannel\", {\n        id,\n        appId,\n        authToken: this.token\n      });\n    });\n  }\n  updateChannelMetadata(_0) {\n    return __async(this, arguments, function* ({\n      id,\n      metadata,\n      appId\n    }) {\n      yield this._rpc.request(\"updateChannelMetadata\", {\n        id,\n        metadata,\n        appId,\n        authToken: this.token\n      });\n    });\n  }\n  addMember(_0) {\n    return __async(this, arguments, function* ({\n      channelId,\n      name,\n      metadata,\n      subscribeChannelEvents,\n      appId,\n      ttlSec,\n      subtype,\n      type\n    }) {\n      const res = yield this._rpc.request(\"addMember\", {\n        channelId,\n        name,\n        metadata,\n        subscribeChannelEvents,\n        appId,\n        ttlSec: ttlSec && parseInt(ttlSec.toString()),\n        authToken: this.token,\n        subtype,\n        type\n      });\n      return res;\n    });\n  }\n  updateMemberTtl(_0) {\n    return __async(this, arguments, function* (args, backoff = new BackOff({ times: 8 })) {\n      const { appId, channelId, memberId, ttlSec } = args;\n      try {\n        yield this._rpc.request(\"updateMemberTtl\", {\n          appId,\n          channelId,\n          memberId,\n          ttlSec: ttlSec && parseInt(ttlSec.toString()),\n          authToken: this.token\n        });\n      } catch (e2) {\n        if (!backoff.exceeded) {\n          log18.warn(\n            \"retry updateMemberTtl\",\n            createWarnPayload2({\n              operationName: \"RtcRpcApiClient.updateMemberTtl\",\n              detail: \"retry updateMemberTtl\",\n              appId,\n              channelId,\n              memberId,\n              payload: { backoff: backoff.count }\n            }),\n            e2\n          );\n          yield backoff.wait();\n          yield this.updateMemberTtl(args, backoff);\n        } else {\n          const error = new SkyWayError({\n            path: log18.prefix,\n            info: errors2.failedToUpdateMemberTTL,\n            error: e2\n          });\n          throw error;\n        }\n      }\n    });\n  }\n  updateMemberMetadata(_0) {\n    return __async(this, arguments, function* ({\n      channelId,\n      memberId,\n      metadata,\n      appId\n    }) {\n      yield this._rpc.request(\"updateMemberMetadata\", {\n        channelId,\n        memberId,\n        metadata,\n        appId,\n        authToken: this.token\n      });\n    });\n  }\n  leaveChannel(_0) {\n    return __async(this, arguments, function* ({\n      channelId,\n      id,\n      appId\n    }) {\n      yield this._rpc.request(\"removeMember\", {\n        channelId,\n        id,\n        appId,\n        authToken: this.token\n      });\n    });\n  }\n  publishStream(_0) {\n    return __async(this, arguments, function* ({\n      appId,\n      channelId,\n      publisherId,\n      contentType,\n      metadata,\n      origin,\n      codecCapabilities,\n      encodings\n    }) {\n      const res = yield this._rpc.request(\"publishStream\", {\n        channelId,\n        publisherId,\n        contentType: contentType[0].toUpperCase() + contentType.slice(1),\n        metadata,\n        origin,\n        codecCapabilities,\n        encodings: encodings == null ? void 0 : encodings.map((e2) => ({\n          id: e2.id\n        })),\n        appId,\n        authToken: this.token\n      });\n      return { publicationId: res.id };\n    });\n  }\n  disablePublication(_0) {\n    return __async(this, arguments, function* ({\n      channelId,\n      publicationId,\n      appId\n    }) {\n      yield this._rpc.request(\"disablePublication\", {\n        channelId,\n        appId,\n        publicationId,\n        authToken: this.token\n      });\n    });\n  }\n  enablePublication(_0) {\n    return __async(this, arguments, function* ({\n      channelId,\n      publicationId,\n      appId\n    }) {\n      yield this._rpc.request(\"enablePublication\", {\n        channelId,\n        appId,\n        publicationId,\n        authToken: this.token\n      });\n    });\n  }\n  updatePublicationMetadata(_0) {\n    return __async(this, arguments, function* ({\n      channelId,\n      publicationId,\n      appId,\n      metadata\n    }) {\n      yield this._rpc.request(\"updatePublicationMetadata\", {\n        channelId,\n        publicationId,\n        metadata,\n        appId,\n        authToken: this.token\n      });\n    });\n  }\n  unpublishStream(_0) {\n    return __async(this, arguments, function* ({\n      channelId,\n      publicationId,\n      appId\n    }) {\n      yield this._rpc.request(\"unpublishStream\", {\n        channelId,\n        publicationId,\n        appId,\n        authToken: this.token\n      });\n    });\n  }\n  subscribeStream(_0) {\n    return __async(this, arguments, function* ({\n      channelId,\n      subscriberId,\n      publicationId,\n      appId\n    }) {\n      const res = yield this._rpc.request(\"subscribeStream\", {\n        channelId,\n        subscriberId,\n        publicationId,\n        appId,\n        authToken: this.token\n      });\n      return { subscriptionId: res.id };\n    });\n  }\n  unsubscribeStream(_0) {\n    return __async(this, arguments, function* ({\n      channelId,\n      subscriptionId,\n      appId\n    }) {\n      yield this._rpc.request(\"unsubscribeStream\", {\n        channelId,\n        subscriptionId,\n        appId,\n        authToken: this.token\n      });\n    });\n  }\n  getServerUnixtime(_0) {\n    return __async(this, arguments, function* (args, backoff = new BackOff({ times: 8 })) {\n      const { appId } = args;\n      try {\n        const res = yield this._rpc.request(\"getServerUnixtime\", {\n          appId,\n          authToken: this.token\n        });\n        return res.unixtime;\n      } catch (error) {\n        if (!backoff.exceeded) {\n          log18.warn(\n            createWarnPayload2({\n              operationName: \"RtcRpcApiClient.getServerUnixtime\",\n              detail: \"retry getServerUnixtime\",\n              appId,\n              payload: { backoff: backoff.count }\n            }),\n            error\n          );\n          yield backoff.wait();\n          return this.getServerUnixtime(args, backoff);\n        } else {\n          throw error;\n        }\n      }\n    });\n  }\n  _updateAuthToken() {\n    return __async(this, null, function* () {\n      yield this._rpc.request(\"updateAuthToken\", {\n        authToken: this.token\n      });\n    });\n  }\n  subscribeChannelEvents(_0) {\n    return __async(this, arguments, function* ({\n      appId,\n      channelId,\n      offset\n    }) {\n      try {\n        log18.debug(\"[start] subscribeChannelEvents\", { offset });\n        yield this._rpc.request(\"subscribeChannelEvents\", {\n          appId,\n          authToken: this.token,\n          channelId,\n          offset\n        });\n        log18.debug(\"[end] subscribeChannelEvents\", { offset });\n      } catch (error) {\n        if (error instanceof SkyWayError && error.info.name === errors2.connectionDisconnected.name) {\n          log18.warn(\n            \"reconnect happened while subscribeChannelEvents. retry\",\n            createWarnPayload2({\n              operationName: \"RtcRpcApiClient.subscribeChannelEvents\",\n              detail: \"reconnect happened while subscribeChannelEvents. retry\",\n              appId,\n              channelId,\n              payload: { offset }\n            }),\n            error\n          );\n          yield this.subscribeChannelEvents({ appId, channelId, offset });\n        } else {\n          log18.error(\n            \"[failed] subscribeChannelEvents\",\n            createError2({\n              operationName: \"RtcRpcApiClient.subscribeChannelEvents\",\n              info: __spreadProps(__spreadValues({}, errors2.internalError), {\n                detail: \"subscribeChannelEvents failed\"\n              }),\n              path: log18.prefix,\n              error,\n              payload: { offset },\n              appId,\n              channelId\n            })\n          );\n          throw error;\n        }\n      }\n    });\n  }\n};\n\n// ../rtc-rpc-api-client/src/event.ts\ninit_process();\n\n// ../rtc-api-client/src/config.ts\ninit_process();\nvar import_deepmerge = __toESM(require_cjs());\nvar Config = class {\n  constructor(options = {}) {\n    this.rtcApi = {\n      domain: \"rtc-api.skyway.ntt.com\",\n      timeout: 3e4,\n      secure: true,\n      eventSubscribeTimeout: 5e3\n    };\n    this.log = {\n      level: \"error\",\n      format: \"object\"\n    };\n    Object.assign(this, (0, import_deepmerge.default)(this, options));\n  }\n};\n\n// ../rtc-api-client/src/infrastructure/api.ts\ninit_process();\n\n// ../rtc-api-client/src/errors.ts\ninit_process();\nvar errors3 = __spreadProps(__spreadValues({}, errors2), {\n  invalidParameter: { name: \"invalidParameter\", detail: \"\", solution: \"\" },\n  notFound: { name: \"notFound\", detail: \"\", solution: \"\" },\n  timeout: { name: \"timeout\", detail: \"\", solution: \"\" },\n  internalError: {\n    name: \"internalError\",\n    detail: \"\",\n    solution: \"\"\n  },\n  invalidRequestParameter: {\n    name: \"invalidRequestParameter\",\n    detail: \"\\u30EA\\u30AF\\u30A8\\u30B9\\u30C8\\u306E\\u30D1\\u30E9\\u30E1\\u30FC\\u30BF\\u30FC\\u304C\\u6B63\\u3057\\u304F\\u3042\\u308A\\u307E\\u305B\\u3093\",\n    solution: \"API\\u4ED5\\u69D8\\u3092\\u78BA\\u8A8D\\u3057\\u6B63\\u3057\\u3044\\u5024\\u3092\\u5165\\u529B\\u3057\\u3066\\u304F\\u3060\\u3055\\u3044\"\n  },\n  insufficientPermissions: {\n    name: \"insufficientPermissions\",\n    detail: \"token\\u306E\\u6A29\\u9650\\u304C\\u4E0D\\u8DB3\\u3057\\u3066\\u3044\\u307E\\u3059 Token permissions are insufficient\",\n    solution: \"Token\\u306B\\u5FC5\\u8981\\u306A\\u6A29\\u9650\\u3092\\u52A0\\u3048\\u3066\\u304F\\u3060\\u3055\\u3044 Add the necessary permissions to the Token\"\n  },\n  publicationNestedTooMuch: {\n    name: \"publicationNestedTooMuch\",\n    detail: \"origin\\u304C\\u8A2D\\u5B9A\\u3055\\u308C\\u3066\\u3044\\u308BPublication\\u3092Publication\\u306Eorigin\\u306B\\u6307\\u5B9A\\u3059\\u308B\\u3053\\u3068\\u306F\\u51FA\\u6765\\u307E\\u305B\\u3093 It is not possible to specify the origin of a publication for which Origin has been set\",\n    solution: \"\\u4ED5\\u69D8\\u4E0A\\u306E\\u5236\\u7D04\\u306A\\u306E\\u3067\\u89E3\\u6C7A\\u6CD5\\u306F\\u3042\\u308A\\u307E\\u305B\\u3093 There is no solution because it is a specification limitation\"\n  },\n  channelNotFound: {\n    name: \"channelNotFound\",\n    detail: \"\\u53C2\\u7167\\u3057\\u3088\\u3046\\u3068\\u3057\\u305Fchannel\\u306F\\u5B58\\u5728\\u3057\\u307E\\u305B\\u3093 The channel you tried to reference does not exist.\",\n    solution: \"channelId\\u3084channelName\\u304C\\u6B63\\u3057\\u3044\\u304B\\u78BA\\u304B\\u3081\\u3066\\u304F\\u3060\\u3055\\u3044 Make sure that the Channel id and channel name are correct.\"\n  },\n  memberNotFound: {\n    name: \"memberNotFound\",\n    detail: \"\\u53C2\\u7167\\u3057\\u3088\\u3046\\u3068\\u3057\\u305FMember\\u306F\\u5B58\\u5728\\u3057\\u307E\\u305B\\u3093 The member you tried to reference does not exist.\",\n    solution: \"memberId\\u3084memberName\\u304C\\u6B63\\u3057\\u3044\\u304B\\u78BA\\u304B\\u3081\\u3066\\u304F\\u3060\\u3055\\u3044 Make sure that the member id and member name is correct.\"\n  },\n  publicationNotFound: {\n    name: \"publicationNotFound\",\n    detail: \"\\u53C2\\u7167\\u3057\\u3088\\u3046\\u3068\\u3057\\u305FPublication\\u306F\\u5B58\\u5728\\u3057\\u307E\\u305B\\u3093 The Publication you tried to reference does not exist.\",\n    solution: \"publicationId\\u304C\\u6B63\\u3057\\u3044\\u304B\\u78BA\\u304B\\u3081\\u3066\\u304F\\u3060\\u3055\\u3044 Make sure that the publication id is correct.\"\n  },\n  subscriptionNotFound: {\n    name: \"subscriptionNotFound\",\n    detail: \"\\u53C2\\u7167\\u3057\\u3088\\u3046\\u3068\\u3057\\u305FSubscription\\u306F\\u5B58\\u5728\\u3057\\u307E\\u305B\\u3093 The Subscription you tried to reference does not exist.\",\n    solution: \"subscriptionId\\u304C\\u6B63\\u3057\\u3044\\u304B\\u78BA\\u304B\\u3081\\u3066\\u304F\\u3060\\u3055\\u3044 Make sure that the subscription id is correct.\"\n  },\n  operationConflicted: {\n    name: \"operationConflicted\",\n    detail: \"\\u4E0E\\u3048\\u3089\\u308C\\u305F\\u540D\\u524D\\u306E\\u30C1\\u30E3\\u30CD\\u30EB\\u306F\\u3001\\u4ECA\\u307E\\u3067\\u306E\\u7AF6\\u5408\\u3059\\u308B\\u8981\\u6C42\\u306B\\u3088\\u3063\\u3066\\u3001\\u3059\\u3067\\u306B\\u4F5C\\u6210\\u3055\\u308C\\u3066\\u3044\\u307E\\u3059 The channel with the given name has already been created by a conflicting request up to now\",\n    solution: \"\\u5225\\u306E\\u540D\\u524D\\u3092\\u4F7F\\u3063\\u3066channel\\u3092\\u4F5C\\u6210\\u3057\\u3066\\u304F\\u3060\\u3055\\u3044\"\n  },\n  channelNameDuplicated: {\n    name: \"channelNameDuplicated\",\n    detail: \"\\u305D\\u306E\\u540D\\u524D\\u306EChannel\\u306F\\u3059\\u3067\\u306B\\u5B58\\u5728\\u3057\\u307E\\u3059 A channel with that name already exists\",\n    solution: \"\\u5225\\u306E\\u540D\\u524D\\u3092\\u4F7F\\u3063\\u3066channel\\u3092\\u4F5C\\u6210\\u3057\\u3066\\u304F\\u3060\\u3055\\u3044\"\n  },\n  memberNameDuplicated: {\n    name: \"memberNameDuplicated\",\n    detail: \"\\u305D\\u306E\\u540D\\u524D\\u306EMember\\u306F\\u3059\\u3067\\u306B\\u5B58\\u5728\\u3057\\u307E\\u3059 A member with that name already exists\",\n    solution: \"\\u5225\\u306E\\u540D\\u524D\\u3092\\u4F7F\\u3063\\u3066member\\u3092\\u4F5C\\u6210\\u3057\\u3066\\u304F\\u3060\\u3055\\u3044\"\n  },\n  subscriptionAlreadyExists: {\n    name: \"subscriptionAlreadyExists\",\n    detail: \"Publication\\u306F\\u3059\\u3067\\u306BSubscribe\\u3055\\u308C\\u3066\\u3044\\u307E\\u3059\",\n    solution: \"publicationId\\u304C\\u6B63\\u3057\\u3044\\u304B\\u78BA\\u304B\\u3081\\u3066\\u304F\\u3060\\u3055\\u3044\"\n  },\n  rateLimitExceeded: {\n    name: \"rateLimitExceeded\",\n    detail: \"\\u30EA\\u30BD\\u30FC\\u30B9\\u3092\\u898F\\u5B9A\\u4ED5\\u69D8\\u4EE5\\u4E0A\\u306B\\u6D88\\u8CBB\\u3057\\u3066\\u3044\\u307E\\u3059\",\n    solution: \"\\u30EA\\u30BD\\u30FC\\u30B9\\u306E\\u6D88\\u8CBB\\u91CF\\u3092\\u6E1B\\u3089\\u3057\\u3066\\u304F\\u3060\\u3055\\u3044\"\n  },\n  authTokenExpired: {\n    name: \"authTokenExpired\",\n    detail: \"AuthToken\\u304C\\u671F\\u9650\\u5207\\u308C\\u3067\\u3059\",\n    solution: \"\\u9069\\u5207\\u306AExp\\u3092\\u8A2D\\u5B9A\\u3057\\u305FAuthToken\\u3092\\u4F7F\\u7528\\u3057\\u3066\\u304F\\u3060\\u3055\\u3044\"\n  },\n  serverBusy: {\n    name: \"serverBusy\",\n    detail: \"\\u30B5\\u30FC\\u30D3\\u30B9\\u5074\\u306E\\u554F\\u984C\\u3067\\u3059\",\n    solution: \"\\u3057\\u3070\\u3089\\u304F\\u6642\\u9593\\u3092\\u7F6E\\u3044\\u3066\\u518D\\u8A66\\u884C\\u3057\\u3066\\u304F\\u3060\\u3055\\u3044\"\n  }\n});\nvar ErrorNames = Object.keys(errors3);\n\n// ../rtc-api-client/src/util.ts\ninit_process();\nfunction createWarnPayload3({\n  appId,\n  detail,\n  channelId,\n  operationName,\n  payload\n}) {\n  const warn = {\n    operationName,\n    payload,\n    detail,\n    appId,\n    channelId\n  };\n  return warn;\n}\nfunction createError3({\n  operationName,\n  info,\n  error,\n  path: path2,\n  channelId,\n  appId,\n  payload\n}) {\n  return new SkyWayError({\n    error,\n    info,\n    payload: { payload, operationName, channelId, appId },\n    path: path2\n  });\n}\n\n// ../rtc-api-client/src/infrastructure/api.ts\nvar log19 = new Logger(\"packages/rtc-api-client/src/infrastructure/api.ts\");\nvar RtcApiImpl = class {\n  constructor(_client) {\n    this._client = _client;\n    this.closed = false;\n    this.onClose = new Event();\n    this.onFatalError = new Event();\n    this._token = SkyWayAuthToken.Decode(this._client.token);\n    _client.onClose.once(() => {\n      this.close();\n    });\n    _client.onFatalError.add((e2) => {\n      this.onFatalError.emit(e2);\n    });\n  }\n  connect() {\n    return __async(this, null, function* () {\n      yield this._client.connect();\n    });\n  }\n  updateAuthToken(token) {\n    return __async(this, null, function* () {\n      this._token = SkyWayAuthToken.Decode(token);\n      yield this._client.updateToken(token);\n    });\n  }\n  close() {\n    if (this.closed) {\n      return;\n    }\n    this.closed = true;\n    log19.debug(\"closed\");\n    this._client.close();\n    this.onClose.emit();\n    this.onClose.removeAllListeners();\n  }\n  _commonError(method, code, detail) {\n    switch (code) {\n      case -32602:\n        return createError3({\n          operationName: method,\n          info: errors3.invalidRequestParameter,\n          path: log19.prefix,\n          error: detail\n        });\n      case -32603:\n        return createError3({\n          operationName: method,\n          info: errors3.internalError,\n          path: log19.prefix,\n          error: detail\n        });\n      case 403:\n      case 4030:\n        return createError3({\n          operationName: method,\n          info: errors3.insufficientPermissions,\n          path: log19.prefix,\n          error: detail\n        });\n    }\n  }\n  createChannel(appId, channelInit) {\n    return __async(this, null, function* () {\n      const { id } = yield this._client.createChannel({\n        appId,\n        name: channelInit.name,\n        metadata: channelInit.metadata\n      }).catch((e2) => {\n        var _a2, _b2, _c;\n        const { info } = e2;\n        const error = this._commonError(\n          \"RtcApiImpl.createChannel\",\n          (_b2 = (_a2 = info == null ? void 0 : info.error) == null ? void 0 : _a2.code) != null ? _b2 : -1,\n          e2\n        );\n        if (error) {\n          throw error;\n        }\n        switch ((_c = info == null ? void 0 : info.error) == null ? void 0 : _c.code) {\n          case 404:\n            throw createError3({\n              operationName: \"RtcApiImpl.createChannel\",\n              path: log19.prefix,\n              info: errors3.channelNotFound,\n              error: e2\n            });\n          case 409:\n            throw createError3({\n              operationName: \"RtcApiImpl.createChannel\",\n              path: log19.prefix,\n              info: errors3.channelNameDuplicated,\n              error: e2\n            });\n          default:\n            throw createError3({\n              operationName: \"RtcApiImpl.createChannel\",\n              path: log19.prefix,\n              info: errors3.internalError,\n              error: e2\n            });\n        }\n      });\n      const res = yield this.getChannel(appId, { id });\n      return res;\n    });\n  }\n  getChannel(_0, _1) {\n    return __async(this, arguments, function* (appId, { name, id }) {\n      if (id) {\n        return yield this._client.getChannel({ appId, id }).catch((e2) => {\n          var _a2, _b2, _c;\n          const { info } = e2;\n          const error = this._commonError(\n            \"RtcApiImpl.getChannel\",\n            (_b2 = (_a2 = info == null ? void 0 : info.error) == null ? void 0 : _a2.code) != null ? _b2 : -1,\n            e2\n          );\n          if (error) {\n            throw error;\n          }\n          switch ((_c = info == null ? void 0 : info.error) == null ? void 0 : _c.code) {\n            case 404:\n              throw createError3({\n                operationName: \"RtcApiImpl.getChannel\",\n                path: log19.prefix,\n                info: errors3.channelNotFound,\n                error: e2\n              });\n            default:\n              throw createError3({\n                operationName: \"RtcApiImpl.getChannel\",\n                path: log19.prefix,\n                info: errors3.internalError,\n                error: e2\n              });\n          }\n        });\n      }\n      if (name) {\n        return yield this._client.getChannelByName({ appId, name }).catch((e2) => {\n          var _a2, _b2, _c;\n          const { info } = e2;\n          const error = this._commonError(\n            \"RtcApiImpl.getChannel\",\n            (_b2 = (_a2 = info == null ? void 0 : info.error) == null ? void 0 : _a2.code) != null ? _b2 : -1,\n            e2\n          );\n          if (error) {\n            throw error;\n          }\n          switch ((_c = info == null ? void 0 : info.error) == null ? void 0 : _c.code) {\n            case 404:\n              throw createError3({\n                operationName: \"getChannel\",\n                path: log19.prefix,\n                info: errors3.channelNotFound,\n                error: e2\n              });\n            default:\n              throw createError3({\n                operationName: \"getChannel\",\n                path: log19.prefix,\n                info: errors3.internalError,\n                error: e2\n              });\n          }\n        });\n      }\n      throw createError3({\n        operationName: \"RtcApiImpl.createChannel\",\n        path: log19.prefix,\n        info: errors3.invalidRequestParameter\n      });\n    });\n  }\n  findOrCreateChannel(appId, query) {\n    return __async(this, null, function* () {\n      return this._client.findOrCreateChannel(__spreadProps(__spreadValues({}, query), { appId })).catch((e2) => {\n        var _a2, _b2, _c, _d;\n        const { info } = e2;\n        const error = this._commonError(\n          \"RtcApiImpl.findOrCreateChannel\",\n          (_b2 = (_a2 = info == null ? void 0 : info.error) == null ? void 0 : _a2.code) != null ? _b2 : -1,\n          e2\n        );\n        if (error) {\n          throw error;\n        }\n        if (query.name && ((_c = info == null ? void 0 : info.error) == null ? void 0 : _c.code) === 409) {\n          return this.getChannel(appId, { name: query.name });\n        }\n        switch ((_d = info == null ? void 0 : info.error) == null ? void 0 : _d.code) {\n          case 404:\n            throw createError3({\n              operationName: \"RtcApiImpl.findOrCreateChannel\",\n              path: log19.prefix,\n              info: errors3.channelNotFound,\n              error: e2\n            });\n          case 409:\n            throw createError3({\n              operationName: \"RtcApiImpl.findOrCreateChannel\",\n              path: log19.prefix,\n              info: errors3.channelNameDuplicated,\n              error: e2\n            });\n          default:\n            throw createError3({\n              operationName: \"RtcApiImpl.findOrCreateChannel\",\n              path: log19.prefix,\n              info: errors3.internalError,\n              error: e2\n            });\n        }\n      });\n    });\n  }\n  deleteChannel(appId, id) {\n    return __async(this, null, function* () {\n      yield this._client.deleteChannel({ appId, id }).catch((e2) => {\n        var _a2, _b2, _c;\n        const { info } = e2;\n        const error = this._commonError(\n          \"RtcApiImpl.deleteChannel\",\n          (_b2 = (_a2 = info == null ? void 0 : info.error) == null ? void 0 : _a2.code) != null ? _b2 : -1,\n          e2\n        );\n        if (error) {\n          throw error;\n        }\n        switch ((_c = info == null ? void 0 : info.error) == null ? void 0 : _c.code) {\n          case 404:\n            throw createError3({\n              operationName: \"RtcApiImpl.deleteChannel\",\n              path: log19.prefix,\n              info: errors3.channelNotFound,\n              error: e2\n            });\n          default:\n            throw createError3({\n              operationName: \"RtcApiImpl.deleteChannel\",\n              path: log19.prefix,\n              info: errors3.internalError,\n              error: e2\n            });\n        }\n      });\n    });\n  }\n  updateChannelMetadata(appId, id, metadata) {\n    return __async(this, null, function* () {\n      yield this._client.updateChannelMetadata({ appId, id, metadata }).catch((e2) => {\n        var _a2, _b2, _c;\n        const { info } = e2;\n        const error = this._commonError(\n          \"RtcApiImpl.updateChannelMetadata\",\n          (_b2 = (_a2 = info == null ? void 0 : info.error) == null ? void 0 : _a2.code) != null ? _b2 : -1,\n          e2\n        );\n        if (error) {\n          throw error;\n        }\n        switch ((_c = info == null ? void 0 : info.error) == null ? void 0 : _c.code) {\n          case 404:\n            throw createError3({\n              operationName: \"RtcApiImpl.updateChannelMetadata\",\n              path: log19.prefix,\n              info: errors3.channelNotFound,\n              error: e2\n            });\n          default:\n            throw createError3({\n              operationName: \"RtcApiImpl.updateChannelMetadata\",\n              path: log19.prefix,\n              info: errors3.internalError,\n              error: e2\n            });\n        }\n      });\n    });\n  }\n  join(appId, channelId, memberInit) {\n    return __async(this, null, function* () {\n      const { memberId } = yield this._client.addMember({\n        appId,\n        channelId,\n        name: memberInit.name,\n        metadata: memberInit.metadata,\n        ttlSec: memberInit.ttlSec,\n        type: memberInit.type,\n        subtype: memberInit.subtype\n      }).catch((e2) => {\n        var _a2, _b2, _c;\n        const { info } = e2;\n        const error = this._commonError(\n          \"RtcApiImpl.addMember\",\n          (_b2 = (_a2 = info == null ? void 0 : info.error) == null ? void 0 : _a2.code) != null ? _b2 : -1,\n          e2\n        );\n        if (error) {\n          throw error;\n        }\n        switch ((_c = info == null ? void 0 : info.error) == null ? void 0 : _c.code) {\n          case 404:\n            throw createError3({\n              operationName: \"RtcApiImpl.addMember\",\n              path: log19.prefix,\n              info: errors3.channelNotFound,\n              error: e2\n            });\n          case 409:\n            throw createError3({\n              operationName: \"RtcApiImpl.addMember\",\n              path: log19.prefix,\n              info: errors3.memberNameDuplicated,\n              error: e2\n            });\n          default:\n            throw createError3({\n              operationName: \"RtcApiImpl.addMember\",\n              path: log19.prefix,\n              info: errors3.internalError,\n              error: e2\n            });\n        }\n      });\n      const member = {\n        id: memberId,\n        name: memberInit.name,\n        type: memberInit.type,\n        subtype: memberInit.subtype,\n        metadata: memberInit.metadata\n      };\n      return member;\n    });\n  }\n  updateMemberTtl(appId, channelId, memberId, ttlSec) {\n    return __async(this, null, function* () {\n      yield this._client.updateMemberTtl({\n        appId,\n        channelId,\n        memberId,\n        ttlSec\n      }).catch((e2) => {\n        var _a2, _b2, _c;\n        const { info } = e2;\n        const error = this._commonError(\n          \"RtcApiImpl.updateMemberTtl\",\n          (_b2 = (_a2 = info == null ? void 0 : info.error) == null ? void 0 : _a2.code) != null ? _b2 : -1,\n          e2\n        );\n        if (error) {\n          throw error;\n        }\n        switch ((_c = info == null ? void 0 : info.error) == null ? void 0 : _c.code) {\n          case 404:\n            throw createError3({\n              operationName: \"RtcApiImpl.updateMemberTtl\",\n              path: log19.prefix,\n              info: errors3.memberNotFound,\n              error: e2\n            });\n          default:\n            throw createError3({\n              operationName: \"RtcApiImpl.updateMemberTtl\",\n              path: log19.prefix,\n              info: errors3.internalError,\n              error: e2\n            });\n        }\n      });\n    });\n  }\n  getServerUnixtime(appId) {\n    return __async(this, null, function* () {\n      return yield this._client.getServerUnixtime({\n        appId\n      }).catch((e2) => {\n        var _a2, _b2;\n        const { info } = e2;\n        const error = this._commonError(\n          \"RtcApiImpl.getServerUnixtime\",\n          (_b2 = (_a2 = info == null ? void 0 : info.error) == null ? void 0 : _a2.code) != null ? _b2 : -1,\n          e2\n        );\n        if (error) {\n          throw error;\n        }\n        throw createError3({\n          operationName: \"RtcApiImpl.getServerUnixtime\",\n          path: log19.prefix,\n          info: errors3.internalError,\n          error: e2\n        });\n      });\n    });\n  }\n  updateMemberMetadata(appId, channelId, memberId, metadata) {\n    return __async(this, null, function* () {\n      yield this._client.updateMemberMetadata({\n        appId,\n        channelId,\n        memberId,\n        metadata\n      }).catch((e2) => {\n        var _a2, _b2, _c;\n        const { info } = e2;\n        const error = this._commonError(\n          \"RtcApiImpl.updateMemberMetadata\",\n          (_b2 = (_a2 = info == null ? void 0 : info.error) == null ? void 0 : _a2.code) != null ? _b2 : -1,\n          e2\n        );\n        if (error) {\n          throw error;\n        }\n        switch ((_c = info == null ? void 0 : info.error) == null ? void 0 : _c.code) {\n          case 404:\n            throw createError3({\n              operationName: \"RtcApiImpl.updateMemberMetadata\",\n              path: log19.prefix,\n              info: errors3.memberNotFound,\n              error: e2\n            });\n          default:\n            throw createError3({\n              operationName: \"RtcApiImpl.updateMemberMetadata\",\n              path: log19.prefix,\n              info: errors3.internalError,\n              error: e2\n            });\n        }\n      });\n    });\n  }\n  leave(appId, channelId, memberId) {\n    return __async(this, null, function* () {\n      yield this._client.leaveChannel({\n        channelId,\n        id: memberId,\n        appId\n      }).catch((e2) => {\n        var _a2, _b2, _c;\n        const { info } = e2;\n        const error = this._commonError(\n          \"RtcApiImpl.leaveChannel\",\n          (_b2 = (_a2 = info == null ? void 0 : info.error) == null ? void 0 : _a2.code) != null ? _b2 : -1,\n          e2\n        );\n        if (error) {\n          throw error;\n        }\n        switch ((_c = info == null ? void 0 : info.error) == null ? void 0 : _c.code) {\n          case 404:\n            throw createError3({\n              operationName: \"RtcApiImpl.leaveChannel\",\n              path: log19.prefix,\n              info: errors3.memberNotFound,\n              error: e2\n            });\n          default:\n            throw createError3({\n              operationName: \"RtcApiImpl.leaveChannel\",\n              path: log19.prefix,\n              info: errors3.internalError,\n              error: e2\n            });\n        }\n      });\n    });\n  }\n  publish(appId, init) {\n    return __async(this, null, function* () {\n      var _a2, _b2;\n      const { publicationId } = yield this._client.publishStream({\n        channelId: init.channel,\n        publisherId: init.publisher,\n        contentType: init.contentType,\n        metadata: init.metadata,\n        origin: init.origin,\n        codecCapabilities: init.codecCapabilities,\n        encodings: init.encodings,\n        appId\n      }).catch((e2) => {\n        var _a3, _b3, _c;\n        const { info } = e2;\n        const error = this._commonError(\n          \"RtcApiImpl.publish\",\n          (_b3 = (_a3 = info == null ? void 0 : info.error) == null ? void 0 : _a3.code) != null ? _b3 : -1,\n          e2\n        );\n        if (error) {\n          throw error;\n        }\n        switch ((_c = info == null ? void 0 : info.error) == null ? void 0 : _c.code) {\n          default:\n            throw createError3({\n              operationName: \"RtcApiImpl.publish\",\n              path: log19.prefix,\n              info: errors3.internalError,\n              error: e2\n            });\n        }\n      });\n      const publication = {\n        id: publicationId,\n        channelId: init.channel,\n        publisherId: init.publisher,\n        origin: init.origin,\n        contentType: init.contentType,\n        metadata: init.metadata,\n        codecCapabilities: (_a2 = init.codecCapabilities) != null ? _a2 : [],\n        encodings: (_b2 = init.encodings) != null ? _b2 : [],\n        isEnabled: true\n      };\n      return publication;\n    });\n  }\n  updatePublicationMetadata(appId, channelId, publicationId, metadata) {\n    return __async(this, null, function* () {\n      yield this._client.updatePublicationMetadata({\n        channelId,\n        publicationId,\n        metadata,\n        appId\n      }).catch((e2) => {\n        var _a2, _b2, _c;\n        const { info } = e2;\n        const error = this._commonError(\n          \"RtcApiImpl.updatePublicationMetadata\",\n          (_b2 = (_a2 = info == null ? void 0 : info.error) == null ? void 0 : _a2.code) != null ? _b2 : -1,\n          e2\n        );\n        if (error) {\n          throw error;\n        }\n        switch ((_c = info == null ? void 0 : info.error) == null ? void 0 : _c.code) {\n          case 404:\n            throw createError3({\n              operationName: \"RtcApiImpl.updatePublicationMetadata\",\n              path: log19.prefix,\n              info: errors3.publicationNotFound,\n              error: e2\n            });\n          default:\n            throw createError3({\n              operationName: \"RtcApiImpl.updatePublicationMetadata\",\n              path: log19.prefix,\n              info: errors3.internalError,\n              error: e2\n            });\n        }\n      });\n    });\n  }\n  disablePublication(appId, channelId, publicationId) {\n    return __async(this, null, function* () {\n      yield this._client.disablePublication({\n        channelId,\n        publicationId,\n        appId\n      }).catch((e2) => {\n        var _a2, _b2, _c;\n        const { info } = e2;\n        const error = this._commonError(\n          \"RtcApiImpl.disablePublication\",\n          (_b2 = (_a2 = info == null ? void 0 : info.error) == null ? void 0 : _a2.code) != null ? _b2 : -1,\n          e2\n        );\n        if (error) {\n          throw error;\n        }\n        switch ((_c = info == null ? void 0 : info.error) == null ? void 0 : _c.code) {\n          case 404:\n            throw createError3({\n              operationName: \"RtcApiImpl.disablePublication\",\n              path: log19.prefix,\n              info: errors3.publicationNotFound,\n              error: e2\n            });\n          default:\n            throw createError3({\n              operationName: \"RtcApiImpl.disablePublication\",\n              path: log19.prefix,\n              info: errors3.internalError,\n              error: e2\n            });\n        }\n      });\n    });\n  }\n  enablePublication(appId, channelId, publicationId) {\n    return __async(this, null, function* () {\n      yield this._client.enablePublication({\n        channelId,\n        publicationId,\n        appId\n      }).catch((e2) => {\n        var _a2, _b2, _c;\n        const { info } = e2;\n        const error = this._commonError(\n          \"RtcApiImpl.enablePublication\",\n          (_b2 = (_a2 = info == null ? void 0 : info.error) == null ? void 0 : _a2.code) != null ? _b2 : -1,\n          e2\n        );\n        if (error) {\n          throw error;\n        }\n        switch ((_c = info == null ? void 0 : info.error) == null ? void 0 : _c.code) {\n          case 404:\n            throw createError3({\n              operationName: \"RtcApiImpl.enablePublication\",\n              path: log19.prefix,\n              info: errors3.publicationNotFound,\n              error: e2\n            });\n          default:\n            throw createError3({\n              operationName: \"RtcApiImpl.enablePublication\",\n              path: log19.prefix,\n              info: errors3.internalError,\n              error: e2\n            });\n        }\n      });\n    });\n  }\n  unpublish(appId, channelId, publicationId) {\n    return __async(this, null, function* () {\n      yield this._client.unpublishStream({ channelId, publicationId, appId }).catch((e2) => {\n        var _a2, _b2, _c;\n        const { info } = e2;\n        const error = this._commonError(\n          \"RtcApiImpl.unpublishStream\",\n          (_b2 = (_a2 = info == null ? void 0 : info.error) == null ? void 0 : _a2.code) != null ? _b2 : -1,\n          e2\n        );\n        if (error) {\n          throw error;\n        }\n        switch ((_c = info == null ? void 0 : info.error) == null ? void 0 : _c.code) {\n          case 404:\n            throw createError3({\n              operationName: \"RtcApiImpl.unpublishStream\",\n              path: log19.prefix,\n              info: errors3.publicationNotFound,\n              error: e2\n            });\n          default:\n            throw createError3({\n              operationName: \"RtcApiImpl.unpublishStream\",\n              path: log19.prefix,\n              info: errors3.internalError,\n              error: e2\n            });\n        }\n      });\n    });\n  }\n  subscribe(appId, init) {\n    return __async(this, null, function* () {\n      const { subscriptionId } = yield this._client.subscribeStream({\n        channelId: init.channel.id,\n        subscriberId: init.subscriber.id,\n        publicationId: init.publication.id,\n        appId\n      }).catch((e2) => {\n        var _a2, _b2, _c;\n        const { info } = e2;\n        const error = this._commonError(\n          \"RtcApiImpl.subscribeStream\",\n          (_b2 = (_a2 = info == null ? void 0 : info.error) == null ? void 0 : _a2.code) != null ? _b2 : -1,\n          e2\n        );\n        if (error) {\n          throw error;\n        }\n        switch ((_c = info == null ? void 0 : info.error) == null ? void 0 : _c.code) {\n          case 404:\n            throw createError3({\n              operationName: \"RtcApiImpl.subscribeStream\",\n              path: log19.prefix,\n              info: errors3.publicationNotFound,\n              error: e2\n            });\n          case 409:\n            throw createError3({\n              operationName: \"RtcApiImpl.subscribeStream\",\n              path: log19.prefix,\n              info: errors3.subscriptionAlreadyExists,\n              error: e2\n            });\n          default:\n            throw createError3({\n              operationName: \"RtcApiImpl.subscribeStream\",\n              path: log19.prefix,\n              info: errors3.internalError,\n              error: e2\n            });\n        }\n      });\n      const subscription = {\n        id: subscriptionId,\n        publicationId: init.publication.id,\n        channelId: init.channel.id,\n        publisherId: init.publication.publisherId,\n        subscriberId: init.subscriber.id,\n        contentType: init.publication.contentType\n      };\n      return subscription;\n    });\n  }\n  unsubscribe(appId, channelId, subscriptionId) {\n    return __async(this, null, function* () {\n      yield this._client.unsubscribeStream({\n        appId,\n        channelId,\n        subscriptionId\n      }).catch((e2) => {\n        var _a2, _b2, _c;\n        const { info } = e2;\n        const error = this._commonError(\n          \"RtcApiImpl.unsubscribeStream\",\n          (_b2 = (_a2 = info == null ? void 0 : info.error) == null ? void 0 : _a2.code) != null ? _b2 : -1,\n          e2\n        );\n        if (error) {\n          throw error;\n        }\n        switch ((_c = info == null ? void 0 : info.error) == null ? void 0 : _c.code) {\n          case 404:\n            throw createError3({\n              operationName: \"RtcApiImpl.unsubscribeStream\",\n              path: log19.prefix,\n              info: errors3.publicationNotFound,\n              error: e2\n            });\n          default:\n            throw createError3({\n              operationName: \"RtcApiImpl.unsubscribeStream\",\n              path: log19.prefix,\n              info: errors3.internalError,\n              error: e2\n            });\n        }\n      });\n    });\n  }\n};\n\n// ../rtc-api-client/src/infrastructure/eventObserver.ts\ninit_process();\nvar log20 = new Logger(\n  \"packages/rtc-api-client/src/infrastructure/eventObserver.ts\"\n);\nvar EventObserverImpl = class {\n  constructor(appId, client, channelDto, config) {\n    this.onEvent = new Event();\n    this._disposer = [];\n    const eventBuffer = new EventJitterBuffer(\n      channelDto.version,\n      (expectNextVersion) => __async(this, null, function* () {\n        yield client.subscribeChannelEvents({\n          appId,\n          channelId: channelDto.id,\n          offset: expectNextVersion\n        });\n        yield new Promise((r2) => setTimeout(r2, config.eventSubscribeTimeout));\n        if (eventBuffer.packetLostHappened) {\n          log20.error(\n            createError3({\n              operationName: \"EventObserverImpl.eventJitterBuffer\",\n              info: __spreadProps(__spreadValues({}, errors3.internalError), {\n                detail: \"failed to resolve event lost\"\n              }),\n              channelId: channelDto.id,\n              appId,\n              path: log20.prefix\n            })\n          );\n        }\n      })\n    );\n    this._disposer = [\n      client.onEvent.add((_0) => __async(this, [_0], function* ({ channelId, event }) {\n        if (channelId === channelDto.id) {\n          eventBuffer.push({ event, version: event.data.channel.version });\n        }\n      })).removeListener,\n      eventBuffer.onEvent.add((e2) => {\n        this.onEvent.emit(e2);\n      }).removeListener\n    ];\n  }\n  dispose() {\n    this._disposer.forEach((d) => d());\n    this.onEvent.removeAllListeners();\n  }\n};\nvar EventJitterBuffer = class {\n  constructor(presentVersion, onPacketLost, packetLifetime = 1e3) {\n    this.presentVersion = presentVersion;\n    this.onPacketLost = onPacketLost;\n    this.packetLifetime = packetLifetime;\n    this.onEvent = new Event();\n    this.eventBuffer = {};\n    this.packetLostHappened = false;\n  }\n  get expectNextVersion() {\n    return this.presentVersion + 1;\n  }\n  push(eventFrame) {\n    const incomingVersion = eventFrame.version;\n    if (incomingVersion < this.expectNextVersion) {\n      log20.debug(\"duplicate event\", __spreadProps(__spreadValues({}, eventFrame), {\n        presentVersion: this.presentVersion\n      }));\n      return;\n    }\n    if (incomingVersion > this.expectNextVersion) {\n      log20.debug(\"maybe miss order event received\", __spreadProps(__spreadValues({}, eventFrame), {\n        presentVersion: this.presentVersion\n      }));\n      this.eventBuffer[incomingVersion] = eventFrame;\n      this.handlePacketLifetime();\n      return;\n    }\n    if (this.packetLostHappened) {\n      log20.warn(\n        \"event packetLost resolved\",\n        createWarnPayload3({\n          operationName: \"EventJitterBuffer.push\",\n          detail: \"event packetLost resolved\",\n          payload: { eventFrame }\n        })\n      );\n      this.packetLostHappened = false;\n    }\n    this.eventBuffer[incomingVersion] = eventFrame;\n    this.resolveEvents();\n  }\n  handlePacketLifetime() {\n    const [oldestBufferedEvent] = Object.keys(this.eventBuffer).sort().map((key) => this.eventBuffer[Number(key)]);\n    if (this.packetLifeTimer == void 0 && oldestBufferedEvent) {\n      log20.debug(\"set event packetLost timer\", __spreadProps(__spreadValues({}, oldestBufferedEvent), {\n        presentVersion: this.presentVersion\n      }));\n      this.packetLifeTimer = setTimeout(() => __async(this, null, function* () {\n        if (this.presentVersion < oldestBufferedEvent.version) {\n          log20.warn(\n            \"event packetLost\",\n            createWarnPayload3({\n              operationName: \"EventJitterBuffer.handlePacketLifetime\",\n              detail: \"eventPacket lost\",\n              payload: {\n                oldestBufferedEvent,\n                eventBufferLength: Object.keys(this.eventBuffer).length,\n                presentVersion: this.presentVersion\n              }\n            })\n          );\n          if (this.packetLostHappened) {\n            return;\n          } else {\n            this.packetLostHappened = true;\n            yield this.onPacketLost(this.expectNextVersion);\n          }\n        }\n        this.packetLifeTimer = void 0;\n        this.handlePacketLifetime();\n      }), this.packetLifetime);\n    }\n  }\n  resolveEvents() {\n    const resolve = [];\n    for (let i = this.expectNextVersion; ; i++) {\n      const frame = this.eventBuffer[i];\n      if (frame) {\n        resolve.push(frame);\n        delete this.eventBuffer[i];\n      } else {\n        break;\n      }\n    }\n    if (resolve.length > 0) {\n      this.presentVersion = resolve.slice(-1)[0].version;\n      resolve.forEach((frame) => {\n        this.onEvent.emit(frame.event);\n      });\n    }\n  }\n};\n\n// ../rtc-api-client/src/client.ts\nvar log21 = new Logger(\"packages/rtc-api-client/src/client.ts\");\nvar RtcApiClient = class {\n  constructor(appId, config, apiClient, _eventObserverFactory) {\n    this.appId = appId;\n    this.config = config;\n    this.apiClient = apiClient;\n    this._eventObserverFactory = _eventObserverFactory;\n    this.closed = false;\n    this.onFatalError = new Event();\n    this.apiClient.onFatalError.pipe(this.onFatalError);\n  }\n  static Create(args) {\n    return __async(this, null, function* () {\n      const config = new Config(args);\n      if (config.log) {\n        Logger.level = config.log.level;\n        Logger.format = config.log.format;\n      }\n      log21.debug(\"RtcApiClient spawned\", config);\n      const rpc = new RtcRpcApiClient(__spreadProps(__spreadValues({}, config.rtcApi), {\n        token: args.token,\n        log: config.log\n      }));\n      const api = new RtcApiImpl(rpc);\n      yield api.connect();\n      const eventObserverFactory = (appId, channel) => new EventObserverImpl(appId, rpc, channel, config.rtcApi);\n      return new RtcApiClient(args.appId, config, api, eventObserverFactory);\n    });\n  }\n  updateAuthToken(token) {\n    return __async(this, null, function* () {\n      yield this.apiClient.updateAuthToken(token);\n    });\n  }\n  getServerUnixtimeInMs() {\n    return __async(this, null, function* () {\n      return this.apiClient.getServerUnixtime(this.appId);\n    });\n  }\n  getServerUnixtimeInSec() {\n    return __async(this, null, function* () {\n      return Math.floor((yield this.getServerUnixtimeInMs()) / 1e3);\n    });\n  }\n  createChannel() {\n    return __async(this, arguments, function* (init = {}) {\n      log21.debug(\"[start] apiClient.createChannel\", { init });\n      const channelDto = yield this.apiClient.createChannel(this.appId, init).catch((e2) => {\n        log21.debug(\"[failed] apiClient.createChannel\", { init, e: e2 });\n        throw e2;\n      });\n      log21.debug(\"[end] apiClient.createChannel\", { init, channelDto });\n      const channel = channelFactory(\n        this.appId,\n        this._eventObserverFactory(this.appId, channelDto),\n        this.apiClient,\n        channelDto,\n        this.config\n      );\n      return channel;\n    });\n  }\n  findChannel(query) {\n    return __async(this, null, function* () {\n      log21.debug(\"[start] apiClient.getChannel\", { query });\n      const channelDto = yield this.apiClient.getChannel(this.appId, query).catch((e2) => {\n        log21.debug(\"[failed] apiClient.getChannel\", { query, e: e2 });\n        throw e2;\n      });\n      const channel = channelFactory(\n        this.appId,\n        this._eventObserverFactory(this.appId, channelDto),\n        this.apiClient,\n        channelDto,\n        this.config\n      );\n      log21.debug(\"[end] apiClient.getChannel\", { channelId: channel.id });\n      return channel;\n    });\n  }\n  findOrCreateChannel(query) {\n    return __async(this, null, function* () {\n      log21.debug(\"[start] apiClient.findOrCreateChannel\", { query });\n      const channelDto = yield this.apiClient.findOrCreateChannel(this.appId, query).catch((e2) => {\n        log21.debug(\"[failed] apiClient.findOrCreateChannel\", { query, e: e2 });\n        throw e2;\n      });\n      log21.debug(\"[end] apiClient.findOrCreateChannel\", { query });\n      const channel = channelFactory(\n        this.appId,\n        this._eventObserverFactory(this.appId, channelDto),\n        this.apiClient,\n        channelDto,\n        this.config\n      );\n      return channel;\n    });\n  }\n  deleteChannel(channelId) {\n    return this.apiClient.deleteChannel(this.appId, channelId);\n  }\n  close() {\n    if (this.closed) {\n      return;\n    }\n    this.closed = true;\n    log21.debug(\"closed\", { appid: this.appId });\n    this.apiClient.close();\n  }\n};\n\n// ../rtc-api-client/src/domain/api.ts\ninit_process();\n\n// ../rtc-api-client/src/domain/channel.ts\ninit_process();\n\n// ../rtc-api-client/src/model/event.ts\nvar event_exports = {};\ninit_process();\n\n// ../rtc-api-client/src/domain/channel.ts\nvar log22 = new Logger(\"packages/rtc-api-client/src/domain/channel.ts\");\nvar ChannelImpl = class {\n  constructor(appId, {\n    id,\n    name,\n    members,\n    metadata,\n    publications,\n    subscriptions,\n    version\n  }, eventObserver, apiClient, config) {\n    this.appId = appId;\n    this.eventObserver = eventObserver;\n    this.apiClient = apiClient;\n    this.config = config;\n    this.disposed = false;\n    this._events = new Events();\n    this.onClosed = this._events.make();\n    this.onMetadataUpdated = this._events.make();\n    this.onMemberListChanged = this._events.make();\n    this.onMemberJoined = this._events.make();\n    this.onMemberLeft = this._events.make();\n    this.onMemberMetadataUpdated = this._events.make();\n    this.onPublicationDisabled = this._events.make();\n    this.onPublicationEnabled = this._events.make();\n    this.onPublicationListChanged = this._events.make();\n    this.onStreamPublished = this._events.make();\n    this.onStreamUnpublished = this._events.make();\n    this.onPublicationMetadataUpdated = this._events.make();\n    this.onSubscriptionListChanged = this._events.make();\n    this.onPublicationSubscribed = this._events.make();\n    this.onPublicationUnsubscribed = this._events.make();\n    this.updateChannelMetadata = (metadata) => new Promise((r2, f) => {\n      let failed = false;\n      this.apiClient.updateChannelMetadata(this.appId, this.id, metadata).catch((e2) => {\n        failed = true;\n        f(e2);\n      });\n      this.onMetadataUpdated.watch((e2) => e2.channel.metadata === metadata).then(() => r2()).catch((error) => {\n        if (!failed)\n          f(\n            createError3({\n              operationName: \"ChannelImpl.updateChannelMetadata\",\n              info: __spreadProps(__spreadValues({}, errors3.timeout), { detail: \"onMetadataUpdated\" }),\n              path: log22.prefix,\n              error,\n              appId: this.appId,\n              channelId: this.id\n            })\n          );\n      });\n    });\n    this.leave = (channelId, memberId) => new Promise((r2, f) => {\n      let failed = false;\n      this.apiClient.leave(this.appId, channelId, memberId).catch((e2) => {\n        failed = true;\n        f(e2);\n      });\n      this.onMemberLeft.watch((e2) => e2.member.id === memberId, this.config.rtcApi.timeout).then(() => r2()).catch((error) => {\n        if (!failed)\n          f(\n            createError3({\n              operationName: \"ChannelImpl.leave\",\n              info: __spreadProps(__spreadValues({}, errors3.timeout), { detail: \"onMemberLeft\" }),\n              path: log22.prefix,\n              error,\n              appId: this.appId,\n              channelId: this.id\n            })\n          );\n      });\n    });\n    this.updateMemberMetadata = (memberId, metadata) => new Promise((r2, f) => {\n      let failed = false;\n      this.apiClient.updateMemberMetadata(this.appId, this.id, memberId, metadata).catch((e2) => {\n        failed = true;\n        f(e2);\n      });\n      this.onMemberMetadataUpdated.watch(\n        (e2) => e2.member.id === memberId && e2.member.metadata === metadata\n      ).then(() => r2()).catch((error) => {\n        if (!failed)\n          f(\n            createError3({\n              operationName: \"ChannelImpl.updateMemberMetadata\",\n              info: __spreadProps(__spreadValues({}, errors3.timeout), { detail: \"onMemberMetadataUpdated\" }),\n              path: log22.prefix,\n              error,\n              appId: this.appId,\n              channelId: this.id\n            })\n          );\n      });\n    });\n    this.unpublish = (publicationId) => new Promise((r2, f) => {\n      let failed = false;\n      this.apiClient.unpublish(this.appId, this.id, publicationId).catch((e2) => {\n        failed = true;\n        f(e2);\n      });\n      this.onStreamUnpublished.watch((e2) => e2.publication.id === publicationId).then(() => r2()).catch((error) => {\n        if (!failed)\n          f(\n            createError3({\n              operationName: \"ChannelImpl.unpublish\",\n              info: __spreadProps(__spreadValues({}, errors3.timeout), { detail: \"onStreamUnpublished\" }),\n              path: log22.prefix,\n              error,\n              payload: { publicationId },\n              appId: this.appId,\n              channelId: this.id\n            })\n          );\n      });\n    });\n    this.updatePublicationMetadata = (publicationId, metadata) => new Promise((r2, f) => {\n      let failed = false;\n      this.apiClient.updatePublicationMetadata(this.appId, this.id, publicationId, metadata).catch((e2) => {\n        failed = true;\n        f(e2);\n      });\n      this.onPublicationMetadataUpdated.watch(\n        (e2) => e2.publication.id === publicationId && e2.publication.metadata === metadata\n      ).then(() => r2()).catch((error) => {\n        if (!failed)\n          f(\n            createError3({\n              operationName: \"ChannelImpl.updatePublicationMetadata\",\n              info: __spreadProps(__spreadValues({}, errors3.timeout), {\n                detail: \"onPublicationMetadataUpdated\"\n              }),\n              path: log22.prefix,\n              error,\n              payload: { publicationId },\n              appId: this.appId,\n              channelId: this.id\n            })\n          );\n      });\n    });\n    this.disablePublication = (publicationId) => new Promise((r2, f) => {\n      let failed = false;\n      this.apiClient.disablePublication(this.appId, this.id, publicationId).catch((e2) => {\n        failed = true;\n        f(e2);\n      });\n      this.onPublicationDisabled.watch((e2) => e2.publication.id === publicationId).then(() => r2()).catch((error) => {\n        if (!failed)\n          f(\n            createError3({\n              operationName: \"ChannelImpl.disablePublication\",\n              info: __spreadProps(__spreadValues({}, errors3.timeout), { detail: \"onPublicationDisabled\" }),\n              path: log22.prefix,\n              error,\n              payload: { publicationId },\n              appId: this.appId,\n              channelId: this.id\n            })\n          );\n      });\n    });\n    this.enablePublication = (publicationId) => new Promise((r2, f) => {\n      let failed = false;\n      this.apiClient.enablePublication(this.appId, this.id, publicationId).catch((e2) => {\n        failed = true;\n        f(e2);\n      });\n      this.onPublicationEnabled.watch((e2) => e2.publication.id === publicationId).then(() => r2()).catch((error) => {\n        if (!failed)\n          f(\n            createError3({\n              operationName: \"ChannelImpl.enablePublication\",\n              info: __spreadProps(__spreadValues({}, errors3.timeout), { detail: \"onPublicationEnabled\" }),\n              path: log22.prefix,\n              error,\n              payload: { publicationId },\n              appId: this.appId,\n              channelId: this.id\n            })\n          );\n      });\n    });\n    this.unsubscribe = (subscriptionId) => new Promise((r2, f) => {\n      let failed = false;\n      this.apiClient.unsubscribe(this.appId, this.id, subscriptionId).catch((e2) => {\n        failed = true;\n        f(e2);\n      });\n      this.onPublicationUnsubscribed.watch((e2) => e2.subscription.id === subscriptionId).then(() => r2()).catch((error) => {\n        if (!failed)\n          f(\n            createError3({\n              operationName: \"ChannelImpl.unsubscribe\",\n              info: __spreadProps(__spreadValues({}, errors3.timeout), {\n                detail: \"onPublicationUnsubscribed\"\n              }),\n              path: log22.prefix,\n              error,\n              payload: { subscriptionId },\n              appId: this.appId,\n              channelId: this.id\n            })\n          );\n      });\n    });\n    this.id = id;\n    this.name = name;\n    this.metadata = metadata;\n    this.members = members;\n    this.publications = publications;\n    this.subscriptions = subscriptions;\n    this.version = version;\n    eventObserver.onEvent.add((event) => {\n      log22.debug(\"received event: \", event);\n      this.version = event.data.channel.version;\n      try {\n        switch (event.type) {\n          case \"ChannelDeleted\":\n            {\n              this._channelClosed();\n            }\n            break;\n          case \"ChannelMetadataUpdated\":\n            {\n              this._channelMetadataUpdated(event.data);\n            }\n            break;\n          case \"MemberAdded\":\n            {\n              this._memberJoined(event.data);\n            }\n            break;\n          case \"MemberRemoved\":\n            {\n              this._memberLeft(event.data);\n            }\n            break;\n          case \"MemberMetadataUpdated\":\n            {\n              this._memberMetadataUpdated(event.data);\n            }\n            break;\n          case \"StreamPublished\":\n            {\n              this._streamPublished(event.data);\n            }\n            break;\n          case \"StreamUnpublished\":\n            {\n              this._streamUnpublished(event.data);\n            }\n            break;\n          case \"PublicationMetadataUpdated\":\n            {\n              this._publicationMetadataUpdated(event.data);\n            }\n            break;\n          case \"PublicationDisabled\":\n            {\n              this._publicationDisabled(event.data);\n            }\n            break;\n          case \"PublicationEnabled\":\n            {\n              this._publicationEnabled(event.data);\n            }\n            break;\n          case \"StreamSubscribed\":\n            {\n              this._streamSubscribed(event.data);\n            }\n            break;\n          case \"StreamUnsubscribed\":\n            {\n              this._streamUnsubscribed(event.data);\n            }\n            break;\n        }\n      } catch (error) {\n        log22.error(error);\n      }\n    });\n    apiClient.onClose.once(() => {\n      this.dispose();\n    });\n  }\n  getMember(id) {\n    return this.members.find((s) => s.id === id);\n  }\n  addMember(member) {\n    const exist = this.getMember(member.id);\n    if (exist) {\n      return exist;\n    }\n    this.members.push(member);\n    return member;\n  }\n  deleteMember(id) {\n    this.members = this.members.filter((m) => m.id !== id);\n  }\n  getPublication(id) {\n    return this.publications.find((s) => s.id === id);\n  }\n  addPublication(summary) {\n    var _a2, _b2;\n    const exist = this.getPublication(summary.id);\n    if (exist) {\n      return exist;\n    }\n    const publication = __spreadProps(__spreadValues({}, summary), {\n      channelId: this.id,\n      codecCapabilities: (_a2 = summary.codecCapabilities) != null ? _a2 : [],\n      encodings: (_b2 = summary.encodings) != null ? _b2 : []\n    });\n    this.publications.push(publication);\n    return publication;\n  }\n  deletePublication(publicationId) {\n    this.publications = this.publications.filter((p) => p.id !== publicationId);\n  }\n  getSubscription(id) {\n    return this.subscriptions.find((s) => s.id === id);\n  }\n  addSubscription(summary) {\n    const exist = this.getSubscription(summary.id);\n    if (exist) {\n      return exist;\n    }\n    const publication = this.getPublication(summary.publicationId);\n    const subscription = __spreadProps(__spreadValues({}, summary), {\n      channelId: this.id,\n      publisherId: publication.publisherId,\n      contentType: publication.contentType\n    });\n    this.subscriptions.push(subscription);\n    return subscription;\n  }\n  deleteSubscription(subscriptionId) {\n    this.subscriptions = this.subscriptions.filter(\n      (s) => s.id !== subscriptionId\n    );\n  }\n  _channelClosed() {\n    this.onClosed.emit({});\n  }\n  _channelMetadataUpdated(event) {\n    this.metadata = event.channel.metadata;\n    this.onMetadataUpdated.emit(event);\n  }\n  _memberJoined(event) {\n    this.addMember(event.member);\n    this.onMemberJoined.emit(event);\n    this.onMemberListChanged.emit({});\n  }\n  _memberLeft(event) {\n    const member = this.getMember(event.member.id);\n    if (!member) {\n      throw createError3({\n        operationName: \"ChannelImpl._memberLeft\",\n        info: errors3.memberNotFound,\n        path: log22.prefix,\n        payload: { event },\n        appId: this.appId,\n        channelId: this.id\n      });\n    }\n    this.deleteMember(member.id);\n    this.onMemberLeft.emit({ member });\n    this.onMemberListChanged.emit({});\n  }\n  _memberMetadataUpdated(event) {\n    const member = this.getMember(event.member.id);\n    if (!member) {\n      throw createError3({\n        operationName: \"ChannelImpl._memberMetadataUpdated\",\n        info: errors3.memberNotFound,\n        path: log22.prefix,\n        payload: { event },\n        appId: this.appId,\n        channelId: this.id\n      });\n    }\n    member.metadata = event.member.metadata;\n    this.onMemberMetadataUpdated.emit(event);\n  }\n  _streamPublished(event) {\n    const publication = this.addPublication(event.publication);\n    const outgoing = __spreadProps(__spreadValues({}, event), {\n      publication\n    });\n    this.onStreamPublished.emit(outgoing);\n    this.onPublicationListChanged.emit({});\n  }\n  _streamUnpublished(event) {\n    const publication = this.getPublication(event.publication.id);\n    if (!publication) {\n      throw createError3({\n        operationName: \"ChannelImpl._streamUnpublished\",\n        info: errors3.publicationNotFound,\n        path: log22.prefix,\n        payload: { event },\n        appId: this.appId,\n        channelId: this.id\n      });\n    }\n    this.deletePublication(publication.id);\n    const outgoing = __spreadProps(__spreadValues({}, event), { publication });\n    this.onStreamUnpublished.emit(outgoing);\n    this.onPublicationListChanged.emit({});\n  }\n  _publicationMetadataUpdated(event) {\n    const publication = this.getPublication(event.publication.id);\n    if (!publication) {\n      throw createError3({\n        operationName: \"ChannelImpl._publicationMetadataUpdated\",\n        info: errors3.publicationNotFound,\n        path: log22.prefix,\n        payload: { event },\n        appId: this.appId,\n        channelId: this.id\n      });\n    }\n    publication.metadata = event.publication.metadata;\n    const outgoing = __spreadProps(__spreadValues({}, event), {\n      publication\n    });\n    this.onPublicationMetadataUpdated.emit(outgoing);\n  }\n  _publicationDisabled(event) {\n    const publication = this.getPublication(event.publication.id);\n    if (!publication) {\n      throw createError3({\n        operationName: \"ChannelImpl._publicationDisabled\",\n        info: errors3.publicationNotFound,\n        path: log22.prefix,\n        payload: { event },\n        appId: this.appId,\n        channelId: this.id\n      });\n    }\n    publication.isEnabled = event.publication.isEnabled;\n    const outgoing = {\n      publication\n    };\n    this.onPublicationDisabled.emit(outgoing);\n  }\n  _publicationEnabled(incoming) {\n    const publication = this.getPublication(incoming.publication.id);\n    if (!publication) {\n      throw createError3({\n        operationName: \"ChannelImpl._publicationEnabled\",\n        info: errors3.publicationNotFound,\n        path: log22.prefix,\n        payload: { event: event_exports },\n        appId: this.appId,\n        channelId: this.id\n      });\n    }\n    publication.isEnabled = incoming.publication.isEnabled;\n    const outgoing = {\n      publication\n    };\n    this.onPublicationEnabled.emit(outgoing);\n  }\n  _streamSubscribed(incoming) {\n    const subscription = this.addSubscription(incoming.subscription);\n    const outgoing = __spreadProps(__spreadValues({}, incoming), {\n      subscription\n    });\n    this.onPublicationSubscribed.emit(outgoing);\n    this.onSubscriptionListChanged.emit({});\n  }\n  _streamUnsubscribed(event) {\n    const subscription = this.getSubscription(event.subscription.id);\n    if (!subscription) {\n      throw createError3({\n        operationName: \"ChannelImpl._streamUnsubscribed\",\n        info: errors3.subscriptionNotFound,\n        path: log22.prefix,\n        payload: { event },\n        appId: this.appId,\n        channelId: this.id\n      });\n    }\n    this.deleteSubscription(subscription.id);\n    const outgoing = __spreadProps(__spreadValues({}, event), {\n      subscription\n    });\n    this.onPublicationUnsubscribed.emit(outgoing);\n    this.onSubscriptionListChanged.emit({});\n  }\n  joinChannel(memberInit) {\n    return __async(this, null, function* () {\n      var _a2;\n      if (memberInit.type) {\n        memberInit.type = memberInit.type[0].toUpperCase() + memberInit.type.slice(1);\n      }\n      if (memberInit.subtype) {\n        memberInit.subtype = memberInit.subtype[0].toUpperCase() + memberInit.subtype.slice(1);\n      }\n      log22.debug(\"[start] joinChannel\", { memberInit });\n      const res = yield this.apiClient.join(this.appId, this.id, __spreadValues({}, memberInit));\n      const member = (_a2 = this.getMember(res.id)) != null ? _a2 : (yield this.onMemberJoined.watch((e2) => e2.member.id === res.id, this.config.rtcApi.timeout).catch((error) => {\n        throw createError3({\n          operationName: \"ChannelImpl.joinChannel\",\n          info: __spreadProps(__spreadValues({}, errors3.timeout), { detail: \"onMemberJoined\" }),\n          path: log22.prefix,\n          error,\n          appId: this.appId,\n          channelId: this.id\n        });\n      })).member;\n      log22.debug(\"[end] joinChannel\", { member });\n      return member;\n    });\n  }\n  updateMemberTtl(memberId, ttlSec) {\n    return this.apiClient.updateMemberTtl(\n      this.appId,\n      this.id,\n      memberId,\n      ttlSec\n    );\n  }\n  publish(init) {\n    return __async(this, null, function* () {\n      const ts = log22.debug(\"[start] apiClient.publish\", { init });\n      const publicationDto = yield this.apiClient.publish(this.appId, __spreadProps(__spreadValues({}, init), {\n        channel: this.id\n      }));\n      log22.elapsed(ts, \"[ongoing] apiClient.publish\", { publicationDto });\n      const exist = this.getPublication(publicationDto.id);\n      if (exist) {\n        return exist;\n      }\n      const { publication } = yield this.onStreamPublished.watch(\n        (e2) => e2.publication.id === publicationDto.id,\n        this.config.rtcApi.timeout\n      ).catch((error) => {\n        throw createError3({\n          operationName: \"ChannelImpl.publish\",\n          info: __spreadProps(__spreadValues({}, errors3.timeout), { detail: \"onStreamPublished\" }),\n          path: log22.prefix,\n          error,\n          payload: { publicationDto },\n          appId: this.appId,\n          channelId: this.id\n        });\n      });\n      log22.elapsed(ts, \"[end] apiClient.publish\", { publicationDto });\n      return publication;\n    });\n  }\n  subscribe(init) {\n    return __async(this, null, function* () {\n      const ts = log22.debug(\"[start] apiClient.subscribe\", { init });\n      const subscriptionDto = yield this.apiClient.subscribe(this.appId, __spreadProps(__spreadValues({}, init), {\n        channel: this\n      }));\n      log22.elapsed(ts, \"[ongoing] apiClient.subscribe\", { subscriptionDto });\n      const exist = this.getSubscription(subscriptionDto.id);\n      if (exist) {\n        log22.elapsed(ts, \"[end] apiClient.subscribe\", { subscriptionDto });\n        return exist;\n      }\n      const { subscription } = yield this.onPublicationSubscribed.watch(\n        (e2) => e2.subscription.id === subscriptionDto.id,\n        this.config.rtcApi.timeout\n      ).catch((error) => {\n        log22.elapsed(ts, \"[fail] apiClient.subscribe\", error);\n        throw createError3({\n          operationName: \"ChannelImpl.subscribe\",\n          info: __spreadProps(__spreadValues({}, errors3.timeout), { detail: \"onPublicationSubscribed\" }),\n          path: log22.prefix,\n          error,\n          payload: { subscriptionDto }\n        });\n      });\n      log22.elapsed(ts, \"[end] apiClient.subscribe\", { subscriptionDto });\n      return subscription;\n    });\n  }\n  close() {\n    return this.apiClient.deleteChannel(this.appId, this.id);\n  }\n  dispose() {\n    if (this.disposed) {\n      return;\n    }\n    this.disposed = true;\n    log22.debug(\"disposed\", { id: this.id });\n    this.eventObserver.dispose();\n    this._events.dispose();\n  }\n};\nfunction channelFactory(appId, eventObserver, api, channelDto, config) {\n  const channel = new ChannelImpl(\n    appId,\n    channelDto,\n    eventObserver,\n    api,\n    config\n  );\n  return channel;\n}\n\n// ../core/src/config.ts\nvar import_deepmerge2 = __toESM(require_cjs());\nvar ContextConfig = class {\n  constructor(options = {}) {\n    this.rtcApi = {\n      domain: \"rtc-api.skyway.ntt.com\",\n      timeout: 3e4,\n      secure: true,\n      eventSubscribeTimeout: 5e3\n    };\n    this.iceParamServer = {\n      domain: \"ice-params.skyway.ntt.com\",\n      version: 1,\n      secure: true\n    };\n    this.signalingService = {\n      domain: \"signaling.skyway.ntt.com\",\n      secure: true\n    };\n    this.rtcConfig = {\n      timeout: 3e4,\n      turnPolicy: \"enable\",\n      turnProtocol: \"all\",\n      encodedInsertableStreams: false,\n      iceDisconnectBufferTimeout: 5e3\n    };\n    this.token = {\n      updateReminderSec: 30\n    };\n    this.log = {\n      level: \"error\",\n      format: \"string\"\n    };\n    this.internal = {\n      disableDPlane: false,\n      disableSignaling: false\n    };\n    this.member = {\n      keepaliveIntervalGapSec: 30,\n      keepaliveIntervalSec: 30\n    };\n    Object.assign(this, (0, import_deepmerge2.default)(this, options));\n  }\n};\n\n// ../core/src/context.ts\ninit_process();\n\n// ../core/src/plugin/internal/person/plugin.ts\ninit_process();\n\n// ../core/src/plugin/interface/plugin.ts\ninit_process();\nvar SkyWayPlugin = class {\n  constructor() {\n    this._onContextAttached = new Event();\n  }\n  _attachContext(context) {\n    this._context = context;\n    this._onContextAttached.emit(context);\n  }\n};\n\n// ../core/src/plugin/internal/person/connection/messageBuffer.ts\ninit_process();\nvar log23 = new Logger(\n  \"packages/core/src/plugin/internal/person/connection/messageBuffer.ts\"\n);\nvar MessageBuffer = class {\n  constructor(signaling) {\n    this.signaling = signaling;\n    this._indicateMessageBuffer = {};\n    this._excludeConnectionIndicateBuffering = /* @__PURE__ */ new Set();\n    this._disposer = new EventDisposer();\n    this.signaling.onMessage.add((req) => {\n      const requesterIdName = req.src.id + req.src.name;\n      if (this._excludeConnectionIndicateBuffering.has(requesterIdName)) {\n        return;\n      }\n      if (!this._indicateMessageBuffer[requesterIdName]) {\n        this._indicateMessageBuffer[requesterIdName] = [];\n      }\n      this._indicateMessageBuffer[requesterIdName].push(req);\n    }).disposer(this._disposer);\n  }\n  resolveMessagingBuffer({ id, name }) {\n    const endpointIdName = id + name;\n    const bufferedIndicates = this._indicateMessageBuffer[endpointIdName];\n    if ((bufferedIndicates == null ? void 0 : bufferedIndicates.length) > 0) {\n      log23.debug(\"resolveMessagingBuffer\", { length: bufferedIndicates.length });\n      bufferedIndicates.forEach((req) => {\n        this.signaling.onMessage.emit(req);\n      });\n      delete this._indicateMessageBuffer[endpointIdName];\n    }\n    this._excludeConnectionIndicateBuffering.add(endpointIdName);\n  }\n  close() {\n    this._disposer.dispose();\n    this._indicateMessageBuffer = {};\n    this._excludeConnectionIndicateBuffering = /* @__PURE__ */ new Set();\n  }\n};\n\n// ../core/src/plugin/internal/person/member.ts\ninit_process();\n\n// ../core/src/plugin/internal/person/connection/index.ts\ninit_process();\n\n// ../../node_modules/uuid/dist/esm-browser/index.js\ninit_process();\n\n// ../../node_modules/uuid/dist/esm-browser/rng.js\ninit_process();\nvar getRandomValues4;\nvar rnds84 = new Uint8Array(16);\nfunction rng4() {\n  if (!getRandomValues4) {\n    getRandomValues4 = typeof crypto !== \"undefined\" && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto !== \"undefined\" && typeof msCrypto.getRandomValues === \"function\" && msCrypto.getRandomValues.bind(msCrypto);\n    if (!getRandomValues4) {\n      throw new Error(\"crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported\");\n    }\n  }\n  return getRandomValues4(rnds84);\n}\n\n// ../../node_modules/uuid/dist/esm-browser/stringify.js\ninit_process();\n\n// ../../node_modules/uuid/dist/esm-browser/validate.js\ninit_process();\n\n// ../../node_modules/uuid/dist/esm-browser/regex.js\ninit_process();\nvar regex_default2 = /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;\n\n// ../../node_modules/uuid/dist/esm-browser/validate.js\nfunction validate2(uuid) {\n  return typeof uuid === \"string\" && regex_default2.test(uuid);\n}\nvar validate_default2 = validate2;\n\n// ../../node_modules/uuid/dist/esm-browser/stringify.js\nvar byteToHex4 = [];\nfor (i = 0; i < 256; ++i) {\n  byteToHex4.push((i + 256).toString(16).substr(1));\n}\nvar i;\nfunction stringify(arr) {\n  var offset = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;\n  var uuid = (byteToHex4[arr[offset + 0]] + byteToHex4[arr[offset + 1]] + byteToHex4[arr[offset + 2]] + byteToHex4[arr[offset + 3]] + \"-\" + byteToHex4[arr[offset + 4]] + byteToHex4[arr[offset + 5]] + \"-\" + byteToHex4[arr[offset + 6]] + byteToHex4[arr[offset + 7]] + \"-\" + byteToHex4[arr[offset + 8]] + byteToHex4[arr[offset + 9]] + \"-\" + byteToHex4[arr[offset + 10]] + byteToHex4[arr[offset + 11]] + byteToHex4[arr[offset + 12]] + byteToHex4[arr[offset + 13]] + byteToHex4[arr[offset + 14]] + byteToHex4[arr[offset + 15]]).toLowerCase();\n  if (!validate_default2(uuid)) {\n    throw TypeError(\"Stringified UUID is invalid\");\n  }\n  return uuid;\n}\nvar stringify_default = stringify;\n\n// ../../node_modules/uuid/dist/esm-browser/v4.js\ninit_process();\nfunction v44(options, buf, offset) {\n  options = options || {};\n  var rnds = options.random || (options.rng || rng4)();\n  rnds[6] = rnds[6] & 15 | 64;\n  rnds[8] = rnds[8] & 63 | 128;\n  if (buf) {\n    offset = offset || 0;\n    for (var i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n    return buf;\n  }\n  return stringify_default(rnds);\n}\nvar v4_default4 = v44;\n\n// ../core/src/plugin/internal/person/connection/receiver.ts\ninit_process();\nvar sdpTransform2 = __toESM(require_lib());\n\n// ../core/src/media/stream/remote/factory.ts\ninit_process();\n\n// ../core/src/media/stream/remote/audio.ts\ninit_process();\n\n// ../core/src/media/stream/remote/media.ts\ninit_process();\n\n// ../core/src/media/stream/base.ts\ninit_process();\nvar log24 = new Logger(\"packages/core/src/media/stream/base.ts\");\nfunction attachElement(element, track) {\n  var _a2;\n  if (((_a2 = element != null ? element : {}) == null ? void 0 : _a2.srcObject) === void 0) {\n    throw createError({\n      operationName: \"attachElement\",\n      info: errors.invalidElement,\n      payload: { element },\n      path: log24.prefix\n    });\n  }\n  if (element.srcObject) {\n    const stream = element.srcObject;\n    const ended = stream.getTracks().find((t2) => t2.readyState === \"ended\");\n    if (ended) {\n      stream.removeTrack(ended);\n    }\n    const duplicate = stream.getTracks().find((t2) => t2.kind === track.kind);\n    if (duplicate) {\n      stream.removeTrack(duplicate);\n    }\n    stream.addTrack(track);\n  } else {\n    element.srcObject = new MediaStream([track]);\n  }\n}\nfunction detachElement(element, track) {\n  var _a2;\n  if (((_a2 = element != null ? element : {}) == null ? void 0 : _a2.srcObject) === void 0) {\n    throw createError({\n      operationName: \"attachElement\",\n      info: errors.invalidElement,\n      payload: { element },\n      path: log24.prefix\n    });\n  }\n  const stream = element.srcObject;\n  if (stream.getTracks().length > 0) {\n    stream.removeTrack(track);\n  }\n  if (stream.getTracks().length === 0) {\n    element.srcObject = null;\n  }\n}\n\n// ../core/src/media/stream/remote/base.ts\ninit_process();\nvar RemoteStreamBase = class {\n  constructor(id, contentType) {\n    this.id = id;\n    this.contentType = contentType;\n    this.side = \"remote\";\n    this.onConnectionStateChanged = new Event();\n    this._onConnectionStateChanged = new Event();\n    this._connectionState = \"new\";\n    this._getTransport = () => void 0;\n    this.getStats = () => {\n      return this._getStats();\n    };\n    this._getStats = () => __async(this, null, function* () {\n      return [];\n    });\n    this._onConnectionStateChanged.pipe(this.onConnectionStateChanged);\n  }\n  _setConnectionState(state) {\n    if (this._connectionState === state)\n      return;\n    this._connectionState = state;\n    this._onConnectionStateChanged.emit(state);\n  }\n  getRTCPeerConnection() {\n    return this._getRTCPeerConnection();\n  }\n  _getRTCPeerConnection() {\n    var _a2;\n    return (_a2 = this._getTransport()) == null ? void 0 : _a2.rtcPeerConnection;\n  }\n  getConnectionState() {\n    return this._getConnectionState();\n  }\n  _getConnectionState() {\n    return this._connectionState;\n  }\n  toJSON() {\n    return {\n      contentType: this.contentType,\n      id: this.id,\n      codec: this.codec,\n      side: this.side\n    };\n  }\n};\n\n// ../core/src/media/stream/remote/media.ts\nvar RemoteMediaStreamBase = class extends RemoteStreamBase {\n  constructor(id, contentType, track) {\n    super(id, contentType);\n    this.id = id;\n    this.contentType = contentType;\n    this.track = track;\n  }\n  get isEnabled() {\n    return this.track.enabled;\n  }\n  setIsEnabled(b) {\n    this.track.enabled = b;\n  }\n  attach(element) {\n    this._element = element;\n    attachElement(element, this.track);\n  }\n  detach() {\n    if (this._element) {\n      detachElement(this._element, this.track);\n      this._element = void 0;\n    }\n  }\n};\n\n// ../core/src/media/stream/remote/audio.ts\nvar RemoteAudioStream = class extends RemoteMediaStreamBase {\n  constructor(id, track) {\n    super(id, \"audio\", track);\n    this.track = track;\n    this.contentType = \"audio\";\n  }\n};\n\n// ../core/src/media/stream/remote/data.ts\ninit_process();\n\n// ../core/src/media/stream/local/data.ts\ninit_process();\n\n// ../core/src/media/stream/local/index.ts\ninit_process();\n\n// ../core/src/media/stream/local/audio.ts\ninit_process();\n\n// ../core/src/media/stream/local/media.ts\ninit_process();\n\n// ../core/src/media/stream/local/base.ts\ninit_process();\nvar LocalStreamBase = class {\n  constructor(contentType) {\n    this.contentType = contentType;\n    this.side = \"local\";\n    this.onConnectionStateChanged = new Event();\n    this._onConnectionStateChanged = new Event();\n    this.id = uuidV4();\n    this._label = \"\";\n    this.published = false;\n    this._getTransportCallbacks = {};\n    this._getStatsCallbacks = {};\n    this._connectionState = {};\n    this._onConnectionStateChanged.pipe(this.onConnectionStateChanged);\n  }\n  _setLabel(label) {\n    this._label = label;\n  }\n  _unpublished() {\n    this.published = false;\n    this._getTransportCallbacks = {};\n    this._getStatsCallbacks = {};\n  }\n  _getTransport(selector) {\n    var _a2, _b2;\n    const id = typeof selector === \"string\" ? selector : selector.id;\n    return (_b2 = (_a2 = this._getTransportCallbacks)[id]) == null ? void 0 : _b2.call(_a2);\n  }\n  _setConnectionState(remoteMember, state) {\n    if (this._connectionState[remoteMember.id] === state)\n      return;\n    this._connectionState[remoteMember.id] = state;\n    this._onConnectionStateChanged.emit({ remoteMember, state });\n  }\n  getStats(selector) {\n    return this._getStats(selector);\n  }\n  _getStats(selector) {\n    var _a2, _b2, _c;\n    const id = typeof selector === \"string\" ? selector : selector.id;\n    return (_c = (_b2 = (_a2 = this._getStatsCallbacks)[id]) == null ? void 0 : _b2.call(_a2)) != null ? _c : [];\n  }\n  _getStatsAll() {\n    return Promise.all(\n      Object.entries(this._getStatsCallbacks).map((_0) => __async(this, [_0], function* ([key, cb]) {\n        return {\n          memberId: key,\n          stats: yield cb().catch(() => [])\n        };\n      }))\n    );\n  }\n  getRTCPeerConnection(selector) {\n    return this._getRTCPeerConnection(selector);\n  }\n  _getRTCPeerConnection(selector) {\n    var _a2;\n    return (_a2 = this._getTransport(selector)) == null ? void 0 : _a2.rtcPeerConnection;\n  }\n  getConnectionState(selector) {\n    return this._getConnectionState(selector);\n  }\n  _getConnectionState(selector) {\n    var _a2;\n    const id = typeof selector === \"string\" ? selector : selector.id;\n    return (_a2 = this._connectionState[id]) != null ? _a2 : \"new\";\n  }\n  _getConnectionStateAll() {\n    return Object.keys(this._getTransportCallbacks).map((memberId) => ({\n      memberId,\n      connectionState: this._getConnectionState(memberId)\n    }));\n  }\n  toJSON() {\n    return {\n      label: this._label,\n      contentType: this.contentType,\n      id: this.id,\n      side: this.side\n    };\n  }\n};\n\n// ../core/src/media/stream/local/media.ts\nvar LocalMediaStreamBase = class extends LocalStreamBase {\n  constructor(track, contentType, options = {}) {\n    super(contentType);\n    this.onTrackUpdated = new Event();\n    this._trackConstraints = {};\n    this._onEnableChanged = new Event();\n    this._track = track;\n    this._options = options;\n    this._trackConstraints = __spreadValues({}, options);\n  }\n  get trackConstraints() {\n    return this._trackConstraints;\n  }\n  toJSON() {\n    const base = super.toJSON();\n    return __spreadProps(__spreadValues({}, base), {\n      trackConstraints: this.trackConstraints,\n      isEnabled: this.isEnabled,\n      _options: this._options\n    });\n  }\n  get track() {\n    return this._track;\n  }\n  attach(element) {\n    this._element = element;\n    attachElement(element, this._track);\n  }\n  detach() {\n    if (this._element) {\n      detachElement(this._element, this._track);\n      this._element = void 0;\n    }\n  }\n  _disable(kind) {\n    if (this._options.stopTrackWhenDisabled) {\n      this._trackConstraints = __spreadValues(__spreadValues({}, this.trackConstraints), this.track.getConstraints());\n      this.track.stop();\n    } else {\n      this._oldTrack = this.track;\n    }\n    const track = kind === \"video\" ? emptyVideoTrack : emptyAudioTrack;\n    track.enabled = false;\n    this._onEnableChanged.emit(track);\n    this._updateTrack(track);\n  }\n  _updateTrack(track) {\n    this._track = track;\n    if (this._element) {\n      this.attach(this._element);\n    }\n    this.onTrackUpdated.emit(track);\n  }\n  release() {\n    this._track.stop();\n  }\n};\nvar createEmptyTrack = new RTCPeerConnection();\nvar emptyAudioTrack = createEmptyTrack.addTransceiver(\"audio\").receiver.track;\nvar emptyVideoTrack = createEmptyTrack.addTransceiver(\"video\").receiver.track;\n\n// ../core/src/media/stream/local/audio.ts\nvar log25 = new Logger(\"packages/core/src/media/stream/local/audio.ts\");\nvar LocalAudioStream = class extends LocalMediaStreamBase {\n  constructor(track, options = {}) {\n    super(track, \"audio\", options);\n    this.contentType = \"audio\";\n    this._isEnabled = true;\n    this._promiseQueue = new PromiseQueue();\n    if (track.kind !== \"audio\") {\n      throw createError({\n        operationName: \"LocalAudioStream.constructor\",\n        path: log25.prefix,\n        info: errors.invalidTrackKind,\n        payload: { track }\n      });\n    }\n  }\n  setEnabled(enabled) {\n    return __async(this, null, function* () {\n      yield this._promiseQueue.push(() => __async(this, null, function* () {\n        if (this._isEnabled === true && enabled === false) {\n          this._isEnabled = enabled;\n          this._disable(\"audio\");\n          log25.debug(\"stopped\");\n        } else if (this._isEnabled === false && enabled === true) {\n          this._isEnabled = enabled;\n          if (this._options.stopTrackWhenDisabled) {\n            const track = this._options.isDisplayMedia === true ? yield this.enableDisplay() : yield this.enableMic();\n            this._updateTrack(track);\n            this._onEnableChanged.emit(track);\n          } else if (this._oldTrack) {\n            this._updateTrack(this._oldTrack);\n            this._onEnableChanged.emit(this._oldTrack);\n          }\n          log25.debug(\"resumed\");\n        }\n      }));\n    });\n  }\n  get isEnabled() {\n    return this._isEnabled;\n  }\n  enableMic() {\n    return __async(this, null, function* () {\n      const [track] = (yield navigator.mediaDevices.getUserMedia({\n        audio: this.trackConstraints\n      })).getAudioTracks();\n      return track;\n    });\n  }\n  enableDisplay() {\n    return __async(this, null, function* () {\n      const [track] = (yield navigator.mediaDevices.getDisplayMedia({\n        audio: this.trackConstraints\n      })).getAudioTracks();\n      return track;\n    });\n  }\n};\n\n// ../core/src/media/stream/local/video.ts\ninit_process();\nvar log26 = new Logger(\"packages/core/src/media/stream/local/video.ts\");\nvar LocalVideoStream = class extends LocalMediaStreamBase {\n  constructor(track, options = {}) {\n    super(track, \"video\", options);\n    this.contentType = \"video\";\n    this._isEnabled = true;\n    this._promiseQueue = new PromiseQueue();\n    if (track.kind !== \"video\") {\n      throw createError({\n        operationName: \"LocalVideoStream.constructor\",\n        path: log26.prefix,\n        info: errors.invalidTrackKind,\n        payload: { track }\n      });\n    }\n    log26.debug(\"LocalVideoStream spawned\", this.toJSON());\n  }\n  setEnabled(enabled) {\n    return __async(this, null, function* () {\n      yield this._promiseQueue.push(() => __async(this, null, function* () {\n        if (this._isEnabled === true && enabled === false) {\n          this._isEnabled = enabled;\n          this._disable(\"video\");\n          log26.debug(\"stopped\", this.toJSON());\n        } else if (this._isEnabled === false && enabled === true) {\n          this._isEnabled = enabled;\n          if (this._options.stopTrackWhenDisabled) {\n            const track = this._options.isDisplayMedia === true ? yield this.enableDisplay() : yield this.enableCamera();\n            this._updateTrack(track);\n            this._onEnableChanged.emit(track);\n          } else if (this._oldTrack) {\n            this._updateTrack(this._oldTrack);\n            this._onEnableChanged.emit(this._oldTrack);\n          }\n          log26.debug(\"resumed\", this.toJSON());\n        }\n      }));\n    });\n  }\n  get isEnabled() {\n    return this._isEnabled;\n  }\n  enableCamera() {\n    return __async(this, null, function* () {\n      const [track] = (yield navigator.mediaDevices.getUserMedia({\n        video: this.trackConstraints\n      })).getVideoTracks();\n      return track;\n    });\n  }\n  enableDisplay() {\n    return __async(this, null, function* () {\n      const [track] = (yield navigator.mediaDevices.getDisplayMedia({\n        video: this.trackConstraints\n      })).getVideoTracks();\n      return track;\n    });\n  }\n};\n\n// ../core/src/media/stream/local/data.ts\nvar log27 = new Logger(\"packages/core/src/media/stream/local/data.ts\");\nvar LocalDataStream = class extends LocalStreamBase {\n  constructor(options = {}) {\n    super(\"data\");\n    this.options = options;\n    this.contentType = \"data\";\n    this._onWriteData = new Event();\n    this._isEnabled = true;\n    this._setLabel(\"LocalDataStream\");\n  }\n  get isEnabled() {\n    return this._isEnabled;\n  }\n  setIsEnabled(b) {\n    this._isEnabled = b;\n  }\n  write(data) {\n    if (!this._isEnabled) {\n      throw createError({\n        operationName: \"LocalDataStream.write\",\n        path: log27.prefix,\n        info: errors.disabledDataStream\n      });\n    }\n    if (!ArrayBuffer.isView(data) && !(typeof data === \"string\")) {\n      data = objectFlag + JSON.stringify(data);\n    }\n    this._onWriteData.emit(data);\n  }\n};\nvar objectFlag = \"skyway_object:\";\n\n// ../core/src/media/stream/remote/data.ts\nvar RemoteDataStream = class extends RemoteStreamBase {\n  constructor(id, _datachannel) {\n    super(id, \"data\");\n    this._datachannel = _datachannel;\n    this._isEnabled = true;\n    this.contentType = \"data\";\n    this.onData = new Event();\n    _datachannel.onmessage = ({ data }) => {\n      if (!this.isEnabled) {\n        return;\n      }\n      if (typeof data === \"string\" && data.includes(objectFlag)) {\n        data = JSON.parse(data.slice(objectFlag.length));\n      }\n      this.onData.emit(data);\n    };\n  }\n  get isEnabled() {\n    return this._isEnabled;\n  }\n  setIsEnabled(b) {\n    this._isEnabled = b;\n  }\n};\n\n// ../core/src/media/stream/remote/video.ts\ninit_process();\nvar RemoteVideoStream = class extends RemoteMediaStreamBase {\n  constructor(id, track) {\n    super(id, \"video\", track);\n    this.track = track;\n    this.contentType = \"video\";\n  }\n};\n\n// ../core/src/media/stream/remote/factory.ts\nvar log28 = new Logger(\"packages/core/src/media/stream/remote/factory.ts\");\nvar createRemoteStream = (id, media, codec) => {\n  if (media instanceof RTCDataChannel) {\n    const stream = new RemoteDataStream(id, media);\n    stream.codec = codec;\n    return stream;\n  } else {\n    if (media.kind === \"audio\") {\n      const stream = new RemoteAudioStream(id, media);\n      stream.codec = codec;\n      return stream;\n    } else if (media.kind === \"video\") {\n      const stream = new RemoteVideoStream(id, media);\n      stream.codec = codec;\n      return stream;\n    }\n  }\n  throw createError({\n    operationName: \"createRemoteStream\",\n    path: log28.prefix,\n    info: __spreadProps(__spreadValues({}, errors.invalidArgumentValue), { detail: \"invalid stream type\" })\n  });\n};\n\n// ../core/src/plugin/internal/person/connection/datachannel.ts\ninit_process();\nvar DataChannelNegotiationLabel = class {\n  constructor(publicationId, streamId) {\n    this.publicationId = publicationId;\n    this.streamId = streamId;\n  }\n  static fromLabel(label) {\n    const { p, s } = JSON.parse(label);\n    return new DataChannelNegotiationLabel(p, s);\n  }\n  toLabel() {\n    return JSON.stringify({\n      p: this.publicationId,\n      s: this.streamId\n    });\n  }\n};\n\n// ../core/src/plugin/internal/person/connection/peer.ts\ninit_process();\n\n// ../core/src/plugin/internal/person/util.ts\ninit_process();\nvar log29 = new Logger(\"packages/core/src/plugin/internal/person/util.ts\");\nvar setEncodingParams = (sender, newEncodings) => __async(void 0, null, function* () {\n  const info = log29.createBlock({ label: \"setEncodingParams\" });\n  const params = sender.getParameters();\n  info.debug(\"getParameters\", { params, newEncodings });\n  if (params.encodings == void 0) {\n    params.encodings = [];\n  }\n  params.encodings = newEncodings.map((encoding, i) => __spreadValues(__spreadValues({}, params.encodings[i] || {}), encoding));\n  yield sender.setParameters(params);\n});\nvar isSafari = () => detectDevice() === \"Safari12\" || detectDevice() === \"Safari11\";\nfunction convertConnectionState(state) {\n  switch (state) {\n    case \"closed\":\n    case \"disconnected\":\n    case \"failed\":\n      return \"disconnected\";\n    case \"connected\":\n      return \"connected\";\n    case \"connecting\":\n      return \"connecting\";\n    case \"new\":\n      return \"new\";\n    case \"reconnecting\":\n      return \"reconnecting\";\n  }\n}\nvar statsToJson = (report) => {\n  const stats = [];\n  report.forEach((stat) => {\n    stats.push(JSON.parse(JSON.stringify(stat)));\n  });\n  return stats;\n};\n\n// ../core/src/plugin/internal/person/connection/peer.ts\nvar log30 = new Logger(\n  \"packages/core/src/plugin/internal/person/connection/peer.ts\"\n);\nvar Peer = class {\n  constructor(_context, _iceManager, signaling, localPerson, endpoint, role) {\n    this._context = _context;\n    this._iceManager = _iceManager;\n    this.signaling = signaling;\n    this.localPerson = localPerson;\n    this.endpoint = endpoint;\n    this.role = role;\n    this._pendingCandidates = [];\n    this.pc = new RTCPeerConnection(__spreadProps(__spreadValues({}, this._context.config.rtcConfig), {\n      iceTransportPolicy: this._context.config.rtcConfig.turnPolicy === \"turnOnly\" ? \"relay\" : void 0,\n      iceServers: this._iceManager.iceServers\n    }));\n    this.onSignalingStateChanged = new Event();\n    this.onPeerConnectionStateChanged = new Event();\n    this.onDisconnect = new Event();\n    this.connected = false;\n    this.disconnected = false;\n    this._onICECandidate = (ev) => __async(this, null, function* () {\n      if (ev.candidate == null || ev.candidate === \"\" || this.pc.connectionState === \"closed\") {\n        return;\n      }\n      const message = {\n        kind: \"iceCandidateMessage\",\n        payload: {\n          candidate: ev.candidate,\n          role: this.role\n        }\n      };\n      log30.debug(\"[start] send candidate\", {\n        message,\n        localPerson: this.localPerson\n      });\n      try {\n        yield this.signaling.send(this.endpoint, message);\n        log30.debug(`[end] send candidate`, {\n          message,\n          localPerson: this.localPerson\n        });\n      } catch (error) {\n        log30.warn(\n          `[failed] send candidate`,\n          createWarnPayload({\n            operationName: \"Peer._onICECandidate\",\n            channel: this.localPerson.channel,\n            detail: \"[failed] send candidate\",\n            payload: { message }\n          }),\n          error\n        );\n      }\n    });\n    this._onConnectionStateChange = () => __async(this, null, function* () {\n      const state = this.pc.connectionState;\n      log30.debug(\"_onConnectionStateChange\", this.localPerson.id, state);\n      switch (state) {\n        case \"connected\":\n          this.connected = true;\n          this._pendingCandidates = [];\n          break;\n      }\n      this.onPeerConnectionStateChanged.emit(this.pc.connectionState);\n    });\n    this.waitForSignalingState = (state, timeout = 1e4) => __async(this, null, function* () {\n      if (this.pc.signalingState === state)\n        return;\n      yield this.onSignalingStateChanged.watch(() => this.pc.signalingState === state, timeout).catch((err) => {\n        throw createError({\n          operationName: \"Peer.waitForSignalingState\",\n          info: __spreadProps(__spreadValues({}, errors.timeout), {\n            detail: \"waitForSignalingState timeout\"\n          }),\n          path: log30.prefix,\n          context: this._context,\n          channel: this.localPerson.channel,\n          error: err\n        });\n      });\n    });\n    this.waitForConnectionState = (state, timeout = 1e4) => __async(this, null, function* () {\n      if (state === this.pc.connectionState)\n        return;\n      yield this.onPeerConnectionStateChanged.watch(() => state === this.pc.connectionState, timeout).catch((err) => {\n        throw createError({\n          operationName: \"Peer.waitForConnectionState\",\n          info: __spreadProps(__spreadValues({}, errors.timeout), {\n            detail: \"waitForConnectionState timeout\"\n          }),\n          path: log30.prefix,\n          context: this._context,\n          channel: this.localPerson.channel,\n          error: err\n        });\n      });\n    });\n    this.waitForStats = (track, cb, interval = 100, timeout = 1e4) => __async(this, null, function* () {\n      for (let elapsed = 0; ; elapsed += interval) {\n        if (elapsed >= timeout) {\n          throw createError({\n            operationName: \"Peer.waitForStats\",\n            info: __spreadProps(__spreadValues({}, errors.timeout), {\n              detail: \"waitForStats timeout\"\n            }),\n            path: log30.prefix,\n            context: this._context,\n            channel: this.localPerson.channel\n          });\n        }\n        const report = yield this.pc.getStats(track);\n        const stats = statsToJson(report);\n        if (cb(stats)) {\n          break;\n        }\n        yield new Promise((r2) => setTimeout(r2, interval));\n      }\n    });\n    var _a2;\n    log30.debug(\"peerConfig\", this.pc.getConfiguration());\n    this.setPeerConnectionListener();\n    const peerIdentity = (_a2 = this.pc) == null ? void 0 : _a2.peerIdentity;\n    if (peerIdentity) {\n      peerIdentity.catch((err) => {\n        log30.debug(\"firefox peerIdentity\", err);\n      });\n    }\n  }\n  setPeerConnectionListener() {\n    this.pc.onicecandidate = this._onICECandidate;\n    this.pc.onconnectionstatechange = this._onConnectionStateChange;\n    this.pc.onsignalingstatechange = () => this.onSignalingStateChanged.emit(this.pc.signalingState);\n  }\n  unSetPeerConnectionListener() {\n    this.pc.onicecandidate = null;\n    this.pc.onconnectionstatechange = null;\n    this.pc.onsignalingstatechange = null;\n  }\n  handleCandidate(candidate) {\n    return __async(this, null, function* () {\n      this._pendingCandidates.push(candidate);\n      if (this.pc.remoteDescription) {\n        yield this.resolveCandidates();\n      }\n    });\n  }\n  resolveCandidates() {\n    return __async(this, null, function* () {\n      const candidates = [...this._pendingCandidates];\n      this._pendingCandidates = [];\n      log30.debug(\"addIceCandidates\", candidates);\n      yield Promise.all(\n        candidates.map((candidate) => {\n          if (this.pc.signalingState === \"closed\")\n            return;\n          this.pc.addIceCandidate(candidate).catch((err) => {\n            log30.warn(\n              \"[failed] add ice candidate\",\n              createWarnPayload({\n                operationName: \"Peer.resolveCandidates\",\n                channel: this.localPerson.channel,\n                detail: \"[failed] send candidate\",\n                payload: { endpointId: this.endpoint.id }\n              }),\n              err\n            );\n          });\n        })\n      );\n    });\n  }\n};\n\n// ../core/src/plugin/internal/person/connection/receiver.ts\nvar log31 = new Logger(\n  \"packages/core/src/plugin/internal/person/connection/receiver.ts\"\n);\nvar Receiver = class extends Peer {\n  constructor(context, iceManager, signaling, localPerson, endpoint) {\n    super(context, iceManager, signaling, localPerson, endpoint, \"receiver\");\n    this.id = v4_default4();\n    this.onConnectionStateChanged = new Event();\n    this.onStreamAdded = new Event();\n    this.onError = new Event();\n    this._connectionState = \"new\";\n    this._publicationInfo = {};\n    this.streams = {};\n    this._subscriptions = {};\n    this._promiseQueue = new PromiseQueue();\n    this._disposer = new EventDisposer();\n    this._log = log31.createBlock({\n      localPersonId: this.localPerson.id,\n      id: this.id\n    });\n    this._log.debug(\"spawned\");\n    this.signaling.onMessage.add((_0) => __async(this, [_0], function* ({ src, data }) {\n      if (!(src.id === endpoint.id && src.name === endpoint.name))\n        return;\n      const message = data;\n      switch (message.kind) {\n        case \"senderProduceMessage\":\n          {\n            this._promiseQueue.push(() => this._handleSenderProduce(message.payload)).catch(\n              (err) => this._log.error(\"handle senderProduceMessage failed\", err, {\n                localPersonId: this.localPerson.id,\n                endpointId: this.endpoint.id\n              })\n            );\n          }\n          break;\n        case \"senderUnproduceMessage\":\n          {\n            this._promiseQueue.push(() => this._handleSenderUnproduce(message.payload)).catch(\n              (err) => this._log.error(\"handle handleSenderUnproduce\", err, {\n                localPersonId: this.localPerson.id,\n                endpointId: this.endpoint.id\n              })\n            );\n          }\n          break;\n        case \"senderRestartIceMessage\":\n          {\n            this._promiseQueue.push(() => this._handleSenderRestartIce(message.payload)).catch(\n              (err) => this._log.error(\"_handleSenderRestartIce\", err, {\n                localPersonId: this.localPerson.id,\n                endpointId: this.endpoint.id\n              })\n            );\n          }\n          break;\n        case \"iceCandidateMessage\":\n          {\n            const { role, candidate } = message.payload;\n            if (role === \"sender\") {\n              yield this.handleCandidate(candidate);\n            }\n          }\n          break;\n      }\n    })).disposer(this._disposer);\n    this.pc.ontrack = (_0) => __async(this, [_0], function* ({ track, transceiver }) {\n      if (!transceiver.mid) {\n        throw createError({\n          operationName: \"Receiver.pc.ontrack\",\n          info: __spreadProps(__spreadValues({}, errors.missingProperty), {\n            detail: \"mid missing\"\n          }),\n          path: log31.prefix,\n          context: this._context,\n          channel: this.localPerson.channel\n        });\n      }\n      const info = Object.values(this._publicationInfo).find(\n        (i) => {\n          var _a2;\n          return i.mid === ((_a2 = transceiver.mid) == null ? void 0 : _a2.toString());\n        }\n      );\n      if (!info) {\n        const error = createError({\n          operationName: \"Receiver.pc.ontrack\",\n          info: __spreadProps(__spreadValues({}, errors.notFound), { detail: \"publicationInfo not found\" }),\n          path: log31.prefix,\n          context: this._context,\n          channel: localPerson.channel,\n          payload: {\n            endpointId: this.endpoint.id,\n            publicationInfo: this._publicationInfo,\n            mid: transceiver.mid\n          }\n        });\n        this.onError.emit(error);\n        this._log.error(error);\n        return;\n      }\n      const sdpObject = sdpTransform2.parse(this.pc.remoteDescription.sdp);\n      const codec = this._getCodecFromSdp(sdpObject, transceiver, track.kind);\n      const stream = createRemoteStream(info.streamId, track, codec);\n      stream.codec = codec;\n      this._setupTransportAccessForStream(stream);\n      this.streams[info.publicationId] = stream;\n      this._log.debug(\"MediaStreamTrack added\", info, track, codec);\n      this.onStreamAdded.emit({\n        publicationId: info.publicationId,\n        stream\n      });\n    });\n    this.pc.ondatachannel = (_0) => __async(this, [_0], function* ({ channel }) {\n      const { publicationId, streamId } = DataChannelNegotiationLabel.fromLabel(\n        channel.label\n      );\n      const codec = { mimeType: \"datachannel\" };\n      const stream = createRemoteStream(streamId, channel, codec);\n      this._setupTransportAccessForStream(stream);\n      this.streams[publicationId] = stream;\n      this._log.debug(\"DataChannel added\", publicationId, channel, codec);\n      this.onStreamAdded.emit({\n        publicationId,\n        stream\n      });\n    });\n    this.onPeerConnectionStateChanged.add((state) => {\n      switch (state) {\n        case \"connecting\":\n        case \"connected\":\n          this._setConnectionState(state);\n          break;\n        case \"failed\":\n        case \"closed\":\n          this._setConnectionState(\"disconnected\");\n          break;\n      }\n    }).disposer(this._disposer);\n  }\n  _setConnectionState(state) {\n    if (this._connectionState === state) {\n      return;\n    }\n    this._log.debug(\n      \"onConnectionStateChanged\",\n      this.id,\n      this._connectionState,\n      state\n    );\n    this._connectionState = state;\n    this.onConnectionStateChanged.emit(state);\n  }\n  _setupTransportAccessForStream(stream) {\n    stream._getTransport = () => ({\n      rtcPeerConnection: this.pc,\n      connectionState: convertConnectionState(this.pc.connectionState)\n    });\n    stream._getStats = () => __async(this, null, function* () {\n      if (stream.contentType === \"data\") {\n        const stats2 = yield this.pc.getStats();\n        const arr2 = statsToArray(stats2);\n        return arr2;\n      }\n      const stats = yield this.pc.getStats(stream.track);\n      const arr = statsToArray(stats);\n      return arr;\n    });\n    this._disposer.push(() => {\n      stream._getTransport = () => void 0;\n    });\n    this.onConnectionStateChanged.add((state) => {\n      stream._setConnectionState(state);\n    }).disposer(this._disposer);\n  }\n  _getCodecFromSdp(sdpObject, transceiver, kind) {\n    const media = sdpObject.media.find(\n      (m) => {\n        var _a2, _b2;\n        return ((_a2 = m.mid) == null ? void 0 : _a2.toString()) === ((_b2 = transceiver.mid) == null ? void 0 : _b2.toString());\n      }\n    );\n    if (!media) {\n      throw createError({\n        operationName: \"Receiver._getCodecFromSdp\",\n        info: __spreadProps(__spreadValues({}, errors.notFound), {\n          detail: \"m-line not exist\"\n        }),\n        path: log31.prefix,\n        context: this._context,\n        channel: this.localPerson.channel\n      });\n    }\n    const codecPT = media.payloads.split(\" \")[0];\n    const rtp = media.rtp.find((r2) => r2.payload.toString() === codecPT);\n    const mimeType = `${kind}/${rtp.codec}`.toLowerCase();\n    let parameters = {};\n    const fmtp = media.fmtp.find((f) => f.payload.toString() === codecPT);\n    if (fmtp == null ? void 0 : fmtp.config) {\n      parameters = fmtpConfigParser(fmtp.config);\n    }\n    const codec = { mimeType, parameters };\n    return codec;\n  }\n  get hasMedia() {\n    const count = Object.values(this.streams).length;\n    this._log.debug(\"hasMedia\", { count });\n    if (count > 0) {\n      return true;\n    }\n    return false;\n  }\n  close() {\n    this._log.debug(\"closed\");\n    this.unSetPeerConnectionListener();\n    this.pc.close();\n    this._setConnectionState(\"disconnected\");\n    this._disposer.dispose();\n  }\n  add(subscription) {\n    this._subscriptions[subscription.id] = subscription;\n  }\n  remove(subscriptionId) {\n    const subscription = this._subscriptions[subscriptionId];\n    if (!subscription)\n      return;\n    delete this._subscriptions[subscription.id];\n    const publicationId = subscription.publication.id;\n    const stream = this.streams[publicationId];\n    if (!stream)\n      return;\n    delete this.streams[publicationId];\n  }\n  _validateRemoteOffer(sdp) {\n    const sdpObject = sdpTransform2.parse(sdp);\n    this._log.debug(\"_validateRemoteOffer\", { sdpObject });\n    for (const sdpMediaLine of sdpObject.media) {\n      if (sdpMediaLine.direction === \"inactive\") {\n        continue;\n      }\n      const exist = Object.values(this._publicationInfo).find(\n        (info) => {\n          var _a2;\n          return ((_a2 = sdpMediaLine.mid) == null ? void 0 : _a2.toString()) === info.mid;\n        }\n      );\n      if (!exist) {\n        const error = createError({\n          operationName: \"Receiver._validateRemoteOffer\",\n          info: __spreadProps(__spreadValues({}, errors.notFound), {\n            detail: \"mismatch between sdp and state\"\n          }),\n          path: log31.prefix,\n          context: this._context,\n          channel: this.localPerson.channel,\n          payload: {\n            sdpMedia: sdpObject.media,\n            sdpMediaLine,\n            info: this._publicationInfo\n          }\n        });\n        this.onError.emit(error);\n        throw error;\n      }\n    }\n  }\n  get isWrongSignalingState() {\n    return this.pc.signalingState === \"have-local-offer\" && this.pc.remoteDescription || this.pc.signalingState === \"have-remote-offer\";\n  }\n  _handleSenderProduce(_0) {\n    return __async(this, arguments, function* ({\n      sdp,\n      publicationId,\n      info\n    }) {\n      if (this.pc.signalingState === \"closed\") {\n        return;\n      }\n      if (this.pc.signalingState !== \"stable\") {\n        if (this.isWrongSignalingState) {\n          this._log.warn(\n            \"_handleSenderProduce wait for be stable\",\n            createWarnPayload({\n              operationName: \"Receiver._handleSenderProduce\",\n              channel: this.localPerson.channel,\n              detail: \"_handleSenderProduce wait for be stable\",\n              payload: { signalingState: this.pc.signalingState }\n            })\n          );\n          yield this.waitForSignalingState(\"stable\");\n          yield this._handleSenderProduce({\n            sdp,\n            publicationId,\n            info\n          });\n          return;\n        }\n        throw createError({\n          operationName: \"Receiver._handleSenderProduce\",\n          context: this._context,\n          channel: this.localPerson.channel,\n          info: __spreadProps(__spreadValues({}, errors.internal), { detail: \"wrong signalingState\" }),\n          payload: { signalingState: this.pc.signalingState },\n          path: log31.prefix\n        });\n      }\n      this._log.debug(\"_handleSenderProduce\", {\n        info,\n        publicationId,\n        publicationInfo: Object.values(this._publicationInfo)\n      });\n      this._publicationInfo[info.publicationId] = info;\n      this._validateRemoteOffer(sdp.sdp);\n      yield this.sendAnswer(sdp);\n      yield this.resolveCandidates();\n    });\n  }\n  _handleSenderUnproduce(_0) {\n    return __async(this, arguments, function* ({\n      sdp,\n      publicationId\n    }) {\n      if (this.pc.signalingState === \"closed\") {\n        this._log.warn(\n          \"signalingState closed\",\n          createWarnPayload({\n            channel: this.localPerson.channel,\n            detail: \"signalingState closed\",\n            operationName: \"Receiver._handleSenderUnproduce\"\n          })\n        );\n        return;\n      }\n      this._log.debug(\"<handleSenderUnproduce> start\", { sdp, publicationId });\n      if (this.pc.signalingState !== \"stable\") {\n        if (this.isWrongSignalingState) {\n          this._log.warn(\n            \"signalingState is not stable\",\n            createWarnPayload({\n              channel: this.localPerson.channel,\n              detail: \"signalingState is not stable\",\n              operationName: \"Receiver._handleSenderUnproduce\",\n              payload: { signalingState: this.pc.signalingState }\n            })\n          );\n          yield this.waitForSignalingState(\"stable\");\n          yield this._handleSenderUnproduce({\n            sdp,\n            publicationId\n          });\n          return;\n        }\n        throw createError({\n          operationName: \"Receiver._handleSenderProduce\",\n          context: this._context,\n          channel: this.localPerson.channel,\n          info: __spreadProps(__spreadValues({}, errors.internal), { detail: \"wrong signalingState\" }),\n          payload: { signalingState: this.pc.signalingState },\n          path: log31.prefix\n        });\n      }\n      delete this._publicationInfo[publicationId];\n      yield this.sendAnswer(sdp);\n      yield this.resolveCandidates();\n      this._log.debug(\"<handleSenderUnproduce> end\", { publicationId });\n    });\n  }\n  _handleSenderRestartIce(_0) {\n    return __async(this, arguments, function* ({\n      sdp\n    }) {\n      if (this.pc.signalingState === \"closed\") {\n        return;\n      }\n      if (this.pc.signalingState !== \"stable\") {\n        if (this.isWrongSignalingState) {\n          this._log.warn(\n            \"signalingState is not stable\",\n            createWarnPayload({\n              channel: this.localPerson.channel,\n              detail: \"signalingState is not stable\",\n              operationName: \"Receiver._handleSenderRestartIce\",\n              payload: { signalingState: this.pc.signalingState }\n            })\n          );\n          yield this.waitForSignalingState(\"stable\");\n          yield this._handleSenderRestartIce({ sdp });\n          return;\n        }\n        throw createError({\n          operationName: \"Receiver._handleSenderRestartIce\",\n          context: this._context,\n          channel: this.localPerson.channel,\n          info: __spreadProps(__spreadValues({}, errors.internal), { detail: \"wrong signalingState\" }),\n          payload: { signalingState: this.pc.signalingState },\n          path: log31.prefix\n        });\n      }\n      this._setConnectionState(\"reconnecting\");\n      yield this.sendAnswer(sdp);\n      yield this.resolveCandidates();\n      if (this.pc.connectionState === \"connected\") {\n        this._setConnectionState(\"connected\");\n      }\n    });\n  }\n  sendAnswer(sdp) {\n    return __async(this, null, function* () {\n      this._log.debug(`[receiver] start: sendAnswer`);\n      yield this.pc.setRemoteDescription(sdp);\n      const answer = yield this.pc.createAnswer();\n      const offerObject = sdpTransform2.parse(this.pc.remoteDescription.sdp);\n      const answerObject = sdpTransform2.parse(answer.sdp);\n      offerObject.media.forEach((offerMedia, i) => {\n        const answerMedia = answerObject.media[i];\n        answerMedia.fmtp = deepCopy(answerMedia.fmtp).map((answerFmtp) => {\n          const offerFmtp = offerMedia.fmtp.find(\n            (f) => f.payload === answerFmtp.payload\n          );\n          if (offerFmtp) {\n            return offerFmtp;\n          }\n          return answerFmtp;\n        });\n      });\n      const munged = sdpTransform2.write(answerObject);\n      yield this.pc.setLocalDescription({ type: \"answer\", sdp: munged });\n      const message = {\n        kind: \"receiverAnswerMessage\",\n        payload: { sdp: this.pc.localDescription }\n      };\n      yield this.signaling.send(this.endpoint, message).catch(\n        (e2) => this._log.error(\"failed to send answer\", e2, {\n          localPersonId: this.localPerson.id,\n          endpointId: this.endpoint.id\n        })\n      );\n      this._log.debug(`[receiver] end: sendAnswer`);\n    });\n  }\n};\n\n// ../core/src/plugin/internal/person/connection/sender.ts\ninit_process();\nvar import_isEqual = __toESM(require_isEqual());\nvar sdpTransform3 = __toESM(require_lib());\nvar log32 = new Logger(\n  \"packages/core/src/plugin/internal/person/connection/sender.ts\"\n);\nvar Sender = class extends Peer {\n  constructor(context, iceManager, signaling, localPerson, endpoint) {\n    super(context, iceManager, signaling, localPerson, endpoint, \"sender\");\n    this.id = v4_default4();\n    this.onConnectionStateChanged = new Event();\n    this.publications = {};\n    this.transceivers = {};\n    this.datachannels = {};\n    this._pendingPublications = [];\n    this._isNegotiating = false;\n    this.promiseQueue = new PromiseQueue();\n    this._disposer = new EventDisposer();\n    this._ms = new MediaStream();\n    this._backoffIceRestarted = new BackOff({\n      times: 10,\n      interval: 100,\n      jitter: 100\n    });\n    this._connectionState = \"new\";\n    this._log = log32.createBlock({\n      localPersonId: this.localPerson.id,\n      id: this.id\n    });\n    this._unsubscribeStreamEnableChange = {};\n    this.restartIce = () => __async(this, null, function* () {\n      if (this._backoffIceRestarted.exceeded) {\n        this._log.error(\n          createError({\n            operationName: \"Sender.restartIce\",\n            context: this._context,\n            channel: this.localPerson.channel,\n            info: __spreadProps(__spreadValues({}, errors.internal), { detail: \"restartIce limit exceeded\" }),\n            path: log32.prefix\n          })\n        );\n        this._setConnectionState(\"disconnected\");\n        return;\n      }\n      this._log.warn(\n        \"[start] restartIce\",\n        createWarnPayload({\n          operationName: \"Sender.restartIce\",\n          detail: \"start restartIce\",\n          channel: this.localPerson.channel,\n          payload: { count: this._backoffIceRestarted.count }\n        })\n      );\n      const checkNeedEnd = () => {\n        if (this.endpoint.state === \"left\") {\n          this._log.warn(\n            \"endpointMemberLeft\",\n            createWarnPayload({\n              operationName: \"restartIce\",\n              detail: \"endpointMemberLeft\",\n              channel: this.localPerson.channel,\n              payload: { endpointId: this.endpoint.id }\n            })\n          );\n          this._setConnectionState(\"disconnected\");\n          return true;\n        }\n        if (this.pc.connectionState === \"connected\") {\n          this._log.warn(\n            \"[end] restartIce\",\n            createWarnPayload({\n              operationName: \"restartIce\",\n              detail: \"reconnected\",\n              channel: this.localPerson.channel,\n              payload: { count: this._backoffIceRestarted.count }\n            })\n          );\n          this._backoffIceRestarted.reset();\n          this._setConnectionState(\"connected\");\n          return true;\n        }\n      };\n      this._setConnectionState(\"reconnecting\");\n      yield this._backoffIceRestarted.wait();\n      if (checkNeedEnd())\n        return;\n      let e2 = yield this._iceManager.updateIceParams().catch((e3) => e3);\n      if (e2) {\n        this._log.warn(\n          \"[failed] restartIce\",\n          createWarnPayload({\n            operationName: \"restartIce\",\n            detail: \"update IceParams failed\",\n            channel: this.localPerson.channel,\n            payload: { count: this._backoffIceRestarted.count }\n          }),\n          e2\n        );\n        yield this.restartIce();\n        return;\n      }\n      if (this.pc.setConfiguration) {\n        this.pc.setConfiguration(__spreadProps(__spreadValues({}, this.pc.getConfiguration()), {\n          iceServers: this._iceManager.iceServers\n        }));\n        this._log.debug(\"<restartIce> setConfiguration\", {\n          iceServers: this._iceManager.iceServers\n        });\n      }\n      if (checkNeedEnd())\n        return;\n      if (this.signaling.connectionState !== \"connected\") {\n        this._log.warn(\n          \"<restartIce> reconnect signaling service\",\n          createWarnPayload({\n            operationName: \"restartIce\",\n            detail: \"reconnect signaling service\",\n            channel: this.localPerson.channel,\n            payload: { count: this._backoffIceRestarted.count }\n          })\n        );\n        e2 = yield this.signaling.onConnectionStateChanged.watch((s) => s === \"connected\", 1e4).catch((e3) => e3).then(() => {\n        });\n        if (e2 instanceof SkyWayError) {\n          yield this.restartIce();\n          return;\n        }\n        if (checkNeedEnd())\n          return;\n      }\n      const offer = yield this.pc.createOffer({ iceRestart: true });\n      yield this.pc.setLocalDescription(offer);\n      const message = {\n        kind: \"senderRestartIceMessage\",\n        payload: { sdp: this.pc.localDescription }\n      };\n      e2 = yield this.signaling.send(this.endpoint, message, 1e4).catch((e3) => e3);\n      if (e2) {\n        this._log.warn(\n          \"<restartIce> [failed]\",\n          createWarnPayload({\n            operationName: \"restartIce\",\n            detail: \"timeout send signaling message\",\n            channel: this.localPerson.channel,\n            payload: { count: this._backoffIceRestarted.count }\n          }),\n          e2\n        );\n        yield this.restartIce();\n        return;\n      }\n      e2 = yield this.waitForConnectionState(\n        \"connected\",\n        this._context.config.rtcConfig.iceDisconnectBufferTimeout\n      ).catch((e3) => e3);\n      if (!e2) {\n        if (checkNeedEnd())\n          return;\n      }\n      yield this.restartIce();\n    });\n    this._log.debug(\"spawned\");\n    this.signaling.onMessage.add((_0) => __async(this, [_0], function* ({ src, data }) {\n      if (!(src.id === endpoint.id && src.name === endpoint.name))\n        return;\n      const message = data;\n      switch (message.kind) {\n        case \"receiverAnswerMessage\":\n          {\n            this.promiseQueue.push(() => this._handleReceiverAnswer(message.payload)).catch(\n              (err) => this._log.error(\"handle receiverAnswerMessage\", {\n                localPersonId: this.localPerson.id,\n                endpointId: this.endpoint.id,\n                err\n              })\n            );\n          }\n          break;\n        case \"iceCandidateMessage\":\n          {\n            const { role, candidate } = message.payload;\n            if (role === \"receiver\") {\n              yield this.handleCandidate(candidate);\n            }\n          }\n          break;\n      }\n    })).disposer(this._disposer);\n    this.onPeerConnectionStateChanged.add((state) => __async(this, null, function* () {\n      log32.debug(\"onPeerConnectionStateChanged\", { state });\n      switch (state) {\n        case \"disconnected\":\n        case \"failed\":\n          {\n            const e2 = yield this.waitForConnectionState(\n              \"connected\",\n              context.config.rtcConfig.iceDisconnectBufferTimeout\n            ).catch((e3) => e3);\n            if (e2 && this._connectionState !== \"reconnecting\") {\n              yield this.restartIce();\n            }\n          }\n          break;\n        case \"connecting\":\n        case \"connected\":\n          this._setConnectionState(state);\n          break;\n        case \"closed\":\n          this._setConnectionState(\"disconnected\");\n          break;\n      }\n    })).disposer(this._disposer);\n  }\n  _setConnectionState(state) {\n    if (this._connectionState === state) {\n      return;\n    }\n    this._log.debug(\n      \"onConnectionStateChanged\",\n      this.id,\n      this._connectionState,\n      state\n    );\n    this._connectionState = state;\n    this.onConnectionStateChanged.emit(state);\n  }\n  get hasMedia() {\n    const count = Object.keys(this.publications).length;\n    this._log.debug(\"hasMedia\", { count });\n    if (count > 0) {\n      return true;\n    }\n    return false;\n  }\n  _getMid(publication, sdpObject) {\n    if (publication.contentType === \"data\") {\n      const media = sdpObject.media.find((m) => m.type === \"application\");\n      if ((media == null ? void 0 : media.mid) == void 0) {\n        throw createError({\n          operationName: \"Sender._getMid\",\n          info: __spreadProps(__spreadValues({}, errors.missingProperty), {\n            detail: \"datachannel mid undefined\"\n          }),\n          path: log32.prefix,\n          context: this._context,\n          channel: this.localPerson.channel\n        });\n      }\n      return media.mid.toString();\n    } else {\n      const transceiver = this.transceivers[publication.id];\n      const mid = transceiver.mid;\n      if (mid == void 0) {\n        throw createError({\n          operationName: \"Sender._getMid\",\n          info: __spreadProps(__spreadValues({}, errors.missingProperty), {\n            detail: \"media mid undefined\"\n          }),\n          path: log32.prefix,\n          context: this._context,\n          channel: this.localPerson.channel\n        });\n      }\n      return mid.toString();\n    }\n  }\n  _listenStreamEnableChange(stream, publicationId) {\n    if (this._unsubscribeStreamEnableChange[publicationId]) {\n      this._unsubscribeStreamEnableChange[publicationId]();\n    }\n    const { removeListener } = stream._onEnableChanged.add((track) => __async(this, null, function* () {\n      yield this._replaceTrack(publicationId, track).catch((e2) => {\n        log32.warn(\n          createWarnPayload({\n            member: this.localPerson,\n            detail: \"_replaceTrack failed\",\n            operationName: \"Sender._listenStreamEnableChange\",\n            payload: e2\n          })\n        );\n      });\n    }));\n    this._unsubscribeStreamEnableChange[publicationId] = removeListener;\n  }\n  add(publication) {\n    return __async(this, null, function* () {\n      var _a2, _b2;\n      if (this._isNegotiating || this.pc.signalingState !== \"stable\") {\n        this._pendingPublications.push(publication);\n        this._log.debug(\"<add> isNegotiating\", {\n          publication,\n          isNegotiating: this._isNegotiating,\n          signalingState: this.pc.signalingState,\n          pendingPublications: this._pendingPublications.length\n        });\n        return;\n      }\n      this._isNegotiating = true;\n      this._log.debug(\"<add> add publication\", { publication });\n      this.publications[publication.id] = publication;\n      const stream = publication.stream;\n      if (!stream) {\n        throw createError({\n          operationName: \"Sender.add\",\n          info: __spreadProps(__spreadValues({}, errors.missingProperty), {\n            detail: \"<add> stream not found\"\n          }),\n          path: log32.prefix,\n          context: this._context,\n          channel: this.localPerson.channel\n        });\n      }\n      this._setupTransportAccessForStream(stream);\n      if (stream.contentType === \"data\") {\n        const dc = this.pc.createDataChannel(\n          new DataChannelNegotiationLabel(publication.id, stream.id).toLabel(),\n          stream.options\n        );\n        stream._onWriteData.add((data) => {\n          if (dc.readyState === \"open\") {\n            dc.send(data);\n          }\n        }).disposer(this._disposer);\n        this.datachannels[publication.id] = dc;\n      } else {\n        publication._onReplaceStream.add((stream2) => __async(this, null, function* () {\n          this._listenStreamEnableChange(\n            stream2,\n            publication.id\n          );\n          yield this._replaceTrack(publication.id, stream2.track);\n        })).disposer(this._disposer);\n        this._listenStreamEnableChange(stream, publication.id);\n        const transceiver = this.pc.addTransceiver(stream.track, {\n          direction: \"sendonly\",\n          streams: [this._ms]\n        });\n        publication._onEncodingsChanged.add((encodings) => __async(this, null, function* () {\n          yield setEncodingParams(transceiver.sender, encodings).catch((e2) => {\n            this._log.error(\"_onEncodingsChanged failed\", e2);\n          });\n        })).disposer(this._disposer);\n        this.transceivers[publication.id] = transceiver;\n      }\n      const offer = yield this.pc.createOffer().catch((err) => {\n        throw createError({\n          operationName: \"Sender.add\",\n          info: __spreadProps(__spreadValues({}, errors.internal), {\n            detail: \"can't create offer\"\n          }),\n          path: log32.prefix,\n          context: this._context,\n          channel: this.localPerson.channel,\n          error: err\n        });\n      });\n      yield this.pc.setLocalDescription(offer);\n      const sdpObject = sdpTransform3.parse(this.pc.localDescription.sdp);\n      this._log.debug(\"<add> create offer base\", sdpObject);\n      const mid = this._getMid(publication, sdpObject);\n      if (publication.contentType !== \"data\") {\n        applyCodecCapabilities(\n          (_a2 = publication.codecCapabilities) != null ? _a2 : [],\n          mid,\n          sdpObject\n        );\n        const offerSdp = sdpTransform3.write(sdpObject);\n        yield this.pc.setLocalDescription({ type: \"offer\", sdp: offerSdp });\n        this._log.debug(\"<add> create offer\", this.pc.localDescription);\n        if (((_b2 = publication.encodings) == null ? void 0 : _b2.length) > 0) {\n          if (isSafari()) {\n            this._safariSetupEncoding(\n              publication\n            );\n          } else {\n            const transceiver = this.transceivers[publication.id];\n            yield setEncodingParams(transceiver.sender, [\n              publication.encodings[0]\n            ]);\n          }\n        }\n      }\n      const message = {\n        kind: \"senderProduceMessage\",\n        payload: {\n          sdp: this.pc.localDescription,\n          publicationId: publication.id,\n          info: {\n            publicationId: publication.id,\n            streamId: stream.id,\n            mid\n          }\n        }\n      };\n      this._log.debug(\"[start] send message\", message);\n      yield this.signaling.send(this.endpoint, message).catch((error) => {\n        this._log.error(\"[failed] send message :\", error, {\n          localPersonId: this.localPerson.id,\n          endpointId: this.endpoint.id\n        });\n        throw error;\n      });\n      this._log.debug(\"[end] send message\", message);\n    });\n  }\n  _setupTransportAccessForStream(stream) {\n    stream._getTransportCallbacks[this.endpoint.id] = () => ({\n      rtcPeerConnection: this.pc,\n      connectionState: this._connectionState\n    });\n    stream._getStatsCallbacks[this.endpoint.id] = () => __async(this, null, function* () {\n      if (stream.contentType === \"data\") {\n        const stats2 = yield this.pc.getStats();\n        const arr2 = statsToArray(stats2);\n        return arr2;\n      }\n      const stats = yield this.pc.getStats(stream.track);\n      const arr = statsToArray(stats);\n      return arr;\n    });\n    this._disposer.push(() => {\n      delete stream._getTransportCallbacks[this.endpoint.id];\n      delete stream._getStatsCallbacks[this.endpoint.id];\n    });\n    this.onConnectionStateChanged.add((state) => {\n      stream._setConnectionState(this.endpoint, state);\n    }).disposer(this._disposer);\n  }\n  remove(publicationId) {\n    return __async(this, null, function* () {\n      const publication = this.publications[publicationId];\n      if (!publication) {\n        this._log.warn(\n          \"<remove> publication not found\",\n          createWarnPayload({\n            operationName: \"Sender.remove\",\n            detail: \"publication already removed\",\n            channel: this.localPerson.channel,\n            payload: { publicationId }\n          })\n        );\n        return;\n      }\n      delete this.publications[publicationId];\n      if (this._isNegotiating || this.pc.signalingState !== \"stable\") {\n        this._pendingPublications.push(publicationId);\n        this._log.debug(\"<remove> isNegotiating\", {\n          publicationId,\n          _isNegotiating: this._isNegotiating,\n          signalingState: this.pc.signalingState\n        });\n        return;\n      }\n      this._isNegotiating = true;\n      this._log.debug(\"<remove> [start]\", { publicationId });\n      const stream = publication.stream;\n      if (!stream) {\n        throw createError({\n          operationName: \"Sender.remove\",\n          info: __spreadProps(__spreadValues({}, errors.missingProperty), {\n            detail: \"<remove> publication not have stream\"\n          }),\n          path: log32.prefix,\n          context: this._context,\n          channel: this.localPerson.channel,\n          payload: { publication }\n        });\n      }\n      if (stream.contentType === \"data\") {\n        const dc = this.datachannels[publicationId];\n        dc.close();\n        delete this.datachannels[publicationId];\n      } else {\n        const transceiver = this.transceivers[publicationId];\n        transceiver.stop();\n        delete this.transceivers[publicationId];\n      }\n      const offer = yield this.pc.createOffer().catch((err) => {\n        throw createError({\n          operationName: \"Sender.remove\",\n          info: __spreadProps(__spreadValues({}, errors.internal), {\n            detail: \"<remove> can't create offer\"\n          }),\n          path: log32.prefix,\n          context: this._context,\n          channel: this.localPerson.channel,\n          error: err\n        });\n      });\n      yield this.pc.setLocalDescription(offer);\n      const message = {\n        kind: \"senderUnproduceMessage\",\n        payload: { sdp: this.pc.localDescription, publicationId }\n      };\n      this._log.debug(\"<remove> send message\", { message });\n      yield this.signaling.send(this.endpoint, message).catch((error) => {\n        this._log.error(\"<remove> in remote error :\", error, {\n          localPersonId: this.localPerson.id,\n          endpointId: this.endpoint.id\n        });\n        throw error;\n      });\n      this._log.debug(\"<remove> [end]\", { publicationId });\n    });\n  }\n  _replaceTrack(publicationId, track) {\n    return __async(this, null, function* () {\n      const transceiver = this.transceivers[publicationId];\n      if (!transceiver) {\n        this._log.warn(\n          \"can't replace track, transceiver not found\",\n          createWarnPayload({\n            operationName: \"Sender._replaceTrack\",\n            detail: \"transceiver already removed\",\n            channel: this.localPerson.channel,\n            payload: { publicationId }\n          })\n        );\n        return;\n      }\n      yield transceiver.sender.replaceTrack(track).catch((e2) => {\n        throw createError({\n          operationName: \"Sender._replaceTrack\",\n          context: this._context,\n          info: errors.internal,\n          error: e2,\n          path: log32.prefix,\n          channel: this.localPerson.channel\n        });\n      });\n    });\n  }\n  _handleReceiverAnswer(_0) {\n    return __async(this, arguments, function* ({\n      sdp\n    }) {\n      if (this.pc.signalingState === \"closed\") {\n        return;\n      }\n      this._log.debug(\"<handleReceiverAnswer> [start]\");\n      yield this.pc.setRemoteDescription(new RTCSessionDescription(sdp)).catch((err) => {\n        const error = createError({\n          operationName: \"Sender._handleReceiverAnswer\",\n          context: this._context,\n          info: __spreadProps(__spreadValues({}, errors.internal), {\n            detail: \"failed to setRemoteDescription\"\n          }),\n          path: log32.prefix,\n          payload: { sdp },\n          channel: this.localPerson.channel,\n          error: err\n        });\n        this._log.error(error);\n        throw error;\n      });\n      this._log.debug(\"<handleReceiverAnswer> sRD\");\n      yield this.resolveCandidates();\n      this._log.debug(\"<handleReceiverAnswer> resolveCandidates\");\n      yield this.waitForSignalingState(\"stable\");\n      this._log.debug(\"<handleReceiverAnswer> waitForSignalingState\");\n      this._isNegotiating = false;\n      yield this._resolvePendingSender();\n      this._log.debug(\n        \"<handleReceiverAnswer> _resolvePendingSender\",\n        this._pendingPublications.length\n      );\n      this._log.debug(\"<handleReceiverAnswer> [end]\");\n    });\n  }\n  _safariSetupEncoding(publication) {\n    const transceiver = this.transceivers[publication.id];\n    const stream = publication.stream;\n    this.waitForStats(\n      stream.track,\n      (stats) => {\n        const outbound = stats.find((s) => s.id.includes(\"RTCOutboundRTP\"));\n        if ((outbound == null ? void 0 : outbound.keyFramesEncoded) > 0)\n          return true;\n        return false;\n      },\n      10,\n      this._context.config.rtcConfig.timeout\n    ).then(() => {\n      setEncodingParams(transceiver.sender, [publication.encodings[0]]).catch(\n        (e2) => {\n          this._log.error(\"setEncodingParams failed\", e2);\n        }\n      );\n    }).catch((e2) => {\n      this._log.error(\"waitForStats\", e2);\n    });\n  }\n  _resolvePendingSender() {\n    return __async(this, null, function* () {\n      const publication = this._pendingPublications.shift();\n      if (!publication)\n        return;\n      this._log.debug(\"resolve pending sender\", { publication });\n      if (typeof publication === \"string\") {\n        yield this.remove(publication);\n      } else {\n        yield this.add(publication);\n      }\n    });\n  }\n  close() {\n    this._log.debug(\"closed\");\n    this.unSetPeerConnectionListener();\n    Object.values(this._unsubscribeStreamEnableChange).forEach((f) => f());\n    this.pc.close();\n    this._setConnectionState(\"disconnected\");\n    this._disposer.dispose();\n  }\n};\nfunction applyCodecCapabilities(codecCapabilities, mid, sdpObject) {\n  var _a2, _b2;\n  const media = sdpObject.media.find((m) => {\n    var _a3;\n    return ((_a3 = m.mid) == null ? void 0 : _a3.toString()) === mid;\n  });\n  if (!media) {\n    throw createError({\n      operationName: \"applyCodecCapabilities\",\n      info: __spreadProps(__spreadValues({}, errors.notFound), {\n        detail: \"media not found\"\n      }),\n      path: log32.prefix\n    });\n  }\n  codecCapabilities.forEach((cap) => {\n    var _a3;\n    if (cap.parameters) {\n      for (const [key, value] of Object.entries((_a3 = cap.parameters) != null ? _a3 : {})) {\n        if (value === false || !cap.parameters[key]) {\n          return;\n        }\n        if (key === \"usedtx\" && value) {\n          cap.parameters[key] = 1;\n        }\n      }\n    }\n  });\n  const findCodecFromCodecCapability = (cap, rtp, fmtp) => {\n    var _a3;\n    const rtpList = rtp.map((r2) => __spreadProps(__spreadValues({}, r2), {\n      parameters: getParameters(fmtp, r2.payload)\n    }));\n    const codecName = mimeTypeToCodec(cap.mimeType);\n    if (!codecName) {\n      return void 0;\n    }\n    const matched = (_a3 = rtpList.find((r2) => {\n      var _a4, _b3;\n      if (r2.codec.toLowerCase() !== codecName.toLowerCase()) {\n        return false;\n      }\n      if (Object.keys((_a4 = cap.parameters) != null ? _a4 : {}).length === 0) {\n        return true;\n      }\n      if (mimeTypeToContentType(cap.mimeType) === \"audio\") {\n        return true;\n      }\n      return (0, import_isEqual.default)(r2.parameters, (_b3 = cap.parameters) != null ? _b3 : {});\n    })) != null ? _a3 : void 0;\n    return matched;\n  };\n  const preferredCodecs = codecCapabilities.map((cap) => findCodecFromCodecCapability(cap, media.rtp, media.fmtp)).filter((v) => v != void 0);\n  const sorted = [\n    ...preferredCodecs,\n    ...media.rtp.filter(\n      (rtp) => !preferredCodecs.find((p) => p.payload === rtp.payload)\n    )\n  ];\n  for (const fmtp of media.fmtp) {\n    const payloadType = fmtp.payload;\n    const targetCodecWithPayload = sorted.find(\n      (c) => c.payload === payloadType\n    );\n    if (targetCodecWithPayload) {\n      const targetCodecCapability = codecCapabilities.find(\n        (c) => findCodecFromCodecCapability(c, [targetCodecWithPayload], media.fmtp)\n      );\n      if (targetCodecCapability) {\n        if (targetCodecCapability.parameters && Object.keys(targetCodecCapability.parameters).length > 0) {\n          fmtp.config = \"\";\n          Object.entries(targetCodecCapability.parameters).forEach(\n            ([key, value]) => {\n              if (value === false || fmtp.config.includes(key)) {\n                return;\n              }\n              if (fmtp.config.length > 0) {\n                fmtp.config += `;${key}=${value}`;\n              } else {\n                fmtp.config = `${key}=${value}`;\n              }\n            }\n          );\n        }\n      }\n    }\n    const opus = sorted.find((rtp) => rtp.codec.toLowerCase() === \"opus\");\n    const opusDtx = (_b2 = (_a2 = codecCapabilities.find(\n      (f) => mimeTypeToCodec(f.mimeType).toLowerCase() === \"opus\"\n    )) == null ? void 0 : _a2.parameters) == null ? void 0 : _b2.usedtx;\n    if (opus && opusDtx !== false && fmtp.payload === opus.payload && !fmtp.config.includes(\"usedtx\")) {\n      if (fmtp.config.length > 0) {\n        fmtp.config += \";usedtx=1\";\n      } else {\n        fmtp.config = \"usedtx=1\";\n      }\n    }\n  }\n  media.payloads = sorted.map((rtp) => rtp.payload.toString()).join(\" \");\n}\nvar mimeTypeToCodec = (mimeType) => mimeType.split(\"/\")[1];\nvar mimeTypeToContentType = (mimeType) => mimeType.split(\"/\")[0];\n\n// ../core/src/plugin/internal/person/connection/index.ts\nvar log33 = new Logger(\n  \"packages/core/src/plugin/internal/person/connection/index.ts\"\n);\nvar P2PConnection = class {\n  constructor(_iceManager, _signaling, _context, channelId, localPerson, remoteMember) {\n    this._iceManager = _iceManager;\n    this._signaling = _signaling;\n    this._context = _context;\n    this.channelId = channelId;\n    this.localPerson = localPerson;\n    this.remoteMember = remoteMember;\n    this.id = v4_default4();\n    this.type = \"p2p\";\n    this.onDisconnect = new Event();\n    this.onClose = new Event();\n    this.closed = false;\n    this.disconnected = false;\n    this._log = log33.createBlock({\n      id: this.id,\n      localPersonId: this.localPerson.id\n    });\n    this._pubsubQueue = new PromiseQueue();\n    this.sender = new Sender(\n      this._context,\n      this._iceManager,\n      this._signaling,\n      this.localPerson,\n      this.remoteMember\n    );\n    this.receiver = new Receiver(\n      this._context,\n      this._iceManager,\n      this._signaling,\n      this.localPerson,\n      this.remoteMember\n    );\n    this.sender.onDisconnect.once(() => {\n      this.disconnected = true;\n      this.onDisconnect.emit();\n    });\n    this.receiver.onDisconnect.once(() => {\n      this.disconnected = true;\n      this.onDisconnect.emit();\n    });\n  }\n  startPublishing(publication) {\n    return __async(this, null, function* () {\n      yield this._pubsubQueue.push(() => __async(this, null, function* () {\n        this._log.debug(\"startPublishing\", { publication });\n        yield this.sender.add(publication);\n      }));\n    });\n  }\n  stopPublishing(publication) {\n    return __async(this, null, function* () {\n      yield this._pubsubQueue.push(() => __async(this, null, function* () {\n        this._log.debug(\"<stopPublishing> start\", { publication });\n        this.sender.remove(publication.id).then(() => {\n          this._log.debug(\"<stopPublishing> removed\", { publication });\n        });\n        this._closeIfNeeded();\n        this._log.debug(\"<stopPublishing> end\", { publication });\n      }));\n    });\n  }\n  startSubscribing(subscription) {\n    return __async(this, null, function* () {\n      yield this._pubsubQueue.push(() => __async(this, null, function* () {\n        this._log.debug(\"startSubscribing\", { subscription });\n        this.receiver.add(subscription);\n        const publicationId = subscription.publication.id;\n        let stream = this.receiver.streams[publicationId];\n        if (!stream) {\n          yield this.receiver.onStreamAdded.watch(\n            (res) => res.publicationId === publicationId,\n            this._context.config.rtcConfig.timeout\n          ).catch(() => {\n            throw createError({\n              operationName: \"P2PConnection.startSubscribing\",\n              info: __spreadProps(__spreadValues({}, errors.timeout), { detail: \"onStreamAdded\" }),\n              path: log33.prefix,\n              context: this._context,\n              channel: this.localPerson.channel,\n              payload: { subscription }\n            });\n          });\n          stream = this.receiver.streams[publicationId];\n        }\n        subscription.codec = stream.codec;\n        subscription._setStream(stream);\n      }));\n    });\n  }\n  stopSubscribing(subscription) {\n    return __async(this, null, function* () {\n      yield this._pubsubQueue.push(() => __async(this, null, function* () {\n        this._log.debug(\"stopSubscribing\", { subscription });\n        this.receiver.remove(subscription.id);\n        this._closeIfNeeded();\n      }));\n    });\n  }\n  _closeIfNeeded() {\n    if (this.sender.hasMedia || this.receiver.hasMedia)\n      return;\n    this.close();\n  }\n  getStats(content) {\n    return __async(this, null, function* () {\n      const stream = content.stream;\n      if (!stream) {\n        throw createError({\n          operationName: \"P2PConnection.getStats\",\n          info: __spreadProps(__spreadValues({}, errors.invalidArgumentValue), {\n            detail: \"Subscription or Publication must has stream\"\n          }),\n          path: log33.prefix,\n          context: this._context,\n          channel: this.localPerson.channel\n        });\n      }\n      if (stream.side === \"local\") {\n        if (stream.contentType === \"data\") {\n          return this.sender.pc.getStats();\n        }\n        return this.sender.pc.getStats(stream.track);\n      } else {\n        if (stream.contentType === \"data\") {\n          return this.receiver.pc.getStats();\n        }\n        return this.receiver.pc.getStats(stream.track);\n      }\n    });\n  }\n  close() {\n    if (this.closed) {\n      return;\n    }\n    this.closed = true;\n    this._log.debug(\"closed\", { endpointId: this.remoteMember.id });\n    this.sender.close();\n    this.receiver.close();\n    this.onClose.emit();\n  }\n};\n\n// ../core/src/plugin/internal/person/member.ts\nvar log34 = new Logger(\"packages/core/src/plugin/internal/person/member.ts\");\nvar RemotePersonImpl = class extends MemberImpl {\n  constructor(args) {\n    super(args);\n    this.args = args;\n    this.type = \"person\";\n    this.subtype = \"person\";\n    this.side = \"remote\";\n    this._connections = {};\n    this._context = this.args.channel._context;\n    this._disposer = new EventDisposer();\n    this.onPublicationSubscribed = this._events.make();\n    this.onPublicationUnsubscribed = this._events.make();\n    this.onPublicationListChanged = this._events.make();\n    this.onSubscriptionListChanged = this._events.make();\n    this.subscribe = (publicationId) => new Promise((r2, f) => {\n      let failed = false;\n      this.channel._subscribe(this.id, publicationId).catch((e2) => {\n        failed = true;\n        f(e2);\n      });\n      this.onPublicationSubscribed.watch(\n        ({ subscription }) => subscription.publication.id === publicationId,\n        this._context.config.rtcApi.timeout\n      ).then(({ subscription }) => {\n        r2({ subscription });\n      }).catch(() => {\n        if (!failed) {\n          f(\n            createError({\n              operationName: \"RemotePersonImpl.subscribe\",\n              info: __spreadProps(__spreadValues({}, errors.timeout), {\n                detail: \"onPublicationSubscribed\"\n              }),\n              path: log34.prefix,\n              context: this._context,\n              channel: this.channel\n            })\n          );\n        }\n      });\n    });\n    this.plugin = args.plugin;\n    this.channel.onPublicationUnsubscribed.add(({ subscription }) => {\n      if (subscription.subscriber.id === this.id) {\n        this.onPublicationUnsubscribed.emit({ subscription });\n        this.onSubscriptionListChanged.emit();\n      }\n    }).disposer(this._disposer);\n    this.channel.onPublicationSubscribed.add(({ subscription }) => {\n      if (subscription.subscriber.id === this.id) {\n        this.onPublicationSubscribed.emit({ subscription });\n        this.onSubscriptionListChanged.emit();\n      }\n    }).disposer(this._disposer);\n    this.channel.onStreamPublished.add(({ publication }) => {\n      if (publication.publisher.id === this.id) {\n        this.onPublicationListChanged.emit();\n      }\n    }).disposer(this._disposer);\n    this.channel.onStreamUnpublished.add(({ publication }) => {\n      if (publication.publisher.id === this.id) {\n        this.onPublicationListChanged.emit();\n      }\n    }).disposer(this._disposer);\n    this.onLeft.once(() => {\n      log34.debug(\"RemotePerson left: \", this.toJSON());\n      Object.values(this._connections).forEach((connection) => {\n        connection.close();\n      });\n      this._connections = {};\n    });\n  }\n  _getConnection(localPersonId) {\n    return this._connections[localPersonId];\n  }\n  _getOrCreateConnection(localPerson) {\n    var _a2;\n    const connection = (_a2 = this._getConnection(localPerson.id)) != null ? _a2 : this._createConnection(this.channel, localPerson, this);\n    return connection;\n  }\n  _createConnection(channel, localPerson, endpointMember) {\n    if (localPerson.side !== \"local\") {\n      throw createError({\n        operationName: \"RemotePersonImpl._createConnection\",\n        info: __spreadProps(__spreadValues({}, errors.invalidArgumentValue), {\n          detail: \"wrong localPerson type\"\n        }),\n        path: log34.prefix,\n        context: this._context,\n        channel: this.channel\n      });\n    }\n    if (!localPerson._signaling) {\n      throw createError({\n        operationName: \"RemotePersonImpl._createConnection\",\n        info: __spreadProps(__spreadValues({}, errors.missingProperty), {\n          detail: \"signalingSession not exist\"\n        }),\n        path: log34.prefix,\n        context: this._context,\n        channel: this.channel\n      });\n    }\n    const connection = new P2PConnection(\n      localPerson.iceManager,\n      localPerson._signaling,\n      this._context,\n      channel.id,\n      localPerson,\n      endpointMember\n    );\n    this.plugin._messageBuffers[localPerson.id].resolveMessagingBuffer(\n      endpointMember\n    );\n    connection.onClose.once(() => {\n      log34.debug(\"connection closed\", this.toJSON(), {\n        connectionId: connection.id\n      });\n      delete this._connections[localPerson.id];\n    });\n    this._connections[localPerson.id] = connection;\n    return connection;\n  }\n  unsubscribe(subscriptionId) {\n    return __async(this, null, function* () {\n      yield this.channel._unsubscribe(subscriptionId);\n    });\n  }\n  _dispose() {\n    this._disposer.dispose();\n  }\n};\n\n// ../core/src/plugin/internal/person/plugin.ts\nvar PersonPlugin = class extends SkyWayPlugin {\n  constructor() {\n    super(...arguments);\n    this.subtype = \"person\";\n    this._messageBuffers = {};\n    this._whenCreateLocalPerson = (person) => __async(this, null, function* () {\n      if (person._signaling) {\n        this._messageBuffers[person.id] = new MessageBuffer(person._signaling);\n      }\n    });\n    this._whenDisposeLocalPerson = (person) => __async(this, null, function* () {\n      const messageBuffer = this._messageBuffers[person.id];\n      if (messageBuffer) {\n        messageBuffer.close();\n        delete this._messageBuffers[person.id];\n      }\n    });\n    this._createRemoteMember = (channel, memberDto) => {\n      const person = new RemotePersonImpl(__spreadProps(__spreadValues({}, this._context), {\n        context: this._context,\n        channel,\n        metadata: memberDto.metadata,\n        id: memberDto.id,\n        name: memberDto.name,\n        plugin: this\n      }));\n      return person;\n    };\n  }\n};\nvar registerPersonPlugin = (context) => {\n  const plugin = new PersonPlugin();\n  context.registerPlugin(plugin);\n  return plugin;\n};\n\n// ../core/src/plugin/internal/unknown/plugin.ts\ninit_process();\nvar UnknownPlugin = class extends SkyWayPlugin {\n  constructor() {\n    super(...arguments);\n    this.subtype = \"unknown\";\n    this._createRemoteMember = (channel, memberDto) => {\n      const person = new UnknownMemberImpl(__spreadProps(__spreadValues({}, this._context), {\n        context: this._context,\n        channel,\n        metadata: memberDto.metadata,\n        id: memberDto.id,\n        name: memberDto.name,\n        plugin: this,\n        subtype: memberDto.subtype\n      }));\n      return person;\n    };\n  }\n};\n\n// ../core/src/version.ts\ninit_process();\nvar PACKAGE_VERSION2 = \"1.4.0\";\n\n// ../core/src/context.ts\nvar log35 = new Logger(\"packages/core/src/context.ts\");\nvar _SkyWayContext = class {\n  constructor(api, config, authToken, info) {\n    this.config = config;\n    this.authToken = authToken;\n    this.info = info;\n    this.disposed = false;\n    this.plugins = [];\n    this._unknownPlugin = new UnknownPlugin();\n    this._reminderSec = this.config.token.updateReminderSec;\n    this._events = new Events();\n    this.onTokenUpdateReminder = this._events.make();\n    this.onTokenExpired = this._events.make();\n    this.onFatalError = this._events.make();\n    this._onTokenUpdated = this._events.make();\n    this._onDisposed = this._events.make();\n    this._authTokenString = authToken.tokenString;\n    this.appId = this.authToken.scope.app.id;\n    registerPersonPlugin(this);\n    this._api = api;\n    this._api.onFatalError.once((error) => {\n      log35.error(\"onFatalError\", { appId: this.appId, error });\n      this.onFatalError.emit(\n        createError({\n          operationName: \"SkyWayContext._api.onFatalError\",\n          context: this,\n          info: errors.rtcApiFatalError,\n          error,\n          path: log35.prefix\n        })\n      );\n      this.dispose();\n    });\n  }\n  static Create(_0) {\n    return __async(this, arguments, function* (authTokenString, configOptions = {}) {\n      const config = new ContextConfig(configOptions);\n      Logger.level = config.log.level;\n      Logger.format = config.log.format;\n      const token = SkyWayAuthToken.Decode(authTokenString);\n      const { osName, osVersion, browserName, browserVersion } = getRuntimeInfo();\n      const runtime = {\n        sdkName: \"core\",\n        sdkVersion: this.version,\n        osName,\n        osVersion,\n        browserName,\n        browserVersion\n      };\n      const endpoint = {\n        rapi: config.rtcApi.domain,\n        signaling: config.signalingService.domain,\n        ice: config.iceParamServer.domain\n      };\n      log35.info(\"core sdk spawned\", {\n        operationName: \"SkyWayContext.Create\",\n        runtime,\n        endpoint,\n        config,\n        token\n      });\n      try {\n        const api = yield RtcApiClient.Create({\n          appId: token.scope.app.id,\n          token: authTokenString,\n          log: config.log,\n          rtcApi: config.rtcApi\n        });\n        const context = new _SkyWayContext(api, config, token, {\n          endpoint,\n          runtime\n        });\n        yield context._setTokenExpireTimer();\n        return context;\n      } catch (error) {\n        throw createError({\n          operationName: \"SkyWayContext.Create\",\n          info: errors.connectRtcApiFailed,\n          error,\n          path: log35.prefix\n        });\n      }\n    });\n  }\n  get authTokenString() {\n    return this._authTokenString;\n  }\n  _setTokenExpireTimer() {\n    return __async(this, null, function* () {\n      const now = yield this._api.getServerUnixtimeInSec();\n      const expiresInSec = this.authToken.exp - now;\n      if (expiresInSec < 0) {\n        throw createError({\n          operationName: \"SkyWayContext._setTokenExpireTimer\",\n          context: this,\n          info: errors.invalidExpireTokenValue,\n          path: log35.prefix,\n          payload: { exp: this.authToken.exp, now }\n        });\n      }\n      if (this.tokenUpdateReminderTimer) {\n        clearTimeout(this.tokenUpdateReminderTimer);\n      }\n      const tokenExpireReminderTimeSec = expiresInSec - this._reminderSec;\n      if (tokenExpireReminderTimeSec < 0) {\n        throw createError({\n          operationName: \"SkyWayContext._setTokenExpireTimer\",\n          context: this,\n          info: errors.invalidRemindExpireTokenValue,\n          path: log35.prefix,\n          payload: { expiresInSec, reminderSec: this._reminderSec }\n        });\n      }\n      log35.debug(\"_setTokenExpireTimer\", {\n        expiresInSec,\n        tokenExpireReminderTimeSec\n      });\n      this.tokenUpdateReminderTimer = setTimeout(() => {\n        log35.debug(\"tokenUpdateReminder\", { appid: this.appId });\n        this.onTokenUpdateReminder.emit();\n      }, tokenExpireReminderTimeSec * 1e3);\n      if (this.tokenExpiredTimer) {\n        clearTimeout(this.tokenExpiredTimer);\n      }\n      this.tokenExpiredTimer = setTimeout(() => {\n        log35.debug(\"tokenExpired\", { appid: this.appId });\n        this.onTokenExpired.emit();\n      }, expiresInSec * 1e3);\n    });\n  }\n  updateAuthToken(token) {\n    return __async(this, null, function* () {\n      const newToken = SkyWayAuthToken.Decode(token);\n      log35.info(\n        { operationName: \"SkyWayContext.updateAuthToken\" },\n        { oldToken: this.authToken, newToken }\n      );\n      if (newToken.scope.app.id !== this.appId) {\n        throw createError({\n          operationName: \"SkyWayContext.updateAuthToken\",\n          context: this,\n          info: errors.invalidTokenAppId,\n          path: log35.prefix,\n          payload: { invalid: this.authToken.scope.app.id, expect: this.appId }\n        });\n      }\n      this._authTokenString = token;\n      this.authToken = newToken;\n      this._onTokenUpdated.emit(token);\n      yield this._setTokenExpireTimer();\n      yield this._api.updateAuthToken(token);\n    });\n  }\n  registerPlugin(plugin) {\n    if (this.plugins.find((p) => p.subtype === plugin.subtype)) {\n      return;\n    }\n    plugin._attachContext(this);\n    this.plugins.push(plugin);\n  }\n  _createRemoteMember(channel, memberDto) {\n    const exist = channel._getMember(memberDto.id);\n    if (exist) {\n      return exist;\n    }\n    log35.debug(\"createRemoteMember\", { memberDto });\n    memberDto.type = memberDto.type.toLowerCase();\n    memberDto.subtype = memberDto.subtype.toLowerCase();\n    let plugin = this.plugins.find((p) => p.subtype === memberDto.subtype);\n    if (!plugin) {\n      plugin = this._unknownPlugin;\n      log35.error(\n        createError({\n          operationName: \"SkyWayContext._createRemoteMember\",\n          context: this,\n          info: errors.unknownRemoteMemberType,\n          path: log35.prefix,\n          payload: { memberDto }\n        })\n      );\n    }\n    const member = plugin._createRemoteMember(channel, memberDto);\n    return member;\n  }\n  dispose() {\n    if (this.disposed) {\n      return;\n    }\n    this.disposed = true;\n    log35.debug(\"disposed\", { appid: this.appId });\n    clearTimeout(this.tokenUpdateReminderTimer);\n    this._onDisposed.emit();\n    this._events.dispose();\n    this._api.close();\n  }\n};\nvar SkyWayContext = _SkyWayContext;\nSkyWayContext.version = PACKAGE_VERSION2;\n\n// ../core/src/media/index.ts\ninit_process();\n\n// ../core/src/media/factory.ts\ninit_process();\nvar log36 = new Logger(\"packages/core/src/media/factory.ts\");\nvar StreamFactory = class {\n  constructor() {\n    this.onDeviceChange = new Event();\n    this._devices = [];\n    if (!(navigator == null ? void 0 : navigator.mediaDevices)) {\n      throw createError({\n        operationName: \"StreamFactory.constructor\",\n        info: errors.mediaDevicesNotFound,\n        path: log36.prefix\n      });\n    }\n    navigator.mediaDevices.addEventListener(\"devicechange\", () => __async(this, null, function* () {\n      const devices = yield this._enumerateDevicesArray();\n      const removed = [];\n      this._devices.forEach((prev) => {\n        if (!devices.map((d) => d.id).includes(prev.id)) {\n          removed.push(prev);\n        }\n      });\n      const added = [];\n      devices.map((d) => d.id).forEach((next) => {\n        if (!this._devices.map((d) => d.id).includes(next)) {\n          added.push(devices.find((d) => d.id === next));\n        }\n      });\n      log36.debug(\"device changed\", { added, removed });\n      removed.forEach((device) => {\n        this.onDeviceChange.emit({ state: \"removed\", device });\n      });\n      added.forEach((device) => {\n        this.onDeviceChange.emit({ state: \"added\", device });\n      });\n      this._devices = devices;\n    }));\n  }\n  _enumerateDevicesArray() {\n    return __async(this, null, function* () {\n      const devices = yield navigator.mediaDevices.enumerateDevices();\n      return devices.map((d) => new MediaDevice(d)).filter((d) => d.id.length > 0);\n    });\n  }\n  _enumerateDevicesWithAuth() {\n    return __async(this, arguments, function* ({ video, audio } = {\n      audio: true,\n      video: true\n    }) {\n      let tracks = [];\n      if (video || audio) {\n        const stream = yield navigator.mediaDevices.getUserMedia({\n          video,\n          audio\n        });\n        tracks = stream.getTracks();\n      }\n      this._devices = yield this._enumerateDevicesArray();\n      tracks.forEach((t2) => t2.stop());\n      return this._devices;\n    });\n  }\n  enumerateDevices() {\n    return __async(this, null, function* () {\n      const devices = yield this._enumerateDevicesWithAuth();\n      return devices;\n    });\n  }\n  enumerateInputVideoDevices() {\n    return __async(this, null, function* () {\n      const devices = yield this._enumerateDevicesWithAuth({ video: true });\n      return devices.filter((d) => d.kind === \"videoinput\");\n    });\n  }\n  enumerateInputAudioDevices() {\n    return __async(this, null, function* () {\n      const devices = yield this._enumerateDevicesWithAuth({ audio: true });\n      return devices.filter((d) => d.kind === \"audioinput\");\n    });\n  }\n  enumerateOutputAudioDevices() {\n    return __async(this, null, function* () {\n      const devices = yield this._enumerateDevicesWithAuth({ audio: true });\n      return devices.filter((d) => d.kind === \"audiooutput\");\n    });\n  }\n  createCameraVideoStream() {\n    return __async(this, arguments, function* (options = {}) {\n      var _a2;\n      options.stopTrackWhenDisabled = (_a2 = options.stopTrackWhenDisabled) != null ? _a2 : true;\n      const [track] = (yield navigator.mediaDevices.getUserMedia({ video: options })).getTracks();\n      const stream = new LocalVideoStream(track, options);\n      stream._setLabel(\"camera\");\n      return stream;\n    });\n  }\n  createMicrophoneAudioStream() {\n    return __async(this, arguments, function* (options = {}) {\n      var _a2;\n      options.stopTrackWhenDisabled = (_a2 = options.stopTrackWhenDisabled) != null ? _a2 : true;\n      const [track] = (yield navigator.mediaDevices.getUserMedia({ audio: options })).getTracks();\n      const stream = new LocalAudioStream(track, options);\n      stream._setLabel(\"microphone\");\n      return stream;\n    });\n  }\n  createDisplayStreams() {\n    return __async(this, arguments, function* (options = {}) {\n      var _a2, _b2, _c;\n      const videoOption = (_a2 = options.video) != null ? _a2 : {};\n      (_b2 = videoOption.stopTrackWhenDisabled) != null ? _b2 : videoOption.stopTrackWhenDisabled = true;\n      let audioOption = options.audio;\n      if (audioOption) {\n        audioOption = typeof audioOption === \"boolean\" ? {} : audioOption;\n        (_c = audioOption.stopTrackWhenDisabled) != null ? _c : audioOption.stopTrackWhenDisabled = true;\n      }\n      options = { audio: audioOption, video: videoOption };\n      const stream = yield navigator.mediaDevices.getDisplayMedia(options);\n      const [video] = stream.getVideoTracks();\n      const [audio] = stream.getAudioTracks();\n      if (options.audio && !audio) {\n        log36.warn(\n          createWarnPayload({\n            operationName: \"StreamFactory.createDisplayStreams\",\n            detail: \"This client does not support device audio capture\"\n          })\n        );\n      }\n      const videoStream = new LocalVideoStream(video, __spreadProps(__spreadValues({}, videoOption), {\n        isDisplayMedia: true\n      }));\n      videoStream._setLabel(\"displayVideo\");\n      const audioStream = audio ? new LocalAudioStream(audio, __spreadProps(__spreadValues({}, audioOption), {\n        isDisplayMedia: true\n      })) : void 0;\n      if (audioStream) {\n        audioStream._setLabel(\"displayAudio\");\n      }\n      return {\n        video: videoStream,\n        audio: audioStream\n      };\n    });\n  }\n  createDataStream() {\n    return __async(this, arguments, function* (options = {}) {\n      return new LocalDataStream(options);\n    });\n  }\n  createMicrophoneAudioAndCameraStream() {\n    return __async(this, arguments, function* ({\n      audio,\n      video\n    } = {}) {\n      var _a2, _b2;\n      const stream = yield navigator.mediaDevices.getUserMedia({\n        audio: audio != null ? audio : true,\n        video: video != null ? video : true\n      });\n      const [audioTrack] = stream.getAudioTracks();\n      const [videoTrack] = stream.getVideoTracks();\n      audio = audio != null ? audio : {};\n      audio.stopTrackWhenDisabled = (_a2 = audio.stopTrackWhenDisabled) != null ? _a2 : true;\n      const audioStream = new LocalAudioStream(audioTrack, audio);\n      audioStream._setLabel(\"microphone\");\n      video = video != null ? video : {};\n      video.stopTrackWhenDisabled = (_b2 = video.stopTrackWhenDisabled) != null ? _b2 : true;\n      const videoStream = new LocalVideoStream(videoTrack, video);\n      videoStream._setLabel(\"camera\");\n      return {\n        audio: audioStream,\n        video: videoStream\n      };\n    });\n  }\n};\nvar SkyWayStreamFactory = new StreamFactory();\nvar MediaDevice = class {\n  constructor(info) {\n    this.id = info.deviceId;\n    this.label = info.label;\n    this.kind = info.kind;\n  }\n};\n\n// ../core/src/media/stream/index.ts\ninit_process();\n\n// ../core/src/media/stream/remote/index.ts\ninit_process();\n\n// ../core/src/member/person.ts\ninit_process();\n\n// ../core/src/plugin/interface/connection.ts\ninit_process();\n\n// src/errors.ts\nvar roomErrors = {\n  invalidParameter: { name: \"invalidParameter\", detail: \"\", solution: \"\" },\n  timeout: { name: \"timeout\", detail: \"\", solution: \"\" },\n  internal: { name: \"internal\", detail: \"\", solution: \"\" },\n  notImplemented: {\n    name: \"notImplemented\",\n    detail: \"\\u5BFE\\u5FDC\\u3057\\u3066\\u3044\\u306A\\u3044RoomType\\u3067\\u3059\",\n    solution: \"\\u6B63\\u3057\\u3044RoomType\\u3092\\u6307\\u5B9A\\u3057\\u3066\\u304F\\u3060\\u3055\\u3044\"\n  },\n  roomNotOpened: {\n    name: \"roomNotOpened\",\n    detail: \"Room\\u304COpen\\u3055\\u308C\\u3066\\u3044\\u307E\\u305B\\u3093\",\n    solution: \"Room\\u306E\\u72B6\\u614B\\u3092\\u78BA\\u304B\\u3081\\u3066\\u304F\\u3060\\u3055\\u3044\"\n  },\n  subscribeOtherMemberType: {\n    name: \"subscribeOtherMemberType\",\n    detail: \"RemoteMember\\u306BSubscribe/Unsubscribe\\u3055\\u305B\\u308B\\u5834\\u5408\\u3001\\u5BFE\\u8C61\\u306EMember\\u306EType\\u306FPerson\\u3067\\u3042\\u308B\\u5FC5\\u8981\\u304C\\u3042\\u308A\\u307E\\u3059\",\n    solution: \"\\u5BFE\\u8C61\\u306ERemoteMember\\u304C\\u6B63\\u3057\\u3044\\u304B\\u78BA\\u8A8D\\u3057\\u3066\\u304F\\u3060\\u3055\\u3044\"\n  },\n  sfuRoomNotSupportDataStream: {\n    name: \"sfuRoomNotSupportDataStream\",\n    detail: \"SFURoom\\u3067DataStream\\u3092\\u4F7F\\u3046\\u3053\\u3068\\u306F\\u51FA\\u6765\\u307E\\u305B\\u3093\",\n    solution: \"\\u3042\\u308A\\u307E\\u305B\\u3093\"\n  },\n  publicationNotHasOrigin: {\n    name: \"publicationNotHasOrigin\",\n    detail: \"SfuRoom\\u3067\\u64CD\\u4F5C\\u3059\\u308BPublication\\u306FOrigin\\u3092\\u3082\\u3064\\u5FC5\\u8981\\u304C\\u3042\\u308A\\u307E\\u3059\",\n    solution: \"SfuRoom\\u3068P2PRoom\\u3092\\u540C\\u4E00\\u306EID\\u3067\\u6DF7\\u5728\\u3055\\u305B\\u3066\\u3044\\u306A\\u3044\\u304B\\u78BA\\u304B\\u3081\\u3066\\u304F\\u3060\\u3055\\u3044\"\n  },\n  notFound: {\n    name: \"notFound\",\n    detail: \"\\u53C2\\u7167\\u3057\\u3088\\u3046\\u3068\\u3057\\u3066\\u3044\\u305F\\u3082\\u306E\\u304C\\u898B\\u3064\\u304B\\u308A\\u307E\\u305B\\u3093\",\n    solution: \"\\u53C2\\u7167\\u3057\\u3088\\u3046\\u3068\\u3057\\u305F\\u3082\\u306E\\u304C\\u5B58\\u5728\\u3059\\u308B\\u304B\\u78BA\\u304B\\u3081\\u3066\\u304F\\u3060\\u3055\\u3044\"\n  }\n};\nvar errors4 = __spreadValues(__spreadValues({}, errors), roomErrors);\n\n// src/member/index.ts\ninit_process();\nvar RoomMemberImpl = class {\n  constructor(member, room) {\n    this.member = member;\n    this.room = room;\n    this.onLeft = new Event();\n    const { removeListener } = room.onMemberLeft.add((e2) => {\n      if (e2.member.id === this.member.id) {\n        removeListener();\n        this.onLeft.emit();\n      }\n    });\n    this.onMetadataUpdated = member.onMetadataUpdated;\n  }\n  get id() {\n    return this.member.id;\n  }\n  get name() {\n    return this.member.name;\n  }\n  get roomId() {\n    return this.room.id;\n  }\n  get roomName() {\n    return this.room.name;\n  }\n  get roomType() {\n    return this.room.type;\n  }\n  get state() {\n    return this.member.state;\n  }\n  get metadata() {\n    return this.member.metadata;\n  }\n  get _member() {\n    return this.member;\n  }\n  get publications() {\n    return this.room.publications.filter((p) => p.publisher.id === this.id);\n  }\n  get subscriptions() {\n    return this.member.subscriptions.map(\n      (s) => this.room._getSubscription(s.id)\n    );\n  }\n  updateMetadata(metadata) {\n    return this.member.updateMetadata(metadata);\n  }\n  leave() {\n    return this.member.leave();\n  }\n  toJSON() {\n    return { id: this.id, name: this.name, metadata: this.metadata };\n  }\n};\n\n// src/member/local/base.ts\ninit_process();\nvar LocalRoomMemberImpl = class extends RoomMemberImpl {\n  constructor(member, room) {\n    super(member, room);\n    this.side = \"local\";\n    this._local = this._member;\n    this.onStreamPublished = new Event();\n    this.onStreamUnpublished = new Event();\n    this.onPublicationListChanged = new Event();\n    this.onPublicationSubscribed = new Event();\n    this.onPublicationUnsubscribed = new Event();\n    this.onSubscriptionListChanged = new Event();\n    this.onFatalError = new Event();\n    this._context = this.room._context;\n    this._local.onPublicationSubscribed.add((e2) => __async(this, null, function* () {\n      const roomSubscription = room._addSubscription(\n        e2.subscription\n      );\n      this.onPublicationSubscribed.emit({\n        subscription: roomSubscription,\n        stream: e2.stream\n      });\n    }));\n    this._local.onFatalError.pipe(this.onFatalError);\n    this._listenRoomEvent();\n    this.onStreamPublished.add(() => this.onPublicationListChanged.emit());\n    this.onStreamUnpublished.add(() => this.onPublicationListChanged.emit());\n    this.onPublicationSubscribed.add(\n      () => this.onSubscriptionListChanged.emit()\n    );\n    this.onPublicationUnsubscribed.add(\n      () => this.onSubscriptionListChanged.emit()\n    );\n  }\n  get subscriptions() {\n    return this.member.subscriptions.map((s) => this.room._getSubscription(s.id)).filter((s) => s.stream);\n  }\n  _listenRoomEvent() {\n    this.room.onPublicationUnsubscribed.add((e2) => {\n      if (e2.subscription.subscriber._member.id === this._local.id) {\n        this.onPublicationUnsubscribed.emit(e2);\n      }\n    });\n  }\n};\n\n// src/member/local/p2p.ts\ninit_process();\n\n// src/util.ts\ninit_process();\nfunction createError4({\n  operationName,\n  context,\n  info,\n  error,\n  path: path2,\n  payload,\n  room\n}) {\n  const errPayload = {\n    operationName,\n    payload\n  };\n  if (room) {\n    errPayload[\"appId\"] = room._channel.appId;\n    errPayload[\"roomId\"] = room.id;\n    if (room.localRoomMember) {\n      errPayload[\"memberId\"] = room.localRoomMember.id;\n    }\n  }\n  if (context) {\n    errPayload[\"info\"] = context.info;\n    errPayload[\"plugins\"] = context.plugins.map((p) => p.subtype);\n  }\n  return new SkyWayError({ error, info, payload: errPayload, path: path2 });\n}\n\n// src/member/local/p2p.ts\nvar log37 = new Logger(\"packages/room/src/member/local/p2p.ts\");\nvar LocalP2PRoomMemberImpl = class extends LocalRoomMemberImpl {\n  constructor(member, room) {\n    super(member, room);\n  }\n  publish(_0) {\n    return __async(this, arguments, function* (stream, options = {}) {\n      const publication = yield this._local.publish(stream, options);\n      const roomPublication = this.room._addPublication(publication);\n      this.onStreamPublished.emit({ publication: roomPublication });\n      return roomPublication;\n    });\n  }\n  unpublish(target) {\n    return __async(this, null, function* () {\n      const publicationId = typeof target === \"string\" ? target : target.id;\n      this._local.unpublish(publicationId);\n      const { publication } = yield this.room.onStreamUnpublished.watch(\n        (e2) => e2.publication.id === publicationId,\n        this._context.config.rtcApi.timeout\n      ).catch((error) => {\n        throw createError4({\n          operationName: \"LocalP2PRoomMemberImpl.unpublish\",\n          context: this._context,\n          room: this.room,\n          info: __spreadProps(__spreadValues({}, errors4.timeout), { detail: \"onStreamUnpublished\" }),\n          path: log37.prefix,\n          error\n        });\n      });\n      this.onStreamUnpublished.emit({ publication });\n    });\n  }\n  subscribe(target) {\n    return __async(this, null, function* () {\n      const publicationId = typeof target === \"string\" ? target : target.id;\n      const { subscription, stream } = yield this._local.subscribe(publicationId);\n      const roomSubscription = this.room._addSubscription(\n        subscription\n      );\n      return {\n        subscription: roomSubscription,\n        stream\n      };\n    });\n  }\n  unsubscribe(target) {\n    return __async(this, null, function* () {\n      const subscriptionId = typeof target === \"string\" ? target : target.id;\n      this._local.unsubscribe(subscriptionId);\n      yield this.room.onPublicationUnsubscribed.watch(\n        (e2) => e2.subscription.id === subscriptionId,\n        this._context.config.rtcApi.timeout\n      ).catch((error) => {\n        throw createError4({\n          operationName: \"LocalP2PRoomMemberImpl.unsubscribe\",\n          context: this._context,\n          room: this.room,\n          info: __spreadProps(__spreadValues({}, errors4.timeout), { detail: \"onPublicationUnsubscribed\" }),\n          path: log37.prefix,\n          error\n        });\n      });\n    });\n  }\n  _updateRoom(room) {\n    log37.debug(\"_updateRoom\", { memberId: this.id });\n    this.room = room;\n    this._listenRoomEvent();\n  }\n};\n\n// src/member/local/sfu.ts\ninit_process();\n\n// ../sfu-bot/src/index.ts\ninit_process();\n\n// ../sfu-bot/src/connection/index.ts\ninit_process();\n\n// ../sfu-bot/src/errors.ts\ninit_process();\nvar errors5 = {\n  invalidParameter: { name: \"invalidParameter\", detail: \"\", solution: \"\" },\n  timeout: { name: \"timeout\", detail: \"\", solution: \"\" },\n  internal: { name: \"internal\", detail: \"\", solution: \"\" },\n  sfuBotNotInChannel: {\n    name: \"sfuBotNotInChannel\",\n    detail: \"SfuBot\\u304CChannel\\u306B\\u5B58\\u5728\\u3057\\u307E\\u305B\\u3093\",\n    solution: \"\\u64CD\\u4F5C\\u3057\\u3088\\u3046\\u3068\\u3057\\u3066\\u3044\\u308BSfuBot\\u304C\\u6B63\\u3057\\u3044\\u304B\\u78BA\\u304B\\u3081\\u3066\\u304F\\u3060\\u3055\\u3044\"\n  },\n  maxSubscribersMustNotBeZero: {\n    name: \"maxSubscribersMustNotBeZero\",\n    detail: \"maxSubscribers\\u306F\\uFF11\\u4EE5\\u4E0A\\u3067\\u3042\\u308B\\u5FC5\\u8981\\u304C\\u3042\\u308A\\u307E\\u3059\",\n    solution: \"\\u6B63\\u3057\\u3044\\u5024\\u3092\\u5165\\u529B\\u3057\\u3066\\u304F\\u3060\\u3055\\u3044\"\n  },\n  remotePublisherId: {\n    name: \"remotePublisherId\",\n    detail: \"publisher\\u304Cremote\\u306EPublication\\u3092Forwarding\\u3059\\u308B\\u3053\\u3068\\u306F\\u3067\\u304D\\u307E\\u305B\\u3093\",\n    solution: \"Publication\\u304CLocal\\u3067Publish\\u3055\\u308C\\u305F\\u3082\\u306E\\u304B\\u78BA\\u304B\\u3081\\u3066\\u304F\\u3060\\u3055\\u3044\"\n  },\n  dataStreamNotSupported: {\n    name: \"dataStreamNotSupported\",\n    detail: \"dataStream\\u306FSFU\\u306B\\u5BFE\\u5FDC\\u3057\\u3066\\u3044\\u307E\\u305B\\u3093\",\n    solution: \"\\u3042\\u308A\\u307E\\u305B\\u3093\"\n  },\n  streamNotExistInPublication: {\n    name: \"streamNotExistInPublication\",\n    detail: \"Publication\\u306BStream\\u304C\\u3042\\u308A\\u307E\\u305B\\u3093\\u3002RemoteMember\\u306EPublication\\u3092Forwarding\\u51FA\\u6765\\u307E\\u305B\\u3093\",\n    solution: \"Publication\\u304CLocal\\u3067Publish\\u3055\\u308C\\u305F\\u3082\\u306E\\u304B\\u78BA\\u304B\\u3081\\u3066\\u304F\\u3060\\u3055\\u3044\"\n  },\n  invalidPreferredEncoding: {\n    name: \"invalidPreferredEncoding\",\n    detail: \"preferredEncoding\\u306E\\u5024\\u304C\\u4E0D\\u6B63\\u3067\\u3059\\u3002\\u30A8\\u30F3\\u30B3\\u30FC\\u30C9\\u8A2D\\u5B9A\\u5207\\u308A\\u66FF\\u3048\\u6A5F\\u80FD\\u304C\\u4F7F\\u3048\\u307E\\u305B\\u3093\",\n    solution: \"\\u6B63\\u3057\\u3044\\u6587\\u5B57\\u5217\\u3092\\u5165\\u529B\\u3057\\u3066\\u304F\\u3060\\u3055\\u3044\"\n  },\n  invalidEncodings: {\n    name: \"invalidEncodings\",\n    detail: \"\\u30A8\\u30F3\\u30B3\\u30FC\\u30C9\\u8A2D\\u5B9A\\u304C\\u8A2D\\u5B9A\\u3055\\u308C\\u3066\\u3044\\u307E\\u305B\\u3093\\u3002\\u30A8\\u30F3\\u30B3\\u30FC\\u30C9\\u8A2D\\u5B9A\\u5207\\u308A\\u66FF\\u3048\\u6A5F\\u80FD\\u304C\\u4F7F\\u3048\\u307E\\u305B\\u3093\",\n    solution: \"\\u30A8\\u30F3\\u30B3\\u30FC\\u30C9\\u8A2D\\u5B9A\\u5207\\u308A\\u66FF\\u3048\\u6A5F\\u80FD\\u3092\\u5229\\u7528\\u3059\\u308B\\u5834\\u5408\\u306F\\u30A8\\u30F3\\u30B3\\u30FC\\u30C9\\u8A2D\\u5B9A\\u3092\\u3057\\u305FPublication\\u3092Forwarding\\u3057\\u3066\\u304F\\u3060\\u3055\\u3044\"\n  },\n  receiverNotFound: {\n    name: \"receiverNotFound\",\n    detail: \"SFU\\u306FRemoteMember\\u306ESubscription\\u3092\\u64CD\\u4F5C\\u3067\\u304D\\u307E\\u305B\\u3093\",\n    solution: \"SFU\\u3067subscription\\u306E\\u64CD\\u4F5C\\u3092\\u3059\\u308B\\u969B\\u306B\\u306FLocalPerson\\u304CSubscribe\\u3057\\u3066\\u3044\\u308BSubscription\\u30A4\\u30F3\\u30B9\\u30BF\\u30F3\\u30B9\\u3092\\u5229\\u7528\\u3057\\u3066\\u304F\\u3060\\u3055\\u3044\"\n  },\n  consumerNotFound: {\n    name: \"consumerNotFound\",\n    detail: \"SFU\\u306FLocalPerson\\u304CUnsubscribe\\u3057\\u305FSubscription\\u3092\\u64CD\\u51FA\\u6765\\u307E\\u305B\\u3093\",\n    solution: \"\\u64CD\\u4F5C\\u5BFE\\u8C61\\u306ESubscription\\u304C\\u6B63\\u3057\\u3044\\u304B\\u78BA\\u304B\\u3081\\u3066\\u304F\\u3060\\u3055\\u3044\"\n  },\n  forwardingNotFound: {\n    name: \"forwardingNotFound\",\n    detail: \"\\u5B58\\u5728\\u3057\\u306A\\u3044Forwarding\\u3092\\u64CD\\u4F5C\\u3057\\u3088\\u3046\\u3068\\u3057\\u3066\\u3044\\u307E\\u3059\",\n    solution: \"\\u5BFE\\u8C61\\u306EForwarding\\u304C\\u6B63\\u3057\\u3044\\u304B\\u78BA\\u304B\\u3081\\u3066\\u304F\\u3060\\u3055\\u3044\"\n  },\n  netWorkError: {\n    name: \"netWorkError\",\n    detail: \"\\u901A\\u4FE1\\u74B0\\u5883\\u306B\\u554F\\u984C\\u304C\\u3042\\u308A\\u307E\\u3059\",\n    solution: \"\\u30CD\\u30C3\\u30C8\\u30EF\\u30FC\\u30AF\\u63A5\\u7D9A\\u72B6\\u6CC1\\u3092\\u78BA\\u8A8D\\u3057\\u3066\\u304F\\u3060\\u3055\\u3044\"\n  }\n};\n\n// ../sfu-bot/src/util.ts\ninit_process();\nfunction getLayerFromEncodings(id, encodings) {\n  let layer = 0;\n  for (; layer < encodings.length; layer++) {\n    const encoding = encodings[layer];\n    if (encoding.id === id) {\n      break;\n    }\n  }\n  return layer;\n}\nfunction createWarnPayload4({\n  channel,\n  detail,\n  operationName,\n  payload,\n  bot\n}) {\n  var _a2;\n  const warn = {\n    operationName,\n    payload,\n    detail\n  };\n  if (channel) {\n    warn[\"appId\"] = channel.appId;\n    warn[\"channelId\"] = channel.id;\n    if (channel.localPerson) {\n      warn[\"memberId\"] = channel.localPerson.id;\n    }\n  }\n  if (bot) {\n    warn[\"botId\"] = bot.id;\n    warn[\"appId\"] = bot.channel.appId;\n    warn[\"channelId\"] = bot.channel.id;\n    warn[\"memberId\"] = (_a2 = bot.channel.localPerson) == null ? void 0 : _a2.id;\n  }\n  return warn;\n}\n\n// ../sfu-bot/src/connection/receiver.ts\ninit_process();\nvar log38 = new Logger(\"packages/sfu-bot/src/connection/receiver.ts\");\nvar Receiver2 = class {\n  constructor(subscription, _api, _transportRepository, _localPerson, _bot, _iceManager, _context) {\n    this.subscription = subscription;\n    this._api = _api;\n    this._transportRepository = _transportRepository;\n    this._localPerson = _localPerson;\n    this._bot = _bot;\n    this._iceManager = _iceManager;\n    this._context = _context;\n    this._disposer = new EventDisposer();\n  }\n  toJSON() {\n    return {\n      transport: this.transport,\n      subscription: this.subscription\n    };\n  }\n  consume() {\n    return __async(this, null, function* () {\n      var _a2, _b2;\n      let rtpCapabilities = this._transportRepository.rtpCapabilities;\n      if (!rtpCapabilities) {\n        log38.debug(\"[start] getCapabilities\");\n        rtpCapabilities = yield this._api.getRtpCapabilities({\n          botId: this._bot.id,\n          forwardingId: this.subscription.publication.id,\n          originPublicationId: this.subscription.publication.origin.id\n        });\n        log38.debug(\"[end] getCapabilities\");\n        yield this._transportRepository.loadDevice(rtpCapabilities).catch((e2) => {\n          throw createError({\n            operationName: \"Receiver.consume\",\n            context: this._context,\n            channel: this._localPerson.channel,\n            info: __spreadProps(__spreadValues({}, errors5.internal), { detail: \"sfu loadDevice failed\" }),\n            path: log38.prefix,\n            error: e2\n          });\n        });\n      }\n      const spatialLayer = this.subscription.preferredEncoding ? getLayerFromEncodings(\n        this.subscription.preferredEncoding,\n        (_b2 = (_a2 = this.subscription.publication.origin) == null ? void 0 : _a2.encodings) != null ? _b2 : []\n      ) : void 0;\n      log38.debug(\"[start] createConsumer\", { subscription: this.subscription });\n      const { consumerOptions, transportOptions, transportId, producerId } = yield this._api.createConsumer({\n        botId: this._bot.id,\n        forwardingId: this.subscription.publication.id,\n        rtpCapabilities,\n        subscriptionId: this.subscription.id,\n        subscriberId: this.subscription.subscriber.id,\n        spatialLayer,\n        originPublicationId: this.subscription.publication.origin.id\n      });\n      if (transportOptions) {\n        this._transportRepository.createTransport(\n          this._localPerson.id,\n          this._bot,\n          transportOptions,\n          \"recv\",\n          this._iceManager\n        );\n      }\n      this.transport = this._transportRepository.getTransport(\n        this._localPerson.id,\n        transportId\n      );\n      if (!this.transport) {\n        log38.warn(\"transport is under race condition\", { transportId });\n        yield this._transportRepository.onTransportCreated.watch((id) => id === transportId, this._bot.options.endpointTimeout).catch((e2) => {\n          throw createError({\n            operationName: \"Receiver.consume\",\n            context: this._context,\n            channel: this._localPerson.channel,\n            info: __spreadProps(__spreadValues({}, errors5.timeout), {\n              detail: \"receiver sfuTransport not found\"\n            }),\n            path: log38.prefix,\n            error: e2,\n            payload: {\n              transportOptions,\n              transportId,\n              producerId,\n              consumerOptions,\n              subscription: this.subscription\n            }\n          });\n        });\n        this.transport = this._transportRepository.getTransport(\n          this._localPerson.id,\n          transportId\n        );\n      }\n      log38.debug(\"[end] createConsumer\");\n      log38.debug(\"[start] consume\", {\n        consumerOptions,\n        subscription: this.subscription\n      });\n      const consumer = yield this.transport.msTransport.consume(__spreadProps(__spreadValues({}, consumerOptions), {\n        producerId\n      })).catch((e2) => {\n        throw createError({\n          operationName: \"Receiver.consume\",\n          context: this._context,\n          channel: this._localPerson.channel,\n          info: __spreadProps(__spreadValues({}, errors5.internal), {\n            detail: \"consume failed, maybe subscribing unsupported codec\"\n          }),\n          path: log38.prefix,\n          error: e2\n        });\n      });\n      this.consumer = consumer;\n      log38.debug(\"[end] consume\", { subscription: this.subscription });\n      const [selectedCodec] = consumer.rtpParameters.codecs;\n      const stream = createRemoteStream(uuidV4(), consumer.track, selectedCodec);\n      const codec = {\n        mimeType: selectedCodec.mimeType,\n        parameters: selectedCodec.parameters\n      };\n      this._setupTransportAccessForStream(stream, consumer);\n      return { stream, codec };\n    });\n  }\n  _setupTransportAccessForStream(stream, consumer) {\n    const transport = this.transport;\n    const pc = this.pc;\n    stream._getTransport = () => ({\n      rtcPeerConnection: pc,\n      connectionState: transport.connectionState,\n      info: this\n    });\n    stream._getStats = () => __async(this, null, function* () {\n      const stats = yield consumer.getStats();\n      let arr = statsToArray(stats);\n      arr = arr.map((stats2) => {\n        stats2[\"sfuTransportId\"] = transport.id;\n        return stats2;\n      });\n      return arr;\n    });\n    this._disposer.push(() => {\n      stream._getTransport = () => void 0;\n    });\n    transport.onConnectionStateChanged.add((state) => {\n      log38.debug(\"transport connection state changed\", transport.id, state);\n      stream._setConnectionState(state);\n    });\n  }\n  unconsume() {\n    if (!this.consumer) {\n      log38.debug(\"unconsume failed, consumer not exist\", {\n        subscription: this.subscription\n      });\n      return;\n    }\n    this.consumer.close();\n    this.consumer = void 0;\n  }\n  close() {\n    this._disposer.dispose();\n  }\n  get pc() {\n    var _a2;\n    return (_a2 = this.transport) == null ? void 0 : _a2.pc;\n  }\n};\n\n// ../sfu-bot/src/connection/sender.ts\ninit_process();\nvar import_isEqual2 = __toESM(require_isEqual());\n\n// ../sfu-bot/src/forwarding.ts\ninit_process();\nvar Forwarding = class {\n  constructor(configure, originPublication, relayingPublication) {\n    this.configure = configure;\n    this.originPublication = originPublication;\n    this.relayingPublication = relayingPublication;\n    this.state = \"started\";\n    this.onStopped = new Event();\n  }\n  get id() {\n    return this.relayingPublication.id;\n  }\n  _stop() {\n    this.state = \"stopped\";\n    this.onStopped.emit();\n  }\n  toJSON() {\n    return {\n      id: this.id,\n      configure: this.configure,\n      originPublication: this.originPublication,\n      relayingPublication: this.relayingPublication\n    };\n  }\n};\n\n// ../sfu-bot/src/connection/sender.ts\nvar log39 = new Logger(\"packages/sfu-bot/src/connection/sender.ts\");\nvar Sender2 = class {\n  constructor(publication, channel, _api, _transportRepository, _localPerson, _bot, _iceManager, _context) {\n    this.publication = publication;\n    this.channel = channel;\n    this._api = _api;\n    this._transportRepository = _transportRepository;\n    this._localPerson = _localPerson;\n    this._bot = _bot;\n    this._iceManager = _iceManager;\n    this._context = _context;\n    this._disposer = new EventDisposer();\n    this._connectionState = \"new\";\n    this.onConnectionStateChanged = new Event();\n    this.closed = false;\n  }\n  _setConnectionState(state) {\n    if (this._connectionState === state) {\n      return;\n    }\n    log39.debug(\"_setConnectionState\", {\n      state,\n      forwardingId: this.forwardingId\n    });\n    this._connectionState = state;\n    this.onConnectionStateChanged.emit(state);\n  }\n  toJSON() {\n    return {\n      forwarding: this.forwarding,\n      broadcasterTransport: this._broadcasterTransport,\n      ackTransport: this._ackTransport,\n      _connectionState: this._connectionState\n    };\n  }\n  startForwarding(configure) {\n    return __async(this, null, function* () {\n      if (this.publication.contentType === \"data\") {\n        throw createError({\n          operationName: \"Sender.startForwarding\",\n          context: this._context,\n          info: errors5.dataStreamNotSupported,\n          path: log39.prefix,\n          channel: this.channel\n        });\n      }\n      const stream = this.publication.stream;\n      if (!stream) {\n        throw createError({\n          operationName: \"Sender.startForwarding\",\n          context: this._context,\n          info: errors5.streamNotExistInPublication,\n          path: log39.prefix,\n          channel: this.channel\n        });\n      }\n      this.onConnectionStateChanged.add((state) => {\n        var _a2;\n        log39.debug(\n          \"transport connection state changed\",\n          (_a2 = this._broadcasterTransport) == null ? void 0 : _a2.id,\n          state\n        );\n        stream._setConnectionState(this._bot, state);\n      }).disposer(this._disposer);\n      log39.debug(\"[start] Sender startForwarding\", {\n        botId: this._bot.id,\n        publicationId: this.publication.id,\n        contentType: this.publication.contentType,\n        maxSubscribers: configure.maxSubscribers\n      });\n      const {\n        forwardingId,\n        broadcasterTransportId,\n        broadcasterTransportOptions,\n        rtpCapabilities,\n        ackTransportId,\n        ackTransportOptions,\n        ackProducerId,\n        ackConsumerOptions\n      } = yield this._api.startForwarding({\n        botId: this._bot.id,\n        publicationId: this.publication.id,\n        contentType: this.publication.contentType,\n        maxSubscribers: configure.maxSubscribers,\n        publisherId: this.publication.publisher.id\n      });\n      this.forwardingId = forwardingId;\n      if (broadcasterTransportOptions) {\n        log39.debug(\"sender create new transport\", {\n          broadcasterTransportOptions,\n          ackTransportOptions\n        });\n        yield this._transportRepository.loadDevice(rtpCapabilities);\n        this._broadcasterTransport = this._transportRepository.createTransport(\n          this._localPerson.id,\n          this._bot,\n          broadcasterTransportOptions,\n          \"send\",\n          this._iceManager\n        );\n      }\n      this._broadcasterTransport = this._transportRepository.getTransport(\n        this._localPerson.id,\n        broadcasterTransportId\n      );\n      if (!this._broadcasterTransport) {\n        throw createError({\n          operationName: \"Sender.startForwarding\",\n          context: this._context,\n          info: __spreadProps(__spreadValues({}, errors5.internal), { detail: \"_broadcasterTransport not found\" }),\n          path: log39.prefix,\n          channel: this.channel,\n          payload: { ackTransportOptions, broadcasterTransportOptions }\n        });\n      }\n      this._broadcasterTransport.onConnectionStateChanged.add((state) => {\n        this._setConnectionState(state);\n      }).disposer(this._disposer);\n      this._setConnectionState(this._broadcasterTransport.connectionState);\n      if (ackTransportOptions) {\n        this._ackTransport = this._transportRepository.createTransport(\n          this._localPerson.id,\n          this._bot,\n          ackTransportOptions,\n          \"recv\",\n          this._iceManager\n        );\n        const ackConsumer = yield this._ackTransport.msTransport.consumeData(\n          ackConsumerOptions\n        );\n        ackConsumer.addListener(\"open\", () => __async(this, null, function* () {\n          const payload = yield createLogPayload({\n            operationName: \"acmConsumer.opened\",\n            channel: this.channel\n          });\n          log39.debug(payload, { ackTransportId });\n        }));\n        const transactionId = uuidV4();\n        this._broadcasterTransport.onProduceData.watch(\n          (e2) => {\n            var _a2;\n            return ((_a2 = e2.producerOptions.appData) == null ? void 0 : _a2.transactionId) === transactionId;\n          }\n        ).then(({ callback }) => {\n          callback({ id: ackProducerId });\n        });\n        const ackProducer = yield this._broadcasterTransport.msTransport.produceData({\n          appData: { transactionId }\n        });\n        this._handleMessage(ackConsumer, ackProducer);\n      }\n      this._ackTransport = this._transportRepository.getTransport(\n        this._localPerson.id,\n        ackTransportId\n      );\n      if (!this._ackTransport) {\n        throw createError({\n          operationName: \"Sender.startForwarding\",\n          context: this._context,\n          info: __spreadProps(__spreadValues({}, errors5.internal), { detail: \"_ackTransport not found\" }),\n          path: log39.prefix,\n          channel: this.channel,\n          payload: { ackTransportOptions, broadcasterTransportOptions }\n        });\n      }\n      const producer = yield this._produce(stream, this._broadcasterTransport);\n      this._setupTransportAccessForStream(\n        stream,\n        this._broadcasterTransport,\n        producer\n      );\n      log39.debug(\"[end] Sender startForwarding\", {\n        forwardingId\n      });\n      let relayingPublication = this.channel._getPublication(forwardingId);\n      if (!relayingPublication) {\n        relayingPublication = (yield this.channel.onStreamPublished.watch(\n          (e2) => e2.publication.id === forwardingId,\n          this._context.config.rtcApi.timeout\n        ).catch(() => {\n          throw createError({\n            operationName: \"Sender.startForwarding\",\n            context: this._context,\n            info: __spreadProps(__spreadValues({}, errors5.timeout), {\n              detail: \"SfuBotMember onStreamPublished\"\n            }),\n            path: log39.prefix,\n            channel: this.channel,\n            payload: { forwardingId }\n          });\n        })).publication;\n      }\n      const forwarding = new Forwarding(\n        configure,\n        this.publication,\n        relayingPublication\n      );\n      this.forwarding = forwarding;\n      const botSubscribing = this.channel.subscriptions.find(\n        (s) => s.publication.id === this.publication.id\n      );\n      const [codec] = producer.rtpParameters.codecs;\n      botSubscribing.codec = codec;\n      waitForLocalStats(\n        stream,\n        this._bot.id,\n        (stats) => !!stats.find((s) => s.type.includes(\"local-candidate\"))\n      ).then(() => __async(this, null, function* () {\n        const payload = yield createLogPayload({\n          operationName: \"startForwarding/waitForLocalStats\",\n          channel: this.channel\n        });\n        log39.debug(payload, \"forwarding connection connected\", {\n          broadcasterTransportId\n        });\n      })).catch(() => {\n      });\n      return forwarding;\n    });\n  }\n  _listenStreamEnableChange(stream) {\n    if (this._unsubscribeStreamEnableChange) {\n      this._unsubscribeStreamEnableChange();\n    }\n    const { removeListener } = stream._onEnableChanged.add((track) => __async(this, null, function* () {\n      yield this._replaceTrack(track).catch((e2) => {\n        log39.warn(\n          createWarnPayload4({\n            detail: \"replaceTrack failed\",\n            operationName: \"Sender._listenStreamEnableChange\",\n            bot: this._bot,\n            payload: e2\n          })\n        );\n      });\n    }));\n    this._unsubscribeStreamEnableChange = removeListener;\n  }\n  _produce(stream, transport) {\n    return __async(this, null, function* () {\n      var _a2, _b2, _c, _d, _e, _f, _g, _h;\n      this.publication._onReplaceStream.add((stream2) => __async(this, null, function* () {\n        this._listenStreamEnableChange(stream2);\n        yield this._replaceTrack(stream2.track);\n      })).disposer(this._disposer);\n      this._listenStreamEnableChange(stream);\n      const transactionId = uuidV4();\n      const producerOptions = {\n        track: stream.track,\n        stopTracks: false,\n        appData: { transactionId },\n        disableTrackOnPause: false\n      };\n      const encodings = this.publication.encodings;\n      if (encodings) {\n        producerOptions.encodings = encodings;\n      }\n      this.publication._onEncodingsChanged.add((encodings2) => __async(this, null, function* () {\n        yield setEncodingParams(producer.rtpSender, encodings2).catch((e2) => {\n          log39.error(\"_onEncodingsChanged failed\", e2, this);\n        });\n      })).disposer(this._disposer);\n      const codecCapabilities = this.publication.codecCapabilities;\n      const deviceCodecs = (_b2 = (_a2 = this._transportRepository.rtpCapabilities) == null ? void 0 : _a2.codecs) != null ? _b2 : [];\n      log39.debug(\"select codec\", { codecCapabilities, deviceCodecs });\n      const [codec] = codecCapabilities.map((cap) => {\n        if (cap.mimeType.toLowerCase().includes(\"video\")) {\n          const codec3 = deviceCodecs.find((c) => {\n            var _a3;\n            if (c.mimeType.toLowerCase() !== cap.mimeType.toLowerCase()) {\n              return false;\n            }\n            if (Object.keys((_a3 = cap.parameters) != null ? _a3 : {}).length > 0 && !(0, import_isEqual2.default)(cap.parameters, c.parameters)) {\n              return false;\n            }\n            return true;\n          });\n          return codec3;\n        }\n        const codec2 = deviceCodecs.find(\n          (c) => c.mimeType.toLowerCase() === cap.mimeType.toLowerCase()\n        );\n        return codec2;\n      });\n      log39.debug(\"selected codec\", { codec });\n      if (codec) {\n        const [codecType, codecName] = codec.mimeType.split(\"/\");\n        producerOptions.codec = __spreadProps(__spreadValues({}, codec), {\n          mimeType: `${codecType}/${codecName.toUpperCase()}`\n        });\n        if (stream.contentType === \"video\") {\n          this._fixVideoCodecWithParametersOrder(codec);\n        }\n      } else if (codecCapabilities.length > 0) {\n        log39.warn(\n          \"preferred codec not supported\",\n          createWarnPayload4({\n            channel: this.channel,\n            detail: \"preferred codec not supported\",\n            operationName: \"Sender._produce\",\n            bot: this._bot,\n            payload: {\n              codecCapabilities,\n              deviceCodecs\n            }\n          })\n        );\n      }\n      if (stream.contentType === \"audio\") {\n        const opusDtx = (_d = (_c = codecCapabilities.find(\n          (c) => c.mimeType.toLowerCase() === \"audio/opus\"\n        )) == null ? void 0 : _c.parameters) == null ? void 0 : _d.usedtx;\n        if (opusDtx !== false) {\n          producerOptions.codecOptions = __spreadProps(__spreadValues({}, producerOptions.codecOptions), {\n            opusDtx: true\n          });\n        }\n        const opusStereo = (_f = (_e = codecCapabilities.find(\n          (c) => c.mimeType.toLowerCase() === \"audio/opus\"\n        )) == null ? void 0 : _e.parameters) == null ? void 0 : _f.stereo;\n        if (opusStereo) {\n          producerOptions.codecOptions = __spreadProps(__spreadValues({}, producerOptions.codecOptions), {\n            opusStereo: true\n          });\n        }\n        const opusFec = (_h = (_g = codecCapabilities.find(\n          (c) => c.mimeType.toLowerCase() === \"audio/opus\"\n        )) == null ? void 0 : _g.parameters) == null ? void 0 : _h.useinbandfec;\n        if (opusFec) {\n          producerOptions.codecOptions = __spreadProps(__spreadValues({}, producerOptions.codecOptions), {\n            opusFec: true\n          });\n        }\n      }\n      transport.onProduce.watch(\n        (p) => {\n          var _a3;\n          return ((_a3 = p.producerOptions.appData) == null ? void 0 : _a3.transactionId) === transactionId;\n        },\n        this._context.config.rtcConfig.timeout\n      ).then((producer2) => __async(this, null, function* () {\n        try {\n          const { producerId } = yield this._api.createProducer({\n            botId: this._bot.id,\n            transportId: transport.id,\n            forwardingId: this.forwardingId,\n            producerOptions: producer2.producerOptions\n          });\n          producer2.callback({ id: producerId });\n        } catch (error) {\n          producer2.errback(error);\n        }\n      }));\n      log39.debug(\"[start] msTransport.produce\", this);\n      const producer = yield transport.msTransport.produce(producerOptions).catch((err) => {\n        throw createError({\n          operationName: \"Sender._produce\",\n          context: this._context,\n          info: __spreadProps(__spreadValues({}, errors5.internal), { detail: \"msTransport.produce failed\" }),\n          path: log39.prefix,\n          channel: this.channel,\n          error: err\n        });\n      });\n      log39.debug(\"[end] msTransport.produce\", this);\n      this._producer = producer;\n      if (isSafari()) {\n        if (encodings.length > 0) {\n          yield setEncodingParams(producer.rtpSender, encodings).catch((e2) => {\n            log39.error(\"_onEncodingsChanged failed\", e2, this);\n          });\n        }\n      }\n      return producer;\n    });\n  }\n  _fixVideoCodecWithParametersOrder(codec) {\n    const handler = this._broadcasterTransport.msTransport._handler;\n    const findCodecWithParameters = (c) => {\n      if (c.mimeType === codec.mimeType) {\n        if (codec.parameters && Object.keys(codec.parameters).length > 0) {\n          if ((0, import_isEqual2.default)(c.parameters, codec.parameters)) {\n            return true;\n          }\n          return false;\n        }\n        return true;\n      }\n      return false;\n    };\n    const copyCodecExceptPayloadType = (target, src) => {\n      for (const key of Object.keys(target)) {\n        if (key === \"payloadType\") {\n          continue;\n        }\n        target[key] = src[key];\n      }\n    };\n    if (handler._sendingRtpParametersByKind) {\n      const parameters = handler._sendingRtpParametersByKind[\"video\"];\n      const target = parameters.codecs.find(findCodecWithParameters);\n      if (parameters && target) {\n        const origin = JSON.parse(JSON.stringify(parameters));\n        const [head] = parameters.codecs;\n        const copyOfHead = JSON.parse(JSON.stringify(head));\n        copyCodecExceptPayloadType(head, target);\n        copyCodecExceptPayloadType(target, copyOfHead);\n        log39.debug(\"sort _sendingRtpParametersByKind\", {\n          origin,\n          new: parameters.codecs\n        });\n      }\n    }\n    if (handler._sendingRemoteRtpParametersByKind) {\n      const parameters = handler._sendingRemoteRtpParametersByKind[\"video\"];\n      const target = parameters.codecs.find(findCodecWithParameters);\n      if (parameters && target) {\n        const origin = JSON.parse(JSON.stringify(parameters));\n        const [head] = parameters.codecs;\n        const copyOfHead = JSON.parse(JSON.stringify(head));\n        copyCodecExceptPayloadType(head, target);\n        copyCodecExceptPayloadType(target, copyOfHead);\n        log39.debug(\"sort _sendingRemoteRtpParametersByKind\", {\n          origin,\n          new: parameters.codecs\n        });\n      }\n    }\n  }\n  _setupTransportAccessForStream(stream, transport, producer) {\n    stream._getTransportCallbacks[this._bot.id] = () => ({\n      rtcPeerConnection: transport.pc,\n      connectionState: transport.connectionState,\n      info: this\n    });\n    stream._getStatsCallbacks[this._bot.id] = () => __async(this, null, function* () {\n      if (producer.closed) {\n        delete stream._getStatsCallbacks[this._bot.id];\n        return [];\n      }\n      const stats = yield producer.getStats();\n      let arr = statsToArray(stats);\n      arr = arr.map((stats2) => {\n        stats2[\"sfuTransportId\"] = transport.id;\n        return stats2;\n      });\n      return arr;\n    });\n    this._disposer.push(() => {\n      delete stream._getTransportCallbacks[this._bot.id];\n      delete stream._getStatsCallbacks[this._bot.id];\n    });\n  }\n  _handleMessage(consumer, producer) {\n    consumer.on(\"message\", (message) => __async(this, null, function* () {\n      try {\n        const { type, payload, id } = JSON.parse(message);\n        switch (type) {\n          case \"request\":\n            {\n              const { subscriberId, publicationId } = payload;\n              log39.debug(\"ackConsume\", { subscriberId, publicationId });\n              const exist = this.channel.subscriptions.find(\n                (subscription) => subscription.publication.id === publicationId && subscription.subscriber.id === subscriberId\n              );\n              if (!exist) {\n                yield this.channel.onPublicationSubscribed.watch(\n                  ({ subscription }) => subscription.publication.id === publicationId && subscription.subscriber.id === subscriberId,\n                  this._bot.options.ackTimeout\n                ).catch((e2) => {\n                  throw createError({\n                    operationName: \"Sender._handleMessage\",\n                    context: this._context,\n                    info: __spreadProps(__spreadValues({}, errors5.timeout), {\n                      detail: \"ackConsume publication.onSubscribed\"\n                    }),\n                    path: log39.prefix,\n                    channel: this.channel,\n                    error: e2,\n                    payload: {\n                      subscriberId,\n                      subscriptions: this.channel.subscriptions\n                    }\n                  });\n                });\n              }\n              for (let i = 0; i < 10; i++) {\n                try {\n                  producer.send(JSON.stringify({ type: \"response\", id }));\n                } catch (error) {\n                  log39.error(\n                    createError({\n                      operationName: \"Sender._handleMessage\",\n                      context: this._context,\n                      info: __spreadProps(__spreadValues({}, errors5.internal), {\n                        detail: \"An error occurred in producer.send\"\n                      }),\n                      path: log39.prefix,\n                      channel: this.channel,\n                      error,\n                      payload: {\n                        subscriberId,\n                        subscriptions: this.channel.subscriptions\n                      }\n                    })\n                  );\n                }\n                yield new Promise((r2) => setTimeout(r2, 1e3));\n                if (this.closed) {\n                  break;\n                }\n              }\n              log39.debug(\"ackConsume accepted\", { subscriberId, publicationId });\n            }\n            break;\n        }\n      } catch (error) {\n        log39.error(\"_handleMessage\", error);\n      }\n    }));\n  }\n  unproduce() {\n    if (!this._producer) {\n      return;\n    }\n    this._producer.close();\n    this._producer = void 0;\n  }\n  _replaceTrack(track) {\n    return __async(this, null, function* () {\n      var _a2, _b2;\n      yield (_b2 = (_a2 = this._producer) == null ? void 0 : _a2.replaceTrack) == null ? void 0 : _b2.call(_a2, { track }).catch((e2) => {\n        throw createError({\n          operationName: \"Sender._replaceTrack\",\n          context: this._context,\n          info: errors5.internal,\n          error: e2,\n          path: log39.prefix,\n          channel: this.channel\n        });\n      });\n    });\n  }\n  close() {\n    this.closed = true;\n    if (this._unsubscribeStreamEnableChange) {\n      this._unsubscribeStreamEnableChange();\n    }\n    this._setConnectionState(\"disconnected\");\n    this._disposer.dispose();\n  }\n  get pc() {\n    var _a2;\n    return (_a2 = this._broadcasterTransport) == null ? void 0 : _a2.pc;\n  }\n};\n\n// ../sfu-bot/src/connection/index.ts\nvar log40 = new Logger(\"packages/sfu-bot/src/connection/index.ts\");\nvar SFUConnection = class {\n  constructor(_api, channel, localPerson, remoteMember, _transportRepository, _context) {\n    this._api = _api;\n    this.channel = channel;\n    this.localPerson = localPerson;\n    this.remoteMember = remoteMember;\n    this._transportRepository = _transportRepository;\n    this._context = _context;\n    this.type = \"sfu\";\n    this.onDisconnect = new Event();\n    this.onClose = new Event();\n    this.closed = false;\n    this._receivers = {};\n    this._senders = {};\n  }\n  addSender(publication) {\n    const sender = new Sender2(\n      publication,\n      this.channel,\n      this._api,\n      this._transportRepository,\n      this.localPerson,\n      this.remoteMember,\n      this.localPerson.iceManager,\n      this._context\n    );\n    this._senders[publication.id] = sender;\n    return sender;\n  }\n  removeSender(originPublicationId) {\n    log40.debug(\"removeSender\", originPublicationId);\n    const sender = this._senders[originPublicationId];\n    if (!sender) {\n      return;\n    }\n    sender.unproduce();\n  }\n  startSubscribing(subscription) {\n    return __async(this, null, function* () {\n      const receiver = new Receiver2(\n        subscription,\n        this._api,\n        this._transportRepository,\n        this.localPerson,\n        this.remoteMember,\n        this.localPerson.iceManager,\n        this._context\n      );\n      this._receivers[subscription.id] = receiver;\n      const ts = log40.debug(\"[start] _startSubscribing consume\");\n      const { stream, codec } = yield receiver.consume().catch((e2) => {\n        log40.error(\n          \"[failed] _startSubscribing consume\",\n          createError({\n            operationName: \"SFUConnection.startSubscribing\",\n            context: this._context,\n            channel: this.channel,\n            info: __spreadProps(__spreadValues({}, errors5.internal), { detail: \"failed to receiver.consume\" }),\n            error: e2,\n            path: log40.prefix,\n            payload: { subscription: subscription.toJSON() }\n          })\n        );\n        throw e2;\n      });\n      log40.elapsed(ts, \"[end] _startSubscribing consume\");\n      subscription.codec = codec;\n      subscription._setStream(stream);\n    });\n  }\n  stopSubscribing(subscription) {\n    return __async(this, null, function* () {\n      const connection = this._receivers[subscription.id];\n      if (!connection) {\n        return;\n      }\n      connection.unconsume();\n    });\n  }\n  stopPublishing(publication) {\n    return __async(this, null, function* () {\n      this.removeSender(publication.id);\n    });\n  }\n  close() {\n    if (this.closed) {\n      return;\n    }\n    log40.debug(\"close sfu connection\", {\n      remote: this.remoteMember,\n      local: this.localPerson\n    });\n    this.closed = true;\n    Object.values(this._senders).forEach((sender) => {\n      sender.close();\n    });\n    Object.values(this._receivers).forEach((receiver) => {\n      receiver.close();\n    });\n    this._senders = {};\n    this._receivers = {};\n    this.onClose.emit();\n  }\n  _getReceiver(subscriptionId) {\n    return this._receivers[subscriptionId];\n  }\n  changePreferredEncoding(subscription) {\n    return __async(this, null, function* () {\n      var _a2;\n      const preferredEncoding = subscription.preferredEncoding;\n      const encodings = (_a2 = subscription.publication.origin) == null ? void 0 : _a2.encodings;\n      log40.debug(\"changePreferredEncoding\", {\n        preferredEncoding,\n        encodings,\n        subscription\n      });\n      if (!preferredEncoding) {\n        throw createError({\n          operationName: \"SFUConnection.changePreferredEncoding\",\n          context: this._context,\n          channel: this.channel,\n          info: errors5.invalidPreferredEncoding,\n          path: log40.prefix,\n          payload: { subscription }\n        });\n      }\n      if (!encodings || encodings.length === 0) {\n        throw createError({\n          operationName: \"SFUConnection.changePreferredEncoding\",\n          context: this._context,\n          channel: this.channel,\n          info: errors5.invalidEncodings,\n          path: log40.prefix,\n          payload: { subscription }\n        });\n      }\n      const layer = getLayerFromEncodings(preferredEncoding, encodings);\n      const receiver = this._getReceiver(subscription.id);\n      if (!receiver) {\n        throw createError({\n          operationName: \"SFUConnection.changePreferredEncoding\",\n          context: this._context,\n          channel: this.channel,\n          info: errors5.receiverNotFound,\n          path: log40.prefix,\n          payload: { subscription }\n        });\n      }\n      const transport = receiver.transport;\n      if (!transport) {\n        throw createError({\n          operationName: \"SFUConnection.changePreferredEncoding\",\n          context: this._context,\n          channel: this.channel,\n          info: __spreadProps(__spreadValues({}, errors5.internal), { detail: \"transport not found\" }),\n          path: log40.prefix,\n          payload: { subscription }\n        });\n      }\n      const consumer = receiver.consumer;\n      if (!consumer) {\n        throw createError({\n          operationName: \"SFUConnection.changePreferredEncoding\",\n          context: this._context,\n          channel: this.channel,\n          info: errors5.consumerNotFound,\n          path: log40.prefix,\n          payload: { subscription }\n        });\n      }\n      yield this._api.changeConsumerLayer({\n        transportId: transport.id,\n        consumerId: consumer.id,\n        publicationId: subscription.publication.id,\n        spatialLayer: layer\n      });\n    });\n  }\n};\n\n// ../sfu-bot/src/member.ts\ninit_process();\n\n// ../sfu-bot/src/const.ts\ninit_process();\nvar defaultMaxSubscribers = 10;\n\n// ../sfu-bot/src/member.ts\nvar log41 = new Logger(\"packages/sfu-bot/src/member.ts\");\nvar _SfuBotMember = class extends MemberImpl {\n  constructor(args) {\n    super(args);\n    this.side = \"remote\";\n    this.subtype = _SfuBotMember.subtype;\n    this.type = \"bot\";\n    this._connections = {};\n    this.onForwardingStarted = new Event();\n    this.onForwardingStopped = new Event();\n    this.onForwardingListChanged = new Event();\n    this._startForwardQueue = new PromiseQueue();\n    this._forwardings = {};\n    this.stopForwarding = (target) => new Promise((r2, f) => __async(this, null, function* () {\n      const timestamp = log41.info(\n        \"[start] stopForwarding\",\n        yield createLogPayload({\n          operationName: \"SfuBotMember.stopForwarding\",\n          channel: this.channel\n        })\n      );\n      if (this.state !== \"joined\") {\n        f(\n          createError({\n            operationName: \"SfuBotMember.stopForwarding\",\n            context: this._context,\n            info: errors5.sfuBotNotInChannel,\n            path: log41.prefix,\n            channel: this.channel,\n            payload: { status: this.state }\n          })\n        );\n        return;\n      }\n      const forwardingId = typeof target === \"string\" ? target : target.id;\n      const forwarding = this._forwardings[forwardingId];\n      if (!forwarding) {\n        f(\n          createError({\n            operationName: \"SfuBotMember.stopForwarding\",\n            context: this._context,\n            info: errors5.forwardingNotFound,\n            path: log41.prefix,\n            channel: this.channel,\n            payload: {\n              forwardingId,\n              _forwardings: Object.keys(this._forwardings)\n            }\n          })\n        );\n        return;\n      }\n      delete this._forwardings[forwarding.id];\n      const { promise, fulfilled } = this._api.stopForwarding({\n        botId: this.id,\n        forwardingId\n      });\n      let failed = false;\n      promise.catch((e2) => {\n        failed = true;\n        f(e2);\n      });\n      this.onForwardingStopped.watch(\n        (e2) => e2.forwarding.id === forwardingId,\n        this._context.config.rtcApi.timeout\n      ).catch((error) => {\n        if (!failed)\n          f(\n            createError({\n              operationName: \"SfuBotMember.stopForwarding\",\n              context: this._context,\n              info: __spreadProps(__spreadValues({}, errors5.timeout), { detail: \"onForwardingStopped\" }),\n              path: log41.prefix,\n              channel: this.channel,\n              payload: { fulfilled },\n              error\n            })\n          );\n      }).then(() => __async(this, null, function* () {\n        log41.elapsed(\n          timestamp,\n          \"[end] stopForwarding\",\n          yield createLogPayload({\n            operationName: \"SfuBotMember.stopForwarding\",\n            channel: this.channel\n          })\n        );\n        r2();\n      }));\n    }));\n    this._api = args.api;\n    this._context = args.context;\n    this._transportRepository = args.transportRepository;\n    this.options = args.options;\n    this.onLeft.once(() => {\n      log41.debug(\"SfuBotMember left: \", { id: this.id });\n      Object.values(this._connections).forEach((c) => {\n        c.close();\n      });\n      this._connections = {};\n    });\n  }\n  get forwardings() {\n    return Object.values(this._forwardings);\n  }\n  _getConnection(localPersonId) {\n    return this._connections[localPersonId];\n  }\n  _getOrCreateConnection(localPerson) {\n    var _a2;\n    const connection = (_a2 = this._getConnection(localPerson.id)) != null ? _a2 : this._createConnection(this.channel, localPerson, this);\n    return connection;\n  }\n  _createConnection(channel, localPerson, endpointBot) {\n    const connection = new SFUConnection(\n      endpointBot._api,\n      channel,\n      localPerson,\n      endpointBot,\n      this._transportRepository,\n      this._context\n    );\n    connection.onClose.once(() => {\n      delete this._connections[localPerson.id];\n    });\n    this._connections[localPerson.id] = connection;\n    return connection;\n  }\n  startForwarding(_0) {\n    return __async(this, arguments, function* (publication, configure = {}) {\n      const timestamp = log41.info(\n        \"[start] startForwarding\",\n        yield createLogPayload({\n          operationName: \"SfuBotMember.startForwarding\",\n          channel: this.channel\n        })\n      );\n      const res = yield this._startForwardQueue.push(\n        () => this._startForwarding(\n          publication,\n          configure\n        )\n      );\n      log41.elapsed(\n        timestamp,\n        \"[end] startForwarding\",\n        yield createLogPayload({\n          operationName: \"SfuBotMember.startForwarding\",\n          channel: this.channel\n        })\n      );\n      return res;\n    });\n  }\n  _startForwarding(relayed, configure) {\n    return __async(this, null, function* () {\n      if (configure.maxSubscribers == void 0) {\n        configure.maxSubscribers = defaultMaxSubscribers;\n      }\n      if (configure.maxSubscribers === 0) {\n        throw createError({\n          operationName: \"SfuBotMember._startForwarding\",\n          context: this._context,\n          channel: this.channel,\n          info: errors5.maxSubscribersMustNotBeZero,\n          path: log41.prefix,\n          payload: { configure }\n        });\n      }\n      if (this.state !== \"joined\") {\n        throw createError({\n          operationName: \"SfuBotMember._startForwarding\",\n          context: this._context,\n          channel: this.channel,\n          info: errors5.sfuBotNotInChannel,\n          path: log41.prefix,\n          payload: { status: this.state }\n        });\n      }\n      if (!this.channel._getPublication(relayed.id)) {\n        throw createError({\n          operationName: \"SfuBotMember._startForwarding\",\n          context: this._context,\n          channel: this.channel,\n          info: errors.publicationNotExist,\n          path: log41.prefix\n        });\n      }\n      const localPerson = this.channel.localPerson;\n      if (!localPerson) {\n        throw createError({\n          operationName: \"SfuBotMember._startForwarding\",\n          context: this._context,\n          channel: this.channel,\n          info: errors.localPersonNotJoinedChannel,\n          path: log41.prefix\n        });\n      }\n      if (localPerson.id !== relayed.publisher.id) {\n        throw createError({\n          operationName: \"SfuBotMember._startForwarding\",\n          context: this._context,\n          info: errors5.remotePublisherId,\n          path: log41.prefix,\n          channel: this.channel\n        });\n      }\n      const ts = log41.debug(\"[start] SfuBotMember startForwarding\", {\n        publication: relayed.toJSON(),\n        configure\n      });\n      const connection = this._getOrCreateConnection(localPerson);\n      const sender = connection.addSender(relayed);\n      const forwarding = yield sender.startForwarding(configure).catch((error) => {\n        throw createError({\n          operationName: \"SfuBotMember._startForwarding\",\n          context: this._context,\n          info: __spreadProps(__spreadValues({}, errors5.internal), {\n            detail: \"[failed] SfuBotMember startForwarding\"\n          }),\n          path: log41.prefix,\n          channel: this.channel,\n          error,\n          payload: { publication: relayed.toJSON() }\n        });\n      });\n      this._forwardings[forwarding.id] = forwarding;\n      this.listenStopForwardEvent(forwarding);\n      this.onForwardingStarted.emit({ forwarding });\n      this.onForwardingListChanged.emit();\n      log41.elapsed(ts, \"[end] SfuBotMember startForwarding\", {\n        forwarding: forwarding.toJSON()\n      });\n      return forwarding;\n    });\n  }\n  listenStopForwardEvent(forwarding) {\n    const { removeListener } = this.channel.onStreamUnpublished.add((e2) => {\n      if (e2.publication.id === forwarding.id) {\n        removeListener();\n        forwarding._stop();\n        const origin = forwarding.originPublication;\n        const connection = this._getConnection(origin.publisher.id);\n        if (connection) {\n          connection.removeSender(origin.id);\n        }\n        this.onForwardingStopped.emit({ forwarding });\n        this.onForwardingListChanged.emit();\n      }\n    });\n  }\n  _dispose() {\n  }\n};\nvar SfuBotMember = _SfuBotMember;\nSfuBotMember.subtype = \"sfu\";\n\n// ../sfu-bot/src/option.ts\ninit_process();\n\n// ../sfu-api-client/src/index.ts\ninit_process();\n\n// ../sfu-api-client/src/api.ts\ninit_process();\n\n// ../sfu-api-client/src/const.ts\ninit_process();\nvar defaultSfuApiOptions = {\n  domain: \"sfu.skyway.ntt.com\",\n  secure: true,\n  version: 3\n};\n\n// ../sfu-api-client/src/errors.ts\ninit_process();\nvar errors6 = {\n  invalidParameter: { name: \"invalidParameter\", detail: \"\", solution: \"\" },\n  invalidRequestParameter: {\n    name: \"invalidRequestParameter\",\n    detail: \"\\u30EA\\u30AF\\u30A8\\u30B9\\u30C8\\u306E\\u5024\\u304C\\u4E0D\\u6B63\\u3067\\u3059\",\n    solution: \"\\u6B63\\u3057\\u3044\\u5024\\u3092\\u5165\\u529B\\u3057\\u3066\\u304F\\u3060\\u3055\\u3044\"\n  },\n  notFound: {\n    name: \"notFound\",\n    detail: \"\\u5BFE\\u8C61\\u306E\\u30EA\\u30BD\\u30FC\\u30B9\\u304C\\u898B\\u3064\\u304B\\u308A\\u307E\\u305B\\u3093\",\n    solution: \"\\u5BFE\\u8C61\\u306E\\u30EA\\u30BD\\u30FC\\u30B9\\u304C\\u5B58\\u5728\\u3059\\u308B\\u304B\\u78BA\\u304B\\u3081\\u3066\\u304F\\u3060\\u3055\\u3044\"\n  },\n  maxSubscriberExceededError: {\n    name: \"maxSubscribersExceededError\",\n    detail: \"forwarding\\u306EmaxSubscribers\\u306E\\u5236\\u9650\\u3092\\u8D85\\u3048\\u3066\\u3044\\u307E\\u3059\\u3002maxSubscribers\\u306E\\u5024\\u3092\\u8D85\\u3048\\u3066Subscribe\\u3059\\u308B\\u3053\\u3068\\u306F\\u3067\\u304D\\u307E\\u305B\\u3093\",\n    solution: \"maxSubscribers\\u306E\\u7BC4\\u56F2\\u5185\\u3067\\u3054\\u5229\\u7528\\u304F\\u3060\\u3055\\u3044\"\n  },\n  quotaExceededError: {\n    name: \"quotaExceededError\",\n    detail: \"\\u30EA\\u30BD\\u30FC\\u30B9\\u306E\\u5236\\u9650\\u91CF\\u3092\\u8D85\\u3048\\u3066\\u30EA\\u30BD\\u30FC\\u30B9\\u3092\\u5229\\u7528\\u3059\\u308B\\u3053\\u3068\\u306F\\u3067\\u304D\\u307E\\u305B\\u3093\",\n    solution: \"\\u30EA\\u30BD\\u30FC\\u30B9\\u5236\\u9650\\u91CF\\u306E\\u7BC4\\u56F2\\u5185\\u3067\\u3054\\u5229\\u7528\\u304F\\u3060\\u3055\\u3044\"\n  },\n  timeout: { name: \"timeout\", detail: \"\", solution: \"\" },\n  insufficientPermissions: {\n    name: \"insufficientPermissions\",\n    detail: \"token\\u306E\\u6A29\\u9650\\u304C\\u4E0D\\u8DB3\\u3057\\u3066\\u3044\\u307E\\u3059\",\n    solution: \"token\\u306B\\u5FC5\\u8981\\u306A\\u6A29\\u9650\\u3092\\u4ED8\\u4E0E\\u3057\\u3066\\u304F\\u3060\\u3055\\u3044\"\n  },\n  backendError: { name: \"backendError:\", detail: \"\", solution: \"\" }\n};\n\n// ../sfu-api-client/src/util.ts\ninit_process();\nfunction createError5({\n  operationName,\n  info,\n  error,\n  path: path2,\n  payload\n}) {\n  return new SkyWayError({\n    error,\n    info,\n    payload: { payload, operationName },\n    path: path2\n  });\n}\nfunction createWarnPayload5({\n  appId,\n  detail,\n  channelId,\n  operationName,\n  payload,\n  memberId,\n  botId\n}) {\n  const warn = {\n    operationName,\n    payload,\n    detail,\n    appId,\n    channelId,\n    memberId,\n    botId\n  };\n  return warn;\n}\n\n// ../sfu-api-client/src/api.ts\nvar log42 = new Logger(\"packages/sfu-api-client/src/api.ts\");\nvar SfuRestApiClient = class {\n  constructor(_token, _options) {\n    this._token = _token;\n    this._headers = { authorization: `Bearer ${this._token}` };\n    this.options = __spreadValues(__spreadValues({}, defaultSfuApiOptions), _options);\n    this.endpoint = `http${this.options.secure ? \"s\" : \"\"}://${this.options.domain}/v${this.options.version}`;\n    this.http = new HttpClient(this.endpoint);\n    Logger.level = this.options.log.level;\n    Logger.format = this.options.log.format;\n    log42.debug(\"SfuRestApiClient spawned\", { endpoint: this.endpoint });\n  }\n  updateToken(token) {\n    this._token = token;\n  }\n  _commonErrorHandler(e2, operationName) {\n    switch (e2 == null ? void 0 : e2.status) {\n      case 401:\n        return createError5({\n          operationName,\n          info: errors6.invalidRequestParameter,\n          path: log42.prefix,\n          payload: e2\n        });\n      case 403:\n        return createError5({\n          operationName,\n          info: errors6.insufficientPermissions,\n          path: log42.prefix,\n          payload: e2\n        });\n      case 404:\n        return createError5({\n          operationName,\n          info: errors6.notFound,\n          path: log42.prefix,\n          payload: e2\n        });\n      case 429:\n        return createError5({\n          operationName,\n          info: errors6.quotaExceededError,\n          path: log42.prefix,\n          payload: e2\n        });\n      default:\n        return createError5({\n          operationName,\n          info: errors6.backendError,\n          path: log42.prefix,\n          payload: e2\n        });\n    }\n  }\n  createBot(_0) {\n    return __async(this, arguments, function* ({\n      appId,\n      channelId\n    }) {\n      const res = yield this.http.post(\n        \"/bots\",\n        {\n          appId,\n          channelId\n        },\n        { headers: { authorization: `Bearer ${this._token}` } }\n      ).catch((e2) => {\n        throw this._commonErrorHandler(e2, \"SfuRestApiClient.createBot\");\n      });\n      return res.id;\n    });\n  }\n  deleteBot(_0) {\n    return __async(this, arguments, function* ({ botId }) {\n      yield this.http.delete(`/bots/${botId}`, {\n        headers: { authorization: `Bearer ${this._token}` }\n      }).catch((e2) => {\n        throw this._commonErrorHandler(e2, \"SfuRestApiClient.deleteBot\");\n      });\n    });\n  }\n  startForwarding(_0) {\n    return __async(this, arguments, function* ({\n      botId,\n      publicationId,\n      maxSubscribers,\n      contentType,\n      publisherId\n    }) {\n      const backOff = new BackOff();\n      const body = {\n        publicationId,\n        maxSubscribers,\n        contentType: contentType[0].toUpperCase() + contentType.slice(1),\n        publisherId\n      };\n      const res = yield this.http.post(`/bots/${botId}/forwardings`, body, {\n        headers: { authorization: `Bearer ${this._token}` },\n        retry: (err) => __async(this, null, function* () {\n          if ([400, 403, 429].includes(err.status)) {\n            return false;\n          }\n          return yield backOff.wait();\n        })\n      }).catch((e2) => {\n        throw this._commonErrorHandler(e2, \"SfuRestApiClient.startForwarding\");\n      });\n      if (backOff.count > 0) {\n        log42.warn(\n          \"success to retry startForwarding\",\n          createWarnPayload5({\n            operationName: \"SfuRestApiClient.startForwarding\",\n            detail: \"success to retry startForwarding\",\n            botId,\n            memberId: publisherId,\n            payload: { publicationId, count: backOff.count }\n          })\n        );\n      }\n      return res;\n    });\n  }\n  createProducer(_0) {\n    return __async(this, arguments, function* ({\n      botId,\n      forwardingId,\n      transportId,\n      producerOptions\n    }) {\n      const backOff = new BackOff();\n      const res = yield this.http.put(\n        `/bots/${botId}/forwardings/${forwardingId}/transport/producer`,\n        { transportId, producerOptions },\n        {\n          headers: { authorization: `Bearer ${this._token}` },\n          retry: () => __async(this, null, function* () {\n            return yield backOff.wait();\n          })\n        }\n      ).catch((e2) => {\n        throw this._commonErrorHandler(e2, \"SfuRestApiClient.createProducer\");\n      });\n      if (backOff.count > 0) {\n        log42.warn(\n          \"success to retry createProducer\",\n          createWarnPayload5({\n            operationName: \"SfuRestApiClient.createProducer\",\n            detail: \"success to retry createProducer\",\n            botId,\n            payload: { forwardingId, transportId, count: backOff.count }\n          })\n        );\n      }\n      return res;\n    });\n  }\n  createConsumer(_0) {\n    return __async(this, arguments, function* ({\n      botId,\n      forwardingId,\n      rtpCapabilities,\n      subscriptionId,\n      subscriberId,\n      spatialLayer,\n      originPublicationId\n    }) {\n      const backOff = new BackOff({ times: 5, interval: 100 });\n      const requestPayload = {\n        rtpCapabilities,\n        subscriptionId,\n        subscriberId,\n        spatialLayer,\n        originPublicationId\n      };\n      const res = yield this.http.post(\n        `/bots/${botId}/forwardings/${forwardingId}/transport/consumers`,\n        requestPayload,\n        {\n          retry: (err) => __async(this, null, function* () {\n            if ([\n              400,\n              429\n            ].includes(err.status)) {\n              return false;\n            }\n            return yield backOff.wait();\n          }),\n          headers: { authorization: `Bearer ${this._token}` }\n        }\n      ).catch((e2) => {\n        if (e2.status === 429) {\n          throw createError5({\n            operationName: \"SfuRestApiClient.createConsumer\",\n            info: errors6.maxSubscriberExceededError,\n            path: log42.prefix,\n            payload: e2\n          });\n        } else {\n          throw this._commonErrorHandler(e2, \"SfuRestApiClient.createConsumer\");\n        }\n      });\n      if (backOff.count > 0) {\n        log42.warn(\n          \"success to retry createConsumer\",\n          createWarnPayload5({\n            operationName: \"SfuRestApiClient.createConsumer\",\n            detail: \"success to retry createConsumer\",\n            botId,\n            payload: { forwardingId, count: backOff.count }\n          })\n        );\n      }\n      log42.debug(\"response of createConsumer\", res);\n      return res;\n    });\n  }\n  connect(_0) {\n    return __async(this, arguments, function* ({\n      transportId,\n      dtlsParameters\n    }) {\n      const backOff = new BackOff();\n      const body = { transportId, dtlsParameters };\n      const res = yield this.http.put(`/transport/connection`, body, {\n        headers: { authorization: `Bearer ${this._token}` },\n        retry: () => __async(this, null, function* () {\n          return yield backOff.wait();\n        })\n      }).catch((e2) => {\n        throw this._commonErrorHandler(e2, \"SfuRestApiClient.connect\");\n      });\n      if (backOff.count > 0) {\n        log42.warn(\n          \"success to retry connect\",\n          createWarnPayload5({\n            operationName: \"SfuRestApiClient.connect\",\n            detail: \"success to retry connect\",\n            payload: { transportId, count: backOff.count }\n          })\n        );\n      }\n      return res;\n    });\n  }\n  changeConsumerLayer(_0) {\n    return __async(this, arguments, function* ({\n      transportId,\n      consumerId,\n      spatialLayer,\n      publicationId\n    }) {\n      const res = yield this.http.put(\n        `transport/consumers/${consumerId}/layer`,\n        { transportId, spatialLayer, publicationId },\n        {\n          headers: { authorization: `Bearer ${this._token}` }\n        }\n      ).catch((e2) => {\n        throw this._commonErrorHandler(\n          e2,\n          \"SfuRestApiClient.changeConsumerLayer\"\n        );\n      });\n      return res;\n    });\n  }\n  stopForwarding({\n    botId,\n    forwardingId\n  }) {\n    let fulfilled = false;\n    const promise = this.http.delete(`/bots/${botId}/forwardings/${forwardingId}`, {\n      headers: { authorization: `Bearer ${this._token}` }\n    }).catch((e2) => {\n      throw this._commonErrorHandler(e2, \"SfuRestApiClient.stopForwarding\");\n    }).then((res) => {\n      fulfilled = res;\n    });\n    return { promise, fulfilled };\n  }\n  iceRestart(_0) {\n    return __async(this, arguments, function* ({ transportId }) {\n      const res = yield this.http.put(\n        `/transport/connection/ice`,\n        { transportId },\n        { headers: this._headers }\n      ).catch((e2) => {\n        throw this._commonErrorHandler(e2, \"SfuRestApiClient.iceRestart\");\n      });\n      return res.iceParameters;\n    });\n  }\n  getRtpCapabilities(_0) {\n    return __async(this, arguments, function* ({\n      botId,\n      forwardingId,\n      originPublicationId\n    }) {\n      const backOff = new BackOff();\n      const res = yield this.http.get(\n        `/bots/${botId}/forwardings/${forwardingId}/transport/rtp_capabilities?originPublicationId=${originPublicationId}`,\n        {\n          headers: { authorization: `Bearer ${this._token}` },\n          retry: () => __async(this, null, function* () {\n            return yield backOff.wait();\n          })\n        }\n      ).catch((e2) => {\n        throw this._commonErrorHandler(\n          e2,\n          \"SfuRestApiClient.getRtpCapabilities\"\n        );\n      });\n      if (backOff.count > 0) {\n        log42.warn(\n          \"getCapabilities to retry connect\",\n          createWarnPayload5({\n            operationName: \"SfuRestApiClient.getRtpCapabilities\",\n            detail: \"getCapabilities to retry connect\",\n            botId,\n            payload: { forwardingId, count: backOff.count }\n          })\n        );\n      }\n      return res.rtpCapabilities;\n    });\n  }\n};\n\n// ../sfu-bot/src/option.ts\nvar defaultSfuBotPluginOptions = __spreadProps(__spreadValues({}, defaultSfuApiOptions), {\n  endpointTimeout: 3e4,\n  ackTimeout: 1e4,\n  disableRestartIce: false\n});\n\n// ../sfu-bot/src/plugin.ts\ninit_process();\n\n// ../sfu-bot/src/connection/transport/transportRepository.ts\ninit_process();\nvar import_mediasoup_client = __toESM(require_lib3());\n\n// ../sfu-bot/src/connection/transport/transport.ts\ninit_process();\nvar log43 = new Logger(\n  \"packages/sfu-bot/src/connection/transport/transport.ts\"\n);\nvar SfuTransport = class {\n  constructor(msTransport, _bot, _iceManager, _sfuApi, _context) {\n    this.msTransport = msTransport;\n    this._bot = _bot;\n    this._iceManager = _iceManager;\n    this._sfuApi = _sfuApi;\n    this._context = _context;\n    this._backoffIceRestart = new BackOff({\n      times: 10,\n      interval: 100,\n      jitter: 100\n    });\n    this._connectionState = \"new\";\n    this.onProduce = new Event();\n    this.onProduceData = new Event();\n    this.onMediasoupConnectionStateChanged = new Event();\n    this.onConnectionStateChanged = new Event();\n    this.restartIce = () => __async(this, null, function* () {\n      if (this._backoffIceRestart.exceeded) {\n        log43.error(\n          \"_iceRestartedCount exceeded\",\n          createError({\n            operationName: \"SfuTransport.restartIce\",\n            context: this._context,\n            info: errors5.netWorkError,\n            path: log43.prefix\n          })\n        );\n        this._setConnectionState(\"disconnected\");\n        return;\n      }\n      log43.warn(\n        \"[start] restartIce\",\n        createWarnPayload4({\n          bot: this._bot,\n          detail: \"start restartIce\",\n          operationName: \"SfuTransport.restartIce\",\n          payload: { count: this._backoffIceRestart.count, transport: this }\n        })\n      );\n      const checkNeedEnd = () => {\n        if (this._bot.state === \"left\") {\n          log43.debug(\"bot already left\", this);\n          this._setConnectionState(\"disconnected\");\n          log43.warn(\n            \"[end] restartIce\",\n            createWarnPayload4({\n              bot: this._bot,\n              detail: \"end restartIce\",\n              operationName: \"SfuTransport.restartIce\",\n              payload: { count: this._backoffIceRestart.count, transport: this }\n            })\n          );\n          return true;\n        }\n        if (this.msTransport.connectionState === \"connected\") {\n          this._backoffIceRestart.reset();\n          this._setConnectionState(\"connected\");\n          log43.warn(\n            \"[end] restartIce\",\n            createWarnPayload4({\n              bot: this._bot,\n              detail: \"end restartIce\",\n              operationName: \"SfuTransport.restartIce\",\n              payload: { count: this._backoffIceRestart.count, transport: this }\n            })\n          );\n          return true;\n        }\n      };\n      this._setConnectionState(\"reconnecting\");\n      yield this._backoffIceRestart.wait();\n      if (checkNeedEnd()) {\n        return;\n      }\n      let e2 = yield this._iceManager.updateIceParams().catch((e3) => e3);\n      if (e2) {\n        log43.warn(\n          \"updateIceParams failed\",\n          createWarnPayload4({\n            operationName: \"SfuTransport.restartIce\",\n            detail: \"updateIceParams failed\",\n            bot: this._bot,\n            payload: { transport: this }\n          }),\n          e2\n        );\n        yield this.restartIce();\n        return;\n      }\n      yield this.msTransport.updateIceServers({\n        iceServers: this._iceManager.iceServers\n      });\n      if (checkNeedEnd()) {\n        return;\n      }\n      const iceParameters = yield this._mediasoupRestartIce();\n      e2 = yield this._waitForMsConnectionState(\n        \"connected\",\n        this._context.config.rtcConfig.iceDisconnectBufferTimeout\n      ).catch((e3) => e3);\n      if (!e2 && checkNeedEnd()) {\n        return iceParameters;\n      }\n      yield this.restartIce();\n    });\n    this._waitForMsConnectionState = (state, timeout = 1e4) => __async(this, null, function* () {\n      if (state === this.msTransport.connectionState)\n        return;\n      yield this.onMediasoupConnectionStateChanged.watch(() => state === this.msTransport.connectionState, timeout).catch((err) => {\n        throw createError({\n          operationName: \"SfuTransport._waitForMsConnectionState\",\n          context: this._context,\n          info: __spreadProps(__spreadValues({}, errors5.timeout), { detail: \"waitForConnectionState timeout\" }),\n          error: err,\n          path: log43.prefix\n        });\n      });\n    });\n    this._onConnect = (transportId) => (_0, _1, _2) => __async(this, [_0, _1, _2], function* ({\n      dtlsParameters\n    }, callback, errback) {\n      try {\n        log43.debug(\"[start] transport connect\", { transportId });\n        yield this._sfuApi.connect({ transportId, dtlsParameters });\n        log43.debug(\"[end] transport connect\", { transportId });\n        callback();\n      } catch (error) {\n        log43.error(\"[failed] transport connect\", {\n          error,\n          transportId\n        });\n        errback(error);\n      }\n    });\n    var _a2, _b2, _c;\n    const sfuPlugin = _context.plugins.find(\n      (p) => p.subtype === SfuBotPlugin.subtype\n    );\n    this._options = sfuPlugin.options;\n    log43.debug(\"peerConfig\", (_c = (_b2 = (_a2 = this.pc) == null ? void 0 : _a2.getConfiguration) == null ? void 0 : _b2.call(_a2)) != null ? _c : {});\n    msTransport.on(\n      \"connect\",\n      (params, callback, errback) => this._onConnect(msTransport.id)(\n        params,\n        callback,\n        errback\n      )\n    );\n    msTransport.on(\n      \"connectionstatechange\",\n      (e2) => this.onMediasoupConnectionStateChanged.emit(e2)\n    );\n    msTransport.on(\"produce\", (producerOptions, callback, errback) => {\n      this.onProduce.emit({\n        producerOptions,\n        callback,\n        errback\n      });\n    });\n    msTransport.on(\"producedata\", (producerOptions, callback, errback) => {\n      this.onProduceData.emit({\n        producerOptions,\n        callback,\n        errback\n      });\n    });\n    this.onMediasoupConnectionStateChanged.add(\n      (state) => __async(this, null, function* () {\n        createLogPayload({\n          operationName: \"onMediasoupConnectionStateChanged\",\n          channel: this._bot.channel\n        }).then((debug) => {\n          log43.debug(debug, { state, transportId: this.id, bot: _bot });\n        });\n        switch (state) {\n          case \"disconnected\":\n          case \"failed\":\n            {\n              if (this._connectionState === \"reconnecting\") {\n                return;\n              }\n              const e2 = yield this._waitForMsConnectionState(\n                \"connected\",\n                _context.config.rtcConfig.iceDisconnectBufferTimeout\n              ).catch((e3) => e3);\n              if (e2 && this._connectionState !== \"reconnecting\" && _bot.options.disableRestartIce !== true) {\n                yield this.restartIce();\n              }\n            }\n            break;\n          case \"connecting\":\n          case \"connected\":\n            this._setConnectionState(state);\n            break;\n          case \"closed\":\n            this._setConnectionState(\"disconnected\");\n            break;\n        }\n        log43.debug(\"onMediasoupConnectionStateChanged\", this);\n      })\n    );\n  }\n  get pc() {\n    var _a2, _b2, _c;\n    return (_c = (_b2 = (_a2 = this.msTransport) == null ? void 0 : _a2._handler) == null ? void 0 : _b2._pc) != null ? _c : {};\n  }\n  get id() {\n    return this.msTransport.id;\n  }\n  get connectionState() {\n    return this._connectionState;\n  }\n  toJSON() {\n    return {\n      id: this.id,\n      direction: this.msTransport.direction,\n      connectionState: this._connectionState\n    };\n  }\n  close() {\n    var _a2;\n    log43.debug(\"close\", this.id);\n    if ((_a2 = this.pc) == null ? void 0 : _a2.peerIdentity) {\n      this.pc.peerIdentity.catch(() => {\n      });\n    }\n    this.msTransport.close();\n    this._setConnectionState(\"disconnected\");\n  }\n  _setConnectionState(state) {\n    if (this._connectionState === state) {\n      return;\n    }\n    log43.debug(\"onConnectionStateChanged\", this._connectionState, state, this);\n    this._connectionState = state;\n    this.onConnectionStateChanged.emit(state);\n  }\n  _mediasoupRestartIce() {\n    return __async(this, null, function* () {\n      const iceParameters = yield this._sfuApi.iceRestart({\n        transportId: this.id\n      }).catch((e2) => e2);\n      if (iceParameters instanceof Error) {\n        log43.warn(\n          \"iceRestart failed\",\n          createWarnPayload4({\n            operationName: \"SfuTransport._mediasoupRestartIce\",\n            detail: \"iceRestart failed\",\n            bot: this._bot,\n            payload: { transport: this }\n          }),\n          iceParameters\n        );\n        yield this.restartIce();\n        return;\n      }\n      yield this.msTransport.restartIce({ iceParameters });\n      return iceParameters;\n    });\n  }\n};\n\n// ../sfu-bot/src/connection/transport/transportRepository.ts\nvar log44 = new Logger(\n  \"packages/sfu-bot/src/connection/transport/transportRepository.ts\"\n);\nvar TransportRepository = class {\n  constructor(_context, _api) {\n    this._context = _context;\n    this._api = _api;\n    this.onTransportCreated = new Event();\n    this._transports = {};\n    this.getTransport = (personId, id) => this._transports[personId + id];\n    const { browserName, browserVersion } = getRuntimeInfo();\n    log44.debug(\"runtime info\", { browserName, browserVersion });\n    if (browserName === \"Safari\" && browserVersion == void 0) {\n      this._device = new import_mediasoup_client.Device({ handlerName: \"Safari12\" });\n    } else {\n      this._device = new import_mediasoup_client.Device();\n    }\n  }\n  get rtpCapabilities() {\n    if (!this._device.loaded) {\n      return void 0;\n    }\n    return this._device.rtpCapabilities;\n  }\n  loadDevice(rtpCapabilities) {\n    return __async(this, null, function* () {\n      if (!this._device.loaded) {\n        yield this._device.load({\n          routerRtpCapabilities: rtpCapabilities\n        }).catch((err) => {\n          throw createError({\n            operationName: \"TransportRepository.loadDevice\",\n            context: this._context,\n            info: __spreadProps(__spreadValues({}, errors5.internal), { detail: \"loadDevice failed\" }),\n            path: log44.prefix,\n            payload: { rtpCapabilities },\n            error: err\n          });\n        });\n        log44.debug(\"device loaded\", {\n          routerRtpCapabilities: rtpCapabilities,\n          rtpCapabilities: this._device.rtpCapabilities\n        });\n      }\n    });\n  }\n  createTransport(personId, bot, transportOptions, direction, iceManager) {\n    const createTransport = direction === \"send\" ? (o2) => this._device.createSendTransport(o2) : (o2) => this._device.createRecvTransport(o2);\n    const msTransport = createTransport(__spreadProps(__spreadValues({}, transportOptions), {\n      iceServers: iceManager.iceServers,\n      iceTransportPolicy: this._context.config.rtcConfig.turnPolicy === \"turnOnly\" ? \"relay\" : void 0,\n      additionalSettings: this._context.config.rtcConfig\n    }));\n    const transport = new SfuTransport(\n      msTransport,\n      bot,\n      iceManager,\n      this._api,\n      this._context\n    );\n    this._transports[personId + msTransport.id] = transport;\n    this.onTransportCreated.emit(msTransport.id);\n    return transport;\n  }\n  deleteTransports(personId) {\n    Object.entries(__spreadValues({}, this._transports)).forEach(([id, transport]) => {\n      if (id.includes(personId)) {\n        transport.close();\n        delete this._transports[id];\n      }\n    });\n  }\n};\n\n// ../sfu-bot/src/version.ts\ninit_process();\nvar PACKAGE_VERSION3 = \"1.4.0\";\n\n// ../sfu-bot/src/plugin.ts\nvar log45 = new Logger(\"packages/sfu-bot/src/plugin.ts\");\nvar _SfuBotPlugin = class extends SkyWayPlugin {\n  constructor(_options = {}) {\n    super();\n    this.subtype = _SfuBotPlugin.subtype;\n    this._createRemoteMember = (channel, sfuBot) => {\n      const member = new SfuBotMember(__spreadProps(__spreadValues({}, this._context), {\n        channel,\n        id: sfuBot.id,\n        name: sfuBot.name,\n        metadata: sfuBot.metadata,\n        plugin: this,\n        api: this._api,\n        context: this._context,\n        transportRepository: this._transportRepository,\n        options: this.options\n      }));\n      return member;\n    };\n    this.createBot = (channel) => __async(this, null, function* () {\n      var _a2;\n      const timestamp = log45.info(\n        \"[start] createBot\",\n        yield createLogPayload({\n          operationName: \"SfuBotPlugin.createBot\",\n          channel\n        })\n      );\n      const botId = yield this._api.createBot({\n        appId: this._context.authToken.scope.app.id,\n        channelId: channel.id\n      });\n      const member = (_a2 = channel._getMember(botId)) != null ? _a2 : (yield channel.onMemberJoined.watch(\n        (e2) => e2.member.id === botId,\n        this._context.config.rtcApi.timeout\n      ).catch((error) => {\n        throw createError({\n          operationName: \"SfuBotPlugin.createBot\",\n          info: __spreadProps(__spreadValues({}, errors5.timeout), { detail: \"onMemberJoined\" }),\n          path: log45.prefix,\n          error,\n          context: this._context\n        });\n      })).member;\n      log45.elapsed(\n        timestamp,\n        \"[end] createBot\",\n        yield createLogPayload({\n          operationName: \"SfuBotPlugin.createBot\",\n          channel\n        })\n      );\n      return member;\n    });\n    this.deleteBot = (channel, botId) => __async(this, null, function* () {\n      return new Promise((r2, f) => __async(this, null, function* () {\n        const timestamp = log45.info(\n          \"[start] deleteBot\",\n          yield createLogPayload({\n            operationName: \"SfuBotPlugin.deleteBot\",\n            channel\n          })\n        );\n        let failed = false;\n        this._api.deleteBot({ botId }).catch((e2) => {\n          failed = true;\n          f(e2);\n        });\n        channel.onMemberLeft.watch(\n          (e2) => e2.member.id === botId,\n          this._context.config.rtcApi.timeout\n        ).catch((error) => {\n          if (!failed)\n            f(\n              createError({\n                operationName: \"SfuBotPlugin.deleteBot\",\n                info: __spreadProps(__spreadValues({}, errors5.timeout), { detail: \"onMemberLeft\" }),\n                path: log45.prefix,\n                channel,\n                error,\n                context: this._context\n              })\n            );\n        }).then(() => __async(this, null, function* () {\n          log45.elapsed(\n            timestamp,\n            \"[end] deleteBot\",\n            yield createLogPayload({\n              operationName: \"SfuBotPlugin.deleteBot\",\n              channel\n            })\n          );\n          r2();\n        }));\n      }));\n    });\n    this.options = __spreadValues(__spreadValues({}, defaultSfuBotPluginOptions), _options);\n    this._onContextAttached.once((context) => {\n      Logger.level = context.config.log.level;\n      Logger.format = context.config.log.format;\n      log45.info(\"SfuBotPlugin spawned\", {\n        operationName: \"SfuBotPlugin.constructor\",\n        endpoint: { sfu: this.options.domain },\n        options: this.options,\n        sdkName: \"sfu-bot\",\n        sdkVersion: PACKAGE_VERSION3\n      });\n      this._api = new SfuRestApiClient(context.authTokenString, __spreadProps(__spreadValues({}, this.options), {\n        log: context.config.log\n      }));\n      this._transportRepository = new TransportRepository(context, this._api);\n      context._onTokenUpdated.add((token) => {\n        this._api.updateToken(token);\n      });\n    });\n    this._whenDisposeLocalPerson = (person) => __async(this, null, function* () {\n      this._transportRepository.deleteTransports(person.id);\n    });\n  }\n};\nvar SfuBotPlugin = _SfuBotPlugin;\nSfuBotPlugin.subtype = SfuBotMember.subtype;\n\n// src/const.ts\ninit_process();\nvar defaultMaxSubscribers2 = 10;\n\n// src/member/local/sfu.ts\nvar log46 = new Logger(\"packages/room/src/member/local/sfu.ts\");\nvar LocalSFURoomMemberImpl = class extends LocalRoomMemberImpl {\n  constructor(member, room) {\n    super(member, room);\n  }\n  publish(_0) {\n    return __async(this, arguments, function* (stream, options = {}) {\n      var _a2;\n      if (stream instanceof LocalDataStream) {\n        throw createError4({\n          operationName: \"LocalSFURoomMemberImpl.publish\",\n          context: this._context,\n          room: this.room,\n          info: errors4.sfuRoomNotSupportDataStream,\n          path: log46.prefix\n        });\n      }\n      options.maxSubscribers = (_a2 = options.maxSubscribers) != null ? _a2 : defaultMaxSubscribers2;\n      const origin = yield this._local.publish(stream, options);\n      const bot = this.room._channel.members.find(\n        (m) => m.subtype === SfuBotMember.subtype\n      );\n      if (!bot) {\n        throw createError4({\n          operationName: \"LocalSFURoomMemberImpl.publish\",\n          context: this._context,\n          room: this.room,\n          info: errors5.sfuBotNotInChannel,\n          path: log46.prefix\n        });\n      }\n      const forwarding = yield bot.startForwarding(origin, {\n        maxSubscribers: options.maxSubscribers\n      });\n      const relayingPublication = forwarding.relayingPublication;\n      const roomPublication = this.room._addPublication(relayingPublication);\n      this.onStreamPublished.emit({ publication: roomPublication });\n      return roomPublication;\n    });\n  }\n  unpublish(target) {\n    return __async(this, null, function* () {\n      const publicationId = typeof target === \"string\" ? target : target.id;\n      const publication = this.room._getPublication(publicationId);\n      const origin = publication._publication.origin;\n      if (!origin) {\n        throw createError4({\n          operationName: \"LocalSFURoomMemberImpl.unpublish\",\n          context: this._context,\n          room: this.room,\n          info: errors4.publicationNotHasOrigin,\n          path: log46.prefix\n        });\n      }\n      this._local.unpublish(origin.id);\n      yield this.room.onStreamUnpublished.watch(\n        (e2) => e2.publication.id === publicationId,\n        this._context.config.rtcApi.timeout\n      ).catch((error) => {\n        throw createError4({\n          operationName: \"LocalSFURoomMemberImpl.unpublish\",\n          context: this._context,\n          room: this.room,\n          info: __spreadProps(__spreadValues({}, errors4.timeout), { detail: \"onStreamUnpublished\" }),\n          path: log46.prefix,\n          error\n        });\n      });\n      this.onStreamUnpublished.emit({ publication });\n    });\n  }\n  subscribe(target, options) {\n    return __async(this, null, function* () {\n      const publicationId = typeof target === \"string\" ? target : target.id;\n      const { subscription, stream } = yield this._local.subscribe(\n        publicationId,\n        options\n      );\n      const roomSubscription = this.room._addSubscription(\n        subscription\n      );\n      return {\n        subscription: roomSubscription,\n        stream\n      };\n    });\n  }\n  unsubscribe(target) {\n    return __async(this, null, function* () {\n      const subscriptionId = typeof target === \"string\" ? target : target.id;\n      this._local.unsubscribe(subscriptionId);\n      yield this.room.onPublicationUnsubscribed.watch(\n        (e2) => e2.subscription.id === subscriptionId,\n        this._context.config.rtcApi.timeout\n      ).catch((error) => {\n        throw createError4({\n          operationName: \"LocalSFURoomMemberImpl.unsubscribe\",\n          context: this._context,\n          room: this.room,\n          info: __spreadProps(__spreadValues({}, errors4.timeout), { detail: \"onPublicationUnsubscribed\" }),\n          path: log46.prefix,\n          error\n        });\n      });\n    });\n  }\n  _updateRoom(room) {\n    log46.debug(\"_updateRoom\", { memberId: this.id });\n    this.room = room;\n    this._listenRoomEvent();\n  }\n};\n\n// src/member/remote/base.ts\ninit_process();\nvar log47 = new Logger(\"packages/room/src/member/remote/base.ts\");\nvar RemoteRoomMemberImpl = class extends RoomMemberImpl {\n  constructor(member, room) {\n    super(member, room);\n    this.side = \"remote\";\n    this.onPublicationSubscribed = new Event();\n    this.onPublicationUnsubscribed = new Event();\n    this.onSubscriptionListChanged = new Event();\n    this.onPublicationListChanged = new Event();\n    this._disposer = new EventDisposer();\n    this.subscribe = (publicationId) => new Promise((r2, f) => {\n      if (!(this.member instanceof RemotePersonImpl)) {\n        f(\n          createError4({\n            operationName: \"RemoteRoomMemberImpl.subscribe\",\n            context: this.room._context,\n            room: this.room,\n            info: errors4.subscribeOtherMemberType,\n            path: log47.prefix\n          })\n        );\n        return;\n      }\n      let failed = false;\n      this.member.subscribe(publicationId).catch((e2) => {\n        failed = true;\n        f(e2);\n      });\n      this.onPublicationSubscribed.watch((e2) => e2.subscription.publication.id === publicationId).then((e2) => r2(e2)).catch((e2) => {\n        if (!failed)\n          f(e2);\n      });\n    });\n    this.unsubscribe = (subscriptionId) => new Promise((r2, f) => {\n      if (!(this.member instanceof RemotePersonImpl)) {\n        f(\n          createError4({\n            operationName: \"RemoteRoomMemberImpl.unsubscribe\",\n            context: this.room._context,\n            room: this.room,\n            info: errors4.subscribeOtherMemberType,\n            path: log47.prefix\n          })\n        );\n        return;\n      }\n      let failed = false;\n      this.member.unsubscribe(subscriptionId).catch((e2) => {\n        failed = true;\n        f(e2);\n      });\n      this.onPublicationUnsubscribed.watch((e2) => e2.subscription.id === subscriptionId).then(() => r2()).catch((e2) => {\n        if (!failed)\n          f(e2);\n      });\n    });\n    room.onPublicationSubscribed.add((e2) => {\n      if (e2.subscription.subscriber._member.id === member.id) {\n        this.onPublicationSubscribed.emit(e2);\n        this.onSubscriptionListChanged.emit();\n      }\n    }).disposer(this._disposer);\n    room.onPublicationUnsubscribed.add((e2) => {\n      if (e2.subscription.subscriber._member.id === member.id) {\n        this.onPublicationUnsubscribed.emit(e2);\n        this.onSubscriptionListChanged.emit();\n      }\n    }).disposer(this._disposer);\n    if (member instanceof RemotePersonImpl) {\n      member.onPublicationListChanged.pipe(this.onPublicationListChanged).disposer(this._disposer);\n    }\n  }\n  _dispose() {\n    this._disposer.dispose();\n  }\n};\n\n// src/publication/index.ts\ninit_process();\nvar path = \"packages/room/src/publication/index.ts\";\nvar logger = new Logger(path);\nvar RoomPublicationImpl = class {\n  constructor(_publication, _room) {\n    this._publication = _publication;\n    this._room = _room;\n    this._disposer = new EventDisposer();\n    this._events = new Events();\n    this.onCanceled = this._events.make();\n    this.onSubscribed = this._events.make();\n    this.onUnsubscribed = this._events.make();\n    this.onSubscriptionListChanged = this._events.make();\n    this.onMetadataUpdated = this._events.make();\n    this.onEnabled = this._events.make();\n    this.onDisabled = this._events.make();\n    this.onStateChanged = this._events.make();\n    this.onConnectionStateChanged = new Event();\n    this.enable = () => new Promise((r2, f) => {\n      if (this._origin) {\n        Promise.all([\n          this._origin.enable(),\n          this._publication.onEnabled.asPromise()\n        ]).then(() => r2()).catch(f);\n      } else {\n        this._publication.enable().then(r2).catch(f);\n      }\n    });\n    this.disable = () => new Promise((r2, f) => {\n      if (this._origin) {\n        Promise.all([\n          this._origin.disable(),\n          this._publication.onDisabled.asPromise()\n        ]).then(() => r2()).catch(f);\n      } else {\n        this._publication.disable().then(r2).catch(f);\n      }\n    });\n    this.replaceStream = (stream, options = {}) => {\n      this._preferredPublication.replaceStream(stream, options);\n    };\n    var _a2;\n    this.id = _publication.id;\n    this.contentType = _publication.contentType;\n    this._origin = _publication.origin;\n    {\n      const publication = (_a2 = this._origin) != null ? _a2 : this._publication;\n      this.publisher = this._room._getMember(publication.publisher.id);\n    }\n    this._setEvents();\n  }\n  _setEvents() {\n    var _a2;\n    this._room.onStreamUnpublished.add((e2) => {\n      if (e2.publication.id === this.id) {\n        this._dispose();\n      }\n    });\n    this._room.onPublicationSubscribed.add((e2) => {\n      if (e2.subscription.publication.id === this.id) {\n        this.onSubscribed.emit({ subscription: e2.subscription });\n        this.onSubscriptionListChanged.emit();\n      }\n    }).disposer(this._disposer);\n    this._room.onPublicationUnsubscribed.add((e2) => {\n      if (e2.subscription.publication.id === this.id) {\n        this.onUnsubscribed.emit({ subscription: e2.subscription });\n        this.onSubscriptionListChanged.emit();\n      }\n    }).disposer(this._disposer);\n    this._publication.onEnabled.pipe(this.onEnabled);\n    this._publication.onDisabled.pipe(this.onDisabled);\n    this._publication.onStateChanged.pipe(this.onStateChanged);\n    {\n      const publication = (_a2 = this._origin) != null ? _a2 : this._publication;\n      publication.onMetadataUpdated.pipe(this.onMetadataUpdated);\n    }\n    if (this._origin) {\n      this._origin.onConnectionStateChanged.add((e2) => {\n        logger.debug(\"this._origin.onConnectionStateChanged\", this.id, e2);\n        this.onConnectionStateChanged.emit({ state: e2.state });\n      });\n    } else {\n      this._publication.onConnectionStateChanged.add((e2) => {\n        logger.debug(\"this._publication.onConnectionStateChanged\", this.id, e2);\n        this.onConnectionStateChanged.emit({\n          state: e2.state,\n          remoteMember: this._room._getMember(e2.remoteMember.id)\n        });\n      });\n    }\n  }\n  get subscriptions() {\n    return this._publication.subscriptions.map(\n      (s) => this._room._getSubscription(s.id)\n    );\n  }\n  get _preferredPublication() {\n    var _a2;\n    return (_a2 = this._origin) != null ? _a2 : this._publication;\n  }\n  get codecCapabilities() {\n    return this._preferredPublication.codecCapabilities;\n  }\n  get encodings() {\n    return this._preferredPublication.encodings;\n  }\n  get stream() {\n    return this._preferredPublication.stream;\n  }\n  get state() {\n    return this._preferredPublication.state;\n  }\n  get metadata() {\n    return this._preferredPublication.metadata;\n  }\n  cancel() {\n    return __async(this, null, function* () {\n      yield Promise.all([\n        this._preferredPublication.cancel(),\n        this.onCanceled.asPromise()\n      ]);\n    });\n  }\n  updateMetadata(metadata) {\n    return __async(this, null, function* () {\n      yield this._preferredPublication.updateMetadata(metadata);\n    });\n  }\n  updateEncodings(encodings) {\n    this._preferredPublication.updateEncodings(encodings);\n  }\n  _dispose() {\n    this.onCanceled.emit();\n    this._events.dispose();\n    this._disposer.dispose();\n  }\n  getStats(selector) {\n    var _a2;\n    if (this._origin) {\n      const bot = (_a2 = this._origin.subscriptions.find(\n        (s) => s.subscriber.subtype === SfuBotMember.subtype\n      )) == null ? void 0 : _a2.subscriber;\n      if (!bot) {\n        throw createError4({\n          operationName: \"RoomPublicationImpl.getStats\",\n          room: this._room,\n          path,\n          info: __spreadProps(__spreadValues({}, errors4.notFound), { detail: \"bot not found\" })\n        });\n      }\n      return this._origin.getStats(bot);\n    } else {\n      const id = typeof selector === \"string\" ? selector : selector.id;\n      return this._publication.getStats(id);\n    }\n  }\n  getRTCPeerConnection(selector) {\n    var _a2;\n    if (this._origin) {\n      const bot = (_a2 = this._origin.subscriptions.find(\n        (s) => s.subscriber.subtype === SfuBotMember.subtype\n      )) == null ? void 0 : _a2.subscriber;\n      if (!bot) {\n        throw createError4({\n          operationName: \"RoomPublicationImpl.getRTCPeerConnection\",\n          room: this._room,\n          path,\n          info: __spreadProps(__spreadValues({}, errors4.notFound), { detail: \"bot not found\" })\n        });\n      }\n      return this._origin.getRTCPeerConnection(bot);\n    } else {\n      const id = typeof selector === \"string\" ? selector : selector.id;\n      return this._publication.getRTCPeerConnection(id);\n    }\n  }\n  getConnectionState(selector) {\n    var _a2;\n    if (this._origin) {\n      const bot = (_a2 = this._origin.subscriptions.find(\n        (s) => s.subscriber.subtype === SfuBotMember.subtype\n      )) == null ? void 0 : _a2.subscriber;\n      if (!bot) {\n        throw createError4({\n          operationName: \"RoomPublicationImpl.getConnectionState\",\n          room: this._room,\n          path,\n          info: __spreadProps(__spreadValues({}, errors4.notFound), { detail: \"bot not found\" })\n        });\n      }\n      return this._origin.getConnectionState(bot);\n    } else {\n      const id = typeof selector === \"string\" ? selector : selector.id;\n      return this._publication.getConnectionState(id);\n    }\n  }\n  toJSON() {\n    return {\n      id: this.id,\n      contentType: this.contentType,\n      metadata: this.metadata,\n      publisher: this.publisher,\n      subscriptions: this.subscriptions,\n      codecCapabilities: this.codecCapabilities,\n      encodings: this.encodings,\n      state: this.state\n    };\n  }\n};\n\n// src/room/index.ts\ninit_process();\n\n// node_modules/uuid/dist/esm-browser/index.js\ninit_process();\n\n// node_modules/uuid/dist/esm-browser/rng.js\ninit_process();\nvar getRandomValues5;\nvar rnds85 = new Uint8Array(16);\nfunction rng5() {\n  if (!getRandomValues5) {\n    getRandomValues5 = typeof crypto !== \"undefined\" && crypto.getRandomValues && crypto.getRandomValues.bind(crypto);\n    if (!getRandomValues5) {\n      throw new Error(\"crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported\");\n    }\n  }\n  return getRandomValues5(rnds85);\n}\n\n// node_modules/uuid/dist/esm-browser/stringify.js\ninit_process();\nvar byteToHex5 = [];\nfor (let i = 0; i < 256; ++i) {\n  byteToHex5.push((i + 256).toString(16).slice(1));\n}\nfunction unsafeStringify4(arr, offset = 0) {\n  return (byteToHex5[arr[offset + 0]] + byteToHex5[arr[offset + 1]] + byteToHex5[arr[offset + 2]] + byteToHex5[arr[offset + 3]] + \"-\" + byteToHex5[arr[offset + 4]] + byteToHex5[arr[offset + 5]] + \"-\" + byteToHex5[arr[offset + 6]] + byteToHex5[arr[offset + 7]] + \"-\" + byteToHex5[arr[offset + 8]] + byteToHex5[arr[offset + 9]] + \"-\" + byteToHex5[arr[offset + 10]] + byteToHex5[arr[offset + 11]] + byteToHex5[arr[offset + 12]] + byteToHex5[arr[offset + 13]] + byteToHex5[arr[offset + 14]] + byteToHex5[arr[offset + 15]]).toLowerCase();\n}\n\n// node_modules/uuid/dist/esm-browser/v4.js\ninit_process();\n\n// node_modules/uuid/dist/esm-browser/native.js\ninit_process();\nvar randomUUID4 = typeof crypto !== \"undefined\" && crypto.randomUUID && crypto.randomUUID.bind(crypto);\nvar native_default4 = {\n  randomUUID: randomUUID4\n};\n\n// node_modules/uuid/dist/esm-browser/v4.js\nfunction v45(options, buf, offset) {\n  if (native_default4.randomUUID && !buf && !options) {\n    return native_default4.randomUUID();\n  }\n  options = options || {};\n  const rnds = options.random || (options.rng || rng5)();\n  rnds[6] = rnds[6] & 15 | 64;\n  rnds[8] = rnds[8] & 63 | 128;\n  if (buf) {\n    offset = offset || 0;\n    for (let i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n    return buf;\n  }\n  return unsafeStringify4(rnds);\n}\nvar v4_default5 = v45;\n\n// src/room/p2p.ts\ninit_process();\n\n// src/room/base.ts\ninit_process();\n\n// src/subscription/index.ts\ninit_process();\nvar log48 = new Logger(\"packages/room/src/subscription/index.ts\");\nvar RoomSubscriptionImpl = class {\n  constructor(_subscription, _room) {\n    this._subscription = _subscription;\n    this._room = _room;\n    this._context = this._room._context;\n    this.onStreamAttached = new Event();\n    this.onCanceled = new Event();\n    this.onConnectionStateChanged = new Event();\n    this.id = _subscription.id;\n    this.contentType = _subscription.contentType;\n    this.publication = this._room._getPublication(_subscription.publication.id);\n    this.subscriber = this._room._getMember(_subscription.subscriber.id);\n    _subscription.onStreamAttached.pipe(this.onStreamAttached);\n    _subscription.onCanceled.pipe(this.onCanceled);\n    _subscription.onConnectionStateChanged.add((state) => {\n      log48.debug(\"_subscription.onConnectionStateChanged\", this.id, state);\n      this.onConnectionStateChanged.emit(state);\n    });\n  }\n  get stream() {\n    return this._subscription.stream;\n  }\n  get state() {\n    return this._subscription.state;\n  }\n  get codec() {\n    return this._subscription.codec;\n  }\n  get preferredEncoding() {\n    return this._subscription.preferredEncoding;\n  }\n  changePreferredEncoding(id) {\n    this._subscription.changePreferredEncoding(id);\n  }\n  cancel() {\n    return __async(this, null, function* () {\n      this._subscription.cancel();\n      yield this._room.onPublicationUnsubscribed.watch(\n        (e2) => e2.subscription.id === this.id,\n        this._context.config.rtcApi.timeout\n      ).catch((error) => {\n        throw createError4({\n          operationName: \"RoomSubscriptionImpl.cancel\",\n          context: this._context,\n          room: this._room,\n          info: __spreadProps(__spreadValues({}, errors4.timeout), { detail: \"onPublicationUnsubscribed\" }),\n          error,\n          path: log48.prefix\n        });\n      });\n    });\n  }\n  toJSON() {\n    return {\n      id: this.id,\n      contentType: this.contentType,\n      publication: this.publication,\n      codec: this.codec\n    };\n  }\n  getStats() {\n    return this._subscription.getStats();\n  }\n  getRTCPeerConnection() {\n    return this._subscription.getRTCPeerConnection();\n  }\n  getConnectionState() {\n    return this._subscription.getConnectionState();\n  }\n};\n\n// src/room/base.ts\nvar log49 = new Logger(\"packages/room/src/room/base.ts\");\nvar RoomImpl = class {\n  constructor(type, _channel) {\n    this._channel = _channel;\n    this._members = {};\n    this._publications = {};\n    this._subscriptions = {};\n    this._context = this._channel._context;\n    this._events = new Events();\n    this.onClosed = this._events.make();\n    this.onMetadataUpdated = this._events.make();\n    this.onMemberJoined = this._events.make();\n    this.onMemberLeft = this._events.make();\n    this.onMemberListChanged = this._events.make();\n    this.onMemberMetadataUpdated = this._events.make();\n    this.onStreamPublished = this._events.make();\n    this.onStreamUnpublished = this._events.make();\n    this.onPublicationListChanged = this._events.make();\n    this.onPublicationMetadataUpdated = this._events.make();\n    this.onPublicationEnabled = this._events.make();\n    this.onPublicationDisabled = this._events.make();\n    this.onPublicationSubscribed = this._events.make();\n    this.onPublicationUnsubscribed = this._events.make();\n    this.onSubscriptionListChanged = this._events.make();\n    this.type = type;\n    this._channel.onClosed.pipe(this.onClosed);\n    this._channel.onMetadataUpdated.pipe(this.onMetadataUpdated);\n    this._channel.onMemberMetadataUpdated.add((e2) => {\n      this._handleOnMemberMetadataUpdate(e2);\n    });\n  }\n  _getMember(id) {\n    return this._members[id];\n  }\n  _getPublication(id) {\n    return this._publications[id];\n  }\n  _addPublication(p) {\n    const exist = this._publications[p.id];\n    if (exist) {\n      return exist;\n    }\n    const publication = new RoomPublicationImpl(p, this);\n    this._publications[p.id] = publication;\n    return publication;\n  }\n  _getSubscription(id) {\n    return this._subscriptions[id];\n  }\n  _addSubscription(s) {\n    const exist = this._subscriptions[s.id];\n    if (exist) {\n      return exist;\n    }\n    const subscription = new RoomSubscriptionImpl(s, this);\n    this._subscriptions[s.id] = subscription;\n    return subscription;\n  }\n  get id() {\n    return this._channel.id;\n  }\n  get name() {\n    return this._channel.name;\n  }\n  get metadata() {\n    return this._channel.metadata;\n  }\n  get state() {\n    return this._channel.state;\n  }\n  get disposed() {\n    return this._channel.disposed;\n  }\n  _handleOnMemberMetadataUpdate(e2) {\n    const member = this._getMember(e2.member.id);\n    this.onMemberMetadataUpdated.emit({ member, metadata: e2.metadata });\n  }\n  get members() {\n    return Object.values(this._members);\n  }\n  get publications() {\n    return Object.values(this._publications);\n  }\n  get subscriptions() {\n    return Object.values(this._subscriptions);\n  }\n  joinChannel() {\n    return __async(this, arguments, function* (roomMemberInit = {}) {\n      var _a2;\n      if (this.state !== \"opened\") {\n        throw createError4({\n          operationName: \"RoomImpl.joinChannel\",\n          context: this._context,\n          room: this,\n          info: errors4.roomNotOpened,\n          path: log49.prefix\n        });\n      }\n      roomMemberInit.name = (_a2 = roomMemberInit.name) != null ? _a2 : v4_default5();\n      const local = yield this._channel.join(roomMemberInit);\n      if (!this._getMember(local.id)) {\n        yield this.onMemberJoined.watch((e2) => {\n          return e2.member._member.id === local.id;\n        }, this._context.config.rtcApi.timeout).catch((error) => {\n          throw createError4({\n            operationName: \"RoomImpl.joinChannel\",\n            context: this._context,\n            room: this,\n            info: __spreadProps(__spreadValues({}, errors4.timeout), { detail: \"RoomImpl onMemberJoined\" }),\n            path: log49.prefix,\n            error\n          });\n        });\n      }\n      return local;\n    });\n  }\n  leave(member) {\n    return __async(this, null, function* () {\n      yield this._channel.leave(member._member);\n    });\n  }\n  moveRoom(member) {\n    return __async(this, null, function* () {\n      yield this._channel.moveChannel(member._local);\n      member._updateRoom(this);\n      return member;\n    });\n  }\n  updateMetadata(metadata) {\n    return this._channel.updateMetadata(metadata);\n  }\n  close() {\n    return __async(this, null, function* () {\n      yield this._channel.close();\n    });\n  }\n  dispose() {\n    return __async(this, null, function* () {\n      return this._channel.dispose();\n    });\n  }\n  toJSON() {\n    return {\n      type: this.type,\n      id: this.id,\n      name: this.name,\n      metadata: this.metadata,\n      members: this.members,\n      publications: this.publications,\n      subscriptions: this.subscriptions\n    };\n  }\n};\n\n// src/room/p2p.ts\nvar log50 = new Logger(\"packages/room/src/room/p2p.ts\");\nvar P2PRoomImpl = class extends RoomImpl {\n  constructor(channel) {\n    super(\"p2p\", channel);\n    this.setChannelState();\n    this.setChannelListener();\n  }\n  setChannelState() {\n    this._channel.members.forEach((m) => {\n      const member = new RemoteRoomMemberImpl(m, this);\n      this._members[m.id] = member;\n    });\n    this._channel.publications.forEach((p) => {\n      this._addPublication(p);\n    });\n    this._channel.subscriptions.forEach((s) => {\n      this._addSubscription(s);\n    });\n  }\n  setChannelListener() {\n    this._channel.onMemberJoined.add((e2) => this._handleOnMemberJoin(e2.member));\n    this._channel.onMemberLeft.add((e2) => this._handleOnMemberLeft(e2.member));\n    this._channel.onStreamPublished.add(\n      (e2) => this._handleOnStreamPublish(e2.publication)\n    );\n    this._channel.onStreamUnpublished.add(\n      (e2) => this._handleOnStreamUnpublish(e2.publication)\n    );\n    this._channel.onPublicationMetadataUpdated.add((e2) => {\n      this._handleOnPublicationMetadataUpdate(e2.publication);\n    });\n    this._channel.onPublicationEnabled.add((e2) => {\n      this._handleOnPublicationEnabled(e2.publication);\n    });\n    this._channel.onPublicationDisabled.add((e2) => {\n      this._handleOnPublicationDisabled(e2.publication);\n    });\n    this._channel.onPublicationSubscribed.add(\n      (e2) => this._handleOnStreamSubscribe(e2.subscription)\n    );\n    this._channel.onPublicationUnsubscribed.add(\n      (e2) => this._handleOnStreamUnsubscribe(e2.subscription)\n    );\n  }\n  _handleOnMemberJoin(m) {\n    if (this._getMember(m.id)) {\n      return;\n    }\n    const member = new RemoteRoomMemberImpl(m, this);\n    this._members[m.id] = member;\n    this.onMemberJoined.emit({ member });\n    this.onMemberListChanged.emit({});\n  }\n  _handleOnMemberLeft(m) {\n    const member = this._getMember(m.id);\n    delete this._members[m.id];\n    member._dispose();\n    this.onMemberLeft.emit({ member });\n    this.onMemberListChanged.emit({});\n  }\n  _handleOnStreamPublish(p) {\n    if (this._getPublication(p.id)) {\n      return;\n    }\n    const publication = this._addPublication(p);\n    this.onStreamPublished.emit({ publication });\n    this.onPublicationListChanged.emit({});\n  }\n  _handleOnStreamUnpublish(p) {\n    const publication = this._getPublication(p.id);\n    delete this._publications[p.id];\n    this.onStreamUnpublished.emit({ publication });\n    this.onPublicationListChanged.emit({});\n  }\n  _handleOnPublicationMetadataUpdate(p) {\n    const publication = this._getPublication(p.id);\n    this.onPublicationMetadataUpdated.emit({\n      publication,\n      metadata: publication.metadata\n    });\n  }\n  _handleOnPublicationEnabled(p) {\n    const publication = this._getPublication(p.id);\n    this.onPublicationEnabled.emit({ publication });\n  }\n  _handleOnPublicationDisabled(p) {\n    const publication = this._getPublication(p.id);\n    this.onPublicationDisabled.emit({ publication });\n  }\n  _handleOnStreamSubscribe(s) {\n    if (this._getSubscription(s.id)) {\n      return;\n    }\n    const subscription = this._addSubscription(s);\n    this.onPublicationSubscribed.emit({ subscription });\n    this.onSubscriptionListChanged.emit({});\n  }\n  _handleOnStreamUnsubscribe(s) {\n    const subscription = this._getSubscription(s.id);\n    delete this._subscriptions[s.id];\n    this.onPublicationUnsubscribed.emit({ subscription });\n    this.onSubscriptionListChanged.emit({});\n  }\n  join() {\n    return __async(this, arguments, function* (memberInit = {}) {\n      const local = yield this.joinChannel(memberInit);\n      const localRoomMember = new LocalP2PRoomMemberImpl(\n        local,\n        this\n      );\n      log50.debug(\"member joined\", memberInit);\n      this.localRoomMember = localRoomMember;\n      localRoomMember.onLeft.once(() => {\n        this.localRoomMember = void 0;\n      });\n      return localRoomMember;\n    });\n  }\n};\n\n// src/room/sfu.ts\ninit_process();\nvar log51 = new Logger(\"packages/room/src/room/sfu.ts\");\nvar SfuRoomImpl = class extends RoomImpl {\n  constructor(channel, _plugin) {\n    super(\"sfu\", channel);\n    this._plugin = _plugin;\n    this.setChannelState();\n    this.setChannelListener();\n  }\n  static Create(context, channel) {\n    return __async(this, null, function* () {\n      const plugin = context.plugins.find(\n        (p) => p.subtype === \"sfu\"\n      );\n      const bot = channel.members.find((m) => m.subtype === SfuBotMember.subtype);\n      if (!bot) {\n        yield plugin.createBot(channel);\n      }\n      context.config.internal.disableSignaling = true;\n      const room = new SfuRoomImpl(channel, plugin);\n      return room;\n    });\n  }\n  setChannelState() {\n    this._channel.members.forEach((m) => {\n      if (m.type === \"bot\") {\n        return;\n      }\n      const member = new RemoteRoomMemberImpl(m, this);\n      this._members[m.id] = member;\n    });\n    this._channel.publications.forEach((p) => {\n      if (!p.origin) {\n        return;\n      }\n      this._addPublication(p);\n    });\n    this._channel.subscriptions.forEach((s) => {\n      if (s.subscriber.type === \"bot\") {\n        return;\n      }\n      this._addSubscription(s);\n    });\n  }\n  setChannelListener() {\n    this._channel.onMemberJoined.add((e2) => this._handleOnMemberJoin(e2.member));\n    this._channel.onMemberLeft.add((e2) => this._handleOnMemberLeft(e2.member));\n    this._channel.onStreamPublished.add((e2) => {\n      this._handleOnStreamPublish(e2.publication);\n    });\n    this._channel.onStreamUnpublished.add(\n      (e2) => this._handleOnStreamUnpublish(e2.publication)\n    );\n    this._channel.onPublicationMetadataUpdated.add((e2) => {\n      this._handleOnPublicationMetadataUpdate(e2.publication);\n    });\n    this._channel.onPublicationEnabled.add((e2) => {\n      this._handleOnPublicationEnabled(e2.publication);\n    });\n    this._channel.onPublicationDisabled.add((e2) => {\n      this._handleOnPublicationDisabled(e2.publication);\n    });\n    this._channel.onPublicationSubscribed.add((e2) => {\n      this._handleOnStreamSubscribe(e2.subscription);\n    });\n    this._channel.onPublicationUnsubscribed.add(\n      (e2) => this._handleOnStreamUnsubscribe(e2.subscription)\n    );\n  }\n  _handleOnMemberJoin(m) {\n    if (m.type === \"bot\") {\n      return;\n    }\n    const member = new RemoteRoomMemberImpl(m, this);\n    this._members[m.id] = member;\n    this.onMemberJoined.emit({ member });\n    this.onMemberListChanged.emit({});\n  }\n  _handleOnMemberLeft(m) {\n    const member = this._getMember(m.id);\n    if (!member) {\n      return;\n    }\n    delete this._members[m.id];\n    member._dispose();\n    this.onMemberLeft.emit({ member });\n    this.onMemberListChanged.emit({});\n  }\n  _handleOnStreamPublish(p) {\n    var _a2;\n    if (!((_a2 = p.origin) == null ? void 0 : _a2.id)) {\n      return;\n    }\n    const publication = this._addPublication(p);\n    this.onStreamPublished.emit({ publication });\n    this.onPublicationListChanged.emit({});\n  }\n  _handleOnStreamUnpublish(p) {\n    var _a2;\n    if (!((_a2 = p.origin) == null ? void 0 : _a2.id)) {\n      return;\n    }\n    const publication = this._getPublication(p.id);\n    delete this._publications[p.id];\n    this.onStreamUnpublished.emit({ publication });\n    this.onPublicationListChanged.emit({});\n  }\n  _getRelayedPublication(publicationId) {\n    const relayed = this.publications.find(\n      (p) => {\n        var _a2;\n        return ((_a2 = p._publication.origin) == null ? void 0 : _a2.id) === publicationId;\n      }\n    );\n    return relayed;\n  }\n  _handleOnPublicationMetadataUpdate(p) {\n    const publication = this._getRelayedPublication(p.id);\n    if (!publication)\n      return;\n    this.onPublicationMetadataUpdated.emit({\n      publication,\n      metadata: publication.metadata\n    });\n  }\n  _handleOnPublicationEnabled(p) {\n    const publication = this._getRelayedPublication(p.id);\n    if (!publication)\n      return;\n    this.onPublicationEnabled.emit({ publication });\n  }\n  _handleOnPublicationDisabled(p) {\n    const publication = this._getRelayedPublication(p.id);\n    if (!publication)\n      return;\n    this.onPublicationDisabled.emit({ publication });\n  }\n  _handleOnStreamSubscribe(s) {\n    if (s.subscriber.type === \"bot\") {\n      return;\n    }\n    const subscription = this._addSubscription(s);\n    this.onPublicationSubscribed.emit({ subscription });\n    this.onSubscriptionListChanged.emit({});\n  }\n  _handleOnStreamUnsubscribe(s) {\n    if (s.subscriber.type === \"bot\") {\n      return;\n    }\n    const subscription = this._getSubscription(s.id);\n    delete this._subscriptions[s.id];\n    this.onPublicationUnsubscribed.emit({ subscription });\n    this.onSubscriptionListChanged.emit({});\n  }\n  join() {\n    return __async(this, arguments, function* (memberInit = {}) {\n      const local = yield this.joinChannel(memberInit);\n      const localRoomMember = new LocalSFURoomMemberImpl(\n        local,\n        this\n      );\n      this.localRoomMember = localRoomMember;\n      localRoomMember.onLeft.once(() => {\n        this.localRoomMember = void 0;\n      });\n      log51.debug(\"member joined\", memberInit);\n      return localRoomMember;\n    });\n  }\n};\n\n// src/version.ts\ninit_process();\nvar PACKAGE_VERSION4 = \"1.4.0\";\n\n// src/room/index.ts\nvar log52 = new Logger(\"packages/room/src/room/index.ts\");\nvar _SkyWayRoom = class {\n  constructor() {\n  }\n};\nvar SkyWayRoom = _SkyWayRoom;\nSkyWayRoom.Create = (context, init) => __async(_SkyWayRoom, null, function* () {\n  var _a2, _b2;\n  log52.info(\"room created\", {\n    operationName: \"SkyWayRoom._Factory\",\n    sdkName: \"room\",\n    sdkVersion: PACKAGE_VERSION4,\n    init\n  });\n  const plugin = new SfuBotPlugin((_a2 = init == null ? void 0 : init.options) == null ? void 0 : _a2.sfu);\n  context.registerPlugin(plugin);\n  const channel = yield SkyWayChannel.Create(context, {\n    name: (_b2 = init.name) != null ? _b2 : v4_default5(),\n    metadata: init.metadata\n  });\n  const room = yield _SkyWayRoom._Factory(\n    context,\n    init.type,\n    channel\n  );\n  return room;\n});\nSkyWayRoom.Find = (context, query, roomType, options) => __async(_SkyWayRoom, null, function* () {\n  const plugin = new SfuBotPlugin(\n    options == null ? void 0 : options.sfu\n  );\n  context.registerPlugin(plugin);\n  const channel = yield SkyWayChannel.Find(context, query);\n  const room = yield _SkyWayRoom._Factory(\n    context,\n    roomType,\n    channel\n  );\n  return room;\n});\nSkyWayRoom.FindOrCreate = (context, init) => __async(_SkyWayRoom, null, function* () {\n  var _a2;\n  const plugin = new SfuBotPlugin((_a2 = init == null ? void 0 : init.options) == null ? void 0 : _a2.sfu);\n  context.registerPlugin(plugin);\n  const channel = yield SkyWayChannel.FindOrCreate(context, __spreadValues({}, init));\n  const room = yield _SkyWayRoom._Factory(\n    context,\n    init.type,\n    channel\n  );\n  return room;\n});\nSkyWayRoom._Factory = (context, roomType, channel) => __async(_SkyWayRoom, null, function* () {\n  switch (roomType) {\n    case \"p2p\":\n      return new P2PRoomImpl(channel);\n    case \"sfu\":\n      return yield SfuRoomImpl.Create(context, channel);\n    default:\n      throw createError({\n        operationName: \"SkyWayRoom._Factory\",\n        context,\n        channel,\n        info: errors4.notImplemented,\n        path: log52.prefix\n      });\n  }\n});\nvar roomTypes = [\"sfu\", \"p2p\"];\n\n// src/room/event.ts\ninit_process();\n\n/*! (c) Stefan Thomas | https://github.com/bitcoinjs/bitcoinjs-lib\n */\n/*! (c) Tom Wu | http://www-cs-students.stanford.edu/~tjw/jsbn/\n */\n/*! (c) Tom Wu, Kenji Urushima | http://www-cs-students.stanford.edu/~tjw/jsbn/\n */\n/*! CryptoJS v3.1.2 core-fix.js\n * code.google.com/p/crypto-js\n * (c) 2009-2013 by Jeff Mott. All rights reserved.\n * code.google.com/p/crypto-js/wiki/License\n * THIS IS FIX of 'core.js' to fix Hmac issue.\n * https://code.google.com/p/crypto-js/issues/detail?id=84\n * https://crypto-js.googlecode.com/svn-history/r667/branches/3.x/src/core.js\n */\n/*! Mike Samuel (c) 2009 | code.google.com/p/json-sans-eval\n */\n/*! queue-microtask. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */\n\n/*\n@skyway-sdk/common@1.2.4\n\nMIT\n\nhttps://github.com/skyway/js-sdk\n\nMIT License\n\nCopyright (c) 2023 NTT Communications Corporation\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n---\n\n@skyway-sdk/core@1.4.0\n\nMIT\n\nhttps://github.com/skyway/js-sdk\n\nMIT License\n\nCopyright (c) 2023 NTT Communications Corporation\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n---\n\n@skyway-sdk/model@1.0.0\n\nMIT\n\n\n\n---\n\n@skyway-sdk/room@1.4.0\n\nMIT\n\nhttps://github.com/skyway/js-sdk\n\nMIT License\n\nCopyright (c) 2023 NTT Communications Corporation\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n---\n\n@skyway-sdk/rtc-api-client@1.2.4\n\nMIT\n\nhttps://github.com/skyway/js-sdk\n\nMIT License\n\nCopyright (c) 2023 NTT Communications Corporation\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n---\n\n@skyway-sdk/rtc-rpc-api-client@1.2.4\n\nMIT\n\nhttps://github.com/skyway/js-sdk\n\nMIT License\n\nCopyright (c) 2023 NTT Communications Corporation\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n---\n\n@skyway-sdk/sfu-api-client@1.2.3\n\nMIT\n\nhttps://github.com/skyway/js-sdk\n\nMIT License\n\nCopyright (c) 2023 NTT Communications Corporation\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n---\n\n@skyway-sdk/sfu-bot@1.4.0\n\nMIT\n\nhttps://github.com/skyway/js-sdk\n\nMIT License\n\nCopyright (c) 2023 NTT Communications Corporation\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n---\n\n@skyway-sdk/signaling-client@1.0.1\n\nMIT\n\nhttps://github.com/skyway/js-sdk\n\nMIT License\n\nCopyright (c) 2023 NTT Communications Corporation\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n---\n\n@skyway-sdk/token@1.2.4\n\nMIT\n\nhttps://github.com/skyway/js-sdk\n\nMIT License\n\nCopyright (c) 2023 NTT Communications Corporation\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n---\n\n@types/debug@4.1.8\n\nMIT\n\nhttps://github.com/DefinitelyTyped/DefinitelyTyped\n\n    MIT License\n\n    Copyright (c) Microsoft Corporation.\n\n    Permission is hereby granted, free of charge, to any person obtaining a copy\n    of this software and associated documentation files (the \"Software\"), to deal\n    in the Software without restriction, including without limitation the rights\n    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n    copies of the Software, and to permit persons to whom the Software is\n    furnished to do so, subject to the following conditions:\n\n    The above copyright notice and this permission notice shall be included in all\n    copies or substantial portions of the Software.\n\n    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n    SOFTWARE\n\n\n---\n\n@types/ms@0.7.31\n\nMIT\n\nhttps://github.com/DefinitelyTyped/DefinitelyTyped\n\n    MIT License\r\n\r\n    Copyright (c) Microsoft Corporation. All rights reserved.\r\n\r\n    Permission is hereby granted, free of charge, to any person obtaining a copy\r\n    of this software and associated documentation files (the \"Software\"), to deal\r\n    in the Software without restriction, including without limitation the rights\r\n    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n    copies of the Software, and to permit persons to whom the Software is\r\n    furnished to do so, subject to the following conditions:\r\n\r\n    The above copyright notice and this permission notice shall be included in all\r\n    copies or substantial portions of the Software.\r\n\r\n    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n    SOFTWARE\r\n\n\n---\n\nawaitqueue@3.0.1\n\nISC\n\nhttps://github.com/versatica/awaitqueue\n\nISC License\n\nCopyright © 2019, Iñaki Baz Castillo <ibc@aliax.net>\n\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted, provided that the above\ncopyright notice and this permission notice appear in all copies.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\nWITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\nMERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\nANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\nWHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\nACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\nOR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n\n\n---\n\naxios@0.23.0\n\nMIT\n\nhttps://github.com/axios/axios\n\nCopyright (c) 2014-present Matt Zabriskie\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\n\n---\n\nbowser@2.11.0\n\nMIT\n\nhttps://github.com/lancedikson/bowser\n\nCopyright 2015, Dustin Diaz (the \"Original Author\")\nAll rights reserved.\n\nMIT License\n\nPermission is hereby granted, free of charge, to any person\nobtaining a copy of this software and associated documentation\nfiles (the \"Software\"), to deal in the Software without\nrestriction, including without limitation the rights to use,\ncopy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the\nSoftware is furnished to do so, subject to the following\nconditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nDistributions of all or part of the Software intended to be used\nby the recipients as they would use the unmodified Software,\ncontaining modifications that substantially alter, remove, or\ndisable functionality of the Software, outside of the documented\nconfiguration mechanisms provided by the Software, shall be\nmodified such that the Original Author's bug reporting email\naddresses and urls are either replaced with the contact information\nof the parties responsible for the changes, or removed entirely.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\nOF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\nHOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\nWHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\nFROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\nOTHER DEALINGS IN THE SOFTWARE.\n\n\nExcept where noted, this license applies to any and all software\nprograms and associated documentation files created by the\nOriginal Author, when distributed with the Software.\n\n\n---\n\ndebug@4.3.4\n\nMIT\n\nhttps://github.com/debug-js/debug\n\n(The MIT License)\n\nCopyright (c) 2014-2017 TJ Holowaychuk <tj@vision-media.ca>\nCopyright (c) 2018-2021 Josh Junon\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software\nand associated documentation files (the 'Software'), to deal in the Software without restriction,\nincluding without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense,\nand/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial\nportions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT\nLIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\nWHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n\n---\n\ndeepmerge@4.3.1\n\nMIT\n\nhttps://github.com/TehShrike/deepmerge\n\n---\n\nevent-target-shim@5.0.1\n\nMIT\n\nhttps://github.com/mysticatea/event-target-shim\n\nThe MIT License (MIT)\n\nCopyright (c) 2015 Toru Nagashima\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n\n---\n\nevents@3.3.0\n\nMIT\n\nhttps://github.com/Gozala/events\n\nMIT\n\nCopyright Joyent, Inc. and other Node contributors.\n\nPermission is hereby granted, free of charge, to any person obtaining a\ncopy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to permit\npersons to whom the Software is furnished to do so, subject to the\nfollowing conditions:\n\nThe above copyright notice and this permission notice shall be included\nin all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\nOR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\nNO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\nDAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\nOTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\nUSE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n---\n\nfake-mediastreamtrack@1.1.6\n\nISC\n\nhttps://github.com/ibc/fake-mediastreamtrack\n\n---\n\nfollow-redirects@1.15.2\n\nMIT\n\nhttps://github.com/follow-redirects/follow-redirects\n\nCopyright 2014–present Olivier Lalonde <olalonde@gmail.com>, James Talmage <james@talmage.io>, Ruben Verborgh\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\nof the Software, and to permit persons to whom the Software is furnished to do\nso, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\nWHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR\nIN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n---\n\nh264-profile-level-id@1.0.1\n\nISC\n\nhttps://github.com/ibc/h264-profile-level-id\n\n---\n\nisomorphic-fetch@3.0.0\n\nMIT\n\nhttps://github.com/matthew-andrews/isomorphic-fetch\n\nThe MIT License (MIT)\n\nCopyright (c) 2015 Matt Andrews\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n---\n\nisomorphic-ws@4.0.1\n\nMIT\n\nhttps://github.com/heineiuo/isomorphic-ws\n\nThe MIT License (MIT)\n\nCopyright (c) 2018 Zejin Zhuang <heineiuo@gmail.com>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n---\n\njsrsasign@10.8.6\n\nMIT\n\nhttps://github.com/kjur/jsrsasign\n\n---\n\njwt-decode@3.1.2\n\nMIT\n\nhttps://github.com/auth0/jwt-decode\n\nThe MIT License (MIT)\n \nCopyright (c) 2015 Auth0, Inc. <support@auth0.com> (http://auth0.com)\n \nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n \nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n \nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n---\n\nlodash@4.17.21\n\nMIT\n\nhttps://github.com/lodash/lodash\n\nCopyright OpenJS Foundation and other contributors <https://openjsf.org/>\n\nBased on Underscore.js, copyright Jeremy Ashkenas,\nDocumentCloud and Investigative Reporters & Editors <http://underscorejs.org/>\n\nThis software consists of voluntary contributions made by many\nindividuals. For exact contribution history, see the revision history\navailable at https://github.com/lodash/lodash\n\nThe following license applies to all parts of this software except as\ndocumented below:\n\n====\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n====\n\nCopyright and related rights for sample code are waived via CC0. Sample\ncode is defined as all source code displayed within the prose of the\ndocumentation.\n\nCC0: http://creativecommons.org/publicdomain/zero/1.0/\n\n====\n\nFiles located in the node_modules and vendor directories are externally\nmaintained libraries used by this software which have their own\nlicenses; we recommend you read them, as their terms may differ from the\nterms above.\n\n\n---\n\nmediasoup-client@3.6.82\n\nISC\n\nhttps://github.com/versatica/mediasoup-client\n\nISC License\n\nCopyright © 2015, Iñaki Baz Castillo <ibc@aliax.net>\n\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted, provided that the above\ncopyright notice and this permission notice appear in all copies.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\nWITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\nMERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\nANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\nWHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\nACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\nOR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n\n\n---\n\nms@2.1.2\n\nMIT\n\nhttps://github.com/zeit/ms\n\nThe MIT License (MIT)\n\nCopyright (c) 2022 Vercel, Inc.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n---\n\nnode-fetch@2.6.11\n\nMIT\n\nhttps://github.com/bitinn/node-fetch\n\nThe MIT License (MIT)\n\nCopyright (c) 2016 David Frank\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n\n---\n\nqueue-microtask@1.2.3\n\nMIT\n\nhttps://github.com/feross/queue-microtask\n\nThe MIT License (MIT)\n\nCopyright (c) Feross Aboukhadijeh\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n---\n\nsdp-transform@2.14.1\n\nMIT\n\nhttps://github.com/clux/sdp-transform\n\n(The MIT License)\n\nCopyright (c) 2013 Eirik Albrigtsen\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n---\n\nsupports-color@9.3.1\n\nMIT\n\nhttps://github.com/chalk/supports-color\n\nMIT License\n\nCopyright (c) Sindre Sorhus <sindresorhus@gmail.com> (https://sindresorhus.com)\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n---\n\ntr46@0.0.3\n\nMIT\n\nhttps://github.com/Sebmaster/tr46.js\n\nThe MIT License (MIT)\n\nCopyright (c) Sebastian Mayr\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n---\n\nuuid@8.3.2\n\nMIT\n\nhttps://github.com/uuidjs/uuid\n\nThe MIT License (MIT)\n\nCopyright (c) 2010-2020 Robert Kieffer and other contributors\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n---\n\nuuid@9.0.0\n\nMIT\n\nhttps://github.com/uuidjs/uuid\n\nThe MIT License (MIT)\n\nCopyright (c) 2010-2020 Robert Kieffer and other contributors\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n---\n\nwebidl-conversions@3.0.1\n\nBSD-2-Clause\n\nhttps://github.com/jsdom/webidl-conversions\n\n# The BSD 2-Clause License\n\nCopyright (c) 2014, Domenic Denicola\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n\n1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n\n2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n\n---\n\nwhatwg-fetch@3.6.2\n\nMIT\n\nhttps://github.com/github/fetch\n\nCopyright (c) 2014-2016 GitHub, Inc.\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n---\n\nwhatwg-url@5.0.0\n\nMIT\n\nhttps://github.com/jsdom/whatwg-url\n\n---\n\nws@7.5.9\n\nMIT\n\nhttps://github.com/websockets/ws\n\nThe MIT License (MIT)\n\nCopyright (c) 2011 Einar Otto Stangvik <einaros@gmail.com>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n---\n\nws@8.13.0\n\nMIT\n\nhttps://github.com/websockets/ws\n\nCopyright (c) 2011 Einar Otto Stangvik <einaros@gmail.com>\nCopyright (c) 2013 Arnout Kazemier and contributors\nCopyright (c) 2016 Luigi Pinca and contributors\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n---\n\n*/\n\n//# sourceURL=webpack://pack_system/./node_modules/@skyway-sdk/room/dist/index.mjs?");

/***/ })

}]);